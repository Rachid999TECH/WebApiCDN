function CertAllReportsHide() {
    HideReport('HomeReportId');

    HideReport('ParamReportId');

    HideReport('CertReportId');

    HideReport('CertLaneCtr' + 'TableReportId');
    HideReport('CertLaneCtrRegion' + 'TableReportId');
    HideReport('CertLaneCtrStation' + 'TableReportId');
    HideReport('CertCtrStationDetail' + 'TableReportId');

    HideReport('CertReceiptStation' + 'TableReportId');
    HideReport('CertReceiptBag' + 'TableReportId');

    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertNrMp' + 'TableReportId');

    HideReport('CertPostStation' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');
    HideReport('CertPostBillingId' + 'TableReportId');

    //TraficHour
    HideTableReport('CertTraficHourDay');
    HideTableReport('CertTraficHourStation');

    //
    HideReport('CertTraficStation' + 'TableReportId');
    HideReport('CertTraficHourHour' + 'TableReportId');
    HideReport('CertTraficHourLane' + 'TableReportId');

    HideReport('CertTraficOdDay' + 'TableReportId');
    HideReport('CertTraficOdStation' + 'TableReportId');
    HideReport('CertTraficOd' + 'TableReportId');

    HideReport('CertTraficOdMonthDay' + 'TableReportId');
    HideReport('CertTraficOdMonthStation' + 'TableReportId');
    HideReport('CertTraficOdMonth' + 'TableReportId');

    HideReport('CertTrxLaneDay' + 'TableReportId');
    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificBillingId' + 'TableReportId');
    HideReport('CertTrxLaneBillingId' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('CertTrxLaneHour' + 'TableReportId');

    HideReport('CertQualif' + 'TableReportId');

    HideReport('CertVersDay' + 'TableReportId');
    HideReport('CertVers' + 'TableReportId');

    HideReport('CertCtrTrxStation' + 'TableReportId');
    HideReport('CertCtrTrxLane' + 'TableReportId');
    HideReport('CertCtrTrxBillingId' + 'TableReportId');
    HideReport('CertCtrTrxEojGroup' + 'TableReportId');
    HideReport('CertCtrTrxEoj' + 'TableReportId');
    HideReport('CertCtrTrxEojDiff' + 'TableReportId');

    HideReport('CertCtrCohBojSansEoj' + 'TableReportId');
    HideReport('CertCtrCohEojSansRac' + 'TableReportId');
    HideReport('CertCtrCohEojDouble' + 'TableReportId');

    HideReport('CertFile' + 'TableReportId');
    HideReport('CertFileLane' + 'TableReportId');
    HideReport('CertFileNr' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');
    HideReport('CertFileCeStation' + 'TableReportId');

    HideReport('CertRecoReceipt' + 'TableReportId');
    HideReport('CertRecoPost' + 'TableReportId');
    HideReport('CertRecoData' + 'TableReportId');

    HideReport('CertDay' + 'TableReportId');

    HideReport('CertBiRevenueDay' + 'TableReportId');
    HideReport('CertBiRevenueMonth' + 'TableReportId');
    HideReport('CertTrxLaneBi' + 'TableReportId');
    HideReport('CertTrxLaneBiMp' + 'TableReportId');
    HideReport('CertBiRevenueLane' + 'TableReportId');

    HideReport('CertBiTraficDay' + 'TableReportId');
    HideReport('CertTraficBiStation' + 'TableReportId');
    HideReport('CertTraficBi' + 'TableReportId');
    HideReport('CertTraficBiMp' + 'TableReportId');
    HideReport('CertBiTraficLane' + 'TableReportId');

    HideReport('CertInterfaceDay' + 'TableReportId');
    HideReport('CertInterfaceFlow' + 'TableReportId');
    HideReport('CertInterfaceCategory' + 'TableReportId');
    HideReport('CertInterfaceStation' + 'TableReportId');
    HideReport('CertInterfaceLane' + 'TableReportId');
    HideReport('CertInterfacePdv' + 'TableReportId');

    HideReport('CertNrTrxLaneDay' + 'TableReportId');
    HideReport('CertNrTrxLaneStation' + 'TableReportId');
    HideReport('CertNrTrxLaneMp' + 'TableReportId');
    HideReport('CertNrTrxLaneLane' + 'TableReportId');

    HideReport('CertTrxLaneBillingIdHour' + 'TableReportId');

    //Pdv
    HideReport('CertTrxPdvDay' + 'TableReportId');
    HideReport('CertTrxPdvStation' + 'TableReportId');
    HideReport('CertTrxPdvPdv' + 'TableReportId');
    HideReport('CertTrxPdv' + 'TableReportId');

    HideReport('CertPdvVers' + 'TableReportId');
    HideReport('CertPdvReceiptStation' + 'TableReportId');
    HideReport('CertPdvReceipt' + 'TableReportId');
    HideReport('CertPdvGaps' + 'TableReportId');

    HideReport('CertCheckStation' + 'TableReportId');
    HideReport('CertCheck' + 'TableReportId');

    HideReport('CertPdvBilling' + 'TableReportId');
    HideReport('CertPdvCtr' + 'TableReportId');
    HideReport('CertPdvCtrStation' + 'TableReportId');
    HideReport('CertCtrStationDetail' + 'TableReportId');

    HideReport('CertFileZip' + 'TableReportId');
    HideReport('CertFileMsg' + 'TableReportId');
    HideReport('CertFileLogs' + 'TableReportId');

    //Borne
    HideReport('CertTrxBorneDay' + 'TableReportId');
    HideReport('CertTrxBorneStation' + 'TableReportId');
    HideReport('CertTrxBorneBorne' + 'TableReportId');
    HideReport('CertTrxBorneHour' + 'TableReportId');
    HideReport('CertTrxBorne' + 'TableReportId');

    //ImageLane
    HideReport('CertImageLaneDay' + 'TableReportId');
    HideReport('CertImageLaneLs' + 'TableReportId');
    HideReport('CertImageLaneStation' + 'TableReportId');
    HideReport('CertImageLaneLane' + 'TableReportId');
    HideReport('CertImageLaneHistory' + 'TableReportId');
    HideReport('CertImageLaneHour' + 'TableReportId');
    HideReport('CertImageTrxLane' + 'TableReportId');

    //ImageBorne
    HideReport('CertImageTrxBorne' + 'TableReportId');

    //Event
    HideTableReport('CertEventDay');
    HideTableReport('CertEventStation');
    HideTableReport('CertEventLane');
    HideTableReport('CertEventHour');
    HideTableReport('CertEvent');

    HideTableReport('CertBreachDay');
    HideTableReport('CertBreachStation');
    HideTableReport('CertBreachLane');
    HideTableReport('CertBreach');

    HideTableReport('CertMinuteDay');
    HideTableReport('CertMinuteStation');
    HideTableReport('CertMinuteLane');
    HideTableReport('CertMinute');

    HideTableReport('CertMinuteHandleDay');
    HideTableReport('CertMinuteHandleStation');
    HideTableReport('CertMinuteHandleLane');

    HideTableReport('CertDiscDay');
    HideTableReport('CertDiscStation');

    //ReportingTrafic
    HideReport('CertReportingTraficDay' + 'TableReportId');
    HideReport('CertReportingTraficStation' + 'TableReportId');
    HideReport('CertReportingTraficBilling' + 'TableReportId');
    HideReport('CertReportingTraficLane' + 'TableReportId');
    HideReport('CertReportingTraficHour' + 'TableReportId');

    //TraficSection
    HideReport('CertTraficSectionDay' + 'TableReportId');
    HideReport('CertTraficSection' + 'TableReportId');

    //loy
    HideReport('CertLoyTrxLaneDay' + 'TableReportId');

    //RealTrx
    HideTableReport('CertRealTrxDay');
    HideTableReport('CertRealTrxStation');
    HideTableReport('CertRealTrxHour');
    HideTableReport('CertRealTrxLane');

    //RealImage
    HideTableReport('CertRealImageDay');
    HideTableReport('CertRealImageStation');
    HideTableReport('CertRealImageHour');
    HideTableReport('CertRealImageLane');

    //TrxLaneLeap
    HideTableReport('CertTrxLaneLeapDay');
    HideTableReport('CertTrxLaneLeapStation');
    HideTableReport('CertTrxLaneLeap');
}

function CertAllParametersHide() {

    HideReport('SourceId' + 'Parent');
    HideReport('FileTypeId' + 'Parent');

    HideReport('SiteId' + 'Parent');
    HideReport('BagContainerId' + 'Parent');
    HideReport('StationNumberId' + 'Parent');
    HideReport('Sens' + 'Parent');
    HideReport('LaneNameId' + 'Parent');
    HideReport('CashierNumberId' + 'Parent');
    HideReport('BillingId' + 'Parent');
    HideReport('PdvId' + 'Parent');

    HideReport('FlowId' + 'Parent');
    HideReport('FlowCategoryId' + 'Parent');

    HideReport('DateStartId' + 'Parent');
    HideReport('DateEndId' + 'Parent');
    HideReport('DhmStartId' + 'Parent');
    HideReport('DhmEndId' + 'Parent');
    HideReport('MonthStartId' + 'Parent');
    HideReport('MonthEndId' + 'Parent');
    HideReport('CtrId' + 'Parent');
    HideReport('CtrTypeId' + 'Parent');
    HideReport('DashId' + 'Parent');

    HideParent('RegionId');
    HideParent('LSId');
    HideReport('CexId' + 'Parent');
    //HideReport('TimeId' + 'Parent');

    HideReport('ZoneLevelId' + 'Parent');
    //HideReport('TimeLevelId' + 'Parent');
    HideReport('TimeId' + 'Parent');

    HideReport('ParamActionContainerId0');
    HideReport('ParamActionContainerId1');
    HideReport('ParamActionContainerId2');
    HideReport('ParamActionContainerId3');
}

function CertLaneHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(0, 7, 6);

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamCexGet()');
    ElementOnChangeSet('CexId', 'ParamBagContainerFromCexGet()');
    ElementOnChangeSet('BagContainerId', 'ParamStationsFromCexGet()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesFromCexGet()');

    //set drop down list
    HtmlDropDownListNameOnlyWithInputFill('RegionId', '', '/Cert/CertParamSecGet', 'RegionId', 'RegionNameShort', 'CertRegions');
    HtmlDropDownListWithInputNameOnlyFill('TimeId', 0, '/Param/ParamTimesGet', 'TimeId', 'TimeName', '00');
    //HtmlDropDownListNameOnlyXorWithInputFill('TimeLevelId', '', '/Cert/CertParamSecGet', 'TimeLevelId', 'TimeLevelName', 'CertTimeLevels');
    HtmlDropDownListNameOnlyXorWithInputFill('ZoneLevelId', '', '/Cert/CertParamSecGet', 'ZoneLevelId', 'ZoneLevelName', 'CertZoneLevels');
    HtmlDropDownListNameOnlyXorWithInputFill('CexId', '', '/Cert/CertParamSecGet', 'CexId', 'CexNameShort', 'CertCexs');


    //HtmlDropDownListNameOnlyXorFill('SiteId', '', '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');         
    //HtmlDropDownListNameOnlyXorFill('TimeId', '01', '/Param/ParamTimesGet', 'TimeId', 'TimeName');   
    //HtmlDropDownListNameOnlyFill('CexId', 0, '/Param/ParamCexGet', 'CexId', 'CexNameShort');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {
                HtmlDropDownListFill('SiteId', '0', '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');
                ParamBagContainerAllSecWithZeroGet('0', true);
                ParamStationsAllSecWithZeroGet('0', '0', true);

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
            }
            else {
                if (data.includes('Chef de gare') || data.includes('QualifPath')) {
                    HtmlDropDownListNameOnlyXorFill('SiteId', '', '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');
                    ParamBagContainerAllSecWithZeroGet('0', false);
                    ParamStationsAllSecWithZeroGet('0', '0', false);

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                }
            }
        }
    });

    ParamFlowsGet();
    HtmlDropDownListFill('Sens', '0', '/Param/GetSens', 'Sens', 'Sens');
    ParamResetDropDownList('LSId');
    //ParamResetDropDownList('StationNumberId'); 
    ParamResetDropDownList('CtrId');
    ParamResetDropDownList('FlowCategoryId');
    ParamResetDropDownList('LaneNameId');
}

function CertPdvHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(1, 4, 3);

    document.getElementById('SiteId').setAttribute("onChange", "ParamGetBagContainerPdv()");
    document.getElementById('BagContainerId').setAttribute("onChange", "ParamGetStationsPdv()");
    document.getElementById('StationNumberId').setAttribute("onChange", "ParamPdvsGet()");

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Chef de gare')) {
                HtmlDropDownListNameOnlyXorFill('SiteId', '', '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');
            }
            else {
                HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
            }
        }
    });

    HtmlDropDownListFill('Sens', '0', '/Param/GetSens', 'Sens', 'Sens');
    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationNumberId');
    ParamResetDropDownList('CtrId');
    ParamResetDropDownList('PdvId');

    NotiConnectionIdUpdate('PDV');
}

function CertCertHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(2, 3, 2);

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamCexGet()');
    ElementOnChangeSet('CexId', 'ParamBagContainerFromCexGet()');
    ElementOnChangeSet('BagContainerId', 'ParamStationsFromCexGet()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesFromCexGet()');

    NotiConnectionIdUpdate('Validation');
}

function CertInterfaceHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(3, 2, 1);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    ShowReport('FlowId' + 'Parent');
    //ShowReport('FlowCategoryId' + 'Parent');
    NotiConnectionIdUpdate('Interface');
}

function CertTraficHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(4, 3, 2);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    NotiConnectionIdUpdate('Trafic');
}

function CertTraficHomeOpenOld() {

    HideReport('HomeLineId5');
    ShowReport('HomeReportId');

    HideReport('ParamReportId');

    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationId');
    HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
    HtmlDropDownListFill('Sens', '0', '/Param/GetSens', 'Sens', 'Sens');

    HideReport('CertTraficPeriod' + 'TableReportId');
    HideReport('CertTraficCex' + 'TableReportId');
    HideReport('CertTraficStation' + 'TableReportId');
    HideReport('CertTraficHour' + 'TableReportId');

    HideReport('Bar' + 'ChartReportId');
    HideReport('BarHorizontal' + 'ChartReportId');
    HideReport('Pie' + 'ChartReportId');
    HideReport('Line' + 'ChartReportId');

    document.getElementById('MenuBarId0').style.color = "blue";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
}

function CertBiHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(5, 2, 1);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    NotiConnectionIdUpdate('BI');
}


function CertTrxBorneHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(6, 1, 0);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');
}


function CertImageHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(7, 4, 3);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    NotiConnectionIdUpdate('Parcours');
}



function CertReportingHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(9, 2, 1);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Chef de gare')) {
                HtmlDropDownListNameOnlyXorFill('SiteId', '', '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');
            }
            else {
                HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
            }
        }
    });

    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationNumberId');

    NotiConnectionIdUpdate('Certification-Reporting');
}

function CertLoyHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(10, 0, 0);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    NotiConnectionIdUpdate('Fédélité');
}









//
function CertTrxLaneOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(0, 0, 6);

    $('#ParamTitleId').text("Certification des transactions");
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');



    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {

            //alert(new String(data).indexOf('Administrateur'));
            //if (new String(data).includes('Administrateur') || new String(data).includes('Fatourati')) {
            //if (new String(data).indexOf('Administrateur') >= 0 || new String(data).indexOf('Fatourati') >= 0 ) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {
                //Actions
                ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertTrxLaneStationDisplay()');
                ParamActionBtnGet(1, 'Niveau Jour', 'fas fa-eye', 'CertDayDisplay(\'CertTrxLaneDay\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertTrxLaneDay');
            }
            else {
                //if (new String(data).includes('Chef de gare')) {
                if (data.includes('Chef de gare')) {
                    //Actions
                    ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertTrxLaneStationDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertDayDisplay('CertTrxLaneDay');
                }
            }
        }
    });

    NotiConnectionIdUpdate('Transactions');
}


function CertPostStationOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(0, 1, 6);

    $('#ParamTitleId').text("Certification des fins de poste");

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    var Pattern = 'CertPostDay';
    //DateValueDefaultSet('DateStartId', 8);
    //DateValueYesterdaySet('DateEndId');
    //CertDayDisplay('CertPostDay');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati') || data.includes('CertRelay')) {
                //action btns
                ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertPostStationDisplay()');
                ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'' + Pattern + '\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay(Pattern);
            }
            else {
                if (data.includes('Chef de gare')) {

                    //action btns
                    ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertPostStationDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertPostStationDisplay();

                }
            }
        }
    });

    $('#TotalRefNameId').text('Ope');
    $('#TotalNameId').text('Ce');
    $('#ZipHeaderNameId').text('Zip');

    NotiConnectionIdUpdate('Postes');
}

function CertReceiptStationOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(0, 2, 6);

    $('#ParamTitleId').text("Certification des redditions");

    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati') || data.includes('CertRelay')) {

                //action btns
                ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertReceiptStationDisplay()');
                ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'CertReceiptDay\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertReceiptDay');
            }
            else {
                if (data.includes('Chef de gare')) {

                    //action btns
                    ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertReceiptStationDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertReceiptStationDisplay();
                    //ParamGetBagContainer();
                }
            }
        }
    });

    $('#TotalRefNameId').text('Ope');
    $('#TotalNameId').text('Ce');
    $('#ZipHeaderNameId').text('');

    NotiConnectionIdUpdate('Redditions');
}


function CertVersStationOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(0, 3, 6);

    $('#ParamTitleId').text("Certification des versements");

    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');



    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati') || data.includes('CertRelay')) {

                //action btns
                ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertVersDisplay()');
                ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'CertVersDay\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertVersDay');
            }
            else {
                if (data.includes('Chef de gare')) {

                    //action btns
                    ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertVersDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertVersDisplay();
                }
            }
        }
    });

    $('#TotalRefNameId').text('Saisie');
    $('#TotalNameId').text('Ce');
    $('#ZipHeaderNameId').text('');

    NotiConnectionIdUpdate('Versements');
}

function CertNrStationOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(0, 4, 6);

    $('#ParamTitleId').text('Certification des nombres et recettes');
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');


    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati') || data.includes('CertRelay')) {

                //action btns
                ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertNrSiteDisplay()');
                ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'CertNrDay\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertNrDay');
            }
            else {
                if (data.includes('Chef de gare')) {

                    //action btns
                    ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertNrSiteDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertNrSiteDisplay();
                }
            }
        }
    });

    $('#TotalRefNameId').text('Ope');
    $('#TotalNameId').text('Ce');
    $('#ZipHeaderNameId').text('');

    NotiConnectionIdUpdate('Nombre et recette');
}


function CertNrTrxLaneOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(0, 5, 6);

    $('#ParamTitleId').text('Certification des nombres et recettes trx');
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertNrTrxLaneStationDisplay()');
    ParamActionBtnGet(1, 'Tableau de bord', 'fas fa-tachometer-alt', 'CertDayDisplay(\'CertNrTrxLaneDay\')');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    DateValueDefaultSet('DateStartId', 1);
    DateValueDefaultSet('DateEndId', 1);
    CertDayDisplay('CertNrTrxLaneDay');

    NotiConnectionIdUpdate('Nombre et recette Trx');
}

function CertTrxLaneFullOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(7, 0, 3);

    $('#ParamTitleId').text("Certification des transactions - Full");
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');



    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {
                //Actions
                ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertTrxLaneFullStationDisplay()');
                ParamActionBtnGet(1, 'Niveau Jour', 'fas fa-eye', 'CertDayDisplay(\'CertTrxLaneFullDay\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertTrxLaneFullDay');
            }
            else {
                if (data.includes('Chef de gare') || data.includes('QualifPath')) {
                    //Actions
                    ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertTrxLaneFullStationDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertTrxLaneFullStationDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Transactions Full');
}

//Pdv
function CertTrxPdvOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(1, 0, 3);

    $('#ParamTitleId').text('Certification des transactions PDV');
    ShowReport('ParamReportId');

    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent')

    document.getElementById('SiteId').setAttribute("onChange", "ParamPdvStationsGet()");

    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertPdvTrxStationDisplay()');
    ParamActionBtnGet(1, 'Tableau de bord', 'fas fa-tachometer-alt', 'CertDayDisplay(\'CertTrxPdvDay\')');

    DateValueDefaultSet('DateStartId', 1);
    DateValueDefaultSet('DateEndId', 1);
    CertPdvTrxStationDisplay();

    NotiConnectionIdUpdate('Transactions PDV');
}

function CertPdvReceiptOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(1, 1, 3);

    $('#ParamTitleId').text('Certification des redditions PDV');
    ShowReport('ParamReportId');

    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');

    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertPdvReceiptStationDisplay()');
    ParamActionBtnGet(1, 'Tableau de bord', 'fas fa-tachometer-alt', 'CertDayDisplay(\'CertReceiptPdvDay\')');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {
                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertReceiptPdvDay');
            }
            else {
                if (data.includes('Chef de gare')) {
                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertPdvReceiptStationDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Redditions PDV');
}

function CertPdvCheckOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(1, 2, 3);

    $('#ParamTitleId').text('Certification des chèques');
    ShowReport('ParamReportId');

    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');

    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertCheckStationDisplay()');
    ParamActionBtnGet(1, 'Tableau de bord', 'fas fa-tachometer-alt', 'CertDayDisplay(\'CertCheckDay\')');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {
                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertCheckDay');
            }
            else {
                if (data.includes('Chef de gare')) {
                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertCheckStationDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Chèques PDV');
}

function CertPdvBillingOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(1, 3, 3);

    $('#ParamTitleId').text('Facturation PDV');
    ShowReport('ParamReportId');

    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');

    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent')

    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertPdvBillingDisplay()');
    ParamActionBtnGet(1, 'Tableau de bord', 'fas fa-tachometer-alt', 'CertDayDisplay(\'CertPdvBillingDay\')');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {
                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertPdvBillingDay');
            }
            else {
                if (data.includes('Chef de gare')) {
                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertPdvBillingDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Facturation PDV');
}


//Cert
function CertLaneCtrOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(2, 0, 1);

    $('#ParamTitleId').text('Validation voie');
    ShowReport('ParamReportId');



    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Fatourati') || data.includes('Administrateur')) {
                HtmlDropDownListNameOnlyXorFill('SiteId', '', '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');

                //Set action btn
                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertLaneCtrDisplay()');
                ParamActionBtnGet(2, 'Mettre à jour', 'fas fa-redo-alt', 'CertUpdate(\'CertLaneCtr\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 2);
                CertLaneCtrDisplay();
            }
            else {
                if (data.includes('CertRelay')) {

                    ShowReport('RegionId' + 'Parent');


                    //Set action btn
                    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertLaneCtrRegionDisplay()');
                    ParamActionBtnGet(2, 'Mettre à jour', 'fas fa-redo-alt', 'CertUpdate(\'CertLaneCtrRegion\')');

                    DateValueDefaultFirstDaySet('DateStartId');
                    DateValueDefaultSet('DateEndId', 2);
                    CertLaneCtrRegionDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Validation Voie');
}

function CertPdvCtrOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(2, 1, 1);

    $('#ParamTitleId').text('Contrôle de Certification PDV');
    ShowReport('ParamReportId');

    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertPdvCtrDisplay()');
    ParamActionBtnGet(2, 'Mettre à jour', 'fas fa-redo-alt', 'CertUpdate(\'CertPdvCtr\')');

    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 2);
    CertPdvCtrDisplay();

    NotiConnectionIdUpdate('Validation PDV');
}



//Cert
function CertInterfaceOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(3, 0, 0);

    ParamTitleSet('Rapprochement des interfaces');

    ShowReport('ParamReportId');

    //Parents
    ShowParent('RegionId');
    ShowParent('LSId');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('LaneNameId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    //OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSSecGet()');

    //ParamAaction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertInterfaceAllDisplay()');

    //ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertInterfaceStationDisplay()');
    //ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'CertInterface\')');

    //Default
    ElementDropDownListSet('TimeId', '01');
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);

    //Noti
    NotiConnectionIdUpdate('Certification > Interfaces');
}


function CertInterfaceAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';


    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '01') {//Day
        CertInterfaceDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertInterfaceStationDisplay(ActionBtnId, Icon);
        }
        else {
            if (TimeId == '08') {//Lane
                //CertEventLaneDisplay(ActionBtnId, Icon);
            }
            else {
                ParamMessageErrorDisplay("Ce pré-réglage n'est pas authorisé.");
            }
        }
    }
}

function CertInterfaceDayDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    CertAllReportsHide();

    CertInterfaceDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd);
}

function CertInterfaceDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertInterfaceDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertInterfaceDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalToll" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "TotalCe" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center none", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '04';
                    var SourceId = '10';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalToll'], row['TotalCe']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalToll'], 6, 100); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertInterfaceStationSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertInterfaceDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
            {
                "targets": 9, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 10, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            { "targets": 11, "render": function (data, type, row) { return CertIsValidGet(data, '08', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 31,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 5);

        }
    });
}

function CertInterfaceLaneGet(ActionBtnId, Icon, Id) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertInterfaceLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertInterfaceLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "data": "FlowName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.BillingId + '-' + data.CategoryName; } },//2

            { "data": "SiteName" },//3
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName + '(' + data.StationCeNumber + ')'; } },//4
            { "data": "LaneName" },//5

            { "data": "TotalLane" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//7

            { "data": "TotalZip" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//9

            { "data": "TotalMsg" },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//11

            { "data": "TotalCe" },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//13

            { "data": "GapAbsolute" },//14
            { "data": "GapAbsolute" },//15

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//16
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//17                    
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-left", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-left", "targets": 9 },

            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-left", "targets": 11 },

            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-left", "targets": 13 },

            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },

            { "width": "3%", "className": "text-center", "targets": 16 },
            { "width": "3%", "className": "text-center none", "targets": 17 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '03' + '34' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '04' + '44' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 13, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'Y8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 14, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 0, 'NA'); } },

            { "targets": 16, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneBillingIdHourSearch', data, 'CertInterfaceLane', 'fas fa-eye', '0048ff'); } },
            { "targets": 17, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBi', data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numFormat(Total0));

            Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));

            Total2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(10).footer()).html(numFormat(Total2));

            Total3 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(12).footer()).html(numFormat(Total3));
        }
    });
}

function CertInterfaceLaneSearch(Id) {

    var ActionBtnId = new String('CertInterfaceLaneSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    CertInterfaceLaneGet(ActionBtnId, Icon, Id)
}

function CertInterfacePdvGet(ActionBtnId, Icon, Id) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertInterfacePdv';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertInterfacePdvGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.FlowId + '-' + data.FlowName; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.FlowCategoryId + '-' + data.CategoryName; } },//2

            { "data": "SiteName" },//3
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName + '(' + data.StationCeNumber + ')'; } },//4
            { "data": "PdvName" },//5

            { "data": "TotalXml" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId + data.SiteId + data.StationNumber + data.PdvId; } },//7

            { "data": "TotalCe" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//9

            { "data": "GapAbsolute" },//10
            { "data": "GapAbsolute" },//11

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId + data.SiteId + data.StationNumber + data.PdvId; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.PdvId; } },//13                    
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right none", "targets": 6 },
            { "width": "3%", "className": "text-left none", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-left", "targets": 9 },

            { "width": "3%", "className": "text-right none", "targets": 10 },
            { "width": "3%", "className": "text-right none", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center none", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 10, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalXml'], 0, 'NA'); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableBtnGet('CertTrxPdvSearch', data, data + '\', \'CertInterfacePdv', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBi', data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numFormat(Total0));

            Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));

            Total2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(10).footer()).html(numFormat(Total2));
        }
    });
}

function CertInterfacePdvSearch(Id) {
    var ActionBtnId = new String('CertInterfacePdvSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    CertInterfacePdvGet(ActionBtnId, Icon, Id)
}

function CertInterfaceStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, FlowId, FlowCategoryId, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertInterfaceStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';


    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertInterfaceStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,                
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                FlowId: FlowId,
                FlowCategoryId: FlowCategoryId,
                IsGap: IsGap
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.FlowId + ' - ' + data.FlowName; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.FlowCategoryId + '-' + data.CategoryName; } },//2

            { "mData": function vehicle(data, type, dataToSet) { return data.LSId + ' - ' + data.LSName; } },//3
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName + '(' + data.StationCeNumber + ')'; } },//4

            { "data": "TotalToll" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.StationNumber; } },//6

            { "data": "TotalCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.StationNumber + data.FlowId + data.FlowCategoryId; } },//8

            { "data": "GapAbsolute" },//9
            { "data": "GapAbsolute" },//10

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId + data.SiteId + data.StationNumber; } },//11 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber + data.FlowId + data.FlowCategoryId; } },//12 Delete
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//13 UploadZip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.FlowId + data.FlowCategoryId; } },//14 UploadCe
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//15 Alarmes
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.FlowId + data.FlowCategoryId; } },//16 Gaps
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },
            { "width": "3%", "className": "text-center", "targets": 15 },
            { "width": "3%", "className": "text-center", "targets": 16 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {

                    if (row['FlowId'] == '01') {
                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C3' + data + row['BillingId'], 'fas fa-redo-alt', '9c9c9c');
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            if (row['FlowCategoryId'] == '01') {//InterfacePdvPcaCdar
                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'D1' + data, 'fas fa-redo-alt', '9c9c9c');
                            }
                            else {
                                if (row['FlowCategoryId'] == '02') {//InterfacePdvPcaTelepr
                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'D2' + data, 'fas fa-redo-alt', '9c9c9c');
                                }
                                else {
                                    if (row['FlowCategoryId'] == '03') {//InterfacePdvPcaTeleps
                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'D3' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    else {
                                        return '';
                                    }
                                }
                            }
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'C5' + data, 'fas fa-redo-alt', '9c9c9c');
                            }
                            else {
                                if (row['FlowId'] == '04') {//Vers
                                    if (row['FlowCategoryId'] == '01') {//PDV_CARTE_BANC

                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C9' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    else {
                                        if (row['FlowCategoryId'] == '02') {//PDV_CHEQUE

                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'C1' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                        else {
                                            if (row['FlowCategoryId'] == '03') {//VERSE_PDV

                                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'C7' + data, 'fas fa-redo-alt', '9c9c9c');
                                            }
                                            else {
                                                if (row['FlowCategoryId'] == '04') {//VERSE_VOIE

                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'C4' + data, 'fas fa-redo-alt', '9c9c9c');
                                                }
                                                else {
                                                    if (row['FlowCategoryId'] == '05') {//VOIE_CARTE_BANC

                                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C8' + data, 'fas fa-redo-alt', '9c9c9c');
                                                    }
                                                    else {
                                                        if (row['FlowCategoryId'] == '06') {//VERSE_PDV_VGT
                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'CA' + data, 'fas fa-redo-altl', '9c9c9c');
                                                        }
                                                        else {
                                                            return '';
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (row['FlowId'] == '05') {//QualifLane
                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'K1' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {//PdvMp
                                            if (row['FlowCategoryId'] == '01') {//PdvCheck
                                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'M3' + data, 'fas fa-redo-alt', '9c9c9c');
                                            }
                                            else {
                                                if (row['FlowCategoryId'] == '02') {//PdvBankCard
                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'M2' + data, 'fas fa-redo-alt', '9c9c9c');
                                                }
                                                else {
                                                    if (row['FlowCategoryId'] == '03') {//PdvCash
                                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'M1' + data, 'fas fa-redo-alt', '9c9c9c');
                                                    }
                                                    else {
                                                        if (row['FlowCategoryId'] == '04') {//PdvVgt
                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'M4' + data, 'fas fa-redo-alt', '9c9c9c');
                                                        }
                                                        else {
                                                            return '';
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if (row['FlowId'] == '07') {//FLUX_PDV.PDV_AKWA
                                                if (row['FlowCategoryId'] == '01') {//PCA Télépéage
                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'CY' + data, 'fas fa-redo-alt', '9c9c9c');
                                                }
                                                else {
                                                    return '';
                                                }
                                            }
                                            else {
                                                if (row['FlowId'] == '08') {//FLUX_PDV.PDV_Fatourati
                                                    if (row['FlowCategoryId'] == '01') {//PCA Télépéage
                                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'CC' + data, 'fas fa-redo-alt', '9c9c9c');
                                                    }
                                                    else {
                                                        return '';
                                                    }
                                                }
                                                else {
                                                    if (row['FlowId'] == '09') {// FLUX_PDV.PDV_M2T
                                                        if (row['FlowCategoryId'] == '01') {//PCA Télépéage
                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'CD' + data, 'fas fa-redo-alt', '9c9c9c');
                                                        }
                                                        else {
                                                            return '';
                                                        }
                                                    }
                                                    else {
                                                        if (row['FlowId'] == '10') {// FLUX_PDV.PDV_PORTAIL
                                                            if (row['FlowCategoryId'] == '01') {//PCA Télépéage
                                                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'CX' + data, 'fas fa-redo-alt', '9c9c9c');
                                                            }
                                                            else {
                                                                return ''
                                                            }
                                                        }
                                                        else {
                                                            if (row['FlowId'] == '11') {// FLUX_PDV.VERSEMENT
                                                                if (row['FlowCategoryId'] == '02') {//Fatourati
                                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'CE' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                }
                                                                else {
                                                                    if (row['FlowCategoryId'] == '01') {//AKWA
                                                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'CV' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                    }
                                                                    else {
                                                                        if (row['FlowCategoryId'] == '02') {//Fatourati
                                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'CE' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                        }
                                                                        else {
                                                                            if (row['FlowCategoryId'] == '03') {//M2T
                                                                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'CR' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                            }
                                                                            else {
                                                                                if (row['FlowCategoryId'] == '04') {//PORTAIL
                                                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'CS' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                }
                                                                                else {
                                                                                    return '';
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                if (row['FlowId'] == '12') {//FLUX_PDV.PDV_LOT
                                                                    if (row['FlowCategoryId'] == '01') {//B2B
                                                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'CB' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                    }
                                                                    else {
                                                                        if (row['FlowCategoryId'] == '02') {//ADM_ANIMATION
                                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'D4' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                        }
                                                                        else {
                                                                            if (row['FlowCategoryId'] == '03') {//PCA Télépéage
                                                                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'D8' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                            }
                                                                            else {
                                                                                if (row['FlowCategoryId'] == '04') {//Support Télépéage
                                                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'D7' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                }
                                                                                else {
                                                                                    if (row['FlowCategoryId'] == '05') {//PARTENAIRE_POST_PAYE
                                                                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'D5' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                    }
                                                                                    else {
                                                                                        if (row['FlowCategoryId'] == '06') {//PARTENAIRE_REVENDEUR
                                                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'D6' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                        }
                                                                                        else {
                                                                                            if (row['FlowCategoryId'] == '07') {//RECHARGE_EN_LOT
                                                                                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'D9' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                            }
                                                                                            else {
                                                                                                if (row['FlowCategoryId'] == '08') {//GRAND_COMPTE
                                                                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'DA' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                                }
                                                                                                else {
                                                                                                    return '';
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    if (row['FlowId'] == '13') {//FLUX_PDV.PDV_MP.B2B
                                                                        if (row['FlowCategoryId'] == '01') {//CHEQUE
                                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'CK' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                        }
                                                                        else {
                                                                            if (row['FlowCategoryId'] == '02') {//ESPECE
                                                                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'CL' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                            }
                                                                            else {
                                                                                if (row['FlowCategoryId'] == '02') {//ESPECE
                                                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'CL' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                }
                                                                                else {
                                                                                    if (row['FlowCategoryId'] == '03') {//VIGNETTES
                                                                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'CM' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                    }
                                                                                    else {
                                                                                        if (row['FlowCategoryId'] == '04') {//VIREMENT
                                                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'CN' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                        }
                                                                                        else {
                                                                                            return '';
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else {
                                                                        if (row['FlowId'] == '14') {//FLUX_PDV.VERSEMENT.B2B
                                                                            if (row['FlowCategoryId'] == '01') {//CHEQUE
                                                                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'CG' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                            }
                                                                            else {
                                                                                if (row['FlowCategoryId'] == '02') {//ESPECE
                                                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'CQ' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                }
                                                                                else {
                                                                                    if (row['FlowCategoryId'] == '03') {//VIGNETTES
                                                                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'CJ' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                    }
                                                                                    else {
                                                                                        if (row['FlowCategoryId'] == '04') {//VIREMENT
                                                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'CI' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                        }
                                                                                        else {
                                                                                            return '';
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        else {
                                                                            if (row['FlowId'] == '15') {//FLUX_PDV.PDV_MP
                                                                                if (row['FlowCategoryId'] == '01') {//AKWA
                                                                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'CW' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                }
                                                                                else {
                                                                                    if (row['FlowCategoryId'] == '02') {//Fatourati
                                                                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'CP' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                    }
                                                                                    else {
                                                                                        if (row['FlowCategoryId'] == '03') {//M2T
                                                                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'CO' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                        }
                                                                                        else {
                                                                                            if (row['FlowCategoryId'] == '04') {//PORTAIL
                                                                                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'CT' + data, 'fas fa-redo-alt', '9c9c9c');
                                                                                            }
                                                                                            else {
                                                                                                return '';
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else {
                                                                                return '';
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalToll'], 6, 10000); } },

            {
                "targets": 11, "render": function (data, type, row) {

                    if (row['FlowId'] == '01') { //Lane
                        return DataTableGetButton('CertInterfaceLaneSearch', data, 'fas fa-eye', '0048ff');
                    }
                    else {
                        if (row['FlowId'] == '02') {//Pdv
                            if (row['FlowCategoryId'] == '01') {//	01-PCA Carte décompte d'argent
                                return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertInterfaceStationPcaCdar', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                            }
                            else {
                                if (row['FlowCategoryId'] == '02') {//02-PCA Télépéage
                                    return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertInterfaceStationPcaTelepr', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                }
                                else {
                                    if (row['FlowCategoryId'] == '03') {//03-Support Télépéage
                                        return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertInterfaceStationPcaTeleps', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                    }
                                    else {
                                        return '';
                                    }
                                }
                            }
                        }
                        else {
                            if (row['FlowId'] == '03') {//LaneGaps
                                return DataTableBtnGet('CertReceiptBagSearch', data, data + '\', \'CertInterfaceStation', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                            }
                            else {
                                if (row['FlowId'] == '04') {//Vers
                                    if (row['FlowCategoryId'] == '01') {//VersPdvBankCard
                                        return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertInterfaceStationVersPdvBankCard', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                    }
                                    else {
                                        if (row['FlowCategoryId'] == '02') {//VersPdvCheck
                                            return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertInterfaceStationVersPdvCheck', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                        }
                                        else {
                                            if (row['FlowCategoryId'] == '03') {//VersPdv
                                                return DataTableBtnGet('CertPdvVersSearch', data, data, '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                            }
                                            else {
                                                if (row['FlowCategoryId'] == '04') {//VersLane
                                                    return DataTableBtnGet('CertVersSearch', data, data, '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                                }
                                                else {
                                                    if (row['FlowCategoryId'] == '05') {//VersLaneBankCard
                                                        return DataTableBtnGet('CertTrxLaneSearch', data, data + '\', \'CertInterfaceStationVersLaneBankCard', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                                    }
                                                    else {
                                                        return '';
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (row['FlowId'] == '05') {//Qualif
                                        return DataTableBtnGet('CertQualifSearch', data, data + '\', \'CertInterfaceStation', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {//Pdv
                                            if (row['FlowCategoryId'] == '01') {//PdvCheck
                                                return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertInterfaceStationPdvCheck', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                            }
                                            else {
                                                if (row['FlowCategoryId'] == '02') {//PdvBankCard
                                                    return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertInterfaceStationPdvBankCard', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                                }
                                                else {
                                                    if (row['FlowCategoryId'] == '03') {//PdvCash
                                                        return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertInterfaceStationPdvCash', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                                    }
                                                    else {
                                                        if (row['FlowCategoryId'] == '04') {//PdvVgt
                                                            return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertInterfaceStationPdvVgt', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                                                        }
                                                        else {
                                                            return '';
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    //if (row['FlowId'] == '03') { //FLUX PDV MPI
                    //    return DataTableButtonDeleteGet('CertInterfaceStation', data);
                    //}
                    //else {
                    //    return '';
                    //}
                    return DataTableButtonDeleteGet('CertInterfaceStation', data);
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    if (row['FlowId'] == '01') {
                        var TaskId = '00';
                        var SourceId = '05';
                        var FileTypeId = '58';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = '---';
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            return '';
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                return '';
                            }
                            else {
                                if (row['FlowId'] == '04') {
                                    if (row['FlowCategoryId'] == '05') {//
                                        var TaskId = '00';
                                        var SourceId = '05';
                                        var FileTypeId = '54';
                                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                        var RegionId = row['RegionId'];
                                        var LSId = row['LSId'];
                                        var AxleId = '--';
                                        var StationNumber = row['StationNumber'];
                                        var LaneName = '---';
                                        var PdvId = '--';
                                        var BillingId = '--';
                                        var CategoryId = '--';
                                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                        var Pattern = 'CertTaskAdd';
                                        var RowId = data + ParamId;
                                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                        var text = '';
                                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                        var TextClass = 'dt-text-cl';
                                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                    }
                                    else {
                                        return '';
                                    }
                                }
                                else {
                                    if (row['FlowId'] == '05') {
                                        return '';
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {
                                            return '';
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "targets": 14, "render": function (data, type, row) {
                    if (row['FlowId'] == '01') { //Lane
                        var TaskId = '00';
                        var SourceId = '07';
                        var FileTypeId = 'Y8';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = '---';
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        if (row['FlowId'] == '02') {//Pdv
                            var TaskId = '00';
                            var SourceId = '07';
                            var FileTypeId = 'P0';
                            var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                            var RegionId = row['RegionId'];
                            var LSId = row['LSId'];
                            var AxleId = '--';
                            var StationNumber = row['StationNumber'];
                            var LaneName = '---';
                            var PdvId = '--';
                            var BillingId = '--';
                            var CategoryId = '--';
                            var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                            var Pattern = 'CertTaskAdd';
                            var RowId = data + ParamId;
                            var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                            var text = '';
                            var BtnClass = 'dt-btn-cl gc-bc1-cl';
                            var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                            var TextClass = 'dt-text-cl';
                            return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                        }
                        else {
                            if (row['FlowId'] == '03') {//LaneGaps
                                var TaskId = '00';
                                var SourceId = '07';
                                var FileTypeId = '72';
                                var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                var RegionId = row['RegionId'];
                                var LSId = row['LSId'];
                                var AxleId = '--';
                                var StationNumber = row['StationNumber'];
                                var LaneName = '---';
                                var PdvId = '--';
                                var BillingId = '--';
                                var CategoryId = '--';
                                var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                var Pattern = 'CertTaskAdd';
                                var RowId = data + ParamId;
                                var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                var text = '';
                                var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                var TextClass = 'dt-text-cl';
                                return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                            }
                            else {
                                if (row['FlowId'] == '04') {//Vers
                                    if (row['FlowCategoryId'] == '01' || row['FlowCategoryId'] == '02') {//
                                        var TaskId = '00';
                                        var SourceId = '07';
                                        var FileTypeId = 'P0';
                                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                        var RegionId = row['RegionId'];
                                        var LSId = row['LSId'];
                                        var AxleId = '--';
                                        var StationNumber = row['StationNumber'];
                                        var LaneName = '---';
                                        var PdvId = '--';
                                        var BillingId = '--';
                                        var CategoryId = '--';
                                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                        var Pattern = 'CertTaskAdd';
                                        var RowId = data + ParamId;
                                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                        var text = '';
                                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                        var TextClass = 'dt-text-cl';
                                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                    }
                                    else {
                                        if (row['FlowCategoryId'] == '05') {//
                                            var TaskId = '00';
                                            var SourceId = '07';
                                            var FileTypeId = '74';
                                            var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                            var RegionId = row['RegionId'];
                                            var LSId = row['LSId'];
                                            var AxleId = '--';
                                            var StationNumber = row['StationNumber'];
                                            var LaneName = '---';
                                            var PdvId = '--';
                                            var BillingId = '--';
                                            var CategoryId = '--';
                                            var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                            var Pattern = 'CertTaskAdd';
                                            var RowId = data + ParamId;
                                            var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                            var text = '';
                                            var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                            var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                            var TextClass = 'dt-text-cl';
                                            return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                        }
                                        else {
                                            if (row['FlowCategoryId'] == '03') {//
                                                var TaskId = '00';
                                                var SourceId = '07';
                                                var FileTypeId = '78';
                                                var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                var RegionId = row['RegionId'];
                                                var LSId = row['LSId'];
                                                var AxleId = '--';
                                                var StationNumber = row['StationNumber'];
                                                var LaneName = '---';
                                                var PdvId = '--';
                                                var BillingId = '--';
                                                var CategoryId = '--';
                                                var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                var Pattern = 'CertTaskAdd';
                                                var RowId = data + ParamId;
                                                var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                var text = '';
                                                var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                var TextClass = 'dt-text-cl';
                                                return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                            }
                                            else {
                                                if (row['FlowCategoryId'] == '04') {//
                                                    var TaskId = '00';
                                                    var SourceId = '07';
                                                    var FileTypeId = '77';
                                                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                    var RegionId = row['RegionId'];
                                                    var LSId = row['LSId'];
                                                    var AxleId = '--';
                                                    var StationNumber = row['StationNumber'];
                                                    var LaneName = '---';
                                                    var PdvId = '--';
                                                    var BillingId = '--';
                                                    var CategoryId = '--';
                                                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                    var Pattern = 'CertTaskAdd';
                                                    var RowId = data + ParamId;
                                                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                    var text = '';
                                                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                    var TextClass = 'dt-text-cl';
                                                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                }
                                                else {
                                                    return '';
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (row['FlowId'] == '05') {//Qualif
                                        return DataTableGetButton('CertFileUpdateAdd', '07' + 'Q1' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {//PDM_MP
                                            return DataTableGetButton('CertFileUpdateAdd', '07' + 'P0' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                        else {
                                            if (row['FlowId'] == '07') {
                                                var TaskId = '00';
                                                var SourceId = '07';
                                                var FileTypeId = 'P1';//PdvTrx
                                                var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                var RegionId = row['RegionId'];
                                                var LSId = row['LSId'];
                                                var AxleId = '--';
                                                var StationNumber = row['StationNumber'];
                                                var LaneName = '---';
                                                var PdvId = '--';
                                                var BillingId = '--';
                                                var CategoryId = '--';
                                                var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                var Pattern = 'CertTaskAdd';
                                                var RowId = data + ParamId;
                                                var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                var text = '';
                                                var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                var TextClass = 'dt-text-cl';
                                                return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                            }
                                            else {
                                                if (row['FlowId'] == '08') {
                                                    var TaskId = '00';
                                                    var SourceId = '07';
                                                    var FileTypeId = '7D';//fatourati
                                                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                    var RegionId = row['RegionId'];
                                                    var LSId = row['LSId'];
                                                    var AxleId = '--';
                                                    var StationNumber = row['StationNumber'];
                                                    var LaneName = '---';
                                                    var PdvId = '--';
                                                    var BillingId = '--';
                                                    var CategoryId = '--';
                                                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                    var Pattern = 'CertTaskAdd';
                                                    var RowId = data + ParamId;
                                                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                    var text = '';
                                                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                    var TextClass = 'dt-text-cl';
                                                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                }
                                                else {
                                                    if (row['FlowId'] == '09') {
                                                        var TaskId = '00';
                                                        var SourceId = '07';
                                                        var FileTypeId = '7E';//M2T
                                                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                        var RegionId = row['RegionId'];
                                                        var LSId = row['LSId'];
                                                        var AxleId = '--';
                                                        var StationNumber = row['StationNumber'];
                                                        var LaneName = '---';
                                                        var PdvId = '--';
                                                        var BillingId = '--';
                                                        var CategoryId = '--';
                                                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                        var Pattern = 'CertTaskAdd';
                                                        var RowId = data + ParamId;
                                                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                        var text = '';
                                                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                        var TextClass = 'dt-text-cl';
                                                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                    }
                                                    else {
                                                        if (row['FlowId'] == '10') {
                                                            var TaskId = '00';
                                                            var SourceId = '07';
                                                            var FileTypeId = 'P1';//PdvTrx
                                                            var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                            var RegionId = row['RegionId'];
                                                            var LSId = row['LSId'];
                                                            var AxleId = '--';
                                                            var StationNumber = row['StationNumber'];
                                                            var LaneName = '---';
                                                            var PdvId = '--';
                                                            var BillingId = '--';
                                                            var CategoryId = '--';
                                                            var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                            var Pattern = 'CertTaskAdd';
                                                            var RowId = data + ParamId;
                                                            var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                            var text = '';
                                                            var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                            var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                            var TextClass = 'dt-text-cl';
                                                            return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                        }
                                                        else {
                                                            if (row['FlowId'] == '11') {
                                                                if (row['FlowCategoryId'] == '01' || row['FlowCategoryId'] == '04') {//AKWA
                                                                    var TaskId = '00';
                                                                    var SourceId = '07';
                                                                    var FileTypeId = 'P1';//PdvTrx
                                                                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                                    var RegionId = row['RegionId'];
                                                                    var LSId = row['LSId'];
                                                                    var AxleId = '--';
                                                                    var StationNumber = row['StationNumber'];
                                                                    var LaneName = '---';
                                                                    var PdvId = '--';
                                                                    var BillingId = '--';
                                                                    var CategoryId = '--';
                                                                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                                    var Pattern = 'CertTaskAdd';
                                                                    var RowId = data + ParamId;
                                                                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                                    var text = '';
                                                                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                                    var TextClass = 'dt-text-cl';
                                                                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                                }
                                                                else {
                                                                    if (row['FlowCategoryId'] == '02') {//
                                                                        var TaskId = '00';
                                                                        var SourceId = '07';
                                                                        var FileTypeId = '7D';
                                                                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                                        var RegionId = row['RegionId'];
                                                                        var LSId = row['LSId'];
                                                                        var AxleId = '--';
                                                                        var StationNumber = row['StationNumber'];
                                                                        var LaneName = '---';
                                                                        var PdvId = '--';
                                                                        var BillingId = '--';
                                                                        var CategoryId = '--';
                                                                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                                        var Pattern = 'CertTaskAdd';
                                                                        var RowId = data + ParamId;
                                                                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                                        var text = '';
                                                                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                                        var TextClass = 'dt-text-cl';
                                                                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                                    }
                                                                    else {
                                                                        if (row['FlowCategoryId'] == '03') {//
                                                                            var TaskId = '00';
                                                                            var SourceId = '07';
                                                                            var FileTypeId = '7E';
                                                                            var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                                            var RegionId = row['RegionId'];
                                                                            var LSId = row['LSId'];
                                                                            var AxleId = '--';
                                                                            var StationNumber = row['StationNumber'];
                                                                            var LaneName = '---';
                                                                            var PdvId = '--';
                                                                            var BillingId = '--';
                                                                            var CategoryId = '--';
                                                                            var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                                            var Pattern = 'CertTaskAdd';
                                                                            var RowId = data + ParamId;
                                                                            var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                                            var text = '';
                                                                            var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                                            var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                                            var TextClass = 'dt-text-cl';
                                                                            return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                                        }
                                                                        else {
                                                                            return '';
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                if (row['FlowId'] == '12') {
                                                                    if (row['FlowCategoryId'] == '02' ||
                                                                        row['FlowCategoryId'] == '03' ||
                                                                        row['FlowCategoryId'] == '04' ||
                                                                        row['FlowCategoryId'] == '05' ||
                                                                        row['FlowCategoryId'] == '06' ||
                                                                        row['FlowCategoryId'] == '07' ||
                                                                        row['FlowCategoryId'] == '08') {//
                                                                        var TaskId = '00';
                                                                        var SourceId = '07';
                                                                        var FileTypeId = '7F';//Livraison animation
                                                                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                                        var RegionId = row['RegionId'];
                                                                        var LSId = row['LSId'];
                                                                        var AxleId = '--';
                                                                        var StationNumber = row['StationNumber'];
                                                                        var LaneName = '---';
                                                                        var PdvId = '--';
                                                                        var BillingId = '--';
                                                                        var CategoryId = '--';
                                                                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                                        var Pattern = 'CertTaskAdd';
                                                                        var RowId = data + ParamId;
                                                                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                                        var text = '';
                                                                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                                        var TextClass = 'dt-text-cl';
                                                                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                                    }
                                                                    else {
                                                                        return '';
                                                                    }
                                                                }
                                                                else {
                                                                    if (row['FlowId'] == '13' || row['FlowId'] == '14') {
                                                                        var TaskId = '00';
                                                                        var SourceId = '07';
                                                                        var FileTypeId = '7C';//BtoB
                                                                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                                        var RegionId = row['RegionId'];
                                                                        var LSId = row['LSId'];
                                                                        var AxleId = '--';
                                                                        var StationNumber = row['StationNumber'];
                                                                        var LaneName = '---';
                                                                        var PdvId = '--';
                                                                        var BillingId = '--';
                                                                        var CategoryId = '--';
                                                                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                                        var Pattern = 'CertTaskAdd';
                                                                        var RowId = data + ParamId;
                                                                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                                        var text = '';
                                                                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                                        var TextClass = 'dt-text-cl';
                                                                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                                    }
                                                                    else {
                                                                        if (row['FlowId'] == '15') {//FLUX_PDV.PDV_MP 
                                                                            if (row['FlowCategoryId'] == '01' || row['FlowCategoryId'] == '04') {//AKWA - Portail
                                                                                var TaskId = '00';
                                                                                var SourceId = '07';
                                                                                var FileTypeId = 'P1';//PdvTrx
                                                                                var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                                                var RegionId = row['RegionId'];
                                                                                var LSId = row['LSId'];
                                                                                var AxleId = '--';
                                                                                var StationNumber = row['StationNumber'];
                                                                                var LaneName = '---';
                                                                                var PdvId = '--';
                                                                                var BillingId = '--';
                                                                                var CategoryId = '--';
                                                                                var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                                                var Pattern = 'CertTaskAdd';
                                                                                var RowId = data + ParamId;
                                                                                var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                                                var text = '';
                                                                                var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                                                var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                                                var TextClass = 'dt-text-cl';
                                                                                return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                                            }
                                                                            else {
                                                                                if (row['FlowCategoryId'] == '02') {//Fatourati
                                                                                    var TaskId = '00';
                                                                                    var SourceId = '07';
                                                                                    var FileTypeId = '7D';//fatourati
                                                                                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                                                    var RegionId = row['RegionId'];
                                                                                    var LSId = row['LSId'];
                                                                                    var AxleId = '--';
                                                                                    var StationNumber = row['StationNumber'];
                                                                                    var LaneName = '---';
                                                                                    var PdvId = '--';
                                                                                    var BillingId = '--';
                                                                                    var CategoryId = '--';
                                                                                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                                                    var Pattern = 'CertTaskAdd';
                                                                                    var RowId = data + ParamId;
                                                                                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                                                    var text = '';
                                                                                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                                                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                                                    var TextClass = 'dt-text-cl';
                                                                                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                                                }
                                                                                else {
                                                                                    if (row['FlowCategoryId'] == '03') {//M2T
                                                                                        var TaskId = '00';
                                                                                        var SourceId = '07';
                                                                                        var FileTypeId = '7E';//M2T
                                                                                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                                                                                        var RegionId = row['RegionId'];
                                                                                        var LSId = row['LSId'];
                                                                                        var AxleId = '--';
                                                                                        var StationNumber = row['StationNumber'];
                                                                                        var LaneName = '---';
                                                                                        var PdvId = '--';
                                                                                        var BillingId = '--';
                                                                                        var CategoryId = '--';
                                                                                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                                                                                        var Pattern = 'CertTaskAdd';
                                                                                        var RowId = data + ParamId;
                                                                                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                                                                                        var text = '';
                                                                                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                                                                                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                                                                                        var TextClass = 'dt-text-cl';
                                                                                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                                                                                    }
                                                                                    else {
                                                                                        return '';
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        return '';
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            { "targets": 15, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertLaneCtrStationSearch', data, 'CertTrxLane', 'fas fa-eye', '0048ff'); } },
            {
                "targets": 16, "render": function (data, type, row) {
                    if (row['FlowId'] == '06') { //FLUX PDV MPI
                        var TaskId = '00';
                        var SourceId = '07';
                        var FileTypeId = 'P4';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = '---';
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        return '';
                    }
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 7);
            
        }
    });
}

function CertInterfaceStationSearch(Id) {

    var ActionBtnId = new String('CertInterfaceStationSearchBtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsMargin = false;

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = '0';
    var StationNumber = '0';
    var FlowId = '0';
    var FlowCategoryId = '0';
    var IsGap = false;

    if (new String(Id).length > 8) {
        FlowId = new String(Id).substr(8, 2);
        FlowCategoryId = new String(Id).substr(10, 2);
    }

    CertInterfaceStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, FlowId, FlowCategoryId, IsGap);
}

function CertInterfaceStationDisplay() {
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';
    var IsMargin = true;

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var FlowId = GetElementValue('FlowId');
    var FlowCategoryId = GetElementValue('FlowCategoryId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    if (DateStringStart != '' && DateStringEnd != '') {
        CertInterfaceStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
            RegionId, LSId, StationNumber, FlowId, FlowCategoryId, IsGap);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertInterfaceFlowGet(ActionBtnId, Icon, Id) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-cl gc-c1-cl');

    var PatternTable = 'CertInterfaceFlow';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertLaneAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertInterfaceFlowGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.FlowId + ' - ' + data.FlowName; } },//1

            { "data": "TotalToll" },//2
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3

            { "data": "TotalCe" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5

            { "data": "GapAbsolute" },//6
            { "data": "GapAbsolute" },//7

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId; } },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center none", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            {
                "targets": 3, "render": function (data, type, row) {
                    if (row['FlowId'] == '01') {
                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C3' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'D0' + data, 'fas fa-redo-alt', '9c9c9c');
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'C5' + data, 'fas fa-redo-alt', '9c9c9c');
                            }
                            else {
                                if (row['FlowId'] == '04') {
                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'C0' + data, 'fas fa-redo-alt', '9c9c9c');
                                }
                                else {
                                    if (row['FlowId'] == '05') {
                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'K1' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {
                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'M0' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    if (row['FlowId'] == '01') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                            }
                            else {
                                if (row['FlowId'] == '04') {
                                    return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                                }
                                else {
                                    if (row['FlowId'] == '05') {
                                        return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {
                                            return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalToll'], 6, 10000); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableBtnGet('CertInterfaceCategorySearch', data, data, '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-txt-cl'); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertInterfaceFlow', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
            {
                "targets": 10, "render": function (data, type, row) {
                    if (row['FlowId'] == '01') {
                        return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            return '';
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                return '';
                            }
                            else {
                                if (row['FlowId'] == '04') {
                                    return DataTableGetButton('CertFileUpdateAdd', '05' + '57' + data, 'fas fa-redo-alt', '9c9c9c');
                                }
                                else {
                                    if (row['FlowId'] == '05') {
                                        return '';
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {
                                            return '';
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    if (row['FlowId'] == '01') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            return DataTableGetButton('CertFileUpdateAdd', '07' + 'P0' + data, 'fas fa-redo-alt', '9c9c9c');
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                return DataTableGetButton('CertFileUpdateAdd', '07' + '72' + data, 'fas fa-redo-alt', '9c9c9c');
                            }
                            else {
                                if (row['FlowId'] == '04') {
                                    return DataTableGetButton('CertFileUpdateAdd', '07' + '77' + data, 'fas fa-redo-alt', '9c9c9c');
                                }
                                else {
                                    if (row['FlowId'] == '05') {
                                        return DataTableGetButton('CertFileUpdateAdd', '07' + 'Q1' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {
                                            return DataTableGetButton('CertFileUpdateAdd', '07' + 'P0' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },


        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": true,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(numFormat(Total0));

            Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total1));

            Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numFormat(Total2));

        }
    });
}

function CertInterfaceFlowSearch(Id) {

    var ActionBtnId = new String('CertInterfaceFlowSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    CertInterfaceFlowGet(ActionBtnId, Icon, Id);
}

function CertInterfaceCategoryGet(ActionBtnId, Icon, Id) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-cl gc-c1-cl');

    var PatternTable = 'CertInterfaceCategory';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertLaneAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertInterfaceCategoryGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.FlowId + ' - ' + data.FlowName; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.FlowCategoryId + '-' + data.CategoryName; } },//2

            { "data": "TotalToll" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapAbsolute" },//8

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId; } },//11
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId; } },//12
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {

                    if (row['FlowId'] == '01') {
                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C3' + data + row['BillingId'], 'fas fa-redo-alt', '9c9c9c');
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            if (row['FlowCategoryId'] == '01') {//InterfacePdvPcaCdar
                                return DataTableGetButton('CertFileUpdateAdd', '10' + 'D1' + data, 'fas fa-redo-alt', '9c9c9c');
                            }
                            else {
                                if (row['FlowCategoryId'] == '02') {//InterfacePdvPcaTelepr
                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'D2' + data, 'fas fa-redo-alt', '9c9c9c');
                                }
                                else {
                                    if (row['FlowCategoryId'] == '03') {//InterfacePdvPcaTeleps
                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'D3' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    else {
                                        return '';
                                    }
                                }
                            }
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                if (row['FlowCategoryId'] == '01' || row['FlowCategoryId'] == '02' || row['FlowCategoryId'] == '03' || row['FlowCategoryId'] == '04') {//GapLane
                                    return DataTableGetButton('CertFileUpdateAdd', '10' + 'C5' + data, 'fas fa-redo-alt', '9c9c9c');
                                }
                            }
                            else {
                                if (row['FlowId'] == '04') {//Vers
                                    if (row['FlowCategoryId'] == '01') {//VersPdvBank

                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C9' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    if (row['FlowCategoryId'] == '02') {//VersPdvCheck

                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C1' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    if (row['FlowCategoryId'] == '03') {//VersPdv

                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C7' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    if (row['FlowCategoryId'] == '04') {//VersLane

                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C4' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    if (row['FlowCategoryId'] == '05') {//VersLaneBank

                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C8' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    if (row['FlowCategoryId'] == '06') {//VersPdvVgt

                                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'CA' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                }
                                else {
                                    if (row['FlowId'] == '06') {//PdvMp
                                        if (row['FlowCategoryId'] == '01') {//PdvCheck

                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'M3' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                        if (row['FlowCategoryId'] == '02') {//PdvBankCard

                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'M2' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                        if (row['FlowCategoryId'] == '03') {//PdvCash

                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'M1' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                        if (row['FlowCategoryId'] == '04') {//PdvVgt

                                            return DataTableGetButton('CertFileUpdateAdd', '10' + 'M4' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                    }
                                    else {
                                        return '';
                                    }
                                }
                            }
                        }
                    }

                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {
                    if (row['FlowId'] == '01') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                            }
                            else {
                                if (row['FlowId'] == '04') {
                                    return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                                }
                                else {
                                    if (row['FlowId'] == '05') {
                                        return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {
                                            return DataTableGetButton('CertFileUpdateAdd', '07' + 'N2' + data, 'fas fa-redo-alt', '9c9c9c');
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalToll'], 6, 10000); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertInterfaceStationSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertInterfaceFlow', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
            {
                "targets": 11, "render": function (data, type, row) {
                    if (row['FlowId'] == '01') {
                        return '';
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            return '';
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                return '';
                            }
                            else {
                                if (row['FlowId'] == '04') {
                                    return '';
                                }
                                else {
                                    if (row['FlowId'] == '05') {
                                        return '';
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {
                                            return '';
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    if (row['FlowId'] == '01') {
                        return '';
                    }
                    else {
                        if (row['FlowId'] == '02') {
                            return '';
                        }
                        else {
                            if (row['FlowId'] == '03') {
                                return '';
                            }
                            else {
                                if (row['FlowId'] == '04') {
                                    return '';
                                }
                                else {
                                    if (row['FlowId'] == '05') {
                                        return '';
                                    }
                                    else {
                                        if (row['FlowId'] == '06') {
                                            return '';
                                        }
                                        else {
                                            return '';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": true,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numFormat(Total0));

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total1));

            Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total2));

        }
    });
}

function CertInterfaceCategorySearch(Id) {
    var ActionBtnId = new String('CertInterfaceCategorySearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    CertInterfaceCategoryGet(ActionBtnId, Icon, Id);
}







function CertTraficOdStationOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(4, 1, 2);

    ParamTitleSet('Certification du trafic origine-destination');
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');



    $('#TotalRefNameId').text('Ope');
    $('#TotalNameId').text('Ce');
    $('#ZipHeaderNameId').text('');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {

                //Set action btns
                ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertTraficOdStationDisplay()');
                ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'CertTraficOdDay\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertTraficOdDay');
            }
            else {
                if (data.includes('Chef de gare')) {

                    //Set action btns
                    ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertTraficOdStationDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertTraficOdStationDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Trafic OD');
}


function CertTraficOdMonthOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(4, 2, 2);

    ParamTitleSet('Certification du trafic origine-destination mensuel');
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    $('#TotalRefNameId').text('Ope');
    $('#TotalNameId').text('Ce');
    $('#ZipHeaderNameId').text('');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {

                //Set action btns
                ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertTraficOdMonthDisplay()');
                ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'CertTraficOdMonthDay\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertTraficOdMonthDay');
            }
            else {
                if (data.includes('Chef de gare')) {
                    //Set action btns
                    ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertTraficOdMonthDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertTraficOdMonthDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Trafic OD mensuel');
}


function CertTraficSectionOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(4, 2, 2);

    ParamTitleSet('Certification du trafic par section');
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    $('#TotalRefNameId').text('Ope');
    $('#TotalNameId').text('Ce');
    $('#ZipHeaderNameId').text('');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {

                //Set action btns
                ParamActionBtnGet(0, 'Niveau section', 'fas fa-eye', 'CertTraficSectionDayDisplay()');
                ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'CertTraficSectionDay\')');
                ParamActionBtnGet(2, 'MAJ Liste des sections', 'fas fa-redo-alt', 'ParamOdUpdate()');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertTraficSectionDay');
            }
            else {
                if (data.includes('Chef de gare')) {
                    //Set action btns
                    ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertTraficSectionDayDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertTraficSectionDayDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Trafic par section');
}

//Bi
function CertBiRevenueOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(5, 0, 1);

    ParamTitleSet('Rapprochement du CA BI par jour');
    ShowReport('ParamReportId');

    //ShowReport('RegionId' + 'Parent');
    //ShowReport('CexId' + 'Parent');
    //ShowReport('BagContainerId' + 'Parent');
    //ShowReport('StationNumberId' + 'Parent');

    //ShowReport('TimeId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamCexGet()');
    ElementOnChangeSet('CexId', 'ParamBagContainerFromCexGet()');
    ElementOnChangeSet('BagContainerId', 'ParamStationsFromCexGet()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesFromCexGet()');

    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertTrxLaneBiStationDisplay()');
    ParamActionBtnGet(1, 'Tableau de bord', 'fas fa-tachometer-alt', 'CertDayDisplay(\'CertBiRevenueDay\')');

    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 2);
    CertDayDisplay('CertBiRevenueDay');

    $('#TotalRefNameId').text('Ce');
    $('#TotalNameId').text('Bi');
    $('#ZipHeaderNameId').text('');

    NotiConnectionIdUpdate('BI Recette');
}


function CertBiTraficOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(5, 1, 1);

    ParamTitleSet('Rapprochement du trafic BI par jour');
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertTraficBiStationDisplay()');
    ParamActionBtnGet(1, 'Tableau de bord', 'fas fa-tachometer-alt', 'CertDayDisplay(\'CertBiTraficDay\')');

    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 2);
    CertDayDisplay('CertBiTraficDay');

    $('#TotalRefNameId').text('Ce');
    $('#TotalNameId').text('Bi');
    $('#ZipHeaderNameId').text('');

    NotiConnectionIdUpdate('BI Trafic');
}















function CertInterfacePdvOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarHighlight(6, 6);

    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertInterfaceStationDisplay()");
    $('#ParamTitleId').text("Rapprochement des transactions");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    HideReport('ParamActionContainerId1');

    //if (document.getElementById('ParamActionBtnId2') != null) {
    ////ShowReport('ParamActionContainerId2');
    //document.getElementById('ParamActionBtnId2').setAttribute("onClick", "CertUpdate(\'CertTrxLane\')");
    //document.getElementById('ParamActionIconId2').setAttribute('Class', 'fas fa-redo-alt');
    //$('#ParamActionTextId2').text("CE");
    //}

    if (document.getElementById('ParamActionBtnId3') != null) {
        ShowReport('ParamActionContainerId3');
        document.getElementById('ParamActionBtnId3').setAttribute("onClick", "CertDayDisplay(\'CertInterfacePdv\')");
        document.getElementById('ParamActionIconId3').setAttribute('Class', 'fas fa-tachometer-alt');
        $('#ParamActionTextId3').text("Tableau de bord ");
    }

    //document.getElementById('CertReportViewBtnId').setAttribute("onClick", "CertReportStationView(\'CertInterfaceDay\')");
    //document.getElementById('CertReportSendBtnId').setAttribute("onClick", "CertReportStationSend(\'CertInterfaceDay\')");

    var Pattern = 'CertDay';
    var Title = 'Rapprochement des interfaces comptables PDV';
    $('#' + Pattern + 'TableCardHeaderId h5').text(Title);
    //DateValueYesterdaySet('DateStartId');
    //DateValueYesterdaySet('DateEndId');
    //CertDayDisplay('CertInterfacePdv');

    //$('#TotalRefNameId').text('Zip');
    //$('#TotalNameId').text('Ce');
    //$('#ZipHeaderNameId').text('');

    NotiConnectionIdUpdate('Interface PDV');
}


function CertTrxBorneOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(7, 1, 3);

    ParamTitleSet('Certification des transaction borne');
    ShowReport('ParamReportId');

    ShowParent('RegionId');
    ShowParent('LSId');
    ShowParent('StationNumberId');
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSGet()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationLSGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertTrxBorneAllDisplay()');

    //Display
    //CertTrxBorneAllDisplay();

    //Noti
    NotiConnectionIdUpdate('Transactions Borne');
}



//Image
function CertImageLaneOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(7, 2, 3);

    $('#ParamTitleId').text("Certification des images voie");
    ShowReport('ParamReportId');
    ShowReport('RegionId' + 'Parent');
    ShowReport('LSId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('LaneNameId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSGet()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationLSGet()');

    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertImageLaneAllDisplay()');

    NotiConnectionIdUpdate('Images Voie');
}


function CertReportingTraficOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(9, 0, 1);

    $('#ParamTitleId').text("Certification du Trafic");
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {

                //Actions
                ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertReportingTraficStationDisplay()');
                ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'CertReportingTraficDay\')');

                //set default dates
                //DateValueDefaultFirstDaySet('DateStartId');
                //DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertReportingTraficDay');
            }
            else {
                //if (data.includes('Equipement') || data.includes('QualifPath')) {

                //    //Actions
                //    ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertImageBorneStationDisplay()');

                //    //set default dates
                //    //DateValueDefaultSet('DateStartId', 1);
                //    //DateValueDefaultSet('DateEndId', 1);
                //    CertImageBorneStationDisplay();
                //}
            }
        }
    });

    NotiConnectionIdUpdate('Certification Reporting Trafic');
}


function CertReportingRevenueOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(9, 1, 1);

    $('#ParamTitleId').text("Certification de la recette");
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati')) {

                //Actions
                ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertReportingRevenueStationDisplay()');
                ParamActionBtnGet(1, 'Niveau jour', 'fas fa-eye', 'CertDayDisplay(\'CertReportingRevenueDay\')');

                //set default dates
                //DateValueDefaultFirstDaySet('DateStartId');
                //DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertReportingRevenueDay');
            }
            else {
                //if (data.includes('Equipement') || data.includes('QualifPath')) {

                //    //Actions
                //    ParamActionBtnGet(0, 'Niveau gare', 'fas fa-eye', 'CertImageBorneStationDisplay()');

                //    //set default dates
                //    //DateValueDefaultSet('DateStartId', 1);
                //    //DateValueDefaultSet('DateEndId', 1);
                //    CertImageBorneStationDisplay();
                //}
            }
        }
    });

    NotiConnectionIdUpdate('Certification Reporting Recette');
}






function CertImageBorneCalculate() {
    var TaskId = '04';
    var SourceId = '10';
    var FileTypeId = '--';
    var DateString = GetDateStringFromDatePicker('DateStartId');
    var SiteId = '--';
    var LSId = '--';
    var BagContainerId = '--';
    var StationNumber = '--';
    var LaneName = '---';
    var PdvId = '--';
    var BillingId = '--';
    var CategoryId = '--';
    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

    var Pattern = 'CertTaskAdd';
    var RowId = data + ParamId;
    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
    var text = '';
    var BtnClass = 'dt-btn-cl gc-bc1-cl';
    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
    var TextClass = 'dt-text-cl';

    CertTaskAdd(RowId, ParamId);
}



function ParamOdUpdate() {

    var ActionBtnId = 'ParamActionBtnId2';
    var Icon = 'far fa-check-circle btn-icon-m-cl gc-c1-cl';

    ActionBtnMarginSpin(ActionBtnId);

    $.ajax({
        url: "/Param/ParamOdUpdate",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnIconMarginSet(ActionBtnId, Icon);
            //CollabActionDisplay('0')
        }
    });
}


function CertLoyOccOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(10, 0, 0);

    $('#ParamTitleId').text("Certification des transactions fédélité");
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');



    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur')) {
                //Actions 
                ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertLoyTrxLaneStationDisplay()');
                ParamActionBtnGet(1, 'Niveau Jour', 'fas fa-eye', 'CertDayDisplay(\'CertLoyTrxLaneDay\')');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
                CertDayDisplay('CertLoyTrxLaneDay');
            }
            else {
                if (data.includes('Loyalty')) {
                    //Actions
                    ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertLoyTrxLaneStationDisplay()');

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                    CertLoyTrxLaneStationDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Fédélité');
}





function CertTrxLaneStationGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('CertTrxLaneBillingId' + 'TableReportId');
    HideReport('CertTrxLaneHour' + 'TableReportId');
    HideReport('CertFileLane' + 'TableReportId');
    HideReport('CertFileCeStation' + 'TableReportId');
    ParamMessageReset();

    var Pattern = 'CertTrxLaneStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    ParamMessageReset();

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.LSId + '-' + data.LSName; } },//1
            { "data": "StationName" },//2

            { "data": "TotalZip" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//4 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//5 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//6 Upload

            { "data": "TotalCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//8 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//9 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//10 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//11 Upload Trx
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//12 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Trx zip
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data0 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return data0 + data1;
                }
            },
            {
                "targets": 5, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Upload TrxLaneZip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn0 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '04';
                    var SourceId = '10';
                    var FileTypeId = 'C3';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn0 + Btn1;
                }
            },

            //Trx Ce
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {//Upload TrxLane Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 11, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'Y8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    var Btn1 = DataTableButtonGet('CertTrxLaneLaneReceiptSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                    var Btn2 = DataTableButtonGet('CertRecoDataFromStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-download btn-icon-cl gc-c1-cl', '');
                    return Btn1 + Btn2;
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total0));

            Total1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(9).footer()).html(numShortFormat(Total2));
        }

    });
}

function CertTrxLaneFullStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('CertTrxLaneBillingId' + 'TableReportId');
    HideReport('CertTrxLaneHour' + 'TableReportId');
    HideReport('CertFileLane' + 'TableReportId');
    HideReport('CertFileCeStation' + 'TableReportId');
    ParamMessageReset();

    var Pattern = 'CertTrxLaneStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    ParamMessageReset();

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneFullStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationName" },//2

            { "data": "TotalZip" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//4 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//5 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//6 Upload

            { "data": "TotalCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//8 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//9 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//10 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//11 UploadCe
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber; } },//12 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Trx zip
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 5, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Upload TrxLaneZip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5B';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx Ce
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {//Upload TrxLane Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 11, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'Y8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxLaneFullLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total0));

            Total1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(9).footer()).html(numShortFormat(Total2));
        }

    });
}

function CertTrxLaneStationDisplay() {
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    var RegionId = ElementDropDownListValueGet('RegionId');
    var LSId = ElementDropDownListValueGet('LSId');
    var StationNumber = ElementDropDownListValueGet('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    HideReport('CertTrxLaneDay' + 'TableReportId');

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTrxLaneStationGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertTrxLaneFullStationDisplay() {
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    HideReport('CertTrxLaneDay' + 'TableReportId');

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTrxLaneFullStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertTrxLaneDiagDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DhmStartId');
    //var DateStringEnd = GetDateStringFromDatePicker('DhmEndId');
    var Icon = 'fas fa-eye';

    if (DateStringStart) {
        CertTrxLaneStationGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringStart, Icon)
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertFileAutoDisplay() {

    var ActionBtnId = 'ParamActionBtnId';

    var TaskId = GetElementValue('TaskId');
    var Source = GetElementValue('SourceId');
    var FileTypeId = GetElementValue('FileTypeId');
    var SiteId = GetElementValue('SiteId');
    var LSId = GetElementValue('LSId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');
    var PdvId = GetElementValue('PdvId');

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var Icon = 'fas fa-eye btn-icon-m-cl cg-c-cl';


    if (Source == '') {
        Source = '0';
    }
    if (FileTypeId == '') {
        FileTypeId = '0';
    }
    if (SiteId == '') {
        SiteId = '0';
    }


    if (DateStringStart != '' && DateStringEnd != '') {

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl cg-c-cl');

        HideReport('CertFilePlan' + 'TableReportId');
        HideReport('CertFileThread' + 'TableReportId');

        $('#CertFilePlan' + 'TableId').DataTable().destroy();;
        $('#CertFilePlan' + 'TableId').DataTable({
            "initComplete": function (settings, json) {
                ShowReport('CertFilePlan' + 'TableReportId');
                $('#' + ActionBtnId).find('span').attr('class', Icon);

                CertFileAutoRestart();
                CertFileManDisplay(0);
            },
            "ajax": {
                "url": "/Cert/CertFileAutoDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    TaskId: TaskId,
                    Source: Source,
                    FileTypeId: FileTypeId,
                    SiteId: SiteId,
                    LSId: LSId,
                    BagContainerId: BagContainerId,
                    StationNumber: StationNumber,
                    LaneName: LaneName,
                    PdvId: PdvId,
                    DateStringStart: DateStringStart,
                    DateStringEnd: DateStringEnd
                }
            },
            "columns": [
                { "data": "TaskName" },//0
                { "data": "SourceName" },//1
                //{ "data": "FileTypeName" },//2
                { "mData": function vehicle(data, type, dataToSet) { return data.FileTypeId + '-' + data.FileTypeName; } },//2
                { "data": "RegionId" },//3
                { "data": "LSId" },//4
                { "data": "AxleId" },//5
                { "data": "StationNumber" },//6
                { "data": "LaneName" },//7
                //{ "data": "PdvId" },//8
                {
                    "mData": function vehicle(data, type, dataToSet) {
                        var diffInSeconds = Math.abs(new Date(data.YearM, data.MonthM - 1, data.DayM, data.HourM, data.MinuteM, data.SecondM) -
                            new Date(data.YearC, data.MonthC - 1, data.DayC, data.HourC, data.MinuteC, data.SecondC)) / 1000;
                        var days = Math.floor(diffInSeconds / 60 / 60 / 24);
                        var hours = Math.floor(diffInSeconds / 60 / 60 % 24);
                        var minutes = Math.floor(diffInSeconds / 60 % 60);

                        return GetDigits(hours, 2) + ':' + GetDigits(minutes, 2);

                    }
                },//8
                { "data": "BillingId" },//9
                { "data": "CategoryId" },//10

                { "data": "DhmValueStart" },//11    
                { "data": "DhmValueEnd" },//12
                { "data": "DhmPlan" },//13
                { "data": "Periodicity" },//14
                { "data": "PeriodicityHour" },//15

                { "data": "AddDaysStart" },//16
                { "data": "AddDaysEnd" },//17

                { "data": "Statut" },//18
                { "data": "CertFilePlanId" },//19

                { "data": "CertFileId" },//20
                { "data": "CertFileId" },//21
                { "data": "CertFileId" },//22

                { "data": "LastName" },//23
                //{ "data": "DhmModification" },//24
                {
                    "mData": function vehicle(data, type, dataToSet) {
                        var diffInSeconds = Math.abs(Date.now() - new Date(data.YearM, data.MonthM - 1, data.DayM, data.HourM, data.MinuteM, data.SecondM)) / 1000;
                        var days = Math.floor(diffInSeconds / 60 / 60 / 24);
                        var hours = Math.floor(diffInSeconds / 60 / 60 % 24);
                        var minutes = Math.floor(diffInSeconds / 60);

                        return GetDigits(hours, 2) + ':' + GetDigits(minutes, 2);
                    }
                },//24
                { "data": "DhmCreation" },//25   

                //{ "mData": function vehicle(data, type, dataToSet) { return data.ThreadDone + '/' + data.ThreadTotal; } },//26
                { "data": "CertFilePlanId" },//26
                { "data": "ServerPort" },//27

                { "data": "CertFilePlanId" },//28
                { "data": "CertFilePlanId" },//29
                { "data": "CertFilePlanId" },//30
            ],
            "columnDefs": [
                { "width": "5%", "className": "text-left", "targets": 0 },//TaskName
                { "width": "5%", "className": "text-left", "targets": 1 },//SourceName
                { "width": "5%", "className": "text-left", "targets": 2 },//FileTypeId
                { "width": "3%", "className": "text-center", "targets": 3 },//RegionId  
                { "width": "3%", "className": "text-center", "targets": 4 },//LSId
                { "width": "3%", "className": "text-center", "targets": 5 },//AxleId
                { "width": "3%", "className": "text-center", "targets": 6 },//StationNumber          
                { "width": "3%", "className": "text-center", "targets": 7 },//LaneName  
                { "width": "3%", "className": "text-center", "targets": 8 },//PdvName  
                { "width": "3%", "className": "text-center none", "targets": 9 },//BillingId
                { "width": "3%", "className": "text-center none", "targets": 10 },//CategoryId

                { "width": "3%", "className": "text-center", "targets": 11 },//DhmValueStart  
                { "width": "3%", "className": "text-center", "targets": 12 },//DhmValueEnd  
                { "width": "3%", "className": "text-center none", "targets": 13 },//DhmPlan 

                { "width": "3%", "className": "text-center none", "targets": 14 },//Periodicity
                { "width": "3%", "className": "text-center none", "targets": 15 },//Periodicity

                { "width": "3%", "className": "text-center none", "targets": 16 },//
                { "width": "3%", "className": "text-center none", "targets": 17 },//

                { "width": "0%", "className": "text-center none", "targets": 18 },//Statut   
                { "width": "3%", "className": "text-center", "targets": 19 },//CertFilePlay  

                { "width": "8%", "className": "text-center none", "targets": 20 },//ProgressBar
                { "width": "3%", "className": "text-center", "targets": 21 },//LinesNumberId
                { "width": "10%", "className": "text-right", "targets": 22 },//ProgressPercent 

                { "width": "3%", "className": "text-center", "targets": 23 },
                { "width": "3%", "className": "text-center", "targets": 24 },
                { "width": "3%", "className": "text-center", "targets": 25 },
                { "width": "8%", "className": "text-center", "targets": 26 },
                { "width": "2%", "className": "text-center", "targets": 27 },

                { "width": "3%", "className": "text-center none", "targets": 28 },
                { "width": "3%", "className": "text-center", "targets": 29 },
                { "width": "3%", "className": "text-center", "targets": 30 },

                { "targets": 2, "render": function (data, type, row) { return DataTableGetElementId('FileTypeId', row['CertFilePlanId'], DataTableStringGet(data, 20)); } },
                { "targets": 3, "render": function (data, type, row) { return DataTableGetElementId('RegionId', row['CertFilePlanId'], data); } },
                { "targets": 4, "render": function (data, type, row) { return DataTableGetElementId('LSId', row['CertFilePlanId'], data); } },
                { "targets": 5, "render": function (data, type, row) { return DataTableGetElementId('AxleId', row['CertFilePlanId'], data); } },
                { "targets": 6, "render": function (data, type, row) { return DataTableGetElementId('StationNumber', row['CertFilePlanId'], data); } },
                { "targets": 7, "render": function (data, type, row) { return DataTableGetElementId('LaneName', row['CertFilePlanId'], data); } },
                //{ "targets": 8, "render": function (data, type, row) { return DataTableGetElementId('PdvName', row['CertFilePlanId'], data); } },
                { "targets": 8, "render": function (data, type, row) { return data; } },
                { "targets": 9, "render": function (data, type, row) { return DataTableGetElementId('BillingId', row['CertFilePlanId'], data); } },
                { "targets": 10, "render": function (data, type, row) { return DataTableGetElementId('CategoryId', row['CertFilePlanId'], data); } },

                { "targets": 11, "render": function (data, type, row) { return DataTableGetElementId('DhmValueStartId', row['CertFilePlanId'], DataTableDateValueGet(row['YearS'], row['MonthS'], row['DayS'])); } },
                { "targets": 12, "render": function (data, type, row) { return DataTableGetElementId('DhmValueEndId', row['CertFilePlanId'], DataTableDateValueGet(row['YearE'], row['MonthE'], row['DayE'])); } },
                { "targets": 13, "render": function (data, type, row) { return GetHmFromDataTableDate(data) } },
                { "targets": 14, "render": function (data, type, row) { return data; } },
                { "targets": 15, "render": function (data, type, row) { return data; } },

                { "targets": 16, "render": function (data, type, row) { return data; } },
                { "targets": 17, "render": function (data, type, row) { return data; } },

                { "targets": 18, "render": function (data, type, row) { return DataTableGetElementId('StatusId', row['CertFilePlanId'], data); } },
                {
                    "targets": 19, "render": function (data, type, row) {

                        var online = '<span class="fa fa-circle" style="' +
                            'font-size: 8px;' +
                            'margin-right: 4px;' +
                            'background: #fe1200;' +
                            'margin: -2px 0 0 -2px;' +
                            'border-radius: 50%;' +
                            'color: #fe1200;' +
                            'margin-top: 8px;' +
                            '"></span>';

                        if (row['IsFinnished'] == true) {
                            online = '<span class="fa fa-circle" style="' +
                                'font-size: 8px;' +
                                'margin-right: 4px;' +
                                'background: #A5A5A5;' +
                                'margin: -2px 0 0 -2px;' +
                                'border-radius: 50%;' +
                                'color: #A5A5A5;' +
                                'margin-top: 8px;' +
                                '"></span>';
                            return online + ' ' + DataTableGetButton('CertFileRestart', row['CertFilePlanId'], 'fas fa-step-backward', '0048ff');
                        }
                        else {
                            if (row['IsRunning']) {
                                online = '<span class="fa fa-circle" style="' +
                                    'font-size: 8px;' +
                                    'margin-right: 4px;' +
                                    'background: #5cb85c;' +
                                    'margin: -2px 0 0 -2px;' +
                                    'border-radius: 50%;' +
                                    'color: #5cb85c;' +
                                    'margin-top: 8px;' +
                                    '"></span>';
                                return online + ' ' + DataTableGetButton('', row['CertFilePlanId'], 'fa fa-spinner fa-spin', '0048ff');
                            }
                            else {
                                return online + ' ' + DataTableGetButton('CertFilePlay', row['CertFilePlanId'], 'far fa-play-circle', '0048ff');
                            }

                        }
                    }
                },
                { "targets": 20, "render": function (data, type, row) { return ''; } },
                { "targets": 21, "render": function (data, type, row) { return DataTableGetElementId('LinesNumberId', row['CertFilePlanId'], ''); } },
                {
                    "targets": 22, "render": function (data, type, row) {
                        if (row['IsFinnished'] == true) {
                            return DataTableProgressionGet(row['CertFilePlanId'], 1, 1);
                        }
                        else {
                            return DataTableProgressionGet(row['CertFilePlanId'], row['LinesNumber'], row['CurrentLineNumber']);
                        }
                    }
                },
                { "targets": 23, "render": function (data, type, row) { return data; } },
                /*{ "targets": 24, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },*/
                //{ "targets": 24, "render": function (data, type, row) { return GetDigits(data.HourM, 2) + ':' + GetDigits(data.MinuteM, 2); } },
                { "targets": 24, "render": function (data, type, row) { return data; } },

                { "targets": 25, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
                { "targets": 26, "render": function (data, type, row) { return DataTableThreadProgressBarGet(data, row['ThreadTotal'], row['ThreadDone']); } },
                { "targets": 27, "render": function (data, type, row) { return data; } },

                { "targets": 28, "render": function (data, type, row) { return DataTableGetButton('CertFileThreadSearch', data, 'fas fa-eye', '0048ff'); } },
                { "targets": 29, "render": function (data, type, row) { return DataTableGetButton('CertFilePlanDelete', data, 'far fa-trash-alt', 'fe1200'); } },
                { "targets": 30, "render": function (data, type, row) { return data; } },
            ],
            "iDisplayLength": 50,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "processing": false,
            "responsive": true,
            "bFilter": false,
            "autoWidth": true,
            "searching": true,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {

                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                //IntTotal1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                //IntTotal2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                //IntTotal3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                //IntTotal4 = api.column(14).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                //$(api.column(5).footer()).html(numShortFormat(IntTotal1));
                //$(api.column(6).footer()).html(numShortFormat(IntTotal2));
                //$(api.column(7).footer()).html(numShortFormat(IntTotal3));

                //$(api.column(14).footer()).html(numShortFormat(IntTotal4) + ' Min');

                //if (IntTotal3 !== 0)
                //    $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numShortFormat(IntTotal3) + '</span>');
                //else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numShortFormat(IntTotal3) + '</span>');
            }
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertFilePlanDisplay() {
    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    HideReport('CertFileCron' + 'TableReportId');

    $('#CertFileCron' + 'TableId').DataTable().destroy();;
    $('#CertFileCron' + 'TableId').DataTable({
        "initComplete": function (settings, json) {
            ShowReport('CertFileCron' + 'TableReportId');
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/Cert/CertFilePlanDisplay",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            { "data": "TaskName" },//0
            { "data": "SourceName" },//1
            { "data": "FileTypeName" },//2
            { "data": "SiteId" },//3
            { "data": "LSId" },//4
            { "data": "BagContainerId" },//5
            { "data": "StationNumber" },//6
            { "data": "LaneName" },//7
            { "data": "PdvId" },//8
            { "data": "BillingId" },//9
            { "data": "CategoryId" },//10

            { "data": "DhmValueStart" },//11    
            { "data": "DhmValueEnd" },//12
            { "data": "DhmPlan" },//13

            { "data": "Periodicity" },//14
            { "data": "PeriodicityHour" },//15

            { "data": "AddDaysStart" },//16
            { "data": "AddDaysEnd" },//17

            { "data": "Statut" },//18
            { "data": "CertFilePlanId" },//19

            { "data": "CertFileId" },//20
            { "data": "CertFileId" },//21
            { "data": "CertFileId" },//22

            { "data": "LastName" },//23
            { "data": "FirstName" },//24
            { "data": "DhmModification" },//25
            { "mData": function vehicle(data, type, dataToSet) { return 'En cours'; } },//26
            { "data": "ServerPort" },//27

            { "data": "CertFilePlanId" },//28
            { "data": "CertFilePlanId" },//29            
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-center", "targets": 0 },//TaskName
            { "width": "5%", "className": "text-center", "targets": 1 },//SourceName
            { "width": "5%", "className": "text-center", "targets": 2 },//FileTypeId
            { "width": "3%", "className": "text-center", "targets": 3 },//SiteId  
            { "width": "3%", "className": "text-center", "targets": 4 },//LSId
            { "width": "3%", "className": "text-center none", "targets": 5 },//BagContainerId
            { "width": "3%", "className": "text-center", "targets": 6 },//StationNumber          
            { "width": "3%", "className": "text-center none", "targets": 7 },//LaneName  
            { "width": "3%", "className": "text-center none", "targets": 8 },//PdvName  
            { "width": "3%", "className": "text-center none", "targets": 9 },//BillingId
            { "width": "3%", "className": "text-center none", "targets": 10 },//CategoryId

            { "width": "3%", "className": "text-center none", "targets": 11 },//DhmValueStart  
            { "width": "3%", "className": "text-center none", "targets": 12 },//DhmValueEnd  
            { "width": "3%", "className": "text-center", "targets": 13 },//DhmPlan 

            { "width": "3%", "className": "text-center", "targets": 14 },//Periodicity
            { "width": "3%", "className": "text-center", "targets": 15 },//PeriodicityHour

            { "width": "3%", "className": "text-center", "targets": 16 },//AddDaysStart
            { "width": "3%", "className": "text-center", "targets": 17 },//AddDaysEnd

            { "width": "0%", "className": "text-center none", "targets": 18 },//Statut   
            { "width": "3%", "className": "text-center", "targets": 19 },//CertFilePlay  

            { "width": "3%", "className": "text-center none", "targets": 20 },//ProgressBar
            { "width": "3%", "className": "text-center none", "targets": 21 },//LinesNumberId
            { "width": "3%", "className": "text-center none", "targets": 22 },//ProgressPercent 

            { "width": "3%", "className": "text-left", "targets": 23 },
            { "width": "3%", "className": "text-left none", "targets": 24 },
            { "width": "3%", "className": "text-left", "targets": 25 },
            { "width": "3%", "className": "text-center none", "targets": 26 },
            { "width": "3%", "className": "text-center", "targets": 27 },

            { "width": "3%", "className": "text-center none", "targets": 28 },
            { "width": "3%", "className": "text-center none", "targets": 29 },

            { "targets": 2, "render": function (data, type, row) { return DataTableGetElementId('FileTypeId', row['CertFilePlanId'], data); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableGetElementId('SiteId', row['CertFilePlanId'], data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetElementId('LSId', row['CertFilePlanId'], data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGetElementId('BagContainerId', row['CertFilePlanId'], data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetElementId('StationNumber', row['CertFilePlanId'], data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetElementId('LaneName', row['CertFilePlanId'], data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetElementId('PdvName', row['CertFilePlanId'], data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGetElementId('BillingId', row['CertFilePlanId'], data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGetElementId('CategoryId', row['CertFilePlanId'], data); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGetElementId('DhmValueStartId', row['CertFilePlanId'], GetDhmValueNullableFromDataTableDate(data)); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGetElementId('DhmValueEndId', row['CertFilePlanId'], GetDhmValueNullableFromDataTableDate(data)); } },
            { "targets": 13, "render": function (data, type, row) { return GetHmFromDataTableDate(data) } },
            { "targets": 14, "render": function (data, type, row) { return data; } },
            { "targets": 15, "render": function (data, type, row) { return data; } },

            { "targets": 16, "render": function (data, type, row) { return data; } },
            { "targets": 17, "render": function (data, type, row) { return data; } },

            { "targets": 18, "render": function (data, type, row) { return DataTableGetElementId('StatusId', row['CertFilePlanId'], data); } },
            {
                "targets": 19, "render": function (data, type, row) {
                    var online = '<span class="fa fa-circle" style="' +
                        'font-size: 8px;' +
                        'margin-right: 4px;' +
                        'background: #fe1200;' +
                        'margin: -2px 0 0 -2px;' +
                        'border-radius: 50%;' +
                        'color: #fe1200;' +
                        'margin-top: 8px;' +
                        '"></span>';

                    if (row['IsRunning']) {
                        online = '<span class="fa fa-circle" style="' +
                            'font-size: 8px;' +
                            'margin-right: 4px;' +
                            'background: #5cb85c;' +
                            'margin: -2px 0 0 -2px;' +
                            'border-radius: 50%;' +
                            'color: #5cb85c;' +
                            'margin-top: 8px;' +
                            '"></span>';
                    }

                    return online + ' ' + DataTableGetButton('CertFilePlanRecover', row['CertFilePlanId'], 'fas fa-step-backward', '0048ff');
                }
            },

            {
                "targets": 20, "render": function (data, type, row) {

                    if (row['IsFinnished'] == true) {
                        return DataTableProgressBarGet(row['CertFilePlanId'], 1, 1)
                    }
                    else {
                        return DataTableProgressBarGet(row['CertFilePlanId'], 0, 0);
                    }

                }
            },
            { "targets": 21, "render": function (data, type, row) { return DataTableGetElementId('LinesNumberId', row['CertFilePlanId'], 1); } },
            {
                "targets": 22, "render": function (data, type, row) {

                    if (row['IsFinnished'] == true) {
                        return DataTableProgressPercentGet(row['CertFilePlanId'], 1, 1);
                    }
                    else {
                        return DataTableProgressPercentGet(row['CertFilePlanId'], 1, 0);
                    }

                }
            },

            { "targets": 23, "render": function (data, type, row) { return data; } },
            { "targets": 24, "render": function (data, type, row) { return data; } },

            { "targets": 25, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 26, "render": function (data, type, row) { return DataTableThreadProgressBarGet(data, row['ThreadTotal'], row['ThreadDone']); } },
            { "targets": 27, "render": function (data, type, row) { return data; } },

            { "targets": 28, "render": function (data, type, row) { return DataTableGetButton('CertFileThreadSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 29, "render": function (data, type, row) { return DataTableGetButton('CertFilePlanDelete', data, 'far fa-trash-alt', 'fe1200'); } },

        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 30,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {

            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //IntTotal1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //IntTotal4 = api.column(14).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(5).footer()).html(numShortFormat(IntTotal1));
            //$(api.column(6).footer()).html(numShortFormat(IntTotal2));
            //$(api.column(7).footer()).html(numShortFormat(IntTotal3));

            //$(api.column(14).footer()).html(numShortFormat(IntTotal4) + ' Min');

            //if (IntTotal3 !== 0)
            //    $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numShortFormat(IntTotal3) + '</span>');
            //else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numShortFormat(IntTotal3) + '</span>');
        }
    });
}


function CertFileZipVisualize(Id, IsPrincipal) {

    var ActionBtnId = 'CertFileZipVisualizeBtnId' + Id;
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    CertTaskVisualizeZipGet(ActionBtnId, Icon, Id, IsPrincipal);
}

function CertTaskVisualizeZipGet(ActionBtnId, Icon, ParamId) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    ParamMessageReset();

    var Pattern = 'CertFileZip';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertFileZipVisualize",
            "type": "GET",
            "datatype": "json",
            "data": {
                "ParamId": ParamId
            }
        },
        "columns": [
            { "data": "LSName" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return data.LSId + ' - ' + data.LSName; } },//1

            { "data": "Type" }, //2
            { "data": "IsZip" },//3

            { "data": "IpAddress" }, //4

            { "data": "DhmValue" }, //5
            { "data": "ZipdataFileName" },//6        
            { "data": "FileSize" },//7
            
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.IpAddress; } },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.IpAddress; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.IpAddress; } },//10
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },

            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },

            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(data); } },

            { "targets": 4, "render": function (data, type, row) { return data; } },

            { "targets": 5, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            {
                "targets": 8, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data0 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return data0 + data1;
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertFileZipDownload', data, 'fas fa-download', '0048ff'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGetButton('CertFileZipDelete', data, 'far fa-trash-alt', '0048ff'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //DoubleTotal1 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //DoubleTotal2 = api.column(25).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(10).footer()).html(numFormat(DoubleTotal1));
            //$(api.column(25).footer()).html(numFormat(DoubleTotal2));

            //$(api.column(8).footer()).html(numShortFormat(IntTotal1));
            //$(api.column(10).footer()).html(numShortFormat(IntTotal2));
        }
    });
}


function CertTaskVisualizeLogsGet(ActionBtnId, Icon, ParamId) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    ParamMessageReset();

    var Pattern = 'CertFileLogs';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertFileLogsVisualize",
            "type": "GET",
            "datatype": "json",
            "data": {
                "ParamId": ParamId
            }
        },
        "columns": [
            { "data": "LogId" }, //0
            { "data": "DhmValue" },//1
            { "data": "ServerPort" },//2
            { "data": "LogSubject" },//3            

            { "data": "Issue" },//4
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center none", "targets": 4 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            { "targets": 4, "render": function (data, type, row) { return data; } },
            //{
            //    "targets": 4, "render": function (data, type, row) {
            //        return DataTableButtonGet('CertFileLogsDownload', data, '\'' + row['FileName'] + '\'' + ', \'' + row['ServerName'] + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
            //    }
            //},
            //{
            //    "targets": 5, "render": function (data, type, row) {
            //        return DataTableButtonGet('CertFileLogsDelete', data, '\'' + row['FileName'] + '\'' + ', \'' + row['ServerName'] + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
            //    }
            //},
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //DoubleTotal1 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //DoubleTotal2 = api.column(25).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(10).footer()).html(numFormat(DoubleTotal1));
            //$(api.column(25).footer()).html(numFormat(DoubleTotal2));

            //$(api.column(8).footer()).html(numShortFormat(IntTotal1));
            //$(api.column(10).footer()).html(numShortFormat(IntTotal2));
        }
    });
}


function CertFileMsgVisualize(Id, ServerType) {

    var ActionBtnId = 'CertFileMsgVisualizeBtnId' + Id;
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    CertTaskVisualizeMsgGet(ActionBtnId, Icon, Id, ServerType);
}


function CertTaskVisualizeMsgGet(ActionBtnId, Icon, ParamId) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    var Pattern = '';

    Pattern = 'CertFileMsg';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertFileMsgVisualize",
            "type": "GET",
            "datatype": "json",
            "data": {
                "ParamId": ParamId
            }
        },
        "columns": [
            { "data": "LSName" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName; } },//1
            { "data": "Type" }, //2
            { "data": "IsMsg" }, //3

            { "data": "IpAddress" }, //4

            { "data": "DhmValue" }, //5
            { "data": "MsgFileName" },//6    
            { "data": "FileSize" },//7

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.IpAddress; } },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.IpAddress; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.IpAddress; } },//10
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },

            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },

            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(data); } },

            { "targets": 4, "render": function (data, type, row) { return data; } },

            { "targets": 5, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            {
                "targets": 8, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data0 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '04';
                    var FileTypeId = '4A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return data0 + data1;
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertFileMsgDownload', data, 'fas fa-download', '0048ff'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGetButton('CertFileMsgDelete', data, 'far fa-trash-alt', '0048ff'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //DoubleTotal1 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //DoubleTotal2 = api.column(25).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(10).footer()).html(numFormat(DoubleTotal1));
            //$(api.column(25).footer()).html(numFormat(DoubleTotal2));

            //$(api.column(8).footer()).html(numShortFormat(IntTotal1));
            //$(api.column(10).footer()).html(numShortFormat(IntTotal2));
        }
    });
}



function CertTaskVisualizeImageGet(ActionBtnId, Icon, ParamId) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    var Pattern = '';

    Pattern = 'CertFileImage';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertFileImageVisualize",
            "type": "GET",
            "datatype": "json",
            "data": {
                "ParamId": ParamId
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return data.LSId + ' - ' + data.LSName; } },//1
            { "data": "IsPrincipal" }, //2
            { "data": "StationName" }, //3

            { "data": "FileTypeName" }, //4
            { "data": "DhmValue" }, //5
            { "data": "MsgFileName" },//6            
            { "data": "FileSize" },//7
            { "mData": function vehicle(data, type, dataToSet) { return data.MsgFileName + data.IpAddress; } },//8
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "targets": 5, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertFileMsgDownload', data, 'fas fa-download', '0048ff'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //DoubleTotal1 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //DoubleTotal2 = api.column(25).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(10).footer()).html(numFormat(DoubleTotal1));
            //$(api.column(25).footer()).html(numFormat(DoubleTotal2));

            //$(api.column(8).footer()).html(numShortFormat(IntTotal1));
            //$(api.column(10).footer()).html(numShortFormat(IntTotal2));
        }
    });
}

function CertFileAddDisplay(CertFilePlanId) {
    var ActionBtnId = 'CertFileAutoAddBtnId';
    var Icon = 'fas fa-eye';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'CertFilePlan';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    HideReport('CertFileThread' + 'TableReportId');
    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            CertFilePlay(CertFilePlanId);            
        },
        "ajax": {
            "url": "/Cert/CertFileAddDisplay",
            "type": "GET",
            "datatype": "json",
            "data": {
                CertFilePlanId: CertFilePlanId
            }
        },
        "columns": [
            { "data": "TaskName" },//0
            { "data": "SourceName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.FileTypeId + '-' + data.FileTypeName; } },//2
            { "data": "RegionId" },//3
            { "data": "LSId" },//4
            { "data": "AxleId" },//5
            { "data": "StationNumber" },//6
            { "data": "LaneName" },//7
            { "data": "PdvId" },//8
            { "data": "BillingId" },//9
            { "data": "CategoryId" },//10

            { "data": "DhmValueStart" },//11    
            { "data": "DhmValueEnd" },//12
            { "data": "DhmPlan" },//13
            { "data": "Periodicity" },//14
            { "data": "PeriodicityHour" },//15

            { "data": "AddDaysStart" },//16
            { "data": "AddDaysEnd" },//17

            { "data": "Statut" },//18
            { "data": "CertFilePlanId" },//19

            { "data": "CertFileId" },//20
            { "data": "CertFileId" },//21
            { "data": "CertFileId" },//22

            { "data": "LastName" },//23
            { "data": "FirstName" },//24
            { "data": "DhmCreation" },//25               
            { "data": "CertFilePlanId" },//26
            { "data": "ServerPort" },//27  

            { "data": "CertFilePlanId" },//28
            { "data": "CertFilePlanId" },//29
            { "data": "CertFilePlanId" },//30
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-center", "targets": 0 },//TaskName
            { "width": "5%", "className": "text-center", "targets": 1 },//SourceName
            { "width": "5%", "className": "text-center", "targets": 2 },//FileTypeId
            { "width": "3%", "className": "text-center", "targets": 3 },//SiteId  
            { "width": "3%", "className": "text-center", "targets": 4 },//LSId
            { "width": "3%", "className": "text-center", "targets": 5 },//BagContainerId
            { "width": "3%", "className": "text-center", "targets": 6 },//StationNumber          
            { "width": "3%", "className": "text-center", "targets": 7 },//LaneName  
            { "width": "3%", "className": "text-center none", "targets": 8 },//PdvName  
            { "width": "3%", "className": "text-center", "targets": 9 },//BillingId
            { "width": "3%", "className": "text-center none", "targets": 10 },//CategoryId

            { "width": "3%", "className": "text-center", "targets": 11 },//DhmValueStart  
            { "width": "3%", "className": "text-center", "targets": 12 },//DhmValueEnd  
            { "width": "3%", "className": "text-center none", "targets": 13 },//DhmPlan 

            { "width": "3%", "className": "text-center none", "targets": 14 },//Periodicity
            { "width": "3%", "className": "text-center none", "targets": 15 },//Periodicity

            { "width": "3%", "className": "text-center none", "targets": 16 },//
            { "width": "3%", "className": "text-center none", "targets": 17 },//

            { "width": "0%", "className": "text-center none", "targets": 18 },//Statut   
            { "width": "3%", "className": "text-center", "targets": 19 },//CertFilePlay  

            { "width": "3%", "className": "text-center none", "targets": 20 },//ProgressBar
            { "width": "3%", "className": "text-center", "targets": 21 },//LinesNumberId
            { "width": "8%", "className": "text-right", "targets": 22 },//ProgressPercent 

            { "width": "3%", "className": "text-left", "targets": 23 },
            { "width": "3%", "className": "text-left none", "targets": 24 },
            { "width": "3%", "className": "text-left", "targets": 25 },
            { "width": "8%", "className": "text-center", "targets": 26 },
            { "width": "3%", "className": "text-center none", "targets": 27 },

            { "width": "3%", "className": "text-center", "targets": 28 },
            { "width": "3%", "className": "text-center none", "targets": 29 },
            { "width": "3%", "className": "text-center", "targets": 30 },

            { "targets": 2, "render": function (data, type, row) { return DataTableGetElementId('FileTypeId', row['CertFilePlanId'], DataTableStringGet(data, 20)); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableGetElementId('RegionId', row['CertFilePlanId'], data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetElementId('LSId', row['CertFilePlanId'], data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGetElementId('AxleId', row['CertFilePlanId'], data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetElementId('StationNumber', row['CertFilePlanId'], data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetElementId('LaneName', row['CertFilePlanId'], data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetElementId('PdvName', row['CertFilePlanId'], data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGetElementId('BillingId', row['CertFilePlanId'], data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGetElementId('CategoryId', row['CertFilePlanId'], data); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGetElementId('DhmValueStartId', row['CertFilePlanId'], GetDhmValueNullableFromDataTableDate(data)); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGetElementId('DhmValueEndId', row['CertFilePlanId'], GetDhmValueNullableFromDataTableDate(data)); } },
            { "targets": 13, "render": function (data, type, row) { return GetHmFromDataTableDate(data) } },
            { "targets": 14, "render": function (data, type, row) { return data; } },
            { "targets": 15, "render": function (data, type, row) { return data; } },

            { "targets": 16, "render": function (data, type, row) { return data; } },
            { "targets": 17, "render": function (data, type, row) { return data; } },

            { "targets": 18, "render": function (data, type, row) { return DataTableGetElementId('StatusId', row['CertFilePlanId'], data); } },
            {
                "targets": 19, "render": function (data, type, row) {

                    if (row['IsFinnished'] == true) {
                        return DataTableGetButton('CertFilePlay', row['CertFilePlanId'], 'fas fa-check-circle', '0048ff');
                    }
                    else {
                        return DataTableGetButton('CertFilePlay', row['CertFilePlanId'], 'far fa-play-circle', '0048ff');
                    }
                    //return '';
                }
            },
            { "targets": 20, "render": function (data, type, row) { return ''; } },
            { "targets": 21, "render": function (data, type, row) { return DataTableGetElementId('LinesNumberId', row['CertFilePlanId'], ''); } },
            {
                "targets": 22, "render": function (data, type, row) {
                    if (row['IsFinnished'] == true) {
                        return DataTableProgressionGet(row['CertFilePlanId'], 1, 1);
                    }
                    else {
                        return DataTableProgressionGet(row['CertFilePlanId'], 1, 0);
                    }
                }
            },
            { "targets": 23, "render": function (data, type, row) { return data; } },
            { "targets": 24, "render": function (data, type, row) { return data; } },

            { "targets": 25, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 26, "render": function (data, type, row) { return DataTableThreadProgressBarGet(data, row['ThreadTotal'], row['ThreadDone']); } },
            { "targets": 27, "render": function (data, type, row) { return data; } },

            { "targets": 28, "render": function (data, type, row) { return DataTableGetButton('CertFileThreadSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 29, "render": function (data, type, row) { return DataTableGetButton('CertFilePlanDelete', data, 'far fa-trash-alt', 'fe1200'); } },
            { "targets": 30, "render": function (data, type, row) { return data; } },
        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {

            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //IntTotal1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //IntTotal4 = api.column(14).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(5).footer()).html(numShortFormat(IntTotal1));
            //$(api.column(6).footer()).html(numShortFormat(IntTotal2));
            //$(api.column(7).footer()).html(numShortFormat(IntTotal3));

            //$(api.column(14).footer()).html(numShortFormat(IntTotal4) + ' Min');

            //if (IntTotal3 !== 0)
            //    $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numShortFormat(IntTotal3) + '</span>');
            //else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numShortFormat(IntTotal3) + '</span>');
        }
    });
}

function CertTrxLaneHomeOpen() {
    ShowReport('HomeReportId');

    HideReport('ParamReportId');

    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationId');
    ParamResetDropDownList('LaneName');
    HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
    //HtmlDropDownListWithInputFill('CtrId', '0', '/Param/ParamCtrsGet', 'CtrId', 'CtrName', 'Fin de poste');

    ParamGetMp();
    ParamGetObsTick();
    ParamGetObsMp();
    ParamGetObsSequ();
    ParamGetObsPass();
    ParamGetObsOcr();
    ParamGetTrxLaneFilter();

    HideReport('CertTrxLanePeriod' + 'TableReportId');
    HideReport('CertTrxLaneCex' + 'TableReportId');
    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    document.getElementById('MenuBarId0').style.color = "blue";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
    document.getElementById('MenuBarId5').style.color = "grey";
}

//function CertTrxLaneOpen() {
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');

//    ShowReport('BagContainerId' + 'Parent');
//    ShowReport('StationId' + 'Parent');
//    ShowReport('LaneName' + 'Parent');
//    ShowReport('IsGap' + 'Parent');
//    ShowReport('BillingId' + 'Parent');
//    ShowReport('ObsPassId' + 'Parent');
//    ShowReport('ObsTickId' + 'Parent');
//    ShowReport('ObsMpId' + 'Parent');
//    ShowReport('ObsSequId' + 'Parent');
//    ShowReport('ObsOcrId' + 'Parent');
//    ShowReport('TrxLaneFilterId' + 'Parent');

//    ShowReport('CashierNumberId' + 'Parent');
//    ShowReport('ProductNumberId' + 'Parent');

//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertTrxLaneDisplay()");
//    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
//    $('#ParamActionTextId').text('Afficher');

//    HideReport('CertTrxLanePeriod' + 'TableReportId');
//    HideReport('CertTrxLaneCex' + 'TableReportId');
//    HideReport('CertTrxLaneStation' + 'TableReportId');
//    HideReport('CertTrxLaneLane' + 'TableReportId');
//    HideReport('CertTrxLane' + 'TableReportId');

//    document.getElementById('MenuBarId0').style.color = "grey";
//    document.getElementById('MenuBarId1').style.color = "blue";
//    document.getElementById('MenuBarId2').style.color = "grey";
//    document.getElementById('MenuBarId3').style.color = "grey";
//    document.getElementById('MenuBarId4').style.color = "grey";
//    document.getElementById('MenuBarId5').style.color = "grey";
//}


function CertTrxLaneLaneOpen() {
    HideReport('HomeReportId');

    ShowReport('ParamReportId');

    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationId' + 'Parent');
    ShowReport('LaneName' + 'Parent');
    HideReport('IsGap' + 'Parent');
    HideReport('BillingId' + 'Parent');
    HideReport('ObsPassId' + 'Parent');
    HideReport('ObsTickId' + 'Parent');
    HideReport('ObsMpId' + 'Parent');
    HideReport('ObsSequId' + 'Parent');
    HideReport('ObsOcrId' + 'Parent');
    HideReport('TrxLaneFilterId' + 'Parent');

    HideReport('CashierNumberId' + 'Parent');
    HideReport('ProductNumberId' + 'Parent');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertTrxLaneLaneDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    HideReport('CertTrxLanePeriod' + 'TableReportId');
    HideReport('CertTrxLaneCex' + 'TableReportId');
    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "blue";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
    document.getElementById('MenuBarId5').style.color = "grey";
}

function CertTrxLaneStationOpen() {

    HideReport('HomeReportId');

    ShowReport('ParamReportId');

    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationId' + 'Parent');
    HideReport('LaneName' + 'Parent');
    ShowReport('IsGap' + 'Parent');
    HideReport('BillingId' + 'Parent');
    HideReport('ObsPassId' + 'Parent');
    HideReport('ObsTickId' + 'Parent');
    HideReport('ObsMpId' + 'Parent');
    HideReport('ObsSequId' + 'Parent');
    HideReport('ObsOcrId' + 'Parent');
    ShowReport('TrxLaneFilterId' + 'Parent');

    HideReport('CashierNumberId' + 'Parent');
    HideReport('ProductNumberId' + 'Parent');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertTrxLaneStationDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    HideReport('CertTrxLanePeriod' + 'TableReportId');
    HideReport('CertTrxLaneCex' + 'TableReportId');
    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "blue";
    document.getElementById('MenuBarId4').style.color = "grey";
    document.getElementById('MenuBarId5').style.color = "grey";
}

function CertTrxLaneCexOpen() {

    HideReport('HomeReportId');

    ShowReport('ParamReportId');

    HideReport('BagContainerId' + 'Parent');
    HideReport('StationId' + 'Parent');
    HideReport('LaneName' + 'Parent');
    HideReport('IsGap' + 'Parent');
    HideReport('BillingId' + 'Parent');
    HideReport('ObsPassId' + 'Parent');
    HideReport('ObsTickId' + 'Parent');
    HideReport('ObsMpId' + 'Parent');
    HideReport('ObsSequId' + 'Parent');
    HideReport('ObsOcrId' + 'Parent');
    HideReport('TrxLaneFilterId' + 'Parent');

    HideReport('CashierNumberId' + 'Parent');
    HideReport('ProductNumberId' + 'Parent');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertTrxLaneCexDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    HideReport('CertTrxLanePeriod' + 'TableReportId');
    HideReport('CertTrxLaneCex' + 'TableReportId');
    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "blue";
    document.getElementById('MenuBarId5').style.color = "grey";
}

function CertTrxLanePeriodOpen() {

    HideReport('HomeReportId');

    ShowReport('ParamReportId');

    HideReport('BagContainerId' + 'Parent');
    HideReport('StationId' + 'Parent');
    HideReport('LaneName' + 'Parent');
    HideReport('IsGap' + 'Parent');
    HideReport('BillingId' + 'Parent');
    HideReport('ObsPassId' + 'Parent');
    HideReport('ObsTickId' + 'Parent');
    HideReport('ObsMpId' + 'Parent');
    HideReport('ObsSequId' + 'Parent');
    HideReport('ObsOcrId' + 'Parent');
    HideReport('CashierNumberId' + 'Parent');
    HideReport('ProductNumberId' + 'Parent');
    HideReport('TrxLaneFilterId' + 'Parent');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertTrxLanePeriodDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    HideReport('CertTrxLanePeriod' + 'TableReportId');
    HideReport('CertTrxLaneCex' + 'TableReportId');
    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
    document.getElementById('MenuBarId5').style.color = "blue";
}

function CertTrxLaneGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    HideReport('CertTrxLaneTableReportId');
    ParamMessageReset();

    //var CerTrxLaneHourFlag = 'none';
    var Responsive = true;
    //if (TableSource == 'CertTrxLaneHour') {
    //    Responsive = false;
    //}
    $('#CertTrxLaneTableId').DataTable().destroy();
    $('#CertTrxLaneTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport('CertTrxLaneTableReportId');
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id,
                "TableSource": TableSource
            }
        },
        "columns": [
            { "data": "SiteId" }, //0
            { "data": "StationNumber" }, //1
            { "data": "LaneName" }, //2 
            { "data": "BillingId" },//3
            { "data": "DhmValue" },//4
            { "data": "TrxNumber" }, //5
            { "data": "TrxIndex" }, //6
            { "data": "PartialPrice" },//7
            { "data": "ModeName" },//8
            { "data": "OctalCode" },//9
            { "data": "StationNumberO" },//10

            { "data": "TrxLane" }, //11
            { "data": "TrxLS" }, //12
            { "data": "TrxZip" }, //13
            { "data": "TrxMsg" }, //14
            { "data": "TrxCe" }, //15

            { "data": "CertTrxLaneInterfaceRowId" },//16 SearchLane
            { "data": "CertTrxLaneInterfaceRowId" },//17 SearchMsg
            { "data": "CertTrxLaneInterfaceRowId" },//18 SearchZip

            { "mData": function vehicle(data, type, dataToSet) { return data.CertTrxLaneInterfaceRowId + '0004'; } },//19 UploadLane
            { "mData": function vehicle(data, type, dataToSet) { return data.CertTrxLaneInterfaceRowId + '0005'; } },//20 UploadZip
            { "mData": function vehicle(data, type, dataToSet) { return data.CertTrxLaneInterfaceRowId + '0006'; } },//21 UploadMsg
            { "mData": function vehicle(data, type, dataToSet) { return data.CertTrxLaneInterfaceRowId + '0007'; } },//22 UploadCe
            { "mData": function vehicle(data, type, dataToSet) { return data.CertTrxLaneInterfaceRowId + '0008'; } },//23 UploadLS

            { "mData": function vehicle(data, type, dataToSet) { return data.CertTrxLaneInterfaceRowId + '0009'; } },//24 GenerateMsg
            { "mData": function vehicle(data, type, dataToSet) { return data.CertTrxLaneInterfaceRowId + '0010'; } },//25 GenerateZip
            { "mData": function vehicle(data, type, dataToSet) { return data.CertTrxLaneInterfaceRowId + '0011'; } },//26 VisualizeMsg
            { "mData": function vehicle(data, type, dataToSet) { return data.CertTrxLaneInterfaceRowId + '0012'; } },//27 VisualizeZip
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },
            { "width": "3%", "className": "text-center", "targets": 15 },

            { "width": "3%", "className": "text-center", "targets": 16 },
            { "width": "3%", "className": "text-center", "targets": 17 },
            { "width": "3%", "className": "text-center", "targets": 18 },

            { "width": "3%", "className": "text-center", "targets": 19 },
            { "width": "3%", "className": "text-center", "targets": 20 },
            { "width": "3%", "className": "text-center", "targets": 21 },
            { "width": "3%", "className": "text-center", "targets": 22 },
            { "width": "3%", "className": "text-center", "targets": 23 },

            { "width": "3%", "className": "text-center", "targets": 24 },
            { "width": "3%", "className": "text-center", "targets": 25 },
            { "width": "3%", "className": "text-center", "targets": 26 },
            { "width": "3%", "className": "text-center", "targets": 27 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return DataTableDhmValueFromRowGet(row); } },
            { "targets": 5, "render": function (data, type, row) { return data; } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return data; } },
            { "targets": 9, "render": function (data, type, row) { return data; } },
            { "targets": 10, "render": function (data, type, row) { return data; } },

            { "targets": 11, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 13, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 14, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 15, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },

            { "targets": 16, "render": function (data, type, row) { return DataTableButtonGet('CertRecoDataSearch', data + '0', '34,' + data + ',0', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-search btn-icon-cl gc-c1-cl', ''); } },//Lane
            { "targets": 17, "render": function (data, type, row) { return DataTableButtonGet('CertRecoDataSearch', data + '1', '54,' + data + ',1', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-search btn-icon-cl gc-c1-cl', ''); } },//Zip
            { "targets": 18, "render": function (data, type, row) { return DataTableButtonGet('CertRecoDataSearch', data + '2', '44,' + data + ',2', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-search btn-icon-cl gc-c1-cl', ''); } },//Msg

            {
                "targets": 19, "render": function (data, type, row) {
                    var TaskId = '00';//Upload
                    var SourceId = '03';//Lane
                    var FileTypeId = '34';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 20, "render": function (data, type, row) {
                    var TaskId = '00';//Upload
                    var SourceId = '05';//Zip
                    var FileTypeId = '54';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 21, "render": function (data, type, row) {
                    var TaskId = '00';//Upload
                    var SourceId = '04';//Msg
                    var FileTypeId = '44';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 22, "render": function (data, type, row) {
                    var TaskId = '00';//Upload
                    var SourceId = '07';//Ce
                    var FileTypeId = 'Y8';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 23, "render": function (data, type, row) {
                    var TaskId = '00';//Upload
                    var SourceId = '28';//LS
                    var FileTypeId = 'L1';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Generate
            {
                "targets": 24, "render": function (data, type, row) {
                    var TaskId = '01';//Generate
                    var SourceId = '04';//Msg
                    var FileTypeId = '44';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 25, "render": function (data, type, row) {
                    var TaskId = '01';//Generate
                    var SourceId = '05';//Zip
                    var FileTypeId = '54';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            {
                "targets": 26, "render": function (data, type, row) {
                    var TaskId = '03';//Visualize
                    var SourceId = '04';//Msg
                    var FileTypeId = '44';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 27, "render": function (data, type, row) {
                    var TaskId = '03';//Visualize
                    var SourceId = '05';//Zip
                    var FileTypeId = '54';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 20,
        "processing": false,
        "responsive": Responsive,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));

            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(7).footer()).html(numFormat(DoubleTotal1));

            //$(api.column(9).footer()).html(numShortFormat(IntTotal2));
        }
    });
}

function CertTrxLaneOldGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    HideReport('CertTrxLaneTableReportId');
    ParamMessageReset();

    //var CerTrxLaneHourFlag = 'none';
    var Responsive = true;
    //if (TableSource == 'CertTrxLaneHour') {
    //    Responsive = false;
    //}
    $('#CertTrxLaneTableId').DataTable().destroy();
    $('#CertTrxLaneTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport('CertTrxLaneTableReportId');
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id,
                "TableSource": TableSource
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "data": "StationNumber" }, //1
            { "data": "LaneName" }, //2 
            { "data": "BillingId" },//3
            { "data": "DhmValue" },//4
            { "data": "TrxNumber" }, //5
            { "data": "TrxIndex" }, //6
            { "data": "CashierNumber" },//7
            { "data": "PartialPrice" },//8

            { "data": "TrxLane" }, //9
            { "data": "TrxZip" }, //10
            { "data": "TrxMsg" }, //11
            { "data": "TrxCe" }, //12

            { "data": "ProductNumber" },//13         
            { "data": "ObsPassId" },//14
            { "data": "ObsTickId" },//15
            { "data": "ObsMpId" },//16
            { "data": "ObsSequId" },//17
            { "data": "ObsOcrId" },//18
            { "data": "DhmValuePostStart" },//19
            { "data": "ModeName" },//20

            { "data": "OctalCode" },//21
            { "data": "NetworkIdO" },//22
            { "data": "StationNumberO" },//23

            { "data": "RowIdTrxLane" },//24
            { "data": "RowIdTrxLane" },//25
            { "data": "RowIdTrxLane" },//26
            { "data": "RowIdTrxLane" },//27

            { "data": "DhmValueO" },//28
            { "data": "LicensePlate" },//29
            { "data": "LicensePlateO" },//30
            { "data": "RowIdTrxLane" },//31
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//32

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//33 Lane
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//34 Zip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//35 Msg
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//36 Ce

            { "data": "RowIdTrxLane" },//37
            { "data": "RowIdTrxLane" },//38
            { "data": "RowIdTrxLane" },//39
            { "data": "RowIdTrxLane" },//40
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-left none", "targets": 13 },
            { "width": "3%", "className": "text-left none", "targets": 14 },
            { "width": "3%", "className": "text-left none", "targets": 15 },
            { "width": "3%", "className": "text-left none", "targets": 16 },
            { "width": "3%", "className": "text-left none", "targets": 17 },
            { "width": "3%", "className": "text-left none", "targets": 18 },
            { "width": "3%", "className": "text-center none", "targets": 19 },
            { "width": "3%", "className": "text-center none", "targets": 20 },

            { "width": "3%", "className": "text-center", "targets": 21 },
            { "width": "3%", "className": "text-center none", "targets": 22 },
            { "width": "3%", "className": "text-center none", "targets": 23 },

            { "width": "3%", "className": "text-center", "targets": 24 },
            { "width": "3%", "className": "text-center", "targets": 25 },
            { "width": "3%", "className": "text-center", "targets": 26 },
            { "width": "3%", "className": "text-center", "targets": 27 },

            { "width": "3%", "className": "text-center", "targets": 28 },
            { "width": "3%", "className": "text-left", "targets": 29 },
            { "width": "3%", "className": "text-left none", "targets": 30 },
            { "width": "3%", "className": "text-left", "targets": 31 },
            { "width": "3%", "className": "text-center", "targets": 32 },

            { "width": "3%", "className": "text-center none", "targets": 33 },
            { "width": "3%", "className": "text-center none", "targets": 34 },
            { "width": "3%", "className": "text-center none", "targets": 35 },
            { "width": "3%", "className": "text-center none", "targets": 36 },

            { "width": "3%", "className": "text-center none", "targets": 37 },
            { "width": "3%", "className": "text-center none", "targets": 38 },

            { "width": "3%", "className": "text-center none", "targets": 39 },
            { "width": "3%", "className": "text-center none", "targets": 40 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return DataTableDhmValueFromRowGet(row); } },
            { "targets": 5, "render": function (data, type, row) { return data; } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 9, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 10, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 11, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },

            { "targets": 13, "render": function (data, type, row) { return data; } },
            { "targets": 14, "render": function (data, type, row) { return data; } },
            { "targets": 15, "render": function (data, type, row) { return data; } },
            { "targets": 16, "render": function (data, type, row) { return data; } },
            { "targets": 17, "render": function (data, type, row) { return data; } },
            { "targets": 18, "render": function (data, type, row) { return data; } },
            { "targets": 19, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 20, "render": function (data, type, row) { return data; } },

            { "targets": 21, "render": function (data, type, row) { return data; } },
            { "targets": 22, "render": function (data, type, row) { return data; } },
            { "targets": 23, "render": function (data, type, row) { return data; } },

            { "targets": 24, "render": function (data, type, row) { return DataTableButtonGet('CertRecoDataSearch', data + '0', '34,' + data + ',0', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-search btn-icon-cl gc-c1-cl', ''); } },
            { "targets": 25, "render": function (data, type, row) { return DataTableButtonGet('CertRecoDataSearch', data + '1', '44,' + data + ',1', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-search btn-icon-cl gc-c1-cl', ''); } },//Msg
            { "targets": 26, "render": function (data, type, row) { return DataTableButtonGet('CertRecoDataSearch', data + '2', '54,' + data + ',2', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-search btn-icon-cl gc-c1-cl', ''); } },//Zip
            { "targets": 27, "render": function (data, type, row) { return DataTableButtonGet('CertRecoDataSearch', data + '3', '34,' + data + ',3', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-search btn-icon-cl gc-c1-cl', ''); } },//

            { "targets": 28, "render": function (data, type, row) { return GetDhmValueNullableFromDataTableDate(data); } },
            { "targets": 29, "render": function (data, type, row) { return data; } },
            { "targets": 30, "render": function (data, type, row) { return data; } },
            { "targets": 31, "render": function (data, type, row) { return CertLicensePlateIsCheckedGet('\'' + data + '\'', row['LicensePlate'], row['IsChecked']); } },
            { "targets": 32, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertLaneCtrStationSearch', data, 'CertTrxLane', 'fas fa-eye', '0048ff'); } },

            {
                "targets": 33, "render": function (data, type, row) {
                    var TaskId = '00';//Upload
                    var SourceId = '03';//Lane
                    var FileTypeId = '34';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + TaskId + SourceId + FileTypeId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 34, "render": function (data, type, row) {
                    var TaskId = '00';//Upload
                    var SourceId = '05';//Zip
                    var FileTypeId = '54';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + TaskId + SourceId + FileTypeId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 35, "render": function (data, type, row) {
                    var TaskId = '00';//Upload
                    var SourceId = '04';//Msg
                    var FileTypeId = '44';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + TaskId + SourceId + FileTypeId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 36, "render": function (data, type, row) {
                    var TaskId = '00';//Upload
                    var SourceId = '07';//Ce
                    var FileTypeId = '74';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + TaskId + SourceId + FileTypeId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Generate
            {
                "targets": 37, "render": function (data, type, row) {
                    var TaskId = '01';//Generate
                    var SourceId = '04';//Msg
                    var FileTypeId = '44';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + TaskId + SourceId + FileTypeId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 38, "render": function (data, type, row) {
                    var TaskId = '01';//Generate
                    var SourceId = '05';//Zip
                    var FileTypeId = '54';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + TaskId + SourceId + FileTypeId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            {
                "targets": 39, "render": function (data, type, row) {
                    var TaskId = '03';//Visualize
                    var SourceId = '04';//Msg
                    var FileTypeId = '44';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + TaskId + SourceId + FileTypeId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 40, "render": function (data, type, row) {
                    var TaskId = '03';//Visualize
                    var SourceId = '05';//Zip
                    var FileTypeId = '54';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + TaskId + SourceId + FileTypeId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 20,
        "processing": false,
        "responsive": Responsive,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));

            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(7).footer()).html(numFormat(DoubleTotal1));

            //$(api.column(9).footer()).html(numShortFormat(IntTotal2));
        }
    });
}

function CertLicensePlateIsCheckedGet(RowId, LicensePlate, IsChecked) {
    //alert(LicensePlate);
    if (LicensePlate != '' && LicensePlate != '               ' && LicensePlate != null) {
        var Id = RowId;
        var argument = RowId;
        var text = '';
        var BtnClass = 'dt-btn-cl gc-bc1-cl';
        var SpanClass = '';
        var TextClass = 'dt-text-cl';

        if (IsChecked) {
            SpanClass = 'fas fa-check btn-icon-cl gc-c1-cl';
        }
        else {
            SpanClass = 'fas fa-exclamation-triangle btn-icon-cl gc-c1-cl';
        }
        return DataTableButtonGet('CertLicensePlateIsCheckedCheck', Id, argument, text, BtnClass, SpanClass, TextClass);
    }
    else {
        return '';
    }
}


function CertLicensePlateIsCheckedCheck(Id) {

    var ActionBtnId = new String('CertLicensePlateIsCheckedCheck' + 'BtnId' + Id);

    //Spin
    ActionBtnSpin(ActionBtnId);

    var obj = {};
    obj.Id = Id;
    $.ajax({
        url: "/Cert/CertLicensePlateIsCheckedCheck",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "text",
        async: true,
        success: function (data) {
            var IsChecked = data;
            if (IsChecked == 'True') {
                $('#' + ActionBtnId).find('span').attr('class', 'fas fa-check btn-icon-cl gc-c1-cl');
            }
            else {
                $('#' + ActionBtnId).find('span').attr('class', 'fas fa-exclamation-triangle btn-icon-cl gc-c1-cl');
            }
        }
    });
}

function CertTrxLaneDisplay() {

    var ActionBtnId = 'ParamActionBtnId';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationId = GetElementValue('StationId');
    var LaneName = GetElementValue('LaneName');
    var IsGap = new Boolean($("#IsGap").is(":checked"));

    var BillingId = GetElementValue('BillingId');
    var ObsPassId = GetElementValue('ObsPassId');
    var ObsTickId = GetElementValue('ObsTickId');
    var ObsMpId = GetElementValue('ObsMpId');
    var ObsSequId = GetElementValue('ObsSequId');
    var ObsOcrId = GetElementValue('ObsOcrId');

    var CashierNumber = GetElementValue('CashierNumberId');
    var ProductNumber = GetElementValue('ProductNumberId');
    //var MpAcronym = GetElementValue('MpAcronymId');

    //alert(IsGap);

    if (DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '' &&
        SiteId != null && SiteId != '' &&
        BagContainerId != null && BagContainerId != '' &&
        StationId != null && StationId != '' &&
        LaneName != null && LaneName != '' &&
        IsGap != null &&

        BillingId != null && BillingId != '' &&
        ObsPassId != null && ObsPassId != '' &&
        ObsTickId != null && ObsTickId != '' &&
        ObsMpId != null && ObsMpId != '' &&
        ObsSequId != null && ObsSequId != '' &&
        ObsOcrId != null && ObsOcrId != '' &&

        CashierNumber != null &&
        ProductNumber != null) {

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('CertTrxLaneTableReportId');
        ParamMessageReset();

        CertTrxLaneGet(ActionBtnId,
            DateStringStart,
            DateStringEnd,
            SiteId,
            BagContainerId,
            StationId,
            LaneName,
            IsGap,

            BillingId,
            ObsPassId,
            ObsTickId,
            ObsMpId,
            ObsSequId,
            ObsOcrId,

            CashierNumber,
            ProductNumber
        )

    }
    else {
        ParamMessageErrorDisplay()
    };
}

function CertTrxLaneLaneGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd) {
    HideReport('CertTrxLane' + 'TableReportId');
    ParamMessageReset();

    var Pattern = 'CertTrxLaneLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.LSId + '-' + data.LSName; } },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "TotalZip" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//5 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//6 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//7 Upload

            { "data": "TotalCe" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//9 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//10 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//11 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//12 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//13 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //TrxLane zip
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data0 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return data0 + data1;
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Upload TrxLane Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //TrxLane Ce
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {//Upload TrxLane Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'Y8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 12, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxLaneHourSearch', data, '\'' + data + '\'' + ', \'CertTrxLaneLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total0));

            Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));

            Total2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(10).footer()).html(numFormat(Total2));
        }
    });
}

function CertTrxLaneFullLaneGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd) {
    HideReport('CertTrxLane' + 'TableReportId');
    ParamMessageReset();

    var Pattern = 'CertTrxLaneLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneFullLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "TotalZip" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber + data.LaneName; } },//5 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber + data.LaneName; } },//6 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber + data.LaneName; } },//7 Upload

            { "data": "TotalCe" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber + data.LaneName; } },//9 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber + data.LaneName; } },//10 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber + data.LaneName; } },//11 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber + data.LaneName; } },//12 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.LSId + data.StationNumber + data.LaneName; } },//13 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //TrxLane zip
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--'
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--'
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Upload TrxLane Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '54';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--'
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //TrxLane Ce
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {//Upload TrxLane Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '74';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--'
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 12, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HF';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--'
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxLaneFullHourSearch', data, '\'' + data + '\'' + ', \'CertTrxLaneFullLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total0));

            Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));

            Total2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(10).footer()).html(numFormat(Total2));
        }
    });
}


function CertTrxLaneLaneReceiptGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd) {
    HideReport('CertTrxLane' + 'TableReportId');
    ParamMessageReset();

    var Pattern = 'CertTrxLaneLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "ReceiptZip" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//5 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//6 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//7 Upload

            { "data": "ReceiptCe" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//9 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//10 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//11 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//12 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//13 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //TrxLane zip
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Upload TrxLane Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //TrxLane Ce
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {//Upload TrxLane Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'Y8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableDiffDoubleGet(row['ReceiptZip'], row['ReceiptCe']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGapThresholdGet(row['ReceiptCe'], row['ReceiptZip'], 6, 100); } },

            //Actions            
            {
                "targets": 12, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxLaneHourReceiptSearch', data, '\'' + data + '\'' + ', \'CertTrxLaneLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total0));

            Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));

            Total2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(10).footer()).html(numFormat(Total2));
        }
    });
}

function CertTrxLaneLaneDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTrxLaneLaneGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay('Les dates sont obligatoires');
    };
}

function CertTrxLaneLaneSearch(Id) {
    var ActionBtnId = new String('CertTrxLaneLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);

    CertTrxLaneLaneGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
}

function CertTrxLaneLaneReceiptSearch(Id) {
    var ActionBtnId = new String('CertTrxLaneLaneReceiptSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);

    CertTrxLaneLaneReceiptGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd);
}

function CertRecoDataFromStationSearch(Id) {
    var ActionBtnId = new String('CertRecoDataFromStationSearch' + 'BtnId' + Id);
    var Icon = 'far fa-check-circle btn-icon-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    
    var obj = {};
    obj.DateStringStart = DateStringStart;
    obj.DateStringEnd = DateStringEnd;
    obj.RegionId = RegionId;
    obj.LSId = LSId;
    obj.StationNumber = StationNumber;
    $.ajax({
        url: "/Cert/CertRecoDataFromStationSearch",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            //AdminMusTrackSearch('', 'Param');
        }
    });
}



function CertTrxLaneFullLaneSearch(Id) {
    var ActionBtnId = new String('CertTrxLaneFullLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = new String(Id).substr(8, 2);
    var StationNumber = new String(Id).substr(10, 2);

    CertTrxLaneFullLaneGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd);
}

function CertTrxLaneSearch(Id, TableSource) {
    var ActionBtnId = new String('CertTrxLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    CertTrxLaneGet(ActionBtnId, Icon, Id, TableSource);
}

function CertTrxLaneStationValidate(CertTrxLaneStationValidateId) {
    $('#CertTrxLaneStationValidateBtnId' + CertTrxLaneStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertTrxLaneStationValidateId = CertTrxLaneStationValidateId;

    $.ajax({
        url: "/Cert/CertTrxLaneStationValidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertTrxLaneStationValidateBtnId' + CertTrxLaneStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
            $('#CertTrxLaneStationValidateBtnId' + CertTrxLaneStationValidateId).find('span').attr('style', 'color:#28a745');
            $('#CertTrxLaneStationValidateBtnId' + CertTrxLaneStationValidateId).attr('onclick', 'CertTrxLaneStationUnvalidate(\'' + CertTrxLaneStationValidateId + '\')');
            $('#CertTrxLaneStationValidateBtnId' + CertTrxLaneStationValidateId).attr('id', 'CertTrxLaneStationUnvalidateBtnId' + CertTrxLaneStationValidateId);
        }
    });

}

function CertTrxLaneStationUnvalidate(CertTrxLaneStationValidateId) {
    $('#CertTrxLaneStationUnvalidateBtnId' + CertTrxLaneStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertTrxLaneStationValidateId = CertTrxLaneStationValidateId;

    $.ajax({
        url: "/Cert/CertTrxLaneStationUnvalidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertTrxLaneStationUnvalidateBtnId' + CertTrxLaneStationValidateId).find('span').attr('class', 'fas fa-clock');
            $('#CertTrxLaneStationUnvalidateBtnId' + CertTrxLaneStationValidateId).find('span').attr('style', 'color:#a3a3a3');
            $('#CertTrxLaneStationUnvalidateBtnId' + CertTrxLaneStationValidateId).attr('onclick', 'CertTrxLaneStationValidate(\'' + CertTrxLaneStationValidateId + '\')');
            $('#CertTrxLaneStationUnvalidateBtnId' + CertTrxLaneStationValidateId).attr('id', 'CertTrxLaneStationValidateBtnId' + CertTrxLaneStationValidateId);
        },
        error: function (request, status, error) {
            alert('Veuiller contacter votre administrateur pour dévalider votre journée.');
            $('#CertTrxLaneStationUnvalidateBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
        }
    });

}

function CertTrxLaneCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport("CertTrxLaneCexTableReportId");
    HideReport("CertTrxLaneStationTableReportId");
    HideReport("CertTrxLaneTableReportId");
    HideReport('BarChartReportId');
    HideReport('PieChartReportId');
    ParamMessageReset();

    $('#CertTrxLaneCexTableId').DataTable().destroy();
    $("#CertTrxLaneCexTableId").DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertTrxLaneCexTableReportId");
            //var labels = GetColumnArray('CertReceiptCexTableId', 0);
            //var data1 = GetColumnArray('CertReceiptCexTableId', 3);
            //var data2 = GetColumnArray('CertReceiptCexTableId', 4);
            //var backgroundColor = GetBackgroundColor('CertReceiptCexTableId');
            //DisplayChartBar(labels, data1, data2, "OPE", "CE");
            //DisplayChartDoughnut(labels, backgroundColor, data1)
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "DhmValue" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationHandledNumber + "/" + data.StationsNumber; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.LanesHandledNumber + "/" + data.LanesNumber; } },//3
            { "data": "TrxLane", "render": $.fn.dataTable.render.number(' ', ',', 0) },//4
            { "data": "TrxCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//5
            { "mData": function vehicle(data, type, dataToSet) { return numShortFormat(data.TrxGap); } },//6
            { "data": "CertTrxLaneCexValidateId" },//7 Validate
            { "data": "CertTrxLaneCexValidateId" },//8 Search
            { "data": "DhmModification" },//9
            { "data": "FullName" },//10
            { "data": "IpNumber" },//11
            { "data": "PhoneNumber" }//12
        ],
        "columnDefs": [
            { "width": "10%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "15%", "className": "text-center", "targets": 1 },//DhmValue
            { "width": "10%", "className": "text-center", "targets": 2 },//StationHandledNumber 
            { "width": "10%", "className": "text-center", "targets": 3 },//LanesHandledNumber
            { "width": "10%", "className": "text-right", "targets": 4 },//TrxOpe
            { "width": "10%", "className": "text-right", "targets": 5 },//TrxCe
            { "width": "10%", "className": "text-right", "targets": 6 },//TrxGap
            { "width": "10%", "className": "text-center", "targets": 7 },//Validate
            { "width": "10%", "className": "text-center", "targets": 8 },//Search
            { "width": "0%", "className": "text-center none", "targets": 9 },//DhmModification
            { "width": "0%", "className": "text-center none", "targets": 10 },//FullName
            { "width": "0%", "className": "text-center none", "targets": 11 },//IpNumber
            { "width": "0%", "className": "text-center none", "targets": 12 },//PhoneNumber

            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data) } },
            { "targets": 9, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data) } },

            { "targets": 2, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['StationsGap']); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['LanesGap']); } },

            { "targets": 6, "render": function (data, type, row) { return GetGapNumberFromDataTable(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGetButtonValidateBlock(data, row['TrxGap'], row['IsValid'], 'CertTrxLaneCex'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneStationSearch', data, 'fas fa-cube', '0048ff'); } }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DoubleTotal1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            DoubleTotal2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            DoubleTotal3 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(4).footer()).html(numShortFormat(DoubleTotal1));
            $(api.column(5).footer()).html(numShortFormat(DoubleTotal2));
            $(api.column(6).footer()).html(numShortFormat(DoubleTotal3));

            if (DoubleTotal3 !== 0)
                $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numShortFormat(DoubleTotal3) + '</span>');
            else $(api.column(6).footer()).html('<span  class="badge badge-success">' + numShortFormat(DoubleTotal3) + '</span>');
        }
    });
}

function CertTrxLaneCexDisplay() {
    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        CertTrxLaneCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTrxLaneStationSearch(Id) {

    var ActionBtnId = new String('CertTrxLaneStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertTrxLaneStationGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertTrxLaneFullStationSearch(Id) {

    var ActionBtnId = new String('CertTrxLaneFullStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertTrxLaneFullStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertTrxLanePeriodDisplay() {

    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {

        $("#ParamActionBtnId").find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport("CertTrxLanePeriodTableReportId");
        HideReport("CertTrxLaneCexTableReportId");
        HideReport("CertTrxLaneStationTableReportId");
        HideReport("CertTrxLaneTableReportId");
        //HideReport('BarChartReportId');
        //HideReport('PieChartReportId');
        ParamMessageReset();

        $('#CertTrxLanePeriodTableId').DataTable().destroy();
        $('#CertTrxLanePeriodTableId').DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "initComplete": function (settings, json) {
                $("#ParamActionBtnId").find('span').attr('class', 'fas fa-eye');
                ShowReport("CertTrxLanePeriodTableReportId");

                //var labels = GetColumnArray('CertReceiptPeriodTableId', 0);
                //var data1 = GetColumnArray('CertReceiptPeriodTableId', 5);
                //var data2 = GetColumnArray('CertReceiptPeriodTableId', 6);
                //var backgroundColor = GetBackgroundColor('CertReceiptPeriodTableId');

                //DisplayChartBar(labels, data1, data2, "OPE", "CE");
                //DisplayChartDoughnut(labels, backgroundColor, data1);
            },
            "ajax": {
                "url": "/Cert/CertTrxLanePeriodDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    SiteId: SiteId,
                    DateStringStart: DateStringStart,
                    DateStringEnd: DateStringEnd
                }
            },
            "columns": [
                { "data": "SiteName" },//0
                { "data": "DhmValueStart" },//1
                { "data": "DhmValueEnd" },//2
                { "mData": function vehicle(data, type, dataToSet) { return data.DaysHandledNumber + "/" + data.DaysNumber; } },//3
                { "mData": function vehicle(data, type, dataToSet) { return data.StationsHandledNumber + "/" + data.StationsNumber; } },//4
                { "mData": function vehicle(data, type, dataToSet) { return data.LanesHandledNumber + "/" + data.LanesNumber; } },//5       
                { "data": "TrxLane", "render": $.fn.dataTable.render.number(' ', ',', 0) },//6
                { "data": "TrxCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//7
                { "mData": function vehicle(data, type, dataToSet) { return numShortFormat(data.TrxGap); } },//8
                //{ "data": "TrxGap", "render": $.fn.dataTable.render.number(' ', ',', 0) },//8
                { "data": "CertTrxLaneDaysHandledId" }//9 Search
            ],
            "columnDefs": [
                { "width": "5%", "className": "text-left SiteName", "targets": 0 },//Cex
                { "width": "15%", "className": "text-left", "targets": 1 },// Du
                { "width": "15%", "className": "text-left", "targets": 2 },// Au
                { "width": "5%", "className": "text-center", "targets": 3 },// Jours
                { "width": "5%", "className": "text-center", "targets": 4 },// Gares
                { "width": "5%", "className": "text-center", "targets": 5 },// Voie
                { "width": "20%", "className": "text-right ReceiptTOpeSum", "targets": 6 },// TrxLane
                { "width": "20%", "className": "text-right ReceiptTCeSum", "targets": 7 },// TrxCe
                { "width": "10%", "className": "text-right", "targets": 8 },//TrxGap
                { "width": "5%", "className": "text-center", "targets": 9 },//Search

                { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data) } },
                { "targets": 2, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data) } },

                { "targets": 3, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['DaysGap']); } },
                { "targets": 4, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['StationsGap']); } },
                { "targets": 5, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['LanesGap']); } },

                { "targets": 8, "render": function (data, type, row) { return GetGapNumberFromDataTable(data); } },

                { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneCexSearch', data, 'fas fa-adjust', 'a3a3a3'); } }
            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 100,
            "processing": false,
            "responsive": true,
            "bFilter": true,
            "autoWidth": false,
            "searching": false,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                DoubleTotal1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                DoubleTotal2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                DoubleTotal3 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(6).footer()).html(numShortFormat(DoubleTotal1));
                $(api.column(7).footer()).html(numShortFormat(DoubleTotal2));
                $(api.column(8).footer()).html(numShortFormat(DoubleTotal3));

                if (DoubleTotal3 !== 0)
                    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numShortFormat(DoubleTotal3) + '</span>');
                else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numShortFormat(DoubleTotal3) + '</span>');
            }
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTrxLaneCexSearch(CertTrxLaneCexHandledId) {
    var ActionBtnId = new String('CertTrxLaneCexSearchBtnId' + CertTrxLaneCexHandledId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var DateStringStart = new String(CertTrxLaneCexHandledId).substr(0, 8);
    var DateStringEnd = new String(CertTrxLaneCexHandledId).substr(8, 8);
    var SiteId = new String(CertTrxLaneCexHandledId).substr(16, 2);
    var Icon = 'fas fa-adjust';
    CertTrxLaneCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon);
}

function CertTrxLaneBillingIdGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, LaneName, BillingId, CategoryId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    var Pattern = 'CertTrxLaneBillingId';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneBillingIdGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                BillingId: BillingId,
                CategoryId: CategoryId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.StationName; } },//1
            { "data": "" },//2    

            { "data": "LaneName" },//3
            { "mData": function vehicle(data, type, dataToSet) { return data.BillingId + ' - ' + data.MpNameCe; } },//4

            { "data": "TrxLaneLane" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//6

            { "data": "TrxLaneZip" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//8

            { "data": "TrxLaneMsg" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//10

            { "data": "TrxLaneCe" },//11
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//12

            { "data": "GapAbsolute" },//13
            { "data": "" },//14

            { "data": "Ctr01" },//15
            { "data": "Ctr02" },//16
            { "data": "Ctr03" },//17

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//18
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//19
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right " + max700, "targets": 5 },
            { "width": "3%", "className": "text-left " + max700, "targets": 6 },

            { "width": "3%", "className": "text-right " + max700, "targets": 7 },
            { "width": "3%", "className": "text-left " + max700, "targets": 8 },

            { "width": "3%", "className": "text-right none", "targets": 9 },
            { "width": "3%", "className": "text-left none", "targets": 10 },

            { "width": "3%", "className": "text-right " + max700, "targets": 11 },
            { "width": "3%", "className": "text-left " + max700, "targets": 12 },

            { "width": "3%", "className": "text-right " + max700, "targets": 13 },
            { "width": "3%", "className": "text-right " + max700, "targets": 14 },

            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 15 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 16 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 17 },

            { "width": "3%", "className": "text-center " + max700, "targets": 18 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 19 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), DataTableStringTruncate(data, 30)); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntGet(row['TrxLaneLane']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '03' + '34' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(row['TrxLaneZip']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(row['TrxLaneMsg']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '04' + '44' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(row['TrxLaneCe']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 14, "render": function (data, type, row) {
                    if (row['TrxLaneZip'].toFixed(2) != 0) {
                        var evo = ((row['TrxLaneCe'] - row['TrxLaneZip']) / row['TrxLaneZip']) * 10000;
                        if (evo.toFixed(2) > 6 || evo.toFixed(2) < -6) {
                            return '<span  class="badge badge-danger" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                        else {
                            return '<span class="badge badge-success" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                    }
                    else {
                        return 'NA';
                    }
                }
            },

            { "targets": 15, "render": function (data, type, row) { return GetGapIntFromDataTable(data) } },
            { "targets": 16, "render": function (data, type, row) { return GetGapIntFromDataTable(data) } },
            { "targets": 17, "render": function (data, type, row) { return CertCtrBitGet(data) } },

            { "targets": 18, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertTrxLaneBillingId', 'fas fa-eye', '0048ff'); } },
            { "targets": 19, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneLane', data); } },//Delete
        ],
        "autoWidth": false,
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total1));

            Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total2));

            Total3 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numShortFormat(Total3));

            Total4 = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(11).footer()).html(numShortFormat(Total4));
        }
    });
}

function CertTrxLaneBillingIdSearch(Id) {
    var ActionBtnId = new String('CertTrxLaneBillingIdSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);
    var LaneName = new String(Id).substr(12, 3);
    var Icon = 'fas fa-eye';

    var BillingId = '0';
    var CategoryId = '0';

    if (new String(Id).length >= 17) {
        BillingId = new String(Id).substr(15, 2);
    };

    if (new String(Id).length >= 19) {
        CategoryId = new String(Id).substr(17, 2);
    };

    CertTrxLaneBillingIdGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, LaneName, BillingId, CategoryId, DateStringStart, DateStringEnd);
}

function CertTrxLaneBillingIdHourGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    var Pattern = 'CertTrxLaneBillingIdHour';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneBillingIdHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: TableSource
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.StationName; } },//1
            { "data": "" },//2    

            { "data": "LaneName" },//3
            { "data": "BillingId" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Hour, 2) + 'H00min'; } },//5

            { "data": "TrxLaneLane" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//7

            { "data": "TrxLaneZip" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//9

            { "data": "TrxLaneMsg" },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//11

            { "data": "TrxLaneCe" },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//13

            { "data": "GapAbsolute" },//14
            { "data": "" },//15

            { "data": "Ctr01" },//16
            { "data": "Ctr02" },//17
            { "data": "Ctr03" },//18

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId + GetDigits(data.Hour, 2); } },//19
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//20
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-right ", "targets": 6 },
            { "width": "3%", "className": "text-left ", "targets": 7 },

            { "width": "3%", "className": "text-right ", "targets": 8 },
            { "width": "3%", "className": "text-left ", "targets": 9 },

            { "width": "3%", "className": "text-right ", "targets": 10 },
            { "width": "3%", "className": "text-left ", "targets": 11 },

            { "width": "3%", "className": "text-right ", "targets": 12 },
            { "width": "3%", "className": "text-left ", "targets": 13 },

            { "width": "3%", "className": "text-right ", "targets": 14 },
            { "width": "3%", "className": "text-right ", "targets": 15 },

            { "width": "3%", "className": "text-center none", "targets": 16 },
            { "width": "3%", "className": "text-center none", "targets": 17 },
            { "width": "3%", "className": "text-center none", "targets": 18 },

            { "width": "3%", "className": "text-center", "targets": 19 },
            { "width": "3%", "className": "text-center none", "targets": 20 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), DataTableStringTruncate(data, 30)); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return data; } },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntGet(row['TrxLaneLane']); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '03' + '34' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(row['TrxLaneZip']); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '54';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntGet(row['TrxLaneMsg']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '04' + '44' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(row['TrxLaneCe']); } },
            {
                "targets": 13, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '74';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 14, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 15, "render": function (data, type, row) {
                    if (row['TrxLaneZip'].toFixed(2) != 0) {
                        var evo = ((row['TrxLaneCe'] - row['TrxLaneZip']) / row['TrxLaneZip']) * 10000;
                        if (evo.toFixed(2) > 6 || evo.toFixed(2) < -6) {
                            return '<span  class="badge badge-danger" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                        else {
                            return '<span class="badge badge-success" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                    }
                    else {
                        return 'NA';
                    }
                }
            },

            { "targets": 16, "render": function (data, type, row) { return GetGapIntFromDataTable(data) } },
            { "targets": 17, "render": function (data, type, row) { return GetGapIntFromDataTable(data) } },
            { "targets": 18, "render": function (data, type, row) { return CertCtrBitGet(data) } },

            { "targets": 19, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertTrxLaneBillingIdHour', 'fas fa-eye', '0048ff'); } },
            { "targets": 20, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneLane', data); } },//Delete
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total1));

            Total2 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total2));

            Total3 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(10).footer()).html(numShortFormat(Total3));

            Total4 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(12).footer()).html(numShortFormat(Total4));
        }
    });
}

function CertTrxLaneBillingIdHourSearch(Id, TableSource) {
    var ActionBtnId = new String('CertTrxLaneBillingIdHourSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    CertTrxLaneBillingIdHourGet(ActionBtnId, Icon, Id, TableSource);
}

function CertTrxLaneHourGet(ActionBtnId, Icon, Id, TableSource) {
    ParamMessageReset();

    var Pattern = 'CertTrxLaneHour';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: TableSource
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3
            { "data": "Hour" },//4

            { "data": "TotalZip" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//6 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//7 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//8 Upload

            { "data": "TotalCe" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//10 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//11 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//12 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//13 Calculate
            {
                "mData": function vehicle(data, type, dataToSet) {
                    if (TableSource == 'CertTrxLaneSpecificBillingIdAll') {
                        return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName + data.BillingId + data.CategoryId;
                    }
                    else {
                        return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName;
                    }

                }
            },//14 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            //TrxLane zip
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) { //Upload TrxLane Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '54';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //TrxLane Ce
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {//Upload TrxLane Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '74';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 11, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 13, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 14, "render": function (data, type, row) {
                    if (TableSource == 'CertTrxLaneSpecificBillingIdAll') {
                        return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertTrxLaneSpecificBillingIdAll\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                    }
                    else {
                        return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertTrxLaneHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                    }
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total0));

            Total1 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numFormat(Total1));

            Total2 = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(11).footer()).html(numFormat(Total2));
        }


    });
}

function CertTrxLaneHourReceiptGet(ActionBtnId, Icon, Id, TableSource) {
    ParamMessageReset();

    var Pattern = 'CertTrxLaneHour';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: TableSource
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3
            { "data": "Hour" },//4

            { "data": "ReceiptZip" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//6 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//7 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//8 Upload

            { "data": "ReceiptCe" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//10 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//11 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//12 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//13 Calculate
            {
                "mData": function vehicle(data, type, dataToSet) {
                    if (TableSource == 'CertTrxLaneSpecificBillingIdAll') {
                        return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName + data.BillingId + data.CategoryId;
                    }
                    else {
                        return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName;
                    }

                }
            },//14 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            //TrxLane zip
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) { //Upload TrxLane Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '54';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //TrxLane Ce
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {//Upload TrxLane Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '74';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 11, "render": function (data, type, row) { return DataTableDiffDoubleGet(row['ReceiptZip'], row['ReceiptCe']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGapThresholdGet(row['ReceiptCe'], row['ReceiptZip'], 6, 100); } },

            //Actions            
            {
                "targets": 13, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 14, "render": function (data, type, row) {
                    if (TableSource == 'CertTrxLaneSpecificBillingIdAll') {
                        return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertTrxLaneSpecificBillingIdAll\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                    }
                    else {
                        return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertTrxLaneHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                    }
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total0));

            Total1 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numFormat(Total1));

            Total2 = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(11).footer()).html(numFormat(Total2));
        }


    });
}

function CertTrxLaneFullHourGet(ActionBtnId, Icon, Id, TableSource) {
    ParamMessageReset();

    var Pattern = 'CertTrxLaneHour';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: 'CertTrxLaneFullLane'
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3
            { "data": "Hour" },//4

            { "data": "TotalZip" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//6 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//7 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//8 Upload

            { "data": "TotalCe" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//10 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//11 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//12 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//13 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//14 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            //TrxLane zip
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) { //Upload TrxLane Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '54';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //TrxLane Ce
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {//Upload TrxLane Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '74';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 11, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 13, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HF';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 14, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertTrxLaneHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total0));

            Total1 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numFormat(Total1));

            Total2 = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(11).footer()).html(numFormat(Total2));
        }


    });
}

function CertTrxLaneHourSearch(Id, TableSource) {
    var ActionBtnId = new String('CertTrxLaneHourSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    CertTrxLaneHourGet(ActionBtnId, Icon, Id, TableSource);
}

function CertTrxLaneHourReceiptSearch(Id, TableSource) {
    var ActionBtnId = new String('CertTrxLaneHourReceiptSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    CertTrxLaneHourReceiptGet(ActionBtnId, Icon, Id, TableSource);
}

function CertTrxLaneFullHourSearch(Id, TableSource) {
    var ActionBtnId = new String('CertTrxLaneFullHourSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    CertTrxLaneFullHourGet(ActionBtnId, Icon, Id, TableSource);
}

function CertQualifGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    HideReport(PatternTableReportId);

    var Pattern = 'CertQualif';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertQualifGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: TableSource,
            }
        },
        "columns": [
            { "data": "DhmQualif" },//0 DhmValue
            { "data": "SiteName" },//1
            { "data": "StationName" },//2            

            { "data": "CategoryIdOld" },//3
            { "data": "CategoryIdNew" },//4

            { "data": "BillingIdOld" },//5
            { "data": "BillingIdNew" },//6            

            { "data": "PriceOld" },//7
            { "data": "PriceNew" },//8

            { "data": "GapAbsolute" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//9
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableButtonDeleteGet('CertQualifDelete', data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numFormat(Total1));
        }
    });
}

function CertQualifSearch(Id, Pattern) {
    var ActionBtnId = 'CertQualifSearchBtnId' + Id;
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    CertQualifGet(ActionBtnId, Icon, Id, Pattern);
}

function CertTrxLaneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertTrxLaneDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalZip" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            //Trx zip
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data0 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return data0 + data1;
                }
            },
            {
                "targets": 3, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Trx Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn0 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '04';
                    var SourceId = '10';
                    var FileTypeId = 'C3';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn0 + Btn1;
                }
            },

            //Trx Ce
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 1, 100); } },

            //Actions            
            {
                "targets": 9, "render": function (data, type, row) {//Calculate
                    var TaskId = '04';
                    var SourceId = '10';
                    var FileTypeId = 'C3';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 10, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxLaneStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            //{ "targets": 11, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return CertIsValidGet(data, '13', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 31,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(1).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total2));
        }
    });
}


function CertTrxLaneFullDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertTrxLaneDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalZip" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            //{ "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 0, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['IsSourceValid']) + ' ' + DataTableDateValueFromRowGet(row); } },

            //Trx zip
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 3, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Trx Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5B';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx Ce
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 1, 100); } },

            //Actions            
            {
                "targets": 9, "render": function (data, type, row) {//Calculate
                    var TaskId = '04';
                    var SourceId = '10';
                    var FileTypeId = 'CF';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 10, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxLaneFullStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 11, "render": function (data, type, row) { return CertIsValidGet(data, '01', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(1).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total2));
        }
    });
}


function CertLoyTrxLaneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertLoyTrxLaneDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalZip" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            //Trx zip
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 3, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Trx Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5D';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx Ce
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 1, 100); } },

            //Actions            
            {
                "targets": 9, "render": function (data, type, row) {
                    return DataTableButtonGet('CertLoyTrxLaneStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(1).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total2));
        }
    });
}


function CertIsValidGet(DateString, FileCategoryId, IsValid) {
    var Id = DateString + FileCategoryId;
    var onchange = 'CertIsValidSwitch(\'' + DateString + '\', \'' + FileCategoryId + '\')';
    var Pattern = 'CertIsValidSwitch';
    var data = IsValid;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}


function CertIsValidSwitch(DateString, FileCategoryId) {
    var obj = {};
    obj.DateString = DateString;
    obj.FileCategoryId = FileCategoryId;

    $.ajax({
        url: "/Cert/CertIsValidSwitch",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

        },
        error: function (request, status, error) {
            alert('Error!');
        }
    });
}

function CertFileAutoRestart() {
    $.ajax({
        url: "/Cert/CertFileAutoToRestartGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: true,
        success: function (data) {
            jQuery.each(data, function (index, itemData) {

                var imax = itemData.length;

                for (let i = 0; i < imax; i++) {
                    var CertFilePlanId = itemData[i].CertFilePlanId;
                    //alert(CertFilePlanId);
                    JsSleep(1000);
                    CertFilePlay(CertFilePlanId);
                }
            });
        }
    })
}


function CertTrxBorneBorneGet(ActionBtnId, Icon, IsMargin,
    DateStringStart, DateStringEnd, IsGap,
    RegionId, LSId, StationNumber, LaneName) {

    HideReport('CertTrxBorne' + 'TableReportId');
    ParamMessageReset();

    var Pattern = 'CertTrxBorneBorne';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxBorneBorneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "TotalZip" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//5 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//6  Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//7 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//8 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //TrxLane zip
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Upload TrxBorne Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '52';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxBorneHourSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 4);
        }
    });
}


function CertTrxBorneBorneDisplay(ActionBtnId, Icon, IsMargin) {


    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');

    var IsGap = ElementBooleanGet('IsGapId');

    CertAllReportsHide();
    ParamMessageReset();
    ShowReport('ParamReportId');

    CertTrxBorneBorneGet(ActionBtnId, Icon, IsMargin,
        DateStringStart, DateStringEnd, IsGap,
        RegionId, LSId, StationNumber, LaneName);
}


function CertTrxBorneBorneSearch(Id) {
    var ActionBtnId = new String('CertTrxBorneBorneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsMargin = false;

    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var IsGap = false;
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var LaneName = '0';

    CertTrxBorneBorneGet(ActionBtnId, Icon, IsMargin,
        DateStringStart, DateStringEnd, IsGap,
        RegionId, LSId, StationNumber, LaneName);
}




function CertTrxBorneGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertTrxBorneTableReportId');
    ParamMessageReset();

    $('#CertTrxBorneTableId').DataTable().destroy();
    $('#CertTrxBorneTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport('CertTrxBorneTableReportId');
        },
        "ajax": {
            "url": "/Cert/CertTrxBorneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id,
                "TableSource": TableSource,
            }
        },
        "columns": [
            { "data": "SiteId" }, //0
            { "data": "StationNumber" }, //1
            { "data": "LaneName" }, //2 
            { "data": "DhmValue" },//3
            { "data": "TrxNumber" }, //4
            { "data": "TrxIndex" }, //5

            { "data": "LaneType" }, //6
            { "data": "LaneType" }, //7
            { "data": "LaneType" }, //8
            { "data": "LaneType" }, //9

            { "data": "ModeId" }, //10
            { "data": "LaneType" }, //11
            { "data": "CashierNumber" }, //12
            { "data": "PostNumber" }, //13
            { "data": "PostNumber" }, //14

            { "data": "CategoryId" }, //15
            { "data": "TicketNumber" }, //16
            { "data": "ObsTickId" }, //17
            { "data": "ObsMpId" }, //18
            { "data": "ObsSequId" }, //19
            { "data": "ObsPassId" }, //20

            { "data": "LicensePlate" }, //21
            { "data": "LaneType" }, //22
            { "data": "SerialNumber" }, //23

            { "data": "TrxBorne" }, //24
            { "data": "TrxZip" }, //25
            { "data": "TrxLs" }, //26
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center none", "targets": 6 },
            { "width": "3%", "className": "text-center none", "targets": 7 },
            { "width": "3%", "className": "text-center none", "targets": 8 },
            { "width": "3%", "className": "text-center none", "targets": 9 },

            { "width": "3%", "className": "text-left", "targets": 10 },
            { "width": "3%", "className": "text-left", "targets": 11 },
            { "width": "3%", "className": "text-left none", "targets": 12 },
            { "width": "3%", "className": "text-left none", "targets": 13 },
            { "width": "3%", "className": "text-left none", "targets": 14 },

            { "width": "3%", "className": "text-left", "targets": 15 },
            { "width": "3%", "className": "text-center", "targets": 16 },
            { "width": "3%", "className": "text-center", "targets": 17 },
            { "width": "3%", "className": "text-center", "targets": 18 },
            { "width": "3%", "className": "text-center", "targets": 19 },
            { "width": "3%", "className": "text-center", "targets": 20 },
            { "width": "3%", "className": "text-center none", "targets": 21 },
            { "width": "3%", "className": "text-center none", "targets": 22 },
            { "width": "3%", "className": "text-center", "targets": 23 },

            { "width": "3%", "className": "text-center", "targets": 24 },
            { "width": "3%", "className": "text-center", "targets": 25 },
            { "width": "3%", "className": "text-center", "targets": 26 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return data; } },

            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return data; } },
            { "targets": 9, "render": function (data, type, row) { return data; } },

            { "targets": 10, "render": function (data, type, row) { return data; } },
            { "targets": 11, "render": function (data, type, row) { return data; } },
            { "targets": 12, "render": function (data, type, row) { return data; } },
            { "targets": 13, "render": function (data, type, row) { return data; } },
            //{ "targets": 14, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 15, "render": function (data, type, row) { return data; } },
            { "targets": 16, "render": function (data, type, row) { return data; } },
            { "targets": 17, "render": function (data, type, row) { return data; } },
            { "targets": 18, "render": function (data, type, row) { return data; } },
            { "targets": 19, "render": function (data, type, row) { return data; } },
            { "targets": 20, "render": function (data, type, row) { return data; } },
            { "targets": 21, "render": function (data, type, row) { return data; } },
            { "targets": 22, "render": function (data, type, row) { return data; } },
            { "targets": 23, "render": function (data, type, row) { return data; } },

            { "targets": 24, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 25, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 26, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 20,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numFormat(Total1));

            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(7).footer()).html(numFormat(DoubleTotal1));

            //$(api.column(9).footer()).html(numShortFormat(IntTotal2));
        }
    });
}


function CertTrxBorneHourGet(ActionBtnId, Icon, Id) {
    ParamMessageReset();

    var Pattern = 'CertTrxBorneHour';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxBorneHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3
            { "data": "Hour" },//4

            { "data": "TotalZip" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//6 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//7 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//8 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//9 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            //TrxLane zip
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) { //Upload TrxLane Zip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '52';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            {
                "targets": 9, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxBorneSearch', data, '\'' + data + '\', \'CertTrxBorneHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 9);
        }


    });
}


function CertTrxBorneHourSearch(Id) {
    var ActionBtnId = new String('CertTrxBorneHourSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    CertTrxBorneHourGet(ActionBtnId, Icon, Id);
}


function CertTrxBorneSearch(Id, TableSource) {
    var ActionBtnId = new String('CertTrxBorneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    CertTrxBorneGet(ActionBtnId, Icon, Id, TableSource);
}

function CertTrxBorneDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertTrxBorneDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxBorneDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalZip" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "data": "TotalTrxLane" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 Calculate from trxLane

            { "data": "TotalOd" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 Od

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//12 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//13 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center none", "targets": 7 },
            { "width": "3%", "className": "text-center none", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            //Trx zip
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 3, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Trx Borne
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '52';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {//Upload trx lane
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'T2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {//Upload trx lane
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5B';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalTrxLane']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalTrxLane'], row['TotalZip'], 1, 100); } },

            //Actions            
            {
                "targets": 11, "render": function (data, type, row) {//Calculate TrxBorneHour
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H6';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxBorneStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 13, "render": function (data, type, row) { return CertIsValidGet(data, '02', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 7);

        }

    });
}


function CertTrxBorneAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';
    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '01') {//Day
        CertTrxBorneDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertTrxBorneStationDisplay(ActionBtnId, Icon, IsMargin);
        }
        else {
            if (TimeId == '08') {//Lane
                CertTrxBorneBorneDisplay(ActionBtnId, Icon, IsMargin);
            }
            else {
                ParamMessageErrorDisplay("Ce niveau n'est pas authorisé");
            }
        }
    }
}

function CertTrxBorneDayDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = ElementBooleanGet('IsGapId');

    CertAllReportsHide();
    ParamMessageReset();
    ShowReport('ParamReportId');

    if (DateStringStart != '' || DateStringEnd != '') {
        CertTrxBorneDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}



function CertTrxBorneStationDisplay(ActionBtnId, Icon, IsMargin) {

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = ElementBooleanGet('IsGapId');

    CertAllReportsHide();
    ParamMessageReset();
    ShowReport('ParamReportId');

    if (DateStringStart != '' && DateStringEnd != '') {

        CertTrxBorneStationGet(ActionBtnId, Icon, IsMargin, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}


function CertTrxBorneStationGet(ActionBtnId, Icon, IsMargin, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var Pattern = 'CertTrxBorneStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxBorneStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationName" },//2

            { "data": "TotalZip" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//4 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//5 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//6 Visualize

            { "data": "TotalTrxLane" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//8 Upload

            { "data": "TotalOd" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//10 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//11 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//12 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//13 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//14 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center none", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Trx zip
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 5, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Upload TrxBorneZip
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '52';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx Lane
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {//Upload trxlane
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'T2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Od
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {//Upload trxlane
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5B';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 11, "render": function (data, type, row) { return DataTableDifferenceIntGet(row['TotalZip'], row['TotalTrxLane']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalTrxLane'], row['TotalZip'], 3, 100); } },

            //Actions            
            {
                "targets": 13, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H6';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 14, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxBorneBorneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 7);
            DataTableTotalIntGet(api, intVal, 9);
        }

    });
}


function CertTrxBorneStationSearch(Id) {

    var ActionBtnId = new String('CertTrxBorneStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsMargin = false;

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertTrxBorneStationGet(ActionBtnId, Icon, IsMargin, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}


function CertImageLaneAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';
    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '01') {//Day
        CertImageLaneDayDisplay(ActionBtnId, Icon);
    }
    if (TimeId == '07') {//Station
        CertImageLaneStationDisplay(ActionBtnId, Icon);
    }
    if (TimeId == '08') {//Lane
        CertImageLaneLaneDisplay(ActionBtnId, Icon);
    }
}

function CertImageLaneDayDisplay(ActionBtnId, Icon) {
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (DateStringStart != '' && DateStringEnd != '') {
        CertImageLaneDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertImageLaneDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertImageLaneDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertImageLaneDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalImageTrx" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "data": "TotalImage" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//13
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 3, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5B';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '52';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HF';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H3';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '19';
                    var FileTypeId = 'J1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 9, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '19';
                    var FileTypeId = 'J6';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalQualif']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalImageTrx'], row['TotalImage']); } },

            //Actions            
            {
                "targets": 12, "render": function (data, type, row) {
                    return DataTableButtonGet('CertImageLaneLsSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 13, "render": function (data, type, row) { return CertIsValidGet(data, '03', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(1).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total2));
        }
    });
}

function CertImageLaneStationGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');


    //Hide some reports
    HideReport('CertImageLaneLane' + 'TableReportId');
    HideReport('CertImageLaneHour' + 'TableReportId');
    HideReport('CertImageTrxLane' + 'TableReportId');
    HideReport('CertFileZip' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    var PatternTable = 'CertImageLaneStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertImageLaneStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,

                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationName" },//2

            { "data": "TotalImageTrx" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//8

            { "data": "TotalImage" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//11

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//13

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//14
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center none", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Trx
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5B';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '52';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HF';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H3';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '19';
                    var FileTypeId = 'J1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '19';
                    var FileTypeId = 'J6';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 12, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalQualif']); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalImageTrx'], row['TotalImage']); } },

            //Actions                       
            {
                "targets": 14, "render": function (data, type, row) {
                    return DataTableButtonGet('CertImageLaneLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total0));

            Total1 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numShortFormat(Total1));

            $(api.column(13).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}



function CertImageLaneLsDisplay(ActionBtnId, Icon) {
    //Hide some parent reports
    CertAllReportsHide();

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    CertImageLaneLsGet(ActionBtnId, Icon, RegionId, LSId, DateStringStart, DateStringEnd, IsGap);
}

function CertImageLaneLsSearch(Id) {

    var ActionBtnId = new String('CertImageLaneLsSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = '0';
    var IsGap = false;

    CertImageLaneLsGet(ActionBtnId, Icon, RegionId, LSId, DateStringStart, DateStringEnd, IsGap);
}

function CertImageLaneLsGet(ActionBtnId, Icon, RegionId, LSId, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');


    //Hide some reports
    HideReport('CertImageLaneStation' + 'TableReportId');
    HideReport('CertImageLaneLane' + 'TableReportId');
    HideReport('CertImageLaneHour' + 'TableReportId');
    HideReport('CertImageTrxLane' + 'TableReportId');
    HideReport('CertFileZip' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    var PatternTable = 'CertImageLaneLs';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertImageLaneLsGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "RegionId" },//1
            { "data": "LSName" },//2

            { "data": "TotalImageTrx" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//8

            { "data": "TotalImage" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//11

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//13

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId; } },//14
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center none", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Trx
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5B';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '52';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HF';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H3';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '19';
                    var FileTypeId = 'J1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '19';
                    var FileTypeId = 'J6';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 12, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalQualif']); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalImageTrx'], row['TotalImage']); } },

            //Actions                       
            {
                "targets": 14, "render": function (data, type, row) {
                    return DataTableButtonGet('CertImageLaneStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total0));

            Total1 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numShortFormat(Total1));

            $(api.column(13).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}

function CertImageLaneStationSearch(Id) {

    var ActionBtnId = new String('CertImageLaneStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = '0';
    var IsGap = false;

    CertImageLaneStationGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}




function CertImageLaneStationDisplay(ActionBtnId, Icon) {
    //Hide some parent reports
    CertAllReportsHide();

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    if (DateStringStart != '' && DateStringEnd != '') {
        CertImageLaneStationGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertImageLaneLaneDisplay(ActionBtnId, Icon) {
    //Hide some parent reports
    CertAllReportsHide();

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));
    var IsHistory = false;


    CertImageLaneLaneGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap, IsHistory);
}

function CertImageLaneLaneGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertImageLaneLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //Hide some reports
    HideReport('CertImageLaneHour' + 'TableReportId');
    HideReport('CertImageTrxLane' + 'TableReportId');
    HideReport('CertFileZip' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertImageLaneLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap,
                IsHistory: false
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "TotalZip" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//5 Upload trx cert

            { "data": "TotalQualif" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//7 Upload trx qualif

            { "data": "TotalImageTrx" },//8

            { "data": "TotalImage" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//10 Upload img
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//11 Calculate img

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//12 
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//13  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//14 Detail

            { "data": "IpAddress" },//15
            { "data": "LaneTypeName" },//16

            { "data": "ArchivePurgeValue" },//17
            { "data": "ConfigLaneName" },//18

            { "data": "ImagesNumber" },//19
            { "data": "IsNoneStop" },//20

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } }, //21

            { "data": "IsCalculateOnContext" },//22
            { "data": "IsChecked" },//23
            { "data": "IsAssigned" },//24
            { "data": "IsActive" },//25
            { "data": "IsPing" },//26

            { "data": "PingComment" },//27
            { "data": "AccessComment" },//28

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } }, //29
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "width": "3%", "className": "text-center", "targets": 14 },

            { "width": "3%", "className": "text-center", "targets": 15 },
            { "width": "3%", "className": "text-center none", "targets": 16 },

            { "width": "3%", "className": "text-center none", "targets": 17 },
            { "width": "3%", "className": "text-center", "targets": 18 },

            { "width": "3%", "className": "text-center none", "targets": 19 },
            { "width": "3%", "className": "text-center none", "targets": 20 },

            { "width": "3%", "className": "text-center none", "targets": 21 },

            { "width": "3%", "className": "text-center none", "targets": 22 },
            { "width": "3%", "className": "text-center none", "targets": 23 },
            { "width": "3%", "className": "text-center none", "targets": 24 },
            { "width": "3%", "className": "text-center none", "targets": 25 },
            { "width": "3%", "className": "text-center none", "targets": 26 },

            { "width": "3%", "className": "text-center none", "targets": 27 },
            { "width": "3%", "className": "text-center none", "targets": 28 },

            { "width": "3%", "className": "text-center", "targets": 29 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Trx lane
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        var TaskId = '00';
                        var SourceId = '05';
                        var FileTypeId = '58';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        var TaskId = '00';
                        var SourceId = '05';
                        var FileTypeId = '52';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        return DataTableFormatIntGet(data);
                    }
                    else {
                        return '';
                    };
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        var TaskId = '00';
                        var SourceId = '05';
                        var FileTypeId = '5B';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';

                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        return '';
                    }
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        var TaskId = '04';
                        var SourceId = '11';
                        var FileTypeId = 'HF';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableFormatIntGet(data) + '' + DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        var TaskId = '04';
                        var SourceId = '11';
                        var FileTypeId = 'H3';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableFormatIntGet(data) + ' ' + DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    //return DataTableFormatIntGet(data);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {

                    var TaskId = '00';
                    var SourceId = '19';
                    var FileTypeId = 'J1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {

                    var TaskId = '04';
                    var SourceId = '19';
                    var FileTypeId = 'J6';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            {
                "targets": 12, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        return DataTableDiffIntXorGet(row['TotalZip'], row['TotalQualif']);
                    }
                    else {
                        return '';
                    };
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    //if (row['IsNoneStop'] && row['ImagesNumber'] == '1') {
                    //    return 'TSA';
                    //}
                    //else {
                    //    return DataTableDiffIntGet(row['TotalImageTrx'], row['TotalImage']);
                    //};  
                    return DataTableDiffIntThresholdGet(row['TotalImageTrx'], row['TotalImage'], 100);
                }
            },
            //Actions                       
            {
                "targets": 14, "render": function (data, type, row) {
                    return DataTableButtonGet('CertImageLaneHourSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },

            { "targets": 15, "render": function (data, type, row) { return data; } },
            { "targets": 16, "render": function (data, type, row) { return data; } },
            { "targets": 17, "render": function (data, type, row) { return data; } },
            { "targets": 18, "render": function (data, type, row) { return data; } },

            { "targets": 19, "render": function (data, type, row) { return data; } },
            { "targets": 20, "render": function (data, type, row) { return data; } },

            {
                "targets": 21, "render": function (data, type, row) {
                    return DataTableButtonGet('MaintPingTest', data, '\'' + data + '\', \'' + row['IpAddress'] + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-map-pin btn-icon-cl gc-c1-cl', '')
                }
            },

            { "targets": 22, "render": function (data, type, row) { return CertImageIsCalculateOnContextGet(row['LaneId'], row['IsCalculateOnContext']); } },
            { "targets": 23, "render": function (data, type, row) { return CertImageIsCheckedGet(row['LaneId'], row['IsChecked']); } },
            { "targets": 24, "render": function (data, type, row) { return CertImageIsAssignedGet(row['LaneId'], row['IsAssigned']); } },
            { "targets": 25, "render": function (data, type, row) { return CertImageIsActiveGet(row['LaneId'], row['IsActive']); } },
            { "targets": 26, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['LaneId']); } },

            { "targets": 27, "render": function (data, type, row) { return data; } },
            { "targets": 28, "render": function (data, type, row) { return data; } },

            {
                "targets": 29, "render": function (data, type, row) {
                    return DataTableButtonGet('CertImageLaneHistorySearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total0));

            Total1 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numShortFormat(Total1));

            $(api.column(13).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}


function CertImageLaneHistoryGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertImageLaneHistory';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //Hide some reports
    HideReport('CertImageLaneHour' + 'TableReportId');
    HideReport('CertImageTrxLane' + 'TableReportId');
    HideReport('CertFileZip' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertImageLaneLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap,
                IsHistory: true
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "TotalZip" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + 'x'; } },//5 Upload trx cert

            { "data": "TotalQualif" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + 'x'; } },//7 Upload trx qualif

            { "data": "TotalImageTrx" },//8

            { "data": "TotalImage" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + 'x'; } },//10 Upload img
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + 'x' } },//11 Calculate img

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + 'x'; } },//12 
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + 'x'; } },//13  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + 'x'; } },//14 Detail

            { "data": "IpAddress" },//15
            { "data": "LaneTypeName" },//16

            { "data": "ArchivePurgeValue" },//17
            { "data": "ConfigLaneName" },//18

            { "data": "ImagesNumber" },//19
            { "data": "IsNoneStop" },//20

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + 'x'; } }, //21

            { "data": "IsCalculateOnContext" },//22
            { "data": "IsChecked" },//23
            { "data": "IsAssigned" },//24
            { "data": "IsActive" },//25
            { "data": "IsPing" },//26

            { "data": "PingComment" },//27
            { "data": "AccessComment" },//28

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + 'x'; } }, //29            
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "width": "3%", "className": "text-center", "targets": 14 },

            { "width": "3%", "className": "text-center", "targets": 15 },
            { "width": "3%", "className": "text-center none", "targets": 16 },

            { "width": "3%", "className": "text-center none", "targets": 17 },
            { "width": "3%", "className": "text-center", "targets": 18 },

            { "width": "3%", "className": "text-center none", "targets": 19 },
            { "width": "3%", "className": "text-center none", "targets": 20 },

            { "width": "3%", "className": "text-center none", "targets": 21 },

            { "width": "3%", "className": "text-center", "targets": 22 },
            { "width": "3%", "className": "text-center", "targets": 23 },
            { "width": "3%", "className": "text-center", "targets": 24 },
            { "width": "3%", "className": "text-center", "targets": 25 },
            { "width": "3%", "className": "text-center", "targets": 26 },

            { "width": "3%", "className": "text-center", "targets": 27 },
            { "width": "3%", "className": "text-center", "targets": 28 },

            { "width": "3%", "className": "text-center none", "targets": 29 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Trx lane
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        var TaskId = '00';
                        var SourceId = '05';
                        var FileTypeId = '58';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        var TaskId = '00';
                        var SourceId = '05';
                        var FileTypeId = '52';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        return DataTableFormatIntGet(data);
                    }
                    else {
                        return '';
                    };
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        var TaskId = '00';
                        var SourceId = '05';
                        var FileTypeId = '5B';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';

                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        return '';
                    }
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        var TaskId = '04';
                        var SourceId = '11';
                        var FileTypeId = 'HF';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableFormatIntGet(data) + '' + DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        var TaskId = '04';
                        var SourceId = '11';
                        var FileTypeId = 'H3';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                        var RegionId = row['RegionId'];
                        var LSId = row['LSId'];
                        var AxleId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableFormatIntGet(data) + ' ' + DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    //return DataTableFormatIntGet(data);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {

                    var TaskId = '00';
                    var SourceId = '19';
                    var FileTypeId = 'J1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {

                    var TaskId = '04';
                    var SourceId = '19';
                    var FileTypeId = 'J6';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            {
                "targets": 12, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        return DataTableDiffIntXorGet(row['TotalZip'], row['TotalQualif']);
                    }
                    else {
                        return '';
                    };
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    //if (row['IsNoneStop'] && row['ImagesNumber'] == '1') {
                    //    return 'TSA';
                    //}
                    //else {
                    //    return DataTableDiffIntGet(row['TotalImageTrx'], row['TotalImage']);
                    //};  
                    return DataTableDiffIntThresholdGet(row['TotalImageTrx'], row['TotalImage'], 100);
                }
            },
            //Actions                       
            {
                "targets": 14, "render": function (data, type, row) {
                    return DataTableButtonGet('CertImageLaneHourSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },

            { "targets": 15, "render": function (data, type, row) { return data; } },
            { "targets": 16, "render": function (data, type, row) { return data; } },
            { "targets": 17, "render": function (data, type, row) { return data; } },
            { "targets": 18, "render": function (data, type, row) { return data; } },

            { "targets": 19, "render": function (data, type, row) { return data; } },
            { "targets": 20, "render": function (data, type, row) { return data; } },

            {
                "targets": 21, "render": function (data, type, row) {
                    return DataTableButtonGet('MaintPingTest', data, '\'' + data + '\', \'' + row['IpAddress'] + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-map-pin btn-icon-cl gc-c1-cl', '')
                }
            },

            { "targets": 22, "render": function (data, type, row) { return CertImageIsCalculateOnContextGet(row['LaneId'], row['IsCalculateOnContext']); } },
            { "targets": 23, "render": function (data, type, row) { return CertImageIsCheckedGet(row['LaneId'], row['IsChecked']); } },
            { "targets": 24, "render": function (data, type, row) { return CertImageIsAssignedGet(row['LaneId'], row['IsAssigned']); } },
            { "targets": 25, "render": function (data, type, row) { return CertImageIsActiveGet(row['LaneId'], row['IsActive']); } },
            { "targets": 26, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['LaneId']); } },

            { "targets": 27, "render": function (data, type, row) { return data; } },
            { "targets": 28, "render": function (data, type, row) { return data; } },

            { "targets": 29, "render": function (data, type, row) { return data; } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total0));

            Total1 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numShortFormat(Total1));

            $(api.column(13).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}



function CertImageIsCalculateOnContextGet(LaneId, IsCalculateOnContext) {
    var Id = LaneId;
    var onchange = 'CertImageIsCalculateOnContextSet(' + LaneId + ')';
    var Pattern = 'IsCalculateOnContext';
    var data = IsCalculateOnContext;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}

function CertImageIsCheckedGet(LaneId, IsChecked) {
    var Id = LaneId;
    var onchange = 'CertImageIsCheckedSet(' + LaneId + ')';
    var Pattern = 'IsChecked';
    var data = IsChecked;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}

function CertImageIsCertifiedGet(LaneId, IsCertified) {
    var Id = LaneId;
    var onchange = 'CertImageIsCertifiedSet(' + LaneId + ')';
    var Pattern = 'IsCertified';
    var data = IsCertified;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}

function CertImageIsAssignedGet(LaneId, IsAssigned) {
    var Id = LaneId;
    var onchange = 'CertImageIsAssignedSet(' + LaneId + ')';
    var Pattern = 'IsAssigned';
    var data = IsAssigned;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}

function CertImageIsActiveGet(LaneId, IsActive) {
    var Id = LaneId;
    var onchange = 'CertImageIsActiveSet(' + LaneId + ')';
    var Pattern = 'IsActive';
    var data = IsActive;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}

function CertImageIsCalculateOnContextSet(LaneId) {

    var obj = {};
    obj.LaneId = LaneId;

    $.ajax({
        url: "/Cert/CertImageIsCalculateOnContextSet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
        }
    });
}

function CertImageIsCheckedSet(LaneId) {

    var obj = {};
    obj.LaneId = LaneId;

    $.ajax({
        url: "/Cert/CertImageIsCheckedSet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
        }
    });
}

function CertImageIsCertifiedSet(LaneId) {

    var obj = {};
    obj.LaneId = LaneId;

    $.ajax({
        url: "/Cert/CertImageIsCertifiedSet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
        }
    });
}

function CertImageIsAssignedSet(LaneId) {

    var obj = {};
    obj.LaneId = LaneId;

    $.ajax({
        url: "/Cert/CertImageIsAssignedSet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
        }
    });
}


function CertImageIsActiveSet(LaneId) {

    var obj = {};
    obj.LaneId = LaneId;

    $.ajax({
        url: "/Cert/CertImageIsActiveSet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
        }
    });
}

function CertImageLaneLaneSearch(Id) {
    var ActionBtnId = new String('CertImageLaneLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var LaneName = '0';
    var IsGap = false;

    CertImageLaneLaneGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap);
}

function CertImageLaneHourGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, LaneName, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertImageLaneHour';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //Hide some reports
    HideReport('CertImageTrxLane' + 'TableReportId');
    HideReport('CertFileZip' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertImageLaneHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3
            { "data": "Hour" },//4

            { "data": "TotalImageTrx" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//

            { "data": "TotalImage" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//8 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//9 
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//10  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//11 Detail

            { "data": "IpAddress" },//12
            { "data": "LaneTypeId" },//13
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center none", "targets": 12 },
            { "width": "3%", "className": "text-center none", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            //Trx lane
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        var TaskId = '00';
                        var SourceId = '05';
                        var FileTypeId = '5B';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'] + GetDigits(row['Hour'], 2);
                        var SiteId = row['SiteId'];
                        var LSId = '--';
                        var BagContainerId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                    else {
                        var TaskId = '00';
                        var SourceId = '05';
                        var FileTypeId = '52';
                        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'] + GetDigits(row['Hour'], 2);
                        var SiteId = row['SiteId'];
                        var LSId = '--';
                        var BagContainerId = '--';
                        var StationNumber = row['StationNumber'];
                        var LaneName = row['LaneName'];
                        var PdvId = '--';
                        var BillingId = '--';
                        var CategoryId = '--';
                        var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                        var Pattern = 'CertTaskAdd';
                        var RowId = data + ParamId;
                        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                        var text = '';
                        var BtnClass = 'dt-btn-cl gc-bc1-cl';
                        var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                        var TextClass = 'dt-text-cl';
                        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    }
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '19';
                    var FileTypeId = 'J1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'] + GetDigits(row['Hour'], 2);
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            {
                "targets": 9, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        return DataTableDiffIntGet(row['TotalZip'], row['TotalQualif']);
                    }
                    else {
                        return 0;
                    };
                }
            },
            { "targets": 10, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalImageTrx'], row['TotalImage']); } },

            //Actions            
            {
                "targets": 11, "render": function (data, type, row) {
                    if (row['LaneTypeId'] == '1') {
                        return DataTableButtonGet('CertImageTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertImageLaneHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                    }
                    else {
                        return DataTableButtonGet('CertImageTrxBorneSearch', data, '\'' + data + '\'' + ', \'CertImageBorneHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');

                    }

                }
            },

            { "targets": 12, "render": function (data, type, row) { return data; } },
            { "targets": 13, "render": function (data, type, row) { return data; } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(1).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total2));
        }
    });
}

function CertImageLaneHourSearch(Id) {

    var ActionBtnId = new String('CertImageLaneHourSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    //Spin
    ActionBtnSpin(ActionBtnId);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var LaneName = new String(Id).substr(14, 3);

    CertImageLaneHourGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, LaneName, DateStringStart, DateStringEnd);
}


function CertImageLaneHistorySearch(Id) {

    var ActionBtnId = new String('CertImageLaneHistorySearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    //Spin
    ActionBtnSpin(ActionBtnId);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var LaneName = new String(Id).substr(14, 3);
    var IsGap = false;
    CertImageLaneHistoryGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap);
}

function CertImageTrxLaneGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertImageTrxLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //Hide some reports
    HideReport('CertFileZip' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');
    HideReport('CertImageTrxBorne' + 'TableReportId');

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertImageTrxLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id,
                "TableSource": TableSource
            }
        },
        "columns": [
            { "data": "NetworkId" }, //0
            { "data": "StationNumber" }, //1
            { "data": "LaneName" }, //2           
            { "data": "DhmValue" },//3  
            { "data": "TrxNumber" },//4
            { "data": "TrxIndex" },//5

            { "data": "CategoryPreDacId" },//6
            { "data": "CategoryPostDacId" },//7

            { "data": "ReadTickNumber" },//8
            { "data": "ProductNumber" },//9                   

            { "data": "ObsPassId" },//10
            { "data": "ObsMpId" },//11
            { "data": "ObsOcrId" },//12
            { "data": "ObsSequId" },//13
            { "data": "ObsTickId" },//14

            { "data": "OctalCode" },//15

            { "data": "ImagePath" },//16
            { "data": "ImageIapiPath" },//17
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center none", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "width": "3%", "className": "text-center", "targets": 15 },

            { "width": "3%", "className": "text-center", "targets": 16 },
            { "width": "3%", "className": "text-center", "targets": 17 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return data; } },

            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },

            { "targets": 8, "render": function (data, type, row) { return data; } },
            { "targets": 9, "render": function (data, type, row) { return data; } },

            { "targets": 10, "render": function (data, type, row) { return data; } },
            { "targets": 11, "render": function (data, type, row) { return data; } },
            { "targets": 12, "render": function (data, type, row) { return data; } },
            { "targets": 13, "render": function (data, type, row) { return data; } },
            { "targets": 14, "render": function (data, type, row) { return data; } },

            { "targets": 15, "render": function (data, type, row) { return data; } },

            { "targets": 16, "render": function (data, type, row) { return DataTableImageGet(data); } },
            { "targets": 17, "render": function (data, type, row) { return DataTableImageGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 20,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numFormat(Total1));

            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(7).footer()).html(numFormat(DoubleTotal1));

            //$(api.column(9).footer()).html(numShortFormat(IntTotal2));
        }
    });
}

function CertImageTrxLaneSearch(Id, TableSource) {
    var ActionBtnId = new String('CertImageTrxLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    //Spin
    ActionBtnSpin(ActionBtnId);

    CertImageTrxLaneGet(ActionBtnId, Icon, Id, TableSource);
}


function CertImageTrxBorneGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertImageTrxBorne';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //Hide some reports
    HideReport('CertFilePlan' + 'TableReportId');
    HideReport('CertFileZip' + 'TableReportId');
    HideReport('CertImageTrxLane' + 'TableReportId');

    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertImageTrxBorneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id,
                "TableSource": TableSource
            }
        },
        "columns": [
            { "data": "SiteId" }, //0
            { "data": "StationNumber" }, //1
            { "data": "LaneName" }, //2           
            { "data": "DhmValue" },//3 
            { "data": "TrxNumber" },//4
            { "data": "TrxIndex" },//5

            { "data": "CategoryId" },//6
            { "data": "TicketNumber" },//7 
            { "data": "LicensePlate" },//8                                        
            { "data": "ObsPassId" },//9
            { "data": "ObsMpId" },//10
            { "data": "ObsTickId" },//11

            { "data": "ImagePath" },//12 
            { "data": "ImageIapiPath" },//13 
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center none", "targets": 7 },
            { "width": "3%", "className": "text-center none", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return data; } },

            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return data; } },
            { "targets": 9, "render": function (data, type, row) { return data; } },
            { "targets": 10, "render": function (data, type, row) { return data; } },
            { "targets": 11, "render": function (data, type, row) { return data; } },

            { "targets": 12, "render": function (data, type, row) { return DataTableImageGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableImageGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 20,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numFormat(Total1));

            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(7).footer()).html(numFormat(DoubleTotal1));

            //$(api.column(9).footer()).html(numShortFormat(IntTotal2));
        }
    });
}

function CertImageTrxBorneSearch(Id, TableSource) {
    var ActionBtnId = new String('CertImageTrxBorneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    CertImageTrxBorneGet(ActionBtnId, Icon, Id, TableSource);
}

function CertNrHomeOpen() {
    HideReport('HomeLineId5');
    ShowReport('HomeReportId');

    HideReport('ParamReportId');

    HideReport('CertNrPeriod' + 'TableReportId');
    HideReport('CertNrCex' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertNrMp' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');
    HideReport('CertPostMsg' + 'TableReportId');
    HideReport('CertPostZip' + 'TableReportId');
    HideReport('CertPostLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('CertReceiptBagZipRac' + 'FormReportId');
    HideReport('Bar' + 'ChartId');
    HideReport('Pie' + 'ChartId');

    document.getElementById('MenuBarId0').style.color = "blue";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
}

function CertNrMpOpen() {
    HideReport('HomeLineId5');
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertNrMpDisplay()");

    HideReport('CertNrPeriod' + 'TableReportId');
    HideReport('CertNrCex' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertNrMp' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');
    HideReport('CertPostMsg' + 'TableReportId');
    HideReport('CertPostZip' + 'TableReportId');
    HideReport('CertPostLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('Bar' + 'ChartId');
    HideReport('Pie' + 'ChartId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "blue";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
}


function CertNrSiteOpen() {
    HideReport('HomeLineId5');
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertNrSiteDisplay()");

    HideReport('CertNrPeriod' + 'TableReportId');
    HideReport('CertNrCex' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertNrMp' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');
    HideReport('CertPostMsg' + 'TableReportId');
    HideReport('CertPostZip' + 'TableReportId');
    HideReport('CertPostLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('Bar' + 'ChartId');
    HideReport('Pie' + 'ChartId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "blue";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
}

function CertNrCexOpen() {
    HideReport('HomeLineId5');
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    HideReport('BagContainerIdParent');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertNrCexDisplay()");

    HideReport('CertNrPeriod' + 'TableReportId');
    HideReport('CertNrCex' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertNrMp' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');
    HideReport('CertPostMsg' + 'TableReportId');
    HideReport('CertPostZip' + 'TableReportId');
    HideReport('CertPostLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('Bar' + 'ChartId');
    HideReport('Pie' + 'ChartId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "blue";
    document.getElementById('MenuBarId4').style.color = "grey";
}

function CertNrPeriodOpen() {
    HideReport('HomeLineId5');
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    HideReport('BagContainerIdParent');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertNrPeriodDisplay()");

    HideReport('CertNrPeriod' + 'TableReportId');
    HideReport('CertNrCex' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertNrMp' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');
    HideReport('CertPostMsg' + 'TableReportId');
    HideReport('CertPostZip' + 'TableReportId');
    HideReport('CertPostLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('Bar' + 'ChartId');
    HideReport('Pie' + 'ChartId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "blue";
}

function CertNrGetMp() {
    $.get("/Cert/GetPayments", function (data) {
        $("#PaymentId").empty();
        $.each(data, function (index, row) {
            $("#PaymentId").append("<option value='" + row.PaymentId + "'>" + row.PaymentName + "</option>")
        });
        $("#PaymentId").append("<option value='" + 0 + "'>" + "Sélectionnez--" + "</option>");
        $("#PaymentId").val('0');
    });
}

function CertNrMpDisplay() {

    var SiteId = new String($('#SiteId').val());
    var BagContainerId = new String($('#BagContainerId').val());
    var DateStartString = new String($('#DateStartId').val().replace("-", "").replace("-", ""));
    var DateEndString = new String($('#DateEndId').val().replace("-", "").replace("-", ""));

    $('#ParamActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport("CertNrMpTableReportId");
    ParamMessageReset();
    $('#CertNrMpTableId').DataTable().destroy();
    $('#CertNrMpTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
            ShowReport("CertNrMpTableReportId");

            var labels = GetColumnArray('CertNrMpTableId', 2);
            var data1 = GetColumnArray('CertNrMpTableId', 3);
            var data2 = GetColumnArray('CertNrMpTableId', 4);
            var backgroundColor = GetBackgroundColor('CertNrMpTableId');
            DisplayChartBar(labels, data1, data2, "OPE", "CE");
            DisplayChartDoughnut(labels, backgroundColor, data1)
        },
        "ajax": {
            "url": "/Cert/CertNrMpDisplay",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                DateStartString: DateStartString,
                DateEndString: DateEndString
            }
        },
        "columns": [
            { "data": "BagContainerId" },//0
            //{ "data": "BagContainerName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return new Date(data.YearK, data.MonthK - 1, data.DayK).toLocaleDateString() } },
            { "data": "MpName", "render": $.fn.dataTable.render.number(' ', ',', 2) },//2
            { "data": "ReceiptOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//3
            { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
            { "data": "ReceiptGap" },//5
            { "data": "NumberOpe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//6
            { "data": "NumberCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//7              
            { "data": "NumberGap" },//8
            { "data": "MpRecoId" }//9
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//StationName
            { "width": "15%", "className": "text-center", "targets": 1 },//DhmValueFrom
            { "width": "10%", "className": "text-left", "targets": 2 },//MpName
            { "width": "10%", "className": "text-right", "targets": 3 },//ReceiptOpe
            { "width": "10%", "className": "text-right", "targets": 4 },//ReceiptCe
            { "width": "10%", "className": "text-right", "targets": 5 },//ReceiptGap
            { "width": "10%", "className": "text-right", "targets": 6 },//NumberOpe
            { "width": "10%", "className": "text-right", "targets": 7 },//NumberCe
            { "width": "10%", "className": "text-right", "targets": 8 },//NumberGap
            { "width": "5%", "className": "text-center", "targets": 9 },//Search

            //{
            //    "targets": 8, "searchable": false, "orderable": false, "className": 'img_dt_s',
            //    "render": function (data, type, row) {
            //        alert(row["ReceiptOpe"]);
            //    }
            //},

            {
                "targets": 5, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if (($('<div/>').text(data.toFixed(2)).html() !== "0.00") && ($('<div/>').text(data.toFixed(2)).html() !== "-0.00"))
                        return '<span  class="badge badge-danger">' + data.toFixed(2) + '</span>';
                    else return '<span  class="badge badge-success">0.00</span>';
                }
            },
            {
                "targets": 8, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if ($('<div/>').text(data).html() !== "0")
                        return '<span  class="badge badge-danger">' + data + '</span>';
                    else return '<span  class="badge badge-success" >' + data + '</span>';
                }
            },
            {
                "targets": 9, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertNrMpPostSearchBtnId' + data + '" ' +
                        'style="background-color: Transparent;border: none" ' +
                        'onclick="CertNrMpPostSearch(\'' + data + '\')" >' +
                        '<span class="fas fa-flag-checkered" style="color:#0048ff" ></span></button>'
                }
            }
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            MpReceiptOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(3).footer()).html(numFormat(MpReceiptOpeTotal));
            $(api.column(4).footer()).html(numFormat(MpReceiptCeTotal));

            if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
                $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numFormat(MpReceiptGapTotal) + '</span>');
            else $(api.column(5).footer()).html('<span  class="badge badge-success">0.00</span>');



            MpNumberOpeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpNumberCeTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpNumberGapTotal = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(6).footer()).html(MpNumberOpeTotal);
            $(api.column(7).footer()).html(MpNumberCeTotal);

            if (MpNumberGapTotal !== 0)
                $(api.column(8).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
            else $(api.column(8).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        }
    });
}

function CertNrMpPostSearch(MpRecoId) {

    var ActionBtnId = new String('CertNrMpPostSearchBtnId' + MpRecoId);
    var DateStringStart = new String(MpRecoId).substr(0, 8);
    var DateStringEnd = new String(MpRecoId).substr(0, 8);
    var SiteId = new String(MpRecoId).substr(8, 2);
    var BagContainerId = new String(MpRecoId).substr(10, 2);
    var StationId = new String('0');
    var IsGap = new Boolean(false);
    var MpId = new String(MpRecoId).substr(12, 2);

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    CertPostGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, IsGap, MpId, 'fas fa-flag-checkered');
}

function DataTableGetBooleanValue(data) {
    if ($('<div/>').text(data).html() !== "true")
        return '<span  class="badge badge-danger">0</span>';
    else return '<span  class="badge badge-success" >1</span>';
}

function CertNrMpSearch(Id) {
    var ActionBtnId = new String('CertNrMpSearchBtnId' + Id);
    var Icon = 'fas fa-eye';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    $('#CertNrMpTableId').DataTable().destroy();
    $('#CertNrMpTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertNrMpTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertNrMpSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "BagContainerId" },//0
            { "data": "DhmValueFrom" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.MpId + ' - ' + data.MpName; } },//2

            { "data": "ReceiptOpe" },//3
            { "data": "ReceiptCe" },//4
            { "data": "ReceiptGap" },//5

            { "data": "NumberOpe" },//6
            { "data": "NumberCe" },//7              
            { "data": "NumberGap" },//8

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId + data.MpId; } },//1
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },
            { "width": "15%", "className": "text-center", "targets": 1 },
            { "width": "10%", "className": "text-left", "targets": 2 },

            { "width": "10%", "className": "text-right", "targets": 3 },
            { "width": "10%", "className": "text-right", "targets": 4 },
            { "width": "10%", "className": "text-right", "targets": 5 },

            { "width": "10%", "className": "text-right", "targets": 6 },
            { "width": "10%", "className": "text-right", "targets": 7 },
            { "width": "10%", "className": "text-right", "targets": 8 },

            { "width": "5%", "className": "text-center", "targets": 9 },

            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 5, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return GetGapNumberFromDataTable(data); } },

            { "targets": 8, "render": function (data, type, row) { return GetGapNumberFromDataTable(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertPostSearch', data, 'NrMp', 'fas fa-eye', '0048ff'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //MpReceiptOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //MpReceiptCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //MpReceiptGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(3).footer()).html(numFormat(MpReceiptOpeTotal));
            //$(api.column(4).footer()).html(numFormat(MpReceiptCeTotal));

            //if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
            //    $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numFormat(MpReceiptGapTotal) + '</span>');
            //else $(api.column(5).footer()).html('<span  class="badge badge-success">0.00</span>');



            //MpNumberOpeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //MpNumberCeTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //MpNumberGapTotal = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(6).footer()).html(MpNumberOpeTotal);
            //$(api.column(7).footer()).html(MpNumberCeTotal);

            //if (MpNumberGapTotal !== 0)
            //    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
            //else $(api.column(8).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        }
    });
}

function CertNrSiteGet(ActionBtnId, Icon, SiteId, BagContainerId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');
    HideReport("CertNrSiteTableReportId");
    HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertNrSite';

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#CertNrSiteTableId').DataTable().destroy();
    $('#CertNrSiteTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertNrSiteTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertNrSiteGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.BagContainerId; } },//1
            //{ "data": "BagContainerId" },//1
            { "data": "" },//2

            { "data": "ReceiptOpe" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//4

            { "data": "ReceiptCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapRelative" },//8

            { "data": "Ctr01" },//9
            { "data": "Ctr02" },//10
            { "data": "Ctr03" },//11

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//13                      

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//14

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//15
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//16
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right " + max700, "targets": 3 },
            { "width": "3%", "className": "text-left " + max700, "targets": 4 },

            { "width": "3%", "className": "text-right " + max700, "targets": 5 },
            { "width": "3%", "className": "text-left " + max700, "targets": 6 },

            { "width": "3%", "className": "text-right " + max700, "targets": 7 },
            { "width": "3%", "className": "text-right " + max700, "targets": 8 },

            { "width": "3%", "className": "text-center none", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },

            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "width": "3%", "className": "text-center none", "targets": 14 },

            { "width": "3%", "className": "text-center none", "targets": 15 },

            { "width": "3%", "className": "text-center none", "targets": 16 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },


            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(row['ReceiptOpe']); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '08' + '83' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(row['ReceiptCe']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '71' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    if (row['ReceiptOpe'].toFixed(2) != 0) {
                        var evo = ((row['ReceiptCe'] - row['ReceiptOpe']) / row['ReceiptOpe']) * 10000;
                        if (evo.toFixed(2) > 6 || evo.toFixed(2) < -6) {
                            return '<span  class="badge badge-danger" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                        else {
                            return '<span class="badge badge-success" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                    }
                    else {
                        return '<span  class="badge badge-danger" >10 000 %%</span>';
                    }
                }
            },

            { "targets": 9, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 10, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return CertCtrBitGet(data); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertNrMpSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertPostSearch', data, 'CertNrSite', 'fas fa-eye', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '53' + data + 'x', 'fas fa-redo-alt', '0048ff'); } },//Zip

            { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertNrSiteOpeRecalculate', data, 'fas fa-redo-alt', '0048ff'); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableButtonDeleteGet('Nr', data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numFormat(Total0));

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total1));

            Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total1));
        }
    });
}

function CertNrSiteDisplay() {
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');


    HideReport('CertDayTableReportId');

    if (document.getElementById('ParamActionBtnId3') != null) {
        document.getElementById('ParamActionIconId3').style.color = 'black';
    }
    if (SiteId != null &&
        BagContainerId != null &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        CertNrSiteGet(ActionBtnId, Icon, SiteId, BagContainerId, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertNrSiteValidate(CertNrSiteValidateId) {
    $('#CertNrSiteValidateBtnId' + CertNrSiteValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.CertNrSiteValidateId = CertNrSiteValidateId;
    $.ajax({
        url: "/Cert/CertNrSiteValidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertNrSiteValidateBtnId' + CertNrSiteValidateId).find('span').attr('class', 'fas fa-unlock-alt');
            $('#CertNrSiteValidateBtnId' + CertNrSiteValidateId).find('span').attr('style', 'color:#28a745');
            $('#CertNrSiteValidateBtnId' + CertNrSiteValidateId).attr('onclick', 'CertNrSiteUnvalidate(\'' + CertNrSiteValidateId + '\')');
            $('#CertNrSiteValidateBtnId' + CertNrSiteValidateId).attr('id', 'CertNrSiteUnvalidateBtnId' + CertNrSiteValidateId);
        }
    });
}

function CertNrSiteUnvalidate(CertNrSiteValidateId) {
    $('#CertNrSiteUnvalidateBtnId' + CertNrSiteValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.CertNrSiteValidateId = CertNrSiteValidateId;
    $.ajax({
        url: "/Cert/CertNrSiteUnvalidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertNrSiteUnvalidateBtnId' + CertNrSiteValidateId).find('span').attr('class', 'fas fa-clock');
            $('#CertNrSiteUnvalidateBtnId' + CertNrSiteValidateId).find('span').attr('style', 'color:#a3a3a3');
            $('#CertNrSiteUnvalidateBtnId' + CertNrSiteValidateId).attr('onclick', 'CertNrSiteValidate(\'' + CertNrSiteValidateId + '\')');
            $('#CertNrSiteUnvalidateBtnId' + CertNrSiteValidateId).attr('id', 'CertNrSiteValidateBtnId' + CertNrSiteValidateId);
        },
        error: function (request, status, error) {
            alert('Veuiller contacter la Division Péage pour dévalider votre recette.');
            $('#CertNrSiteUnvalidateBtnId' + CertNrSiteValidateId).find('span').attr('class', 'fas fa-unlock-alt');
        }
    });
}

function CertNrCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd) {

    HideReport('CertNrCexTableReportId');
    HideReport('CertNrSiteTableReportId');
    HideReport('CertNrMpTableReportId');
    HideReport('BarChartReportId');
    HideReport('PieChartReportId');
    ParamMessageReset();
    $('#CertNrCexTableId').DataTable().destroy();
    $('#CertNrCexTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', 'fas fa-search');
            ShowReport("CertNrCexTableReportId");

            var labels = GetColumnArray('CertNrCexTableId', 0);
            var data1 = GetColumnArray('CertNrCexTableId', 3);
            var data2 = GetColumnArray('CertNrCexTableId', 4);
            var backgroundColor = GetBackgroundColor('CertNrCexTableId');
            DisplayChartBar(labels, data1, data2, "OPE", "CE");
            DisplayChartDoughnut(labels, backgroundColor, data1);

        },
        "ajax": {
            "url": "/Cert/CertNrCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "DhmValueFrom" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationHandledNumber + "/" + data.StationsNumber; } },//2
            { "data": "ReceiptOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//3
            { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
            { "data": "ReceiptGap" },//5
            { "data": "NumberOpe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//6
            { "data": "NumberCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//7           
            { "data": "NumberGap" },//8
            { "data": "CertNrSiteHandledId" }//9
        ],
        "columnDefs": [
            { "width": "10%", "className": "text-left", "targets": 0 },//StationName
            { "width": "15%", "className": "text-center", "targets": 1 },//DhmValueFrom
            { "width": "10%", "className": "text-center", "targets": 2 },//StationsHandled
            { "width": "10%", "className": "text-right", "targets": 3 },//ReceiptOpe
            { "width": "10%", "className": "text-right", "targets": 4 },//ReceiptCe
            { "width": "10%", "className": "text-right", "targets": 5 },//ReceiptGap
            { "width": "0%", "className": "text-right none", "targets": 6 },//NumberOpe
            { "width": "0%", "className": "text-right none", "targets": 7 },//NumberCe
            { "width": "0%", "className": "text-right none", "targets": 8 },//NumberGap
            { "width": "5%", "className": "text-center", "targets": 9 },//Search

            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 2, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['StationsGap']); } },

            { "targets": 5, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 8, "render": function (data, type, row) { return GetGapNumberFromDataTable(data); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertNrSiteSearch', data, 'fas fa-cube', '0048ff'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            MpReceiptOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(3).footer()).html(numFormat(MpReceiptOpeTotal));
            $(api.column(4).footer()).html(numFormat(MpReceiptCeTotal));

            if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
                $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numFormat(MpReceiptGapTotal) + '</span>');
            else $(api.column(5).footer()).html('<span  class="badge badge-success">0.00</span>');



            MpNumberOpeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpNumberCeTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpNumberGapTotal = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(6).footer()).html(MpNumberOpeTotal);
            $(api.column(7).footer()).html(MpNumberCeTotal);

            if (MpNumberGapTotal !== 0)
                $(api.column(8).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
            else $(api.column(8).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        }
    });
}

function CertNrCexDisplay() {
    $('#ParamActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = new String($('#SiteId').val());
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (SiteId != null &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        CertNrCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd);
    }
    else {
        $('#ParamMessageContainerId').attr("class", "alert alert-danger");
        $('#ParamMessageIconId').attr("class", "fas fa-exclamation-triangle");
        $('#ParamMessageTextId').html("Certains champs sont obligatoires");
    };
}

function CertNrSiteSearch(Id) {
    var ActionBtnId = new String('CertNrSiteSearchBtnId' + Id);
    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var Icon = 'fas fa-eye';
    CertNrSiteGet(ActionBtnId, Icon, SiteId, BagContainerId, DateStringStart, DateStringEnd);
}

function CertNrPeriodMpSearch(CertNrStationDaysHandledId) {

    var ActionBtnId = new String('CertNrPeriodMpSearchBtnId' + CertNrStationDaysHandledId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertNrStationDaysHandledId).substr(0, 8);
    var DateStringEnd = new String(CertNrStationDaysHandledId).substr(8, 8);
    var SiteId = new String(CertNrStationDaysHandledId).substr(16, 2);
    var StationNumber = new String(CertNrStationDaysHandledId).substr(18, 2);

    HideReport('CertNrPeriodMpTableReportId');
    HideReport('CertNrCexTableReportId');
    HideReport('CertNrSiteTableReportId');
    HideReport('CertNrMpTableReportId');
    HideReport('BarChartReportId');
    HideReport('PieChartReportId');
    ParamMessageReset();

    $('#CertNrPeriodMpTableId').DataTable().destroy();
    $('#CertNrPeriodMpTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', 'fas fa-search');
            ShowReport("CertNrPeriodMpTableReportId");

            //var labels = GetColumnArray('CertNrPeriodTableId', 0);
            //var data1 = GetColumnArray('CertNrPeriodTableId', 5);
            //var data2 = GetColumnArray('CertNrPeriodTableId', 6);
            //var backgroundColor = GetBackgroundColor('CertNrPeriodTableId');
            //DisplayChartBar(labels, data1, data2, "OPE", "CE");
            //DisplayChartDoughnut(labels, backgroundColor, data1)
        },
        "ajax": {
            "url": "/Cert/CertNrPeriodMpSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "StationName" },//0
            { "data": "DateValueStart1" },//1
            { "data": "DateValueEnd1" },//2
            { "data": "MpName" },//3
            { "data": "ReceiptOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
            { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
            { "data": "ReceiptGap" },//6
            { "data": "NumberOpe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//7
            { "data": "NumberCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//8
            { "data": "NumberGap" },//9
            { "data": "CertNrPeriodMpId" },//10
        ],
        "columnDefs": [
            { "width": "15%", "className": "text-left", "targets": 0 },//StationName            
            { "width": "10%", "className": "text-center", "targets": 1 },//DhmValueFrom
            { "width": "10%", "className": "text-center", "targets": 2 },//DhmValueTo
            { "width": "15%", "className": "text-left", "targets": 3 },//MpName
            { "width": "10%", "className": "text-right", "targets": 4 },//ReceiptOpe
            { "width": "10%", "className": "text-right", "targets": 5 },//ReceiptCe
            { "width": "5%", "className": "text-right", "targets": 6 },//ReceiptGap
            { "width": "10%", "className": "text-right none", "targets": 7 },//NumberOpe
            { "width": "10%", "className": "text-right none", "targets": 8 },//NumberCe
            { "width": "5%", "className": "text-right none", "targets": 9 },//NumberGap
            { "width": "5%", "className": "text-center", "targets": 10 },//Search Jour
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return GetDateValueFromDataTableDate(data);
                }
            },
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return GetDateValueFromDataTableDate(data);
                }
            },
            {
                "targets": 6, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if (($('<div/>').text(data.toFixed(2)).html() !== "0.00") && ($('<div/>').text(data.toFixed(2)).html() !== "-0.00"))
                        return '<span  class="badge badge-danger">' + data.toFixed(2) + '</span>';
                    else return '<span  class="badge badge-success">0.00</span>';
                }
            },
            {
                "targets": 9, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if ($('<div/>').text(data).html() !== "0")
                        return '<span  class="badge badge-danger">' + data + '</span>';
                    else return '<span  class="badge badge-success" >' + data + '</span>';
                }
            },
            {
                "targets": 10, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertNrCexSearchBtnId' + data + '" ' +
                        'style="background-color: Transparent;border: none" ' +
                        'onclick="CertNrPeriodStationDaysSearch(\'' + data + '\')" >' +
                        '<span class="fas fa-search" style="color:#a3a3a3" ></span></button>'
                }
            }
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            MpReceiptOpeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptCeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptGapTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(4).footer()).html(numFormat(MpReceiptOpeTotal));
            $(api.column(5).footer()).html(numFormat(MpReceiptCeTotal));

            if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
                $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numFormat(MpReceiptGapTotal) + '</span>');
            else $(api.column(6).footer()).html('<span  class="badge badge-success">0.00</span>');



            //MpNumberOpeTotal = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //MpNumberCeTotal = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //MpNumberGapTotal = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(8).footer()).html(MpNumberOpeTotal);
            //$(api.column(9).footer()).html(MpNumberCeTotal);

            //if (MpNumberGapTotal !== 0)
            //    $(api.column(10).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
            //else $(api.column(10).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        }
    });
}

function CertNrPeriodDisplay() {
    var SiteId = new String($('#SiteId').val());
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (SiteId != null &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        $('#ParamActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('CertNrPeriodTableReportId');
        HideReport('CertNrCexTableReportId');
        HideReport('CertNrSiteTableReportId');
        HideReport('CertNrMpTableReportId');
        HideReport('BarChartReportId');
        HideReport('PieChartReportId');
        ParamMessageReset();
        $('#CertNrPeriodTableId').DataTable().destroy();
        $('#CertNrPeriodTableId').DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "initComplete": function (settings, json) {
                $('#ParamActionBtnId').find('span').attr('class', 'fas fa-search');
                ShowReport("CertNrPeriodTableReportId");

                //var labels = GetColumnArray('CertNrPeriodTableId', 0);
                //var data1 = GetColumnArray('CertNrPeriodTableId', 5);
                //var data2 = GetColumnArray('CertNrPeriodTableId', 6);
                //var backgroundColor = GetBackgroundColor('CertNrPeriodTableId');
                //DisplayChartBar(labels, data1, data2, "OPE", "CE");
                //DisplayChartDoughnut(labels, backgroundColor, data1) 
            },
            "ajax": {
                "url": "/Cert/CertNrPeriodDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    SiteId: SiteId,
                    DateStringStart: DateStringStart,
                    DateStringEnd: DateStringEnd
                }
            },
            "columns": [
                { "data": "SiteName" },//0
                { "data": "DhmValueStart" },//1
                { "data": "DhmValueEnd" },//2
                { "mData": function vehicle(data, type, dataToSet) { return data.DaysHandledNumber + "/" + data.DaysNumber; } },//3
                { "mData": function vehicle(data, type, dataToSet) { return data.StationsHandledNumber + "/" + (data.StationsNumber * data.DaysNumber); } },//4
                { "data": "ReceiptOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
                { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//6
                { "data": "ReceiptGap" },//7
                { "data": "NumberOpe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//8
                { "data": "NumberCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//9         
                { "data": "NumberGap" },//10
                { "data": "CertNrDaysHandledId" },//11
                { "data": "CertNrDaysHandledId" }//12
            ],
            "columnDefs": [
                { "width": "10%", "className": "text-left", "targets": 0 },//SiteName
                { "width": "10%", "className": "text-center", "targets": 1 },//DhmValueFrom
                { "width": "10%", "className": "text-center", "targets": 2 },//DhmValueTo
                { "width": "5%", "className": "text-left", "targets": 3 },//DaysGap
                { "width": "5%", "className": "text-left", "targets": 4 },//StationsGap
                { "width": "10%", "className": "text-right", "targets": 5 },//ReceiptOpe
                { "width": "10%", "className": "text-right", "targets": 6 },//ReceiptCe
                { "width": "10%", "className": "text-right", "targets": 7 },//ReceiptGap
                { "width": "0%", "className": "text-right none", "targets": 8 },//NumberOpe
                { "width": "0%", "className": "text-right none", "targets": 9 },//NumberCe
                { "width": "0%", "className": "text-right none", "targets": 10 },//NumberGap
                { "width": "10%", "className": "text-center", "targets": 11 },//Search Jour
                { "width": "10%", "className": "text-center", "targets": 12 },//Search Station

                { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
                { "targets": 2, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

                { "targets": 3, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['DaysGap']); } },
                { "targets": 4, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['StationsGap']); } },

                { "targets": 7, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
                { "targets": 10, "render": function (data, type, row) { return GetGapNumberFromDataTable(data); } },

                { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertNrCexSearch', data, 'fas fa-adjust', '0048ff'); } }, //OK
                { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertNrPeriodStationSearch', data, 'fas fa-cube', '0048ff'); } }, //OK
            ],
            "autoWidth": false,
            "iDisplayLength": 20,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "processing": false,
            "responsive": true,
            "bFilter": false,
            "autoWidth": false,
            "searching": false,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                MpReceiptOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                MpReceiptCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                MpReceiptGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(5).footer()).html(numFormat(MpReceiptOpeTotal));
                $(api.column(6).footer()).html(numFormat(MpReceiptCeTotal));

                if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
                    $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(MpReceiptGapTotal) + '</span>');
                else $(api.column(7).footer()).html('<span  class="badge badge-success">0.00</span>');



                MpNumberOpeTotal = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                MpNumberCeTotal = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                MpNumberGapTotal = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(8).footer()).html(MpNumberOpeTotal);
                $(api.column(9).footer()).html(MpNumberCeTotal);

                if (MpNumberGapTotal !== 0)
                    $(api.column(10).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
                else $(api.column(10).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

            }
        });
    }
    else {
        $('#ParamMessageContainerId').attr("class", "alert alert-danger");
        $('#ParamMessageIconId').attr("class", "fas fa-exclamation-triangle");
        $('#ParamMessageTextId').html("Le CEX et le jour sont obligatoires");
    };
}

function CertNrPeriodStationSearch(CertNrDaysHandledId) {

    var ActionBtnId = new String('CertNrPeriodStationSearchBtnId' + CertNrDaysHandledId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertNrDaysHandledId).substr(0, 8);
    var DateStringEnd = new String(CertNrDaysHandledId).substr(8, 8);
    var SiteId = new String(CertNrDaysHandledId).substr(16, 2);

    HideReport('CertNrPeriodStationTableReportId');
    HideReport('CertNrCexTableReportId');
    HideReport('CertNrSiteTableReportId');
    HideReport('CertNrMpTableReportId');
    HideReport('BarChartReportId');
    HideReport('PieChartReportId');
    ParamMessageReset();

    $('#CertNrPeriodStationTableId').DataTable().destroy();
    $('#CertNrPeriodStationTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', 'fas fa-search');
            ShowReport("CertNrPeriodStationTableReportId");

            //var labels = GetColumnArray('CertNrPeriodTableId', 0);
            //var data1 = GetColumnArray('CertNrPeriodTableId', 5);
            //var data2 = GetColumnArray('CertNrPeriodTableId', 6);
            //var backgroundColor = GetBackgroundColor('CertNrPeriodTableId');
            //DisplayChartBar(labels, data1, data2, "OPE", "CE");
            //DisplayChartDoughnut(labels, backgroundColor, data1)
        },
        "ajax": {
            "url": "/Cert/CertNrPeriodStationSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "BagContainerId" },//0
            { "data": "DhmValueStart" },//1
            { "data": "DhmValueEnd" },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.NrStationDaysHandledNumber + "/" + data.NrStationDaysNumber; } },//3
            { "data": "ReceiptOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
            { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
            { "data": "ReceiptGap" },//6
            { "data": "NumberOpe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//7
            { "data": "NumberCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//8     
            { "data": "NumberGap" },//9
            { "data": "CertNrStationDaysHandledId" },//10
            { "data": "CertNrStationDaysHandledId" },//11
        ],
        "columnDefs": [
            { "width": "15%", "className": "text-left", "targets": 0 },//StationName
            { "width": "10%", "className": "text-center", "targets": 1 },//DhmValueFrom
            { "width": "10%", "className": "text-center", "targets": 2 },//DhmValueTo
            { "width": "5%", "className": "text-center", "targets": 3 },//DaysGap
            { "width": "10%", "className": "text-right", "targets": 4 },//ReceiptOpe
            { "width": "10%", "className": "text-right", "targets": 5 },//ReceiptCe
            { "width": "5%", "className": "text-right", "targets": 6 },//ReceiptGap
            { "width": "10%", "className": "text-right none", "targets": 7 },//NumberOpe
            { "width": "10%", "className": "text-right none", "targets": 8 },//NumberCe
            { "width": "5%", "className": "text-right none", "targets": 9 },//NumberGap
            { "width": "5%", "className": "text-center", "targets": 10 },//Search Mp
            { "width": "5%", "className": "text-center", "targets": 11 },//Search Jour
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return GetDateValueFromDataTableDate(data);
                }
            },
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return GetDateValueFromDataTableDate(data);
                }
            },
            {
                "targets": 3, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if ($('<div/>').text(row['DaysGap']).html() !== "0")
                        return '<span  class="badge badge-danger">' + data + '</span>';
                    else return '<span  class="badge badge-success" >' + data + '</span>';
                }
            },
            {
                "targets": 6, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if (($('<div/>').text(data.toFixed(2)).html() !== "0.00") && ($('<div/>').text(data.toFixed(2)).html() !== "-0.00"))
                        return '<span  class="badge badge-danger">' + data.toFixed(2) + '</span>';
                    else return '<span  class="badge badge-success">0.00</span>';
                }
            },
            {
                "targets": 9, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if ($('<div/>').text(data).html() !== "0")
                        return '<span  class="badge badge-danger">' + data + '</span>';
                    else return '<span  class="badge badge-success" >' + data + '</span>';
                }
            },
            {
                "targets": 10, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertNrPeriodMpSearchBtnId' + data + '" ' +
                        'style="background-color: Transparent;border: none" ' +
                        'onclick="CertNrPeriodMpSearch(\'' + data + '\')" >' +
                        '<span class="far fa-credit-card" style="color:#a3a3a3" ></span></button>'
                }
            },
            {
                "targets": 11, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertNrPeriodSiteSearchBtnId' + data + '" ' +
                        'style="background-color: Transparent;border: none" ' +
                        'onclick="CertNrPeriodSiteSearch(\'' + data + '\')" >' +
                        '<span class="fas fa-search" style="color:#a3a3a3" ></span></button>'
                }
            }
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            MpReceiptOpeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptCeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptGapTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(4).footer()).html(numFormat(MpReceiptOpeTotal));
            $(api.column(5).footer()).html(numFormat(MpReceiptCeTotal));

            if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
                $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numFormat(MpReceiptGapTotal) + '</span>');
            else $(api.column(6).footer()).html('<span  class="badge badge-success">0.00</span>');



            //MpNumberOpeTotal = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //MpNumberCeTotal = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //MpNumberGapTotal = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(8).footer()).html(MpNumberOpeTotal);
            //$(api.column(9).footer()).html(MpNumberCeTotal);

            //if (MpNumberGapTotal !== 0)
            //    $(api.column(10).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
            //else $(api.column(10).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        }
    });
}

function CertNrCexSearch(CertNrDaysHandledId) {

    var ActionBtnId = new String('CertNrCexSearchBtnId' + CertNrDaysHandledId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertNrDaysHandledId).substr(0, 8);
    var DateStringEnd = new String(CertNrDaysHandledId).substr(8, 8);
    var SiteId = new String(CertNrDaysHandledId).substr(16, 2);

    CertNrCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd);
}

function CertNrPeriodSiteSearch(CertNrStationDaysHandledId) {

    var ActionBtnId = new String('CertNrPeriodSiteSearchBtnId' + CertNrStationDaysHandledId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertNrStationDaysHandledId).substr(0, 8);
    var DateStringEnd = new String(CertNrStationDaysHandledId).substr(8, 8);
    var SiteId = new String(CertNrStationDaysHandledId).substr(16, 2);
    var BagContainerId = new String(CertNrStationDaysHandledId).substr(18, 2);

    CertNrSiteGet(ActionBtnId, SiteId, BagContainerId, DateStringStart, DateStringEnd);
}

function CertNrSitePostSearch(CertNrSiteValidateId) {
    var ActionBtnId = new String('CertNrSitePostSearchBtnId' + CertNrSiteValidateId);
    var DateStringStart = new String(CertNrSiteValidateId).substr(10, 2) + new String(CertNrSiteValidateId).substr(8, 2) + new String(CertNrSiteValidateId).substr(4, 4);
    var DateStringEnd = DateStringStart;
    var SiteId = new String(CertNrSiteValidateId).substr(0, 2);
    var BagContainerId = new String(CertNrSiteValidateId).substr(2, 2);
    var StationNumber = '0';
    //var IsGap = new Boolean(false);
    var MpId = new String('98');
    var Icon = 'fas fa-eye'
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    CertPostGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
}

function CertNrSiteOpeRecalculate(Id) {
    $('#CertNrSiteOpeRecalculateBtnId' + Id).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Icon = 'far fa-check-circle';
    var obj = {};
    obj.Id = Id;

    $.ajax({
        url: "/Cert/CertNrSiteOpeRecalculate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertNrSiteOpeRecalculateBtnId' + Id).find('span').attr('class', Icon);
        },
        error: function (request, status, error) {
            alert('Vous ne disposez pas des autorisations nécessaires pour effectuer cette action');
            $('#CertNrSiteOpeRecalculateBtnId' + Id).find('span').attr('class', 'fas fa-minus-circle');
        }
    });
}


function CertTraficOdGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, SectionId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'CertTraficOd';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficOdGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationNumber": StationNumber,
                "SectionId": SectionId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationNameO; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName; } },//2

            { "data": "TraficOdOpe" },//3
            { "data": "TraficOdCe" },//4
            { "data": "TraficOdToll" },//5
            { "data": "TraficOdCe" },//6

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.OdId; } },//7 Detail

        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableDiffIntGet(row['TraficOdCe'], row['TraficOdToll']); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertTraficOd\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', ''); } },
        ],
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 5);
        }
    });
}


function CertTraficSectionGet(ActionBtnId, Icon, SectionId, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'CertTraficSection';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficSectionGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SectionId": SectionId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationNameO; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.StationNameD; } },//2

            { "data": "TraficOpe" },//3
            { "data": "TraficCe" },//4 
            { "data": "TraficTrxLane" },//5

            { "data": "GapAbsolute" },//6
            { "data": "GapAbsolute" },//7

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + '0000' + data.SectionId; } },//8
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficTrxLane'], row['TraficOpe'], 2, 100); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertTraficOdSearch', data, 'fas fa-eye', '0048ff'); } },
        ],
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total1));

            Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total2));

            Total3 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total3));

            Total4 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total4));

            //if (Total4 !== 0)
            //    $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numFormat(Total4) + '</span>');
            //else $(api.column(6).footer()).html('<span  class="badge badge-success">' + numFormat(Total4) + '</span>');
        }
    });
}

function CertTraficOdSearch(Id) {

    var ActionBtnId = new String('CertTraficOdSearch' + 'BtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);
    var SectionId = new String(Id).substr(12, new String(Id).length - 12);
    var Icon = 'fas fa-eye';

    if (SectionId == '00') {
        SectionId = 0;
    }
    if (SiteId == '00') {
        SiteId = 0;
    }
    if (StationNumber == '00') {
        StationNumber = 0;
    }
    CertTraficOdGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, SectionId, DateStringStart, DateStringEnd);
}


function CertTraficOdStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    $('#CertTraficOdStationTableId').DataTable().destroy();
    $('#CertTraficOdStationTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertTraficOdStationTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertTraficOdStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationNumber": StationNumber,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        }
        ,
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.StationName; } },//1

            { "data": "TraficOdOpe" }, //2
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//3

            { "data": "TraficOdOut" }, //4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//5

            { "data": "TraficOdCe" }, //6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//7

            { "data": "TraficOdToll" }, //8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//10

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//11
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//12


            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + '00'; } },//13
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//14
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right none", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return DataTableStringTruncate(data, 30); } },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 3, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '85';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7K';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'E2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 10, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 11, "render": function (data, type, row) { return DataTableDiffIntGet(row['TraficOdCe'], row['TraficOdToll']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficOdToll'], row['TraficOdCe'], 2, 100); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertTraficOdSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableButtonDeleteGet('CertTraficOd', data); } },
        ],

        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter!",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(numShortFormat(Total1));

            Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total2));

            Total3 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total3));

            Total4 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total4));

            Total5 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            if (Total5 !== 0)
                $(api.column(10).footer()).html('<span  class="badge badge-danger">' + numFormat(Total5) + '</span>');
            else $(api.column(10).footer()).html('<span  class="badge badge-success">' + numFormat(Total5) + '</span>');
        }
    });
}

function CertTraficOdStationDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTraficOdStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTraficOdMonthDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTraficOdMonthGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTraficOdStationSearch(Id) {

    var ActionBtnId = new String('CertTraficOdStationSearch' + 'BtnId' + Id);
    var IsMargin = false;
    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var Icon = 'fas fa-eye';
    var IsGap = false;

    CertTraficOdStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertTraficSectionSearch(Id) {

    var ActionBtnId = new String('CertTraficSectionSearch' + 'BtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SectionId = '0';
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsGap = false;

    CertTraficSectionGet(ActionBtnId, Icon, SectionId, DateStringStart, DateStringEnd, IsGap);
}


function CertTraficOdDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertTraficOdDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficOdDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "DhmValue" },//0

            { "data": "TraficOdOpe" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "TraficOdOut" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "TraficOdCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "data": "TraficOdToll" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//12 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['IsSourceValid']) + ' ' + DataTableDateValueFromRowGet(row); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '85';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },



            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '07';
                    var FileTypeId = 'N1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7K';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {

                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'E2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TraficOdCe'], row['TraficOdToll']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficOdToll'], row['TraficOdCe'], 2, 100); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertTraficOdStationSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 12, "render": function (data, type, row) { return CertIsValidGet(data, '06', row['IsValid']); } },//TraficOd
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 7);
        }
    });
}


function CertTraficSectionDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertTraficSectionDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "Year" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsOkNumber + ' / ' + data.StationsTotalNumber; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "TraficOpe" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "TraficCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "data": "TraficTrxLane" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8

            { "data": "GapAbsolute" },//9
            { "data": "GapAbsolute" },//10

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11


        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center none", "targets": 1 },
            { "width": "3%", "className": "text-left none", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },



            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            //{ "targets": 1, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr01']); } },            
            {
                "targets": 2, "render": function (data, type, row) {
                    return DataTableBtnGet('CertDayGapGet', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-info-circle btn-icon-cl cg-c-cl', '');
                }
            },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '85';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'T1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficTrxLane'], row['TraficOpe'], 2, 100); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertTraficSectionSearch', data, 'fas fa-eye', '0048ff'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numFormat(Total1));

            Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total2));

            Total3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total3));
        }
    });
}


function CertTraficOdMonthGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertTraficOdDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "Year" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsOkNumber + ' / ' + data.StationsTotalNumber; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "TraficOpe" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "TraficCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "data": "TraficTrxLane" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8

            { "data": "GapAbsolute" },//9
            { "data": "GapAbsolute" },//10

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11


        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right none", "targets": 5 },
            { "width": "3%", "className": "text-left none", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },



            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            //{ "targets": 1, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr01']); } },            
            {
                "targets": 2, "render": function (data, type, row) {
                    return DataTableBtnGet('CertDayGapGet', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-info-circle btn-icon-cl cg-c-cl', '');
                }
            },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '08' + '85' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'T1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '10' + 'E1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficTrxLane'], row['TraficOpe'], 2, 100); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertTraficOdStationSearch', data, 'fas fa-eye', '0048ff'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numFormat(Total1));

            Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total2));

            Total3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total3));
        }
    });
}




function CertTraficHourOpenOld() {
    HideReport('HomeLineId5');
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertTraficHourDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    HideReport('CertTraficPeriod' + 'TableReportId');
    HideReport('CertTraficCex' + 'TableReportId');
    HideReport('CertTraficStation' + 'TableReportId');
    HideReport('CertTraficHour' + 'TableReportId');

    HideReport('Bar' + 'ChartReportId');
    HideReport('BarHorizontal' + 'ChartReportId');
    HideReport('Pie' + 'ChartReportId');
    HideReport('Line' + 'ChartReportId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "blue";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
}


//function CertTraficStationOpen() {
//    HideReport('HomeLineId5');
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');
//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertTraficStationDisplay()");
//    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
//    $('#ParamActionTextId').text('Afficher');

//    HideReport('CertTraficPeriod' + 'TableReportId');
//    HideReport('CertTraficCex' + 'TableReportId');
//    HideReport('CertTraficStation' + 'TableReportId');
//    HideReport('CertTraficHour' + 'TableReportId');

//    HideReport('Bar' + 'ChartReportId');
//    HideReport('BarHorizontal' + 'ChartReportId');
//    HideReport('Pie' + 'ChartReportId');
//    HideReport('Line' + 'ChartReportId');

//    document.getElementById('MenuBarId0').style.color = "grey";
//    document.getElementById('MenuBarId1').style.color = "grey";
//    document.getElementById('MenuBarId2').style.color = "blue";
//    document.getElementById('MenuBarId3').style.color = "grey";
//    document.getElementById('MenuBarId4').style.color = "grey";
//}

function CertTraficCexOpen() {
    HideReport('HomeLineId5');
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    HideReport('BagContainerIdParent');
    HideReport('StationIdParent');
    HideReport('SensParent');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertTraficCexDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    HideReport('CertTraficPeriod' + 'TableReportId');
    HideReport('CertTraficCex' + 'TableReportId');
    HideReport('CertTraficStation' + 'TableReportId');
    HideReport('CertTraficHour' + 'TableReportId');

    HideReport('Bar' + 'ChartReportId');
    HideReport('BarHorizontal' + 'ChartReportId');
    HideReport('Pie' + 'ChartReportId');
    HideReport('Line' + 'ChartReportId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "blue";
    document.getElementById('MenuBarId4').style.color = "grey";
}

function CertTraficPeriodOpen() {
    HideReport('HomeLineId5');
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    HideReport('BagContainerIdParent');
    HideReport('StationIdParent');
    HideReport('SensParent');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertTraficPeriodDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    HideReport('CertTraficPeriod' + 'TableReportId');
    HideReport('CertTraficCex' + 'TableReportId');
    HideReport('CertTraficStation' + 'TableReportId');
    HideReport('CertTraficHour' + 'TableReportId');

    HideReport('Bar' + 'ChartReportId');
    HideReport('BarHorizontal' + 'ChartReportId');
    HideReport('Pie' + 'ChartReportId');
    HideReport('Line' + 'ChartReportId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "blue";
}

function CertTraficHourHourGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertTraficHourTableReportId');
    //HideReport('BarChartReportId');
    //HideReport('PieChartReportId');
    ParamMessageReset();

    var Icon = 'fas fa-eye';
    var Pattern = 'CertTraficHourHour';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficHourHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationNumber": StationNumber,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "data": "StationName" }, //1
            { "data": "Sens" }, //2
            { "data": "DhmValue" }, //3

            { "data": "TraficOpe" },//4
            { "data": "TraficCe" },//5
            { "data": "GapAbsolute" },//6   

            { "data": "TraficHourStationRecoId" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },

            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertTraficHourLaneSearch', data, 'fas fa-eye', '0048ff'); } },
        ],
        //"responsive": true,
        "autoWidth": false,
        "iDisplayLength": 48,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "bFilter": false,
        "footerCallback": function (row, data, start, end, display) {

            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total3 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(4).footer()).html(numShortFormat(Total1));
            $(api.column(5).footer()).html(numShortFormat(Total2));
            $(api.column(6).footer()).html(numShortFormat(Total3));

            if (Total3 !== 0)
                $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numShortFormat(Total3) + '</span>');
            else $(api.column(6).footer()).html('<span  class="badge badge-success">' + numShortFormat(Total3) + '</span>');
        }
    });


}

function CertTraficHourDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var Icon = 'fas fa-eye';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTraficGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd)
    }
    else {
        ParamMessageErrorDisplay()
    };
}

function CertTraficHourHourSearch(Id) {

    var ActionBtnId = new String('CertTraficHourHourSearch' + 'BtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);
    var Icon = 'fas fa-eye';

    CertTraficHourHourGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);

}

function CertTraficHourZipSearch(TraficHourStationRecoId) {
    $('#CertTraficHourZipSearchBtnId' + ReceiptBagRecoId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertTraficHourMsgTableReportId');
    HideReport('CertTraficHourMsgPostTableReportId');
    HideReport('CertTraficHourZipTableReportId');
    HideReport('BarChartReportId');
    HideReport('PieChartReportId');
    $('#TraficDataTable').DataTable().destroy();;
    $('#TraficDataTable').DataTable({
        "initComplete": function (settings, json) {
            $(ButtonIdHash).closest('tr').find('td:eq(6)').find('span').attr('class', '');
            $(ButtonIdHash).attr('class', 'glyphicon glyphicon-ok');
            ShowReport("DashboardTraficHourReport");
            ShowReport("ReconstitutionZipdataReport");
            ShowReport("TraficDataReport");
        },
        "processing": true,
        "ajax": {
            "url": "/Cert/CertTraficHourZipSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "TraficHourStationRecoId": TraficHourStationRecoId
            }
        },
        "columns": [
            { "data": "StationNumber" }, //0
            { "data": "DhmValue" },//1
            { "data": "LaneName" },//2
            { "data": "Trafic", "render": $.fn.dataTable.render.number(' ', '', 0) },//3
            { "data": "DataLine" },//4
            { "data": "TraficDataId" }//5
        ],
        "columnDefs": [
            { "width": "10%", "className": "text-left", "targets": 0 }, //StationNumber
            { "width": "20%", "className": "text-center", "targets": 1 }, //DhmValue
            { "width": "10%", "className": "text-center", "targets": 2 }, //LaneName
            { "width": "10%", "className": "text-center", "targets": 3 },//Trafic
            { "width": "20%", "className": "text-center", "targets": 4 },//DataLine
            { "width": "5%", "className": "text-center", "targets": 5 },//button download
            {
                "targets": 1,
                "render": function (value) {
                    if (value === null) return "";
                    var pattern = /Date\(([^)]+)\)/;//date format from server side
                    var results = pattern.exec(value);
                    var dt = new Date(parseFloat(results[1]));

                    return dt.toLocaleDateString() + " " + dt.toLocaleTimeString();
                }
            },
            {
                "targets": 4,
                "render": function (data, type, row) {
                    return data.substr(0, 35);
                }
            },
            {
                "targets": 5, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="DownloadTraficDataBtn' + data + '" type="button" style="font-size: 16px"" ' +
                        'onclick="DownloadTraficDataExecute(\'' + data + '\')" >' +
                        '<span class="glyphicon glyphicon-save" ></span></button>';
                }
            }
        ],
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": false,
        "bPaginate": false,
        "bFilter": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            TraficTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(TraficTotal));
        }
    });
}

function CertTraficHourLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, LaneName, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertTraficHourLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficHourLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSId" },//1
            { "data": "StationName" },//2
            { "data": "LaneName" },//3

            { "data": "TotalTrafic" },//4
            { "data": "TotalZip" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//6 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//7 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//8 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//9 Calc

            { "data": "TotalCe" },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//11 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//12 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//13 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//14 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Event zip
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1;
                }
            },
            {
                "targets": 9, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1;
                }
            },

            //Ce
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 11, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'Y8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 12, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions                       
            {
                "targets": 14, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTraficHourHourSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 10);
        }
    });
}

function CertTraficHourLaneSearch(Id) {
    var ActionBtnId = new String('CertTraficHourLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;

    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var LaneName = '0';
    var IsGap = false;

    CertTraficHourLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, LaneName, IsGap);
}



//TraficHour
function CertTraficHourOpen() {

    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(4, 0, 2);

    ParamTitleSet('Certification du trafic horaire');
    ShowReport('ParamReportId');

    //Parents
    ShowParent('RegionId');
    ShowParent('LSId');
    ShowParent('StationNumberId');
    ShowParent('LaneNameId');
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSSecGet()');
    //ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertTraficHourAllDisplay()');

    //Default
    ElementDropDownListSet('TimeId', '01');

    //Noti
    NotiConnectionIdUpdate('Certification > Trafic horaire');

    //Display
    CertTraficHourAllDisplay();
}


function CertTraficHourAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';


    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '01') {//Day
        CertTraficHourDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertTraficHourStationDisplay(ActionBtnId, Icon);
        }
        else {
            if (TimeId == '08') {//Lane
                //CertTraficHourLaneDisplay(ActionBtnId, Icon);
            }
            else {
                ParamMessageErrorDisplay("Ce pré-réglage n'est pas authorisé.");
            }
        }
    }
}


function CertTraficHourDayDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsMargin = true;

    CertAllReportsHide();

    CertTraficHourDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd);
}


function CertTraficHourDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertTraficHourDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficHourDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TraficToll" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 Calc

            { "data": "TraficOpe" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Upload
                       
            { "data": "TraficCe" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//12 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//13 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//14 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center none", "targets": 6 },
            { "width": "3%", "className": "text-center none", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['IsSourceValid']) + ' ' + DataTableDateValueFromRowGet(row); } },

            //Event zip
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 3, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Zip Evt
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1;
                }
            },
            {
                "targets": 5, "render": function (data, type, row) { //
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                    
                    return Btn1;
                }
            },

            //OPE
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 7, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '80';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Ce
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7N';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            
            { "targets": 10, "render": function (data, type, row) { return DataTableDiffIntGet(row['TraficToll'], row['TraficCe']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficCe'], row['TraficToll'], 6, 100); } },

            //Actions            
            {
                "targets": 12, "render": function (data, type, row) {
                    
                    var Id0 = data + '0';
                    var Id1 = data + '1';
                    var Btn0 = DataTableButtonGet('CertTraficHourStationSearch', Id0, '\'' + Id0 + '\', \'' + data + '\'' + ', ' + false, '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                    var Btn1 = DataTableButtonGet('CertTraficHourStationSearch', Id1, '\'' + Id1 + '\', \'' + data + '\'' + ', ' + true, '', 'dt-btn-cl gc-bc4-cl', 'fas fa-eye btn-icon-cl gc-c4-cl', '');
                    return Btn0 + Btn1;
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTraficHourDayHandle', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-stethoscope btn-icon-cl gc-c1-cl', '');;
                }
            },
            { "targets": 14, "render": function (data, type, row) { return CertIsValidGet(data, '10', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 6);
        }
    });
}


function CertTraficHourStationSearch(Id, DateString, IsGap) {


    var ActionBtnId = new String('CertTraficHourStationSearchBtnId' + Id);
    var Icon = 'far fa-check-circle';
    var IsMargin = false;
    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = DateString;
    var DateStringEnd = DateString;
    var RegionId = '0';
    var LSId = '0';
    var StationNumber = '0';
    //var IsGap = false;

    CertTraficHourStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}


function CertTraficHourDayHandle(Id) {
    var ActionBtnId = 'CertTraficHourDayHandleBtnId' + Id;
    var Icon = 'far fa-check-circle';
    var IsMargin = false;
    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);

    var obj = {};
    obj.DateStringStart = DateStringStart;
    obj.DateStringEnd = DateStringEnd;
    $.ajax({
        url: "/Cert/CertTraficHourHandle",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
        }
    });
}

function CertTraficHourStationDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');

    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    CertAllReportsHide();

    CertTraficHourStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}


function CertTraficHourStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertTraficHourStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficHourStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSId" },//1
            { "data": "StationName" },//2

            { "data": "TraficToll" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//4 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//5 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//6 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//7 Calc

            { "data": "TraficOpe" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//9 Upload

            { "data": "TraficCe" },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//11 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//12 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//13 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//14 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//15 Ce
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center none", "targets": 8 },
            { "width": "3%", "className": "text-center none", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "width": "3%", "className": "text-center", "targets": 14 },
            { "width": "3%", "className": "text-center", "targets": 15 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Event zip
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 5, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1;
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1;
                }
            },

            //Ope
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '80';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Ce
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 11, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7N';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            
            { "targets": 12, "render": function (data, type, row) { return DataTableDiffIntGet(row['TraficToll'], row['TraficCe']); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficCe'], row['TraficToll'], 6, 100); } },

            //Actions                       
            {
                "targets": 14, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTraficHourLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
            {
                "targets": 15, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'Y8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1;
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 8);
        }
    });
}


function CertTraficHourLaneDisplay(ActionBtnId, Icon) {
    //Hide some parent reports
    CertAllReportsHide();

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');

    var IsGap = ElementBooleanGet('IsGapId');

    CertTraficHourLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, LaneName, IsGap);
}



//Event
function CertEventOpen() {

    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(8, 0, 4);

    $('#ParamTitleId').text("Certification des évènements");
    ShowReport('ParamReportId');
    ShowParent('RegionId');
    ShowParent('LSId');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('LaneNameId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSSecGet()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertEventAllDisplay()');

    //Default
    ElementDropDownListSet('TimeId', '01');

    //Noti
    NotiConnectionIdUpdate('Certification > Violations');

    //Display
    CertEventAllDisplay();
}

function CertEventCalculate() {
    var TaskId = '04';
    var SourceId = '11';
    var FileTypeId = 'H2';
    var DateString = GetDateStringFromDatePicker('DateStartId');
    var SiteId = '--';
    var LSId = '--';
    var BagContainerId = '--';
    var StationNumber = '--';
    var LaneName = '---';
    var PdvId = '--';
    var BillingId = '--';
    var CategoryId = '--';
    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

    var Pattern = 'CertTaskAdd';
    var RowId = data + ParamId;
    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
    var text = '';
    var BtnClass = 'dt-btn-cl gc-bc1-cl';
    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
    var TextClass = 'dt-text-cl';

    CertTaskAdd(RowId, ParamId);
}

function CertEventHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(8, 5, 4);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('Fatourati') || data.includes('BreachSupervisor')) {
                HtmlDropDownListFill('SiteId', '0', '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');
                ParamBagContainerAllSecWithZeroGet('0', true);
                ParamStationsAllSecWithZeroGet('0', '0', true);

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);
            }
            else {
                if (data.includes('Chef de gare') || data.includes('QualifPath')) {
                    HtmlDropDownListNameOnlyXorFill('SiteId', '', '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');
                    ParamBagContainerAllSecWithZeroGet('0', false);
                    ParamStationsAllSecWithZeroGet('0', '0', false);

                    DateValueDefaultSet('DateStartId', 1);
                    DateValueDefaultSet('DateEndId', 1);
                }
            }
        }
    });

    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationNumberId');
    ParamResetDropDownList('LSId');

    NotiConnectionIdUpdate('Evènements');
}

function CertEventAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';
    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '01') {//Day
        CertEventDayDisplay(ActionBtnId, Icon);
    }
    if (TimeId == '07') {//Station
        CertEventStationDisplay(ActionBtnId, Icon);
    }
    if (TimeId == '08') {//Lane
        CertEventLaneDisplay(ActionBtnId, Icon);
    }
}

function CertEventDayDisplay(ActionBtnId, Icon) {
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    CertAllReportsHide();

    if (DateStringStart != '' && DateStringEnd != '') {
        CertEventDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertEventDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertEventDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertEventDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalZip" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "data": "TotalMsg" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//12 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//13 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            //Event zip
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 3, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Zip Evt
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '56';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Event Msg
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) { //Generate Msg Evt

                    var TaskId = '01';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '04';
                    var FileTypeId = '4A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {//Visualize Msg Evt
                    var TaskId = '03';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {//Upload Msg Evt
                    var TaskId = '00';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalMsg']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalMsg'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 11, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HI';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    return DataTableButtonGet('CertEventStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 13, "render": function (data, type, row) { return CertIsValidGet(data, '04', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 5);
        }
    });
}

function CertEventStationSearch(Id) {

    var ActionBtnId = new String('CertEventStationSearchBtnId' + Id);
    var IsMargin = false;
    var Icon = 'fas fa-eye';

    ActionSpin(ActionBtnId, IsMargin);
    

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertEventStationGet(ActionBtnId, Icon, IsMargin, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertEventStationDisplay(ActionBtnId, Icon) {
    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    var IsMargin = true;

    CertAllReportsHide();

    if (DateStringStart - DateStringEnd == 0) {
        CertEventStationGet(ActionBtnId, Icon, IsMargin, RegionId, LSId, StationNumber, DateStringStart, DateStringStart, IsGap);
    }
    else {
        ParamMessageErrorDisplay('La date de début doit être égale à la date de fin');
    }
}

function CertEventStationGet(ActionBtnId, Icon, IsMargin, RegionId, LSId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertEventStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertEventStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSId" },//1
            { "data": "StationNumber" },//2

            { "data": "TotalZip" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//4 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//5 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6 Visualize

            { "data": "TotalMsg" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//8 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//9 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//10 Visualize

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//11 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//12 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//13 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//14 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Event zip
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 5, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Upload Zip Evt
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '56';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Event Msg
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) { //Generate Msg Evt
                    var TaskId = '01';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data0 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '04';
                    var FileTypeId = '4A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var data1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return data0 + data1;
                }
            },
            {
                "targets": 9, "render": function (data, type, row) {//Visualize Msg Evt
                    var TaskId = '03';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 10, "render": function (data, type, row) {//Upload Msg Evt
                    var TaskId = '00';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 11, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalMsg']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalMsg'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 13, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HI';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 14, "render": function (data, type, row) {
                    return DataTableButtonGet('CertEventLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 7);
        }
    });
}

function CertEventLaneDisplay(ActionBtnId, Icon) {
    //Hide some parent reports
    CertAllReportsHide();

    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    if (DateStringStart != '' && DateStringEnd != '') {
        CertEventLaneGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertEventLaneSearch(Id) {
    var ActionBtnId = new String('CertEventLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);
    var LaneName = '0';
    var IsGap = false;

    CertEventLaneGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap);
}

function CertEventLaneGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertEventLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertEventLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "TotalZip" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//5 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//6 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//7 Visualize

            { "data": "TotalMsg" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//9 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//10 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//11 Visualize

            { "data": "GapAbsolute" },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//13 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//14 Calculate
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//15 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "width": "3%", "className": "text-center", "targets": 14 },
            { "width": "3%", "className": "text-center", "targets": 15 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Event zip
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Upload Zip Evt
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '56';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Event Msg
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) { //Generate Msg Evt
                    var TaskId = '01';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 10, "render": function (data, type, row) {//Visualize Msg Evt
                    var TaskId = '03';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {//Upload Msg Evt
                    var TaskId = '00';
                    var SourceId = '04';
                    var FileTypeId = '46';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 12, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalMsg']); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalMsg'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 14, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 15, "render": function (data, type, row) {
                    return DataTableButtonGet('CertEventSearch', data, '\'' + data + '\', \'CertEventLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 8);
            DataTableTotalIntGet(api, intVal, 12);
        }
    });
}

function CertEventSearch(Id, TableSource) {
    var ActionBtnId = new String('CertEventSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    //Spin
    ActionBtnSpin(ActionBtnId);

    CertEventGet(ActionBtnId, Icon, Id, TableSource);
}

function CertEventGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertEvent';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertEventGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id,
                "TableSource": TableSource
            }
        },
        "columns": [
            { "data": "SiteId" }, //0
            { "data": "StationNumber" }, //1
            { "data": "LaneName" }, //2           
            { "data": "DhmValue" },//3  

            { "data": "IsZip" },//4
            { "data": "IsMsg" },//5
            { "data": "IsBreach" },//6

            { "data": "RunningMode" },//7
            { "data": "EtcStatus" },//8

            { "data": "CashierNumber" },//9        
            { "data": "PostNumber" },//10 
            { "data": "DhmValuePostStart" },//11

            { "data": "EventNumber" },//12
            { "data": "EquipmentNumber" },//13
            { "data": "EventCode" },//14
            { "data": "Details" },//15
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },
            { "width": "3%", "className": "text-left", "targets": 15 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return DataTableDhmValueFromRowGet(row); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(data); } },

            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return data; } },

            { "targets": 9, "render": function (data, type, row) { return data; } },
            { "targets": 10, "render": function (data, type, row) { return data; } },
            { "targets": 11, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 12, "render": function (data, type, row) { return data; } },
            { "targets": 13, "render": function (data, type, row) { return data; } },
            { "targets": 14, "render": function (data, type, row) { return data; } },
            { "targets": 15, "render": function (data, type, row) { return data; } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 20,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numFormat(Total1));

            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(7).footer()).html(numFormat(DoubleTotal1));

            //$(api.column(9).footer()).html(numShortFormat(IntTotal2));
        }
    });
}

function CertBreachOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(8, 1, 4);

    $('#ParamTitleId').text("Certification des violations");
    ShowReport('ParamReportId');
    ShowParent('RegionId');
    ShowParent('LSId');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('LaneNameId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSSecGet()');
    //ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertBreachAllDisplay()');

    //Default
    ElementDropDownListSet('TimeId', '01');

    //Noti
    NotiConnectionIdUpdate('Certification > Violations');

    //Display
    CertBreachAllDisplay();
}


function CertBreachAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';


    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '01') {//Day
        CertBreachDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertBreachStationDisplay(ActionBtnId, Icon);
        }
        else {
            if (TimeId == '08') {//Lane
                //CertEventLaneDisplay(ActionBtnId, Icon);
            }
            else {
                ParamMessageErrorDisplay("Ce pré-réglage n'est pas authorisé.");
            }
        }
    }
}

function CertBreachDayDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    CertAllReportsHide();

    CertBreachDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
}


function CertBreachDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertBreachDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertBreachDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalZip" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['IsSourceValid']) + ' ' + DataTableDateValueFromRowGet(row); } },

            //Event zip
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 3, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Zip Evt
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '56';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HK';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },

            //Breach Ce
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7L';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 9, "render": function (data, type, row) {
                    return DataTableButtonGet('CertBreachStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 10, "render": function (data, type, row) { return CertIsValidGet(data, '07', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 7);
        }
    });
}


function CertBreachStationDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');

    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    CertAllReportsHide();

    CertBreachStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}


function CertBreachStationSearch(Id) {

    var ActionBtnId = new String('CertBreachStationSearchBtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;
    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertBreachStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}


function CertBreachStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertBreachStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertBreachStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSId" },//1
            { "data": "StationNumber" },//2

            { "data": "TotalZip" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//4 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//5 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//6 Visualize

            { "data": "TotalCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//8 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//9 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//10 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//11 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Event zip
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 5, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Upload Zip Evt
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '56';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HK';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },

            //Breach Ce
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7L';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions                       
            {
                "targets": 11, "render": function (data, type, row) {
                    return DataTableButtonGet('CertBreachLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 7);
        }
    });
}

function CertBreachLaneDisplay(ActionBtnId, Icon) {
    //Hide some parent reports
    CertAllReportsHide();

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');

    var IsGap = ElementBooleanGet('IsGapId');

    CertBreachLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, LaneName, IsGap);
}


function CertBreachLaneSearch(Id) {
    var ActionBtnId = new String('CertBreachLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;

    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var LaneName = '0';
    var IsGap = false;

    CertBreachLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, LaneName, IsGap)
}


function CertBreachLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, LaneName, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertBreachLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertBreachLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "TotalZip" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//5 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//6 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//7 Visualize

            { "data": "TotalCe" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//10 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//11 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//12 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//13 Detail

        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Event zip
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) { //Upload Zip Evt
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '56';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HK';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },

            //Breach Ce
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7L';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions                        
            {
                "targets": 12, "render": function (data, type, row) {
                    return DataTableButtonGet('CertEventSearch', data, '\'' + data + '\', \'CertBreachLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
            //Actions                        
            {
                "targets": 13, "render": function (data, type, row) {
                    return DataTableButtonGet('CertBreachSearch', data, '\'' + data + '\', \'CertBreachLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 8);
        }
    });
}

function CertBreachSearch(Id, TableSource) {
    var ActionBtnId = new String('CertBreachSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;
    //Spin
    ActionBtnSpin(ActionBtnId);

    CertBreachGet(ActionBtnId, Icon, IsMargin, Id, TableSource);
}



function CertBreachGet(ActionBtnId, Icon, IsMargin, Id, TableSource) {

    //Spin
    ActionSpin(ActionBtnId, IsMargin);

    //Set datatable patterns
    var Pattern = 'CertBreach';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    //Get
    HideReport(PatternTableReportId);
    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertBreachGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id,
                "TableSource": TableSource
            }
        },
        "columns": [
            { "data": "StationName" }, //0
            { "data": "LaneName" }, //1        
            { "data": "DhmValue" },//2 

            { "data": "CategoryId" },//3
            { "data": "LicensePlate" },//4

            { "data": "BreachStatusName" },//5
            { "data": "CarBrandName" },//6        
            { "data": "BreachReasonName" },//7
            { "data": "BreachRef" },//8

            { "data": "ControllerNumber" },//9
            { "data": "SupervisorNumber" },//10

            { "data": "DhmCreation" },//11
            { "data": "DhmClose" },//12
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-left", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },
            { "width": "3%", "className": "text-left", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDhmValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            { "targets": 5, "render": function (data, type, row) { return data; } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return data; } },

            { "targets": 9, "render": function (data, type, row) { return data; } },
            { "targets": 10, "render": function (data, type, row) { return data; } },

            { "targets": 11, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 20,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


        }
    });
}


function CertMinuteOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(8, 2, 4);

    $('#ParamTitleId').text("Certification des PV de violation");
    ShowReport('ParamReportId');
    ShowParent('RegionId');
    ShowParent('LSId');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('LaneNameId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSSecGet()');
    //ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertMinuteAllDisplay()');

    //Default
    ElementDropDownListSet('TimeId', '01');

    //Noti
    NotiConnectionIdUpdate('Certification > PVs de violation');

    //Display
    CertMinuteAllDisplay();
}


function CertMinuteAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';


    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '01') {//Day
        CertMinuteDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertMinuteStationDisplay(ActionBtnId, Icon);
        }
        else {
            if (TimeId == '08') {//Lane
                //CertEventLaneDisplay(ActionBtnId, Icon);
            }
            else {
                ParamMessageErrorDisplay("Ce pré-réglage n'est pas authorisé.");
            }
        }
    }
}


function CertMinuteDayDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    CertAllReportsHide();

    CertMinuteDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
}



function CertMinuteDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertMinuteDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertMinuteDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalMs" },//1
            { "data": "TotalMsClosed" },//2
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Calculate

            { "data": "TotalMinute" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 Calculate

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "targets": 0, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['IsSourceValid']) + ' ' + DataTableDateValueFromRowGet(row); } },

            //Breach Ms
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 3, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Minute
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B4';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 6, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalMsClosed'], row['TotalMinute']); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalMinute'], row['TotalMsClosed'], 6, 100); } },

            //Actions            
            {
                "targets": 8, "render": function (data, type, row) {
                    return DataTableButtonGet('CertMinuteStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 9, "render": function (data, type, row) { return CertIsValidGet(data, '09', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 2);
            DataTableTotalIntGet(api, intVal, 4);
        }
    });
}


function CertMinuteStationDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');

    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    CertAllReportsHide();

    CertMinuteStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}

function CertMinuteStationSearch(Id) {

    var ActionBtnId = new String('CertMinuteStationSearchBtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;

    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertMinuteStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}


function CertMinuteStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertMinuteStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertMinuteStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSId" },//1
            { "data": "StationNumber" },//2

            { "data": "TotalMs" },//3
            { "data": "TotalMsClosed" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//5 Gen

            { "data": "TotalMinute" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//7 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//8 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//9 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//10 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Source
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Target
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B4';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 8, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalMsClosed'], row['TotalMinute']); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalMinute'], row['TotalMsClosed'], 6, 100); } },

            //Actions                       
            {
                "targets": 10, "render": function (data, type, row) {
                    return DataTableButtonGet('CertMinuteLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 6);
        }
    });
}


function CertMinuteLaneDisplay(ActionBtnId, Icon) {
    //Hide some parent reports
    CertAllReportsHide();

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');

    var IsGap = ElementBooleanGet('IsGapId');

    CertMinuteLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, LaneName, IsGap);
}


function CertMinuteLaneSearch(Id) {
    var ActionBtnId = new String('CertMinuteLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;

    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var LaneName = '0';
    var IsGap = false;

    CertMinuteLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, LaneName, IsGap)
}


function CertMinuteLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, LaneName, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertMinuteLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertMinuteLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "TotalMs" },//4
            { "data": "TotalMsClosed" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//6 Calculate

            { "data": "TotalMinute" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//8 Calculate

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//9 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//10 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//11 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Source
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Target
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B4';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalMsClosed'], row['TotalMinute']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalMinute'], row['TotalMsClosed'], 6, 100); } },

            //Actions                        
            {
                "targets": 11, "render": function (data, type, row) {
                    return DataTableButtonGet('CertMinuteSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 7);
        }
    });
}

function CertMinuteSearch(Id) {
    var ActionBtnId = new String('CertMinuteSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;

    //Spin
    ActionBtnSpin(ActionBtnId);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var LaneName = new String(Id).substr(14, 3);

    CertMinuteGet(ActionBtnId, Icon, IsMargin,
        DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, LaneName);
}

function CertMinuteGet(ActionBtnId, Icon, IsMargin,
    DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, LaneName) {

    //Spin
    ActionSpin(ActionBtnId, IsMargin);

    //Set datatable patterns
    var Pattern = 'CertMinute';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    //Get
    HideReport(PatternTableReportId);
    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertMinuteGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd,

                "RegionId": RegionId,
                "LSId": LSId,
                "StationNumber": StationNumber,
                "LaneName": LaneName
            }
        },
        "columns": [
            { "data": "StationName" }, //0
            { "data": "LaneName" }, //1        
            { "data": "DhmValue" },//2 

            { "data": "CategoryId" },//3
            { "data": "LicensePlate" },//4

            { "data": "BreachStatusName" },//5
            { "data": "CarBrandName" },//6        
            { "data": "BreachReasonName" },//7
            { "data": "BreachRef" },//8

            { "data": "ControllerNumber" },//9
            { "data": "SupervisorNumber" },//10

            { "data": "DhmCreation" },//11
            { "data": "DhmClose" },//12

            { "data": "BreachPath" },//13
            { "data": "BreachRowId" },//14
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-left", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },
            { "width": "3%", "className": "text-left", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDhmValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            { "targets": 5, "render": function (data, type, row) { return data; } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return data; } },

            { "targets": 9, "render": function (data, type, row) { return data; } },
            { "targets": 10, "render": function (data, type, row) { return data; } },

            { "targets": 11, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            {
                "targets": 13, "render": function (data, type, row) {
                    if (row['IsMinute']) {
                        var argument = row['BreachRowId'] + ', ' + '\'' + row['BreachPath'] + '\'';
                        return DataTableButtonGet('BreachMinuteExport', data, argument, '', 'dt-btn-cl gc-bc3-cl', 'fas fa-file-pdf btn-icon-cl gc-c3-cl', '');
                    }
                    else {
                        var argument = row['BreachRowId'] + ', ' + '\'' + row['BreachPath'] + '\'';
                        return DataTableButtonGet('BreachMinuteExport', data, argument, '', 'dt-btn-cl gc-bc4-cl', 'fas fa-file-pdf btn-icon-cl gc-c4-cl', '');
                    }
                }
            },
            {
                "targets": 14, "render": function (data, type, row) {

                    var PatternForm = 'Edit';
                    var Icon = 'fas fa-edit';
                    var Label = '';
                    var RowId = data;

                    var OnClick = 'BreachFormLoad(\'' +
                        Pattern + '\',\'' +
                        PatternForm + '\', ' +
                        RowId + ',' +
                        '\'' + row['StationName'] + '\', ' +
                        '\'' + row['LaneName'] + '\', ' +
                        '\'' + row['DhmValue'] + '\', ' +
                        '\'' + row['CategoryId'] + '\', ' +
                        '\'' + row['LicensePlate'] + '\', ' +
                        '\'' + row['BreachStatusName'] + '\', ' +
                        '\'' + row['CarBrandName'] + '\', ' +
                        '\'' + row['BreachReasonName'] + '\', ' +
                        '\'' + row['BreachRef'] + '\', ' +
                        '\'' + row['ControllerNumber'] + '\', ' +
                        '\'' + row['SupervisorNumber'] + '\', ' +
                        '\'' + row['DhmCreation'] + '\', ' +
                        '\'' + row['DhmClose'] + '\', ' +
                        '\'' + row['BreachPath'] + '\', ' +
                        ')';

                    return DataTableFormBtnIdGet(Pattern, PatternForm, RowId, Label, OnClick, Icon);
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 20,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


        }
    });
}


function CertCrmOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(8, 1, 2);

    $('#ParamTitleId').text("Certification des évènements de trafic");
    ShowReport('ParamReportId');
    ShowParent('RegionId');
    ShowParent('SiteId');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('SiteId', 'ParamStationsFromLSSecGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertCrmAllDisplay()');

    //Default
    ElementDropDownListSet('TimeId', '01');

    //Noti
    NotiConnectionIdUpdate('Certification > Evènements de trafic');
}


function CertCrmAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';


    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '02') {//Month
        CertCrmMonthDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '01') {//Day
            CertCrmDayDisplay(ActionBtnId, Icon, IsMargin);
        }
        else {
            if (TimeId == '07') {//Cex
                CertCrmCexDisplay(ActionBtnId, Icon);
            }
            else {
                ParamMessageErrorDisplay("Ce pré-réglage n'est pas authorisé.");
            }
        }
    }
}


function CertCrmDayDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    CertAllReportsHide();

    CertCrmDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
}


function CertCrmDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertCrmDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCrmDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "CreatedBy" },//1

            { "data": "TotalMeanEvent" },//2
            { "data": "TotalEvent" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },

            //Event zip
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7L';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalMeanEvent'], row['TotalEvent']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalEvent'], row['TotalMeanEvent'], 6, 100); } },

            //Actions            
            {
                "targets": 7, "render": function (data, type, row) {
                    return DataTableButtonGet('CertCrmStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 8, "render": function (data, type, row) { return CertIsValidGet(data, '12', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 2);
            DataTableTotalIntGet(api, intVal, 3);
        }
    });
}


function CertMinuteHandleOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(8, 3, 4);

    $('#ParamTitleId').text("Certification des PV de violation par date de traitement");
    ShowReport('ParamReportId');
    ShowParent('RegionId');
    ShowParent('LSId');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('LaneNameId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSSecGet()');
    //ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertMinuteHandleAllDisplay()');

    //Default
    ElementDropDownListSet('TimeId', '01');

    //Noti
    NotiConnectionIdUpdate('Certification > PVs de violation');

    //Display
    CertMinuteHandleAllDisplay();
}


function CertMinuteHandleAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';


    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '01') {//Day
        CertMinuteHandleDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertMinuteHandleStationDisplay(ActionBtnId, Icon);
        }
        else {
            if (TimeId == '08') {//Lane
                //CertEventLaneDisplay(ActionBtnId, Icon);
            }
            else {
                ParamMessageErrorDisplay("Ce pré-réglage n'est pas authorisé.");
            }
        }
    }
}

function CertMinuteHandleDayDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    CertAllReportsHide();

    CertMinuteHandleDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
}


function CertMinuteHandleDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertMinuteHandleDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertMinuteHandleDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalMsHandle" },//1
            { "data": "TotalMsClosedHandle" },//2
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Calculate

            { "data": "TotalMinuteHandle" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 Calculate

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "targets": 0, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['IsSourceValid']) + ' ' + DataTableDateValueFromRowGet(row); } },

            //Breach Ms
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 3, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Minute
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B7';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 6, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalMsClosedHandle'], row['TotalMinuteHandle']); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalMinuteHandle'], row['TotalMsClosedHandle'], 6, 100); } },

            //Actions            
            {
                "targets": 8, "render": function (data, type, row) {
                    return DataTableButtonGet('CertMinuteHandleStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 9, "render": function (data, type, row) { return CertIsValidGet(data, '09', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 2);
            DataTableTotalIntGet(api, intVal, 4);
        }
    });
}

function CertMinuteHandleStationDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');

    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    CertAllReportsHide();

    CertMinuteHandleStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}

function CertMinuteHandleStationSearch(Id) {

    var ActionBtnId = new String('CertMinuteHandleStationSearchBtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;

    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertMinuteHandleStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}


function CertMinuteHandleStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertMinuteHandleStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertMinuteHandleStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSId" },//1
            { "data": "StationNumber" },//2

            { "data": "TotalMsHandle" },//3
            { "data": "TotalMsClosedHandle" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//5 Gen

            { "data": "TotalMinuteHandle" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//7 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//8 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//9 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//10 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Source
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Target
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B7';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 8, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalMsClosedHandle'], row['TotalMinuteHandle']); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalMinuteHandle'], row['TotalMsClosedHandle'], 6, 100); } },

            //Actions                       
            {
                "targets": 10, "render": function (data, type, row) {
                    return DataTableButtonGet('CertMinuteHandleLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 6);
        }
    });
}


function CertMinuteHandleLaneDisplay(ActionBtnId, Icon) {
    //Hide some parent reports
    CertAllReportsHide();

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');

    var IsGap = ElementBooleanGet('IsGapId');

    CertMinuteHandleLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, LaneName, IsGap);
}


function CertMinuteHandleLaneSearch(Id) {
    var ActionBtnId = new String('CertMinuteHandleLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;

    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var LaneName = '0';
    var IsGap = false;

    CertMinuteHandleLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, LaneName, IsGap)
}


function CertMinuteHandleLaneGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, LaneName, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertMinuteHandleLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertMinuteHandleLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSName" },//1
            { "data": "StationNumber" },//2
            { "data": "LaneName" },//3

            { "data": "TotalMsHandle" },//4
            { "data": "TotalMsClosedHandle" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//6 Calculate

            { "data": "TotalMinuteHandle" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//8 Calculate

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//9 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//10 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName; } },//11 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Source
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Target
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '34';
                    var FileTypeId = 'B7';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalMsClosedHandle'], row['TotalMinuteHandle']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalMinuteHandle'], row['TotalMsClosedHandle'], 6, 100); } },

            //Actions                        
            {
                "targets": 11, "render": function (data, type, row) {
                    return DataTableButtonGet('CertMinuteSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 7);
        }
    });
}


function CertDiscOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(8, 4, 4);

    ParamTitleSet("Certification des discordances");
    ShowReport('ParamReportId');
    ShowParent('RegionId');
    ShowParent('LSId');
    ShowReport('StationNumberId' + 'Parent');
    ShowReport('LaneNameId' + 'Parent');
    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSSecGet()');
    //ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertDiscAllDisplay()');

    //Default
    ElementDropDownListSet('TimeId', '01');

    //Noti
    NotiConnectionIdUpdate('Certification > Discordances');

    //Display
    CertDiscAllDisplay();
}


function CertDiscAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';


    var TimeId = GetElementValue('TimeId');
    var IsMargin = true;

    //Display
    if (TimeId == '01') {//Day
        CertDiscDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertDiscStationDisplay(ActionBtnId, Icon);
        }
        else {
            if (TimeId == '08') {//Lane
                CertDiscLaneDisplay(ActionBtnId, Icon);
            }
            else {
                ParamMessageErrorDisplay("Ce pré-réglage n'est pas authorisé.");
            }
        }
    }
}

function CertDiscDayDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    CertAllReportsHide();

    CertDiscDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd);
}


function CertDiscDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertDiscDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDiscDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalZip" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['IsSourceValid']) + ' ' + DataTableDateValueFromRowGet(row); } },

            //Event zip
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 3, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Zip Evt
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '56';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HK';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },

            //Disc Ce
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7M';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 9, "render": function (data, type, row) {
                    return DataTableButtonGet('CertDiscStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 10, "render": function (data, type, row) { return CertIsValidGet(data, '07', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 7);
        }
    });
}


function CertDiscStationDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var RegionId = GetElementValue('RegionId');
    var LSId = GetElementValue('LSId');
    var StationNumber = GetElementValue('StationNumberId');

    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    CertAllReportsHide();

    CertDiscStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}


function CertDiscStationSearch(Id) {

    var ActionBtnId = new String('CertDiscStationSearchBtnId' + Id);
    var Icon = 'fas fa-eye';
    var IsMargin = false;
    ActionSpin(ActionBtnId, IsMargin);

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = '0';
    var LSId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertDiscStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
        RegionId, LSId, StationNumber, IsGap);
}


function CertDiscStationGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd,
    RegionId, LSId, StationNumber, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertDiscStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    //CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDiscStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "LSId" },//1
            { "data": "StationNumber" },//2

            { "data": "TotalZip" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//4 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//5 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//6 Visualize

            { "data": "TotalCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//8 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//9 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//10 GapRelative

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//11 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return row['LSId'] + '-' + row['LSName']; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Event zip
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) { //Generate Zip
                    var TaskId = '01';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-cog btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },
            {
                "targets": 5, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) { //Upload Zip Evt
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '56';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'HK';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },

            //Breach Ce
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) { //Visualize Zip
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '7L';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = '--';
                    var LSId = '--';
                    var AxleId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },


            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions                       
            {
                "targets": 11, "render": function (data, type, row) {
                    return DataTableButtonGet('CertDiscLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 7);
        }
    });
}

function CertTrxLaneLeapOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(0, 6, 6);

    ParamTitleSet('Sauts de transactions');
    ShowReport('ParamReportId');

    ShowParent('RegionId');
    ShowParent('LSId');
    ShowParent('StationNumberId');
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');

    //Set OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSGet()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationLSGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertTrxLaneLeapAllDisplay()');

    //Display
    //CertTrxLaneLeapAllDisplay();

    //Noti
    NotiConnectionIdUpdate('Transactions Borne');
}

function CertTrxLaneLeapAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';
    var TimeId = GetElementValue('TimeId');
    var IsMargin = new Boolean(true);

    //Display
    if (TimeId == '01') {//Day
        CertTrxLaneLeapDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertTrxLaneLeapStationDisplay(ActionBtnId, Icon, IsMargin);
        }
        else {
            ParamMessageErrorDisplay("Ce niveau n'est pas authorisé");
        }
    }
}

function CertTrxLaneLeapDayDisplay(ActionBtnId, Icon, IsMargin) {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = ElementBooleanGet('IsGapId');

    CertAllReportsHide();
    ParamMessageReset();
    ShowReport('ParamReportId');

    if (DateStringStart != '' || DateStringEnd != '') {
        CertTrxLaneLeapDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}


function CertTrxLaneLeapDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertTrxLaneLeapDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneLeapDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalTrxLane" },//1
            { "data": "TotalLeap" },//2
            { "data": "" },//3

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "targets": 0, "render": function (data, type, row) { return DataTableCertifiedInfoGet(row['IsCertified']) + ' ' + DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return DataTablePercentageTwoThresholdsGet(row['TotalLeap'], row['TotalTrxLane'], 2, 2, 5); } },
            
            {
                "targets": 4, "render": function (data, type, row) {//Calculate TrxLaneLeap
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'H6';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 5, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxLaneLeapStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 2);
            DataTableTotalPercentageGet(api, intVal, 2, 1, 3);
        }

    });
}

function CertTraficStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#CertTraficStationTableId').DataTable().destroy();
    $('#CertTraficStationTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertTraficStationTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertTraficStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationNumber": StationNumber,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        }
        ,
        "columns": [
            { "data": "SiteName" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.StationName; } },//1
            { "data": "" }, //2 

            { "data": "TraficOpe" }, //3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//4

            { "data": "TraficCe" }, //5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapRelative" },//8

            { "data": "Ctr01" }, //9
            { "data": "Ctr02" }, //10
            { "data": "Ctr03" }, //11

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//13
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right " + max700, "targets": 3 },
            { "width": "3%", "className": "text-left " + max700, "targets": 4 },

            { "width": "3%", "className": "text-right " + max700, "targets": 5 },
            { "width": "3%", "className": "text-left " + max700, "targets": 6 },

            { "width": "3%", "className": "text-right " + max700, "targets": 7 },
            { "width": "3%", "className": "text-right " + max700, "targets": 8 },

            { "width": "3%", "className": "text-center none", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center none", "targets": 13 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), DataTableStringTruncate(data, 30)); } },

            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '08' + '80' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '70' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    if (row['TraficOpe'].toFixed(2) != 0) {
                        var evo = ((row['TraficCe'] - row['TraficOpe']) / row['TraficOpe']) * 10000;
                        if (evo.toFixed(2) > 6 || evo.toFixed(2) < -6) {
                            return '<span  class="badge badge-danger" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                        else {
                            return '<span class="badge badge-success" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                    }
                    else {
                        return '<span  class="badge badge-danger" >10 000 %%</span>';
                    }
                }
            },

            { "targets": 9, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },
            { "targets": 10, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return CertCtrBitGet(data); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertTraficHourHourSearch', data, 'fas fa-eye', '0048ff'); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableButtonDeleteGet('Trafic', data); } },
        ],

        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter!",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total1));

            Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total2));

            Total3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total3));
        }
    });
}

function CertTraficStationDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTraficStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTraficStationValidate(CertTraficStationValidateId) {
    $('#CertTraficStationValidateBtnId' + CertTraficStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.CertTraficStationValidateId = CertTraficStationValidateId;
    $.ajax({
        url: "/Cert/CertTraficStationValidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertTraficStationValidateBtnId' + CertTraficStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
            $('#CertTraficStationValidateBtnId' + CertTraficStationValidateId).find('span').attr('style', 'color:#28a745');
            $('#CertTraficStationValidateBtnId' + CertTraficStationValidateId).attr('onclick', 'CertTraficStationUnvalidate(\'' + CertTraficStationValidateId + '\')');
            $('#CertTraficStationValidateBtnId' + CertTraficStationValidateId).attr('id', 'CertTraficStationUnvalidateBtnId' + CertTraficStationValidateId);
        }
    });

}

function CertTraficStationUnvalidate(CertTraficStationValidateId) {
    $('#CertTraficStationUnvalidateBtnId' + CertTraficStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.CertNrSiteValidateId = CertNrSiteValidateId;
    $.ajax({
        url: "/Cert/CertNrSiteUnvalidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertTraficStationUnvalidateBtnId' + CertTraficStationValidateId).find('span').attr('class', 'fas fa-clock');
            $('#CertTraficStationUnvalidateBtnId' + CertTraficStationValidateId).find('span').attr('style', 'color:#a3a3a3');
            $('#CertTraficStationUnvalidateBtnId' + CertTraficStationValidateId).attr('onclick', 'CertTraficStationValidate(\'' + CertTraficStationValidateId + '\')');
            $('#CertTraficStationUnvalidateBtnId' + CertTraficStationValidateId).attr('id', 'CertTraficStationValidateBtnId' + CertTraficStationValidateId);
        },
        error: function (request, status, error) {
            alert('Veuiller contacter la Division Péage pour dévalider votre recette.');
            $('#CertTraficStationUnvalidateBtnId' + CertTraficStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
        }
    });

}

function CertTraficCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertTraficCexTableReportId');
    HideReport('CertTraficStationTableReportId');
    HideReport('CertTraficHourTableReportId');
    HideReport('BarChartReportId');
    HideReport('PieChartReportId');
    ParamMessageReset();
    $('#CertTraficCexTableId').DataTable().destroy();
    $('#CertTraficCexTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', 'fas fa-search');
            ShowReport('CertTraficCexTableReportId');

            var labels = GetColumnArray('CertTraficCexTableId', 0);
            var data1 = GetColumnArray('CertTraficCexTableId', 4);
            var data2 = GetColumnArray('CertTraficCexTableId', 5);
            var backgroundColor = GetBackgroundColor('CertTraficCexTableId');

            DisplayChartBar(labels, data1, data2, "OPE", "CE");
            DisplayChartDoughnut(labels, backgroundColor, data1);
        },
        "ajax": {
            "url": "/Cert/CertTraficCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            },
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return new Date(data.Year, data.Month - 1, data.Day).toLocaleDateString() } },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.SensesHandledNumber + "/" + data.SensesNumber; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.HoursHandledNumber + "/" + (24 * data.SensesNumber); } },//3
            { "data": "TraficOpe", "render": $.fn.dataTable.render.number(' ', '', 0) },//4
            { "data": "TraficCe", "render": $.fn.dataTable.render.number(' ', '', 0) },//5
            {
                "mData": function vehicle(data, type, dataToSet) {
                    return numShortFormat(data.TraficCe - data.TraficOpe);
                }
            },//6
            { "data": "CertTraficStationsHandledId" }//7
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//0 SiteName
            { "width": "10%", "className": "text-center", "targets": 1 },// date
            { "width": "10%", "className": "text-center", "targets": 2 },// Senses Handled
            { "width": "10%", "className": "text-center", "targets": 3 },// Hours Handled
            { "width": "20%", "className": "text-right", "targets": 4 },// TraficOpe
            { "width": "20%", "className": "text-right", "targets": 5 },// TraficCe            
            { "width": "20%", "className": "text-right", "targets": 6 },//TraficGap
            { "width": "5%", "className": "text-center", "targets": 7 },//Search
            {
                "targets": 2, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if ($('<div/>').text(row['SensesGap']).html() !== "0")
                        return '<span  class="badge badge-danger">' + data + '</span>';
                    else return '<span  class="badge badge-success" >' + data + '</span>';
                }
            },
            {
                "targets": 3, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if ($('<div/>').text(row['HoursGap']).html() !== "0")
                        return '<span  class="badge badge-danger">' + data + '</span>';
                    else return '<span  class="badge badge-success" >' + data + '</span>';
                }
            },
            {
                "targets": 6, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if ($('<div/>').text(data).html() !== "0")
                        return '<span  class="badge badge-danger">' + data + '</span>';
                    else return '<span  class="badge badge-success" >' + data + '</span>';
                }
            },
            {
                "targets": 7, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertTraficStationSearchBtnId' + data + '" ' +
                        'style="background-color: Transparent;border: none" ' +
                        'onclick="CertTraficStationSearch(\'' + data + '\')" >' +
                        '<span class="fas fa-search" style="color:#a3a3a3" ></span></button>'
                }
            }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter!",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 24,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            TraficOpeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            TraficCeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            TraficGapTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(4).footer()).html(numShortFormat(TraficOpeTotal));
            $(api.column(5).footer()).html(numShortFormat(TraficCeTotal));
            $(api.column(6).footer()).html(numShortFormat(TraficGapTotal));

            if (TraficGapTotal !== 0)
                $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numShortFormat(TraficGapTotal) + '</span>');
            else $(api.column(6).footer()).html('<span  class="badge badge-success">' + numShortFormat(TraficGapTotal) + '</span>');
        }
    });
}

function CertTraficCexDisplay() {
    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTraficCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTraficStationSearch(Id) {
    var ActionBtnId = new String('CertTraficStationSearchBtnId' + Id);
    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var Icon = 'fas fa-eye';
    var IsGap = false;

    CertTraficStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap)
}

function CertTraficCexSearch(CertTraficDaysHandledId) {

    var ActionBtnId = new String('CertTraficCexSearchBtnId' + CertTraficDaysHandledId);
    var DateStringStart = new String(CertTraficDaysHandledId).substr(0, 8);
    var DateStringEnd = new String(CertTraficDaysHandledId).substr(8, 8);
    var SiteId = new String(CertTraficDaysHandledId).substr(16, 2);

    CertTraficCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd);
}

function CertTraficPeriodDisplay() {
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {

        $('#ParamActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('CertTraficPeriodTableReportId');
        HideReport('CertTraficCexTableReportId');
        HideReport('CertTraficStationTableReportId');
        HideReport('CertTraficHourTableReportId');
        HideReport('BarChartReportId');
        HideReport('PieChartReportId');
        ParamMessageReset()

        $('#CertTraficPeriodTableId').DataTable().destroy();
        $('#CertTraficPeriodTableId').DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "initComplete": function (settings, json) {
                $('#ParamActionBtnId').find('span').attr('class', 'fas fa-search');
                $('#CertTraficPeriodTableReportId').show();

                var labels = GetColumnArray('CertTraficPeriodTableId', 0);
                var data1 = GetColumnArray('CertTraficPeriodTableId', 6);
                var data2 = GetColumnArray('CertTraficPeriodTableId', 7);
                var backgroundColor = GetBackgroundColor('CertTraficPeriodTableId');
                DisplayChartBar(labels, data1, data2, "OPE", "CE");
                DisplayChartDoughnut(labels, backgroundColor, data1);
            },
            "ajax": {
                "url": "/Cert/CertTraficPeriodDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    SiteId: SiteId,
                    DateStringStart: DateStringStart,
                    DateStringEnd: DateStringEnd
                },
            },
            "columns": [
                { "data": "SiteName" },//0
                { "mData": function vehicle(data, type, dataToSet) { return new Date(data.YearS, data.MonthS - 1, data.DayS).toLocaleDateString() } },//1
                { "mData": function vehicle(data, type, dataToSet) { return new Date(data.YearE, data.MonthE - 1, data.DayE).toLocaleDateString() } },//2
                { "mData": function vehicle(data, type, dataToSet) { return data.DaysHandledNumber + "/" + data.DaysNumber } },//3
                { "mData": function vehicle(data, type, dataToSet) { return data.SensesHandledNumber + "/" + (data.DaysNumber * data.SensesNumber) } },//4
                { "mData": function vehicle(data, type, dataToSet) { return data.HoursHandledNumber + "/" + (24 * data.DaysNumber * data.SensesNumber); } },//5
                { "data": "TraficOpe", "render": $.fn.dataTable.render.number(' ', '', 0) },//6
                { "data": "TraficCe", "render": $.fn.dataTable.render.number(' ', '', 0) },//7
                { "mData": function vehicle(data, type, dataToSet) { return numShortFormat(data.TraficCe - data.TraficOpe); } },//8
                { "data": "CertTraficDaysHandledId" }//9
            ],
            "columnDefs": [
                { "width": "5%", "className": "text-left", "targets": 0 },//0 SiteName
                { "width": "10%", "className": "text-center", "targets": 1 },// From
                { "width": "10%", "className": "text-center", "targets": 2 },// To
                { "width": "10%", "className": "text-center", "targets": 3 },// Days
                { "width": "10%", "className": "text-center", "targets": 4 },// Senses
                { "width": "10%", "className": "text-center", "targets": 5 },// Hours
                { "width": "20%", "className": "text-right", "targets": 6 },// TraficOpe
                { "width": "20%", "className": "text-right", "targets": 7 },// TraficCe
                { "width": "20%", "className": "text-right", "targets": 8 },// TraficGap
                { "width": "5%", "className": "text-center", "targets": 9 },// Search
                {
                    "targets": 3, "searchable": false, "orderable": false, "className": 'img_dt_s',
                    "render": function (data, type, row) {
                        if ($('<div/>').text(row['DaysGap']).html() !== "0")
                            return '<span  class="badge badge-danger">' + data + '</span>';
                        else return '<span  class="badge badge-success" >' + data + '</span>';
                    }
                },
                {
                    "targets": 4, "searchable": false, "orderable": false, "className": 'img_dt_s',
                    "render": function (data, type, row) {
                        if ($('<div/>').text(row['SensesGap']).html() !== "0")
                            return '<span  class="badge badge-danger">' + data + '</span>';
                        else return '<span  class="badge badge-success" >' + data + '</span>';
                    }
                },
                {
                    "targets": 5, "searchable": false, "orderable": false, "className": 'img_dt_s',
                    "render": function (data, type, row) {
                        if ($('<div/>').text(row['HoursGap']).html() !== "0")
                            return '<span  class="badge badge-danger">' + data + '</span>';
                        else return '<span  class="badge badge-success" >' + data + '</span>';
                    }
                },
                {
                    "targets": 8, "searchable": false, "orderable": false, "className": 'img_dt_s',
                    "render": function (data, type, row) {
                        if ($('<div/>').text(data).html() !== "0")
                            return '<span  class="badge badge-danger">' + data + '</span>';
                        else return '<span  class="badge badge-success" >' + data + '</span>';
                    }
                },
                {
                    "targets": 9, "searchable": false, "orderable": false,
                    "render": function (data, type, full, meta) {
                        return '<button id="CertTraficCexSearchBtnId' + data + '" ' +
                            'style="background-color: Transparent;border: none" ' +
                            'onclick="CertTraficCexSearch(\'' + data + '\')" >' +
                            '<span class="fas fa-search" style="color:#a3a3a3"></span></button>'
                    }
                }
            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "---",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "Veuillez patienter!",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 20,
            "processing": false,
            "responsive": true,
            "bFilter": false,
            "autoWidth": false,
            "searching": false,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                TraficOpeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                TraficCeTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                TraficGapTotal = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(6).footer()).html(numShortFormat(TraficOpeTotal));
                $(api.column(7).footer()).html(numShortFormat(TraficCeTotal));
                $(api.column(8).footer()).html(numShortFormat(TraficGapTotal));

                if (TraficGapTotal !== 0)
                    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numShortFormat(TraficGapTotal) + '</span>');
                else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numShortFormat(TraficGapTotal) + '</span>');
            }
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertPostHomeOpen() {

    HideReport('HomeLineId5');
    ShowReport('HomeReportId');

    HideReport('ParamReportId');

    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationId');
    HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
    HtmlDropDownListWithInputFill('CtrId', '0', '/Param/ParamCtrsGet', 'CtrId', 'CtrName', 'Fin de poste');



    HideReport('CertPostPeriod' + 'TableReportId');
    HideReport('CertPostCex' + 'TableReportId');
    HideReport('CertPostStation' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');
    HideReport('CertPostMsg' + 'TableReportId');
    HideReport('CertPostZip' + 'TableReportId');
    HideReport('CertPostLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('Bar' + 'ChartId');
    HideReport('Pie' + 'ChartId');

    document.getElementById('MenuBarId0').style.color = "blue";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
}

function CertPostOpen() {
    HideReport('HomeLineId5');
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertPostDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    HideReport('CertPostPeriod' + 'TableReportId');
    HideReport('CertPostCex' + 'TableReportId');
    HideReport('CertPostStation' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');
    HideReport('CertPostMsg' + 'TableReportId');
    HideReport('CertPostZip' + 'TableReportId');
    HideReport('CertPostLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('Bar' + 'ChartId');
    HideReport('Pie' + 'ChartId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "blue";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "grey";
    document.getElementById('MenuBarId4').style.color = "grey";
}


//function CertPostStationOpen() {
//    HideReport('HomeLineId5');
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');
//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertPostStationDisplay()");
//    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
//    $('#ParamActionTextId').text('Afficher');

//    HideReport('CertPostPeriod' + 'TableReportId');
//    HideReport('CertPostCex' + 'TableReportId');
//    HideReport('CertPostStation' + 'TableReportId');
//    HideReport('CertPost' + 'TableReportId');
//    HideReport('CertPostMsg' + 'TableReportId');
//    HideReport('CertPostZip' + 'TableReportId');
//    HideReport('CertPostLane' + 'TableReportId');
//    HideReport('CertTrxLane' + 'TableReportId');
//    HideReport('Bar' + 'ChartId');
//    HideReport('Pie' + 'ChartId');

//    document.getElementById('MenuBarId0').style.color = "grey";
//    document.getElementById('MenuBarId1').style.color = "grey";
//    document.getElementById('MenuBarId2').style.color = "blue";
//    document.getElementById('MenuBarId3').style.color = "grey";
//    document.getElementById('MenuBarId4').style.color = "grey";  
//}

function CertPostCexOpen() {
    HideReport('HomeLineId5');
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    HideReport('BagContainerIdParent');
    HideReport('StationIdParent');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertPostCexDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    HideReport('CertPostPeriod' + 'TableReportId');
    HideReport('CertPostCex' + 'TableReportId');
    HideReport('CertPostStation' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');
    HideReport('CertPostMsg' + 'TableReportId');
    HideReport('CertPostZip' + 'TableReportId');
    HideReport('CertPostLane' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('Bar' + 'ChartId');
    HideReport('Pie' + 'ChartId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "grey";
    document.getElementById('MenuBarId2').style.color = "grey";
    document.getElementById('MenuBarId3').style.color = "blue";
    document.getElementById('MenuBarId4').style.color = "grey";
}


function CertPostDisplay() {
    $('#ParamActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
    var ActionBtnId = new String('ParamActionBtnId');
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationId = GetElementValue('StationId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var MpId = "99";
    var Icon = 'fas fa-eye';
    var CtrId = GetElementValue('CtrId');

    if (SiteId != null && SiteId != '' &&
        BagContainerId != null && BagContainerId != '' &&
        StationId != null && StationId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '' &&
        CtrId != null) {
        CertPostGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, MpId, Icon, CtrId);
    }
    else {
        ParamMessageError();
    };
}

function CertPostMsgDownload(CertReceiptBagMsgId) {
    $("#CertPostMsgDownloadBtnId" + CertReceiptBagZipId).find('span').attr('class', 'fa fa-spinner fa-spin');
    $.ajax({
        url: "/Cert/CertPostMsgDownload",
        method: "POST",
        dataType: "text",
        data: {
            CertPostMsgId: CertPostMsgId
        },
        success: function (data) {
            $("#CertPostMsgDownloadBtnId" + CertPostMsgId).find('span').attr('class', 'fas fa-download');
            window.location = '/Cert/CertPostMsgDownload?CertReceiptBagMsgId=' + CertPostMsgId;
        }
    });
}

function CertPostMsgSearch(PostRecoId) {
    $('#CertPostMsgSearchBtnId' + PostRecoId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertPostMsgTableReportId');
    HideReport('CertPostMsgPostTableReportId');
    HideReport('CertPostZipTableReportId');
    HideReport('CertPostZipPostTableReportId');
    HideReport('BarChartReportId');
    HideReport('PieChartReportId');

    $('#CertPostMsgTableId').DataTable().destroy();;
    $("#CertPostMsgTableId").DataTable({
        "initComplete": function (settings, json) {
            $('#CertPostMsgSearchBtnId' + PostRecoId).find('span').attr('class', 'fas fa-search');
            ShowReport('CertPostMsgTableReportId');
        },
        "processing": true,
        "ajax": {
            "url": "/Cert/CertPostMsgSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "PostRecoId": PostRecoId
            }
        },
        "columns": [
            { "data": "FileName" }, //0
            { "data": "StationNumber" }, //1
            { "data": "DhmValue" },//2
            { "data": "CashierNumber" },//3
            { "data": "BagNumber" },//4
            { "data": "Receipt", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5            
            { "data": "CertPostMsgId" },//6 Download
            { "data": "CertPostMsgId" },//7 Search
            { "data": "DataLine" }//8
        ],
        "columnDefs": [
            { "width": "20%", "className": "text-left", "targets": 0 },
            { "width": "15%", "className": "text-left", "targets": 1 },
            { "width": "25%", "className": "text-center", "targets": 2 },
            { "width": "10%", "className": "text-center", "targets": 3 },
            { "width": "10%", "className": "text-center", "targets": 4 },
            { "width": "10%", "className": "text-right", "targets": 5 },
            { "width": "5%", "className": "text-center", "targets": 6 },
            { "width": "5%", "className": "text-center", "targets": 7 },
            { "width": "50%", "className": "text-center none", "targets": 8 },
            {
                "targets": 2,
                "render": function (value) {
                    if (value === null) return "";
                    var pattern = /Date\(([^)]+)\)/;//date format from server side
                    var results = pattern.exec(value);
                    var dt = new Date(parseFloat(results[1]));

                    return dt.toLocaleDateString() + " " + dt.toLocaleTimeString();
                }
            },
            {
                "targets": 6, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertPostMsgDownloadBtn' + data + '" ' +
                        'style="background-color: Transparent;border: none"' +
                        'onclick="CertPostMsgDownload(\'' + data + '\')" >' +
                        '<span class="fas fa-download" style="color:#a3a3a3"></span></button>';
                }
            },
            {
                "targets": 7, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertPostMsgPostSearchBtn' + data + '" ' +
                        'style="background-color: Transparent;border: none"' +
                        'onclick="CertPostMsgPostSearch(\'' + data + '\')" >' +
                        '<span class="fas fa-flag-checkered" style="color:#a3a3a3"></span></button>'
                }
            }
        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": false,
        "bPaginate": false,
        "bFilter": false
    });
}

function CertPostTrxLaneSearch(CertPostRecoId) {

    $('#CertPostTrxLaneSearchBtnId' + CertPostRecoId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertTrxLaneSpecificBillingIdTableReportId');

    $('#CertTrxLaneSpecificBillingIdTableId').DataTable().destroy();
    $('#CertTrxLaneSpecificBillingIdTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#CertPostTrxLaneSearchBtnId' + CertPostRecoId).find('span').attr('class', 'fas fa-gem');
            ShowReport('CertTrxLaneSpecificBillingIdTableReportId');
        },
        "ajax": {
            "url": "/Cert/CertPostTrxLaneSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "CertPostRecoId": CertPostRecoId
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "LaneName" },//2
            { "data": "BillingId" },//3
            { "data": "CategoryPreDacId" },//4
            { "data": "LaneName" },//5 DhmValue

            { "data": "TrxLane" },//6  
            { "data": "TrxZip" },//7
            { "data": "TrxMsg" },//8
            { "data": "TrxCe" },//9

            { "data": "GapCe" },//10
            { "data": "GapZip" },//11
            { "data": "GapMsg" },//12

            {
                "mData": function vehicle(data, type, dataToSet) {
                    return GetDigits(data.Day, 2) +
                        GetDigits(data.Month, 2) +
                        data.Year +
                        data.SiteId +
                        data.StationNumber +
                        data.LaneName +
                        data.BillingId +
                        data.CategoryPreDacId;
                }
            },//13

            { "data": "PartialPriceLane" },//14 
            { "data": "PartialPriceCe" },//15
            { "data": "PartialPriceGap" },//16            

        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-left", "targets": 1 },//StationName
            { "width": "5%", "className": "text-left", "targets": 2 },//LaneName
            { "width": "5%", "className": "text-center", "targets": 3 },//BillingId
            { "width": "20%", "className": "text-center", "targets": 4 },//CategoryId
            { "width": "20%", "className": "text-center", "targets": 5 },//DhmValue

            { "width": "10%", "className": "text-right none", "targets": 6 },//Lane 
            { "width": "10%", "className": "text-right", "targets": 7 },//Zip
            { "width": "10%", "className": "text-right none", "targets": 8 },//Msg
            { "width": "10%", "className": "text-right", "targets": 9 },//Ce

            { "width": "10%", "className": "text-right none", "targets": 10 },//GapLane
            { "width": "10%", "className": "text-right", "targets": 11 },//GapZip
            { "width": "10%", "className": "text-right none", "targets": 12 },//GapMsg

            { "width": "10%", "className": "text-right", "targets": 13 },//Search

            { "width": "10%", "className": "text-right none", "targets": 14 },//PriceLane            
            { "width": "10%", "className": "text-right none", "targets": 15 },//PriceCe
            { "width": "10%", "className": "text-right none", "targets": 16 },//PriceGap

            { "targets": 5, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 10, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },
            { "targets": 11, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneBillingIdSearch', data, 'fas fa-eye', '0048ff'); } },//CertTrxLaneLaneSearch

            { "targets": 16, "render": function (data, type, row) { return GetGapCtrFromDataTable(data, row['PartialPriceGap']); } },

        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}

    })
}


function CertPostStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');
    HideReport('CertPostStationTableReportId');
    HideReport('CertPostTableReportId');

    ParamMessageReset();

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }
    $('#CertPostStationTableId').DataTable().destroy();
    $('#CertPostStationTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertPostStationTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertPostStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.StationName; } },//1
            //{ "data": "StationName" },//1
            { "data": "" },//2    

            { "data": "PostOpe" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//4

            { "data": "PostCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapRelative" },//8

            { "data": "Ctr01" },//9
            { "data": "Ctr02" },//10
            { "data": "Ctr03" },//11
            { "data": "Ctr04" },//12

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//13
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//14
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//15
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//16
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right " + max700, "targets": 3 },
            { "width": "3%", "className": "text-left " + max700, "targets": 4 },

            { "width": "3%", "className": "text-right " + max700, "targets": 5 },
            { "width": "3%", "className": "text-left " + max700, "targets": 6 },

            { "width": "3%", "className": "text-right " + max700, "targets": 7 },
            { "width": "3%", "className": "text-right " + max700, "targets": 8 },

            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 9 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 10 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 11 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 12 },

            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },
            { "width": "3%", "className": "text-center " + max700, "targets": 15 },
            { "width": "3%", "className": "text-center none", "targets": 16 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), DataTableStringTruncate(data, 30)); } },

            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(row['PostOpe']); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '08' + '82' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(row['PostCe']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '73' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    if (row['PostOpe'].toFixed(2) != 0) {
                        var evo = ((row['PostCe'] - row['PostOpe']) / row['PostOpe']) * 10000;
                        if (evo.toFixed(2) > 6 || evo.toFixed(2) < -6) {
                            return '<span  class="badge badge-danger" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                        else {
                            return '<span class="badge badge-success" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                    }
                    else {
                        return '<span  class="badge badge-danger" >10 000 %%</span>';
                    }
                }
            },

            { "targets": 9, "render": function (data, type, row) { return GetGapIntFromDataTable(data) } },
            { "targets": 10, "render": function (data, type, row) { return GetGapIntFromDataTable(data) } },
            { "targets": 11, "render": function (data, type, row) { return CertCtrBitGet(data) } },
            { "targets": 12, "render": function (data, type, row) { return CertCtrBitGet(data) } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertMsgTransfer', '43' + data, 'fas fa-upload', '0048ff'); } },//Msg
            { "targets": 14, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertPostSearch', data, 'CertPostStation', 'fas fa-eye', '0048ff'); } },//Search 
            { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '53' + data, 'fas fa-redo-alt', '0048ff'); } },//Zip
            { "targets": 16, "render": function (data, type, row) { return DataTableButtonDeleteGet('Post', data); } },//Delete
        ],
        "autoWidth": false,
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total1));

            Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total2));

            Total3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total3));
        }
    });
}

function CertPostStationDisplay() {
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));
    var CtrId = GetElementValue('CtrId');


    HideReport('CertReportId');

    HideReport('CertDayTableReportId');
    if (document.getElementById('ParamActionBtnId3') != null) {
        document.getElementById('ParamActionIconId3').style.color = 'black';
    }

    if (SiteId != '' &&
        BagContainerId != "" &&
        StationNumber != "" &&
        DateStringStart != "" &&
        DateStringEnd != "") {

        CertPostStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertPostSearch(Id, TableSource) {
    var ActionBtnId = new String('CertPostSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    var Pattern = 'CertPost';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';
    HideReport(PatternTableReportId);


    HideReport('CertFilePlan' + 'TableReportId');
    $('#' + PatternTableId).DataTable().destroy();

    if (TableSource == 'CertNrSite') {
        $('#' + PatternTableId).DataTable({
            "initComplete": function (settings, json) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
                ShowReport(PatternTableReportId);
            },
            "ajax": {
                "url": "/Cert/CertPostGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "Id": Id,
                    "TableSource": TableSource,
                }
            },
            "columns": [

                { "data": "SiteName" },//0
                { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.StationNumber; } },//1
                //{ "data": "StationNumber" },//1
                { "data": "LaneName" },//2
                { "data": "DhmValueStart" },//3
                { "data": "DhmValue" },//4
                { "data": "CashierNumber" },//5

                { "data": "MpNumber" },//6

                { "data": "ReceiptLane" },//7
                { "data": "ReceiptCe" },//8
                { "data": "ReceiptGap" },//9

                { "data": "IsLane" },//10
                { "data": "IsOpe" },//11
                { "data": "IsCe" },//12

                { "data": "CertPostRecoId" },//13 Trx
                { "data": "CertPostRecoId" },//14 Msg
                { "data": "CertPostRecoId" },//15 Zip
                { "data": "CertPostRecoId" },//16 Lane

                { "data": "Mp01C1Receipt" },//17
                { "data": "Mp01C2Receipt" },//14
                { "data": "Mp01C3Receipt" },//15
                { "data": "Mp01Receipt" },//16
                { "data": "Mp01C1Number" },//17
                { "data": "Mp01C2Number" },//18
                { "data": "Mp01C3Number" },//19
                { "data": "Mp01Number" },//20

                { "data": "Mp28C1Receipt" },//21
                { "data": "Mp28C2Receipt" },//22
                { "data": "Mp28C3Receipt" },//23
                { "data": "Mp28Receipt" },//24
                { "data": "Mp28C1Number" },//25
                { "data": "Mp28C2Number" },//26
                { "data": "Mp28C3Number" },//27
                { "data": "Mp28Number" },//28

                { "data": "Mp40C1Receipt" },//29
                { "data": "Mp40C2Receipt" },//30
                { "data": "Mp40C3Receipt" },//31
                { "data": "Mp40Receipt" },//32
                { "data": "Mp40C1Number" },//33
                { "data": "Mp40C2Number" },//34
                { "data": "Mp40C3Number" },//35
                { "data": "Mp40Number" },//36

                { "data": "Mp29C1Receipt" },//37
                { "data": "Mp29C2Receipt" },//38
                { "data": "Mp29C3Receipt" },//39
                { "data": "Mp29Receipt" },//40
                { "data": "Mp29C1Number" },//41
                { "data": "Mp29C2Number" },//42
                { "data": "Mp29C3Number" },//43
                { "data": "Mp29Number" },//44

                { "data": "Mp05C1Receipt" },//45
                { "data": "Mp05C2Receipt" },//46
                { "data": "Mp05C3Receipt" },//47
                { "data": "Mp05Receipt" },//48
                { "data": "Mp05C1Number" },//49
                { "data": "Mp05C2Number" },//50
                { "data": "Mp05C3Number" },//51
                { "data": "Mp05Number" },//52

                { "data": "Mp06C1Receipt" },//53
                { "data": "Mp06C2Receipt" },//54
                { "data": "Mp06C3Receipt" },//55
                { "data": "Mp06Receipt" },//56
                { "data": "Mp06C1Number" },//57
                { "data": "Mp06C2Number" },//58
                { "data": "Mp06C3Number" },//59
                { "data": "Mp06Number" },//60

                { "data": "Mp07C1Receipt" },//
                { "data": "Mp07C2Receipt" },//
                { "data": "Mp07C3Receipt" },//
                { "data": "Mp07Receipt" },//
                { "data": "Mp07C1Number" },//
                { "data": "Mp07C2Number" },//
                { "data": "Mp07C3Number" },//
                { "data": "Mp07Number" },//

                { "data": "Mp08C1Receipt" },//
                { "data": "Mp08C2Receipt" },//
                { "data": "Mp08C3Receipt" },//
                { "data": "Mp08Receipt" },//
                { "data": "Mp08C1Number" },//
                { "data": "Mp08C2Number" },//
                { "data": "Mp08C3Number" },//
                { "data": "Mp08Number" },//

                { "data": "Mp09C1Receipt" },//
                { "data": "Mp09C2Receipt" },//
                { "data": "Mp09C3Receipt" },//
                { "data": "Mp09Receipt" },//
                { "data": "Mp09C1Number" },//
                { "data": "Mp09C2Number" },//
                { "data": "Mp09C3Number" },//
                { "data": "Mp09Number" },//

                { "data": "Mp15C1Receipt" },//
                { "data": "Mp15C2Receipt" },//
                { "data": "Mp15C3Receipt" },//
                { "data": "Mp15Receipt" },//
                { "data": "Mp15C1Number" },//
                { "data": "Mp15C2Number" },//
                { "data": "Mp15C3Number" },//
                { "data": "Mp15Number" },//

                { "data": "Mp16C1Receipt" },//
                { "data": "Mp16C2Receipt" },//
                { "data": "Mp16C3Receipt" },//
                { "data": "Mp16Receipt" },//
                { "data": "Mp16C1Number" },//
                { "data": "Mp16C2Number" },//
                { "data": "Mp16C3Number" },//
                { "data": "Mp16Number" },//

                { "data": "Mp12C1Receipt" },//
                { "data": "Mp12C2Receipt" },//
                { "data": "Mp12C3Receipt" },//
                { "data": "Mp12Receipt" },//
                { "data": "Mp12C1Number" },//
                { "data": "Mp12C2Number" },//
                { "data": "Mp12C3Number" },//
                { "data": "Mp12Number" },//

                { "data": "Mp41C1Receipt" },//
                { "data": "Mp41C2Receipt" },//
                { "data": "Mp41C3Receipt" },//
                { "data": "Mp41Receipt" },//
                { "data": "Mp41C1Number" },//
                { "data": "Mp41C2Number" },//
                { "data": "Mp41C3Number" },//
                { "data": "Mp41Number" },//

                { "data": "Mp13C1Receipt" },//
                { "data": "Mp13C2Receipt" },//
                { "data": "Mp13C3Receipt" },//
                { "data": "Mp13Receipt" },//
                { "data": "Mp13C1Number" },//
                { "data": "Mp13C2Number" },//
                { "data": "Mp13C3Number" },//
                { "data": "Mp13Number" },//

                { "data": "Mp30C1Receipt" },//
                { "data": "Mp30C2Receipt" },//
                { "data": "Mp30C3Receipt" },//
                { "data": "Mp30Receipt" },//
                { "data": "Mp30C1Number" },//
                { "data": "Mp30C2Number" },//
                { "data": "Mp30C3Number" },//
                { "data": "Mp30Number" },//

                { "data": "Mp31C1Receipt" },//
                { "data": "Mp31C2Receipt" },//
                { "data": "Mp31C3Receipt" },//
                { "data": "Mp31Receipt" },//
                { "data": "Mp31C1Number" },//
                { "data": "Mp31C2Number" },//
                { "data": "Mp31C3Number" },//
                { "data": "Mp31Number" },//

                { "data": "Mp32C1Receipt" },//
                { "data": "Mp32C2Receipt" },//
                { "data": "Mp32C3Receipt" },//
                { "data": "Mp32Receipt" },//
                { "data": "Mp32C1Number" },//
                { "data": "Mp32C2Number" },//
                { "data": "Mp32C3Number" },//
                { "data": "Mp32Number" },

                { "mData": function vehicle(data, type, dataToSet) { return data.ModeId + '-' + data.ModeName; } },//1
                { "data": "IsZip" },//

                { "data": "MpReceipt" },//

                { "data": "ReceiptLaneAll" },//
                { "data": "ReceiptCeAll" },//
                { "data": "ReceiptAllGap" },//

                { "data": "BagNumber" },

                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//160
                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//161

                { "data": "Ctr01" },
            ],
            "columnDefs": [
                { "width": "3%", "className": "text-center none", "targets": 0 },//SiteName
                { "width": "3%", "className": "text-center", "targets": 1 },//StationNumber
                { "width": "3%", "className": "text-center", "targets": 2 },//LaneName
                { "width": "3%", "className": "text-center", "targets": 3 },//DhmValueStart
                { "width": "3%", "className": "text-center", "targets": 4 },//DhmValue
                { "width": "3%", "className": "text-center", "targets": 5 },//CashierNumber

                { "width": "3%", "className": "text-center none", "targets": 6 },//MpNumber

                { "width": "3%", "className": "text-right none", "targets": 7 },//ReceiptLane
                { "width": "3%", "className": "text-right none", "targets": 8 },//ReceiptCe
                { "width": "3%", "className": "text-center none", "targets": 9 },//ReceiptGap

                { "width": "3%", "className": "text-center none", "targets": 10 },//IsLane
                { "width": "3%", "className": "text-center", "targets": 11 },//IsOpe
                { "width": "3%", "className": "text-center", "targets": 12 },//IsCe

                { "width": "3%", "className": "text-center", "targets": 13 },//Trx
                { "width": "3%", "className": "text-center none", "targets": 14 },//Msg
                { "width": "3%", "className": "text-center", "targets": 15 },//Zip
                { "width": "3%", "className": "text-center none", "targets": 16 },//Lane

                //MP
                { "width": "0%", "className": "text-center none", "targets": 17 },
                { "width": "0%", "className": "text-center none", "targets": 18 },
                { "width": "0%", "className": "text-center none", "targets": 19 },
                { "width": "0%", "className": "text-center none", "targets": 20 },
                { "width": "0%", "className": "text-center none", "targets": 21 },
                { "width": "0%", "className": "text-center none", "targets": 22 },
                { "width": "0%", "className": "text-center none", "targets": 23 },
                { "width": "3%", "className": "text-center none", "targets": 24 },

                { "width": "0%", "className": "text-center none", "targets": 25 },
                { "width": "0%", "className": "text-center none", "targets": 26 },
                { "width": "0%", "className": "text-center none", "targets": 27 },
                { "width": "0%", "className": "text-center none", "targets": 28 },
                { "width": "0%", "className": "text-center none", "targets": 29 },
                { "width": "0%", "className": "text-center none", "targets": 30 },
                { "width": "0%", "className": "text-center none", "targets": 31 },
                { "width": "3%", "className": "text-center none", "targets": 32 },

                { "width": "0%", "className": "text-center none", "targets": 33 },
                { "width": "0%", "className": "text-center none", "targets": 34 },
                { "width": "0%", "className": "text-center none", "targets": 35 },
                { "width": "0%", "className": "text-center none", "targets": 36 },
                { "width": "0%", "className": "text-center none", "targets": 37 },
                { "width": "0%", "className": "text-center none", "targets": 38 },
                { "width": "0%", "className": "text-center none", "targets": 39 },
                { "width": "0%", "className": "text-center none", "targets": 40 },

                { "width": "0%", "className": "text-center none", "targets": 41 },
                { "width": "0%", "className": "text-center none", "targets": 42 },
                { "width": "0%", "className": "text-center none", "targets": 43 },
                { "width": "0%", "className": "text-center none", "targets": 44 },
                { "width": "0%", "className": "text-center none", "targets": 45 },
                { "width": "0%", "className": "text-center none", "targets": 46 },
                { "width": "0%", "className": "text-center none", "targets": 47 },
                { "width": "0%", "className": "text-center none", "targets": 48 },

                { "width": "0%", "className": "text-center none", "targets": 49 },
                { "width": "0%", "className": "text-center none", "targets": 50 },
                { "width": "0%", "className": "text-center none", "targets": 51 },
                { "width": "0%", "className": "text-center none", "targets": 52 },
                { "width": "0%", "className": "text-center none", "targets": 53 },
                { "width": "0%", "className": "text-center none", "targets": 54 },
                { "width": "0%", "className": "text-center none", "targets": 55 },
                { "width": "0%", "className": "text-center none", "targets": 56 },

                { "width": "0%", "className": "text-center none", "targets": 57 },
                { "width": "0%", "className": "text-center none", "targets": 58 },
                { "width": "0%", "className": "text-center none", "targets": 59 },
                { "width": "0%", "className": "text-center none", "targets": 60 },
                { "width": "0%", "className": "text-center none", "targets": 61 },
                { "width": "0%", "className": "text-center none", "targets": 62 },
                { "width": "0%", "className": "text-center none", "targets": 63 },
                { "width": "0%", "className": "text-center none", "targets": 64 },

                { "width": "0%", "className": "text-center none", "targets": 65 },
                { "width": "0%", "className": "text-center none", "targets": 66 },
                { "width": "0%", "className": "text-center none", "targets": 67 },
                { "width": "0%", "className": "text-center none", "targets": 68 },
                { "width": "0%", "className": "text-center none", "targets": 69 },
                { "width": "0%", "className": "text-center none", "targets": 70 },
                { "width": "0%", "className": "text-center none", "targets": 71 },
                { "width": "0%", "className": "text-center none", "targets": 72 },

                { "width": "0%", "className": "text-center none", "targets": 73 },
                { "width": "0%", "className": "text-center none", "targets": 74 },
                { "width": "0%", "className": "text-center none", "targets": 75 },
                { "width": "0%", "className": "text-center none", "targets": 76 },
                { "width": "0%", "className": "text-center none", "targets": 77 },
                { "width": "0%", "className": "text-center none", "targets": 78 },
                { "width": "0%", "className": "text-center none", "targets": 79 },
                { "width": "0%", "className": "text-center none", "targets": 80 },

                { "width": "0%", "className": "text-center none", "targets": 81 },
                { "width": "0%", "className": "text-center none", "targets": 82 },
                { "width": "0%", "className": "text-center none", "targets": 83 },
                { "width": "0%", "className": "text-center none", "targets": 84 },
                { "width": "0%", "className": "text-center none", "targets": 85 },
                { "width": "0%", "className": "text-center none", "targets": 86 },
                { "width": "0%", "className": "text-center none", "targets": 87 },
                { "width": "0%", "className": "text-center none", "targets": 88 },

                { "width": "0%", "className": "text-center none", "targets": 89 },
                { "width": "0%", "className": "text-center none", "targets": 90 },
                { "width": "0%", "className": "text-center none", "targets": 91 },
                { "width": "0%", "className": "text-center none", "targets": 92 },
                { "width": "0%", "className": "text-center none", "targets": 93 },
                { "width": "0%", "className": "text-center none", "targets": 94 },
                { "width": "0%", "className": "text-center none", "targets": 95 },
                { "width": "0%", "className": "text-center none", "targets": 96 },

                { "width": "0%", "className": "text-center none", "targets": 97 },
                { "width": "0%", "className": "text-center none", "targets": 98 },
                { "width": "0%", "className": "text-center none", "targets": 99 },
                { "width": "0%", "className": "text-center none", "targets": 100 },
                { "width": "0%", "className": "text-center none", "targets": 101 },
                { "width": "0%", "className": "text-center none", "targets": 102 },
                { "width": "0%", "className": "text-center none", "targets": 103 },
                { "width": "0%", "className": "text-center none", "targets": 104 },

                { "width": "0%", "className": "text-center none", "targets": 105 },
                { "width": "0%", "className": "text-center none", "targets": 106 },
                { "width": "0%", "className": "text-center none", "targets": 107 },
                { "width": "0%", "className": "text-center none", "targets": 108 },
                { "width": "0%", "className": "text-center none", "targets": 109 },
                { "width": "0%", "className": "text-center none", "targets": 110 },
                { "width": "0%", "className": "text-center none", "targets": 111 },
                { "width": "0%", "className": "text-center none", "targets": 112 },

                { "width": "0%", "className": "text-center none", "targets": 113 },
                { "width": "0%", "className": "text-center none", "targets": 114 },
                { "width": "0%", "className": "text-center none", "targets": 115 },
                { "width": "0%", "className": "text-center none", "targets": 116 },
                { "width": "0%", "className": "text-center none", "targets": 117 },
                { "width": "0%", "className": "text-center none", "targets": 118 },
                { "width": "0%", "className": "text-center none", "targets": 119 },
                { "width": "0%", "className": "text-center none", "targets": 120 },

                { "width": "0%", "className": "text-center none", "targets": 121 },
                { "width": "0%", "className": "text-center none", "targets": 122 },
                { "width": "0%", "className": "text-center none", "targets": 123 },
                { "width": "0%", "className": "text-center none", "targets": 124 },
                { "width": "0%", "className": "text-center none", "targets": 125 },
                { "width": "0%", "className": "text-center none", "targets": 126 },
                { "width": "0%", "className": "text-center none", "targets": 127 },
                { "width": "0%", "className": "text-center none", "targets": 128 },

                { "width": "0%", "className": "text-center none", "targets": 129 },
                { "width": "0%", "className": "text-center none", "targets": 130 },
                { "width": "0%", "className": "text-center none", "targets": 131 },
                { "width": "0%", "className": "text-center none", "targets": 132 },
                { "width": "0%", "className": "text-center none", "targets": 133 },
                { "width": "0%", "className": "text-center none", "targets": 134 },
                { "width": "0%", "className": "text-center none", "targets": 135 },
                { "width": "0%", "className": "text-center none", "targets": 136 },

                { "width": "0%", "className": "text-center none", "targets": 137 },
                { "width": "0%", "className": "text-center none", "targets": 138 },
                { "width": "0%", "className": "text-center none", "targets": 139 },
                { "width": "0%", "className": "text-center none", "targets": 140 },
                { "width": "0%", "className": "text-center none", "targets": 141 },
                { "width": "0%", "className": "text-center none", "targets": 142 },
                { "width": "0%", "className": "text-center none", "targets": 143 },
                { "width": "0%", "className": "text-center none", "targets": 144 },

                { "width": "0%", "className": "text-center none", "targets": 145 },
                { "width": "0%", "className": "text-center none", "targets": 146 },
                { "width": "0%", "className": "text-center none", "targets": 147 },
                { "width": "0%", "className": "text-center none", "targets": 148 },
                { "width": "0%", "className": "text-center none", "targets": 149 },
                { "width": "0%", "className": "text-center none", "targets": 150 },
                { "width": "0%", "className": "text-center none", "targets": 151 },
                { "width": "0%", "className": "text-center none", "targets": 152 },

                { "width": "3%", "className": "text-center none", "targets": 153 },//ModeNameToll
                { "width": "3%", "className": "text-center", "targets": 154 },//IsZip

                { "width": "3%", "className": "text-right none", "targets": 155 },//MpReceipt

                { "width": "3%", "className": "text-right", "targets": 156 },//ReceiptLaneAll
                { "width": "3%", "className": "text-right", "targets": 157 },//ReceiptCeAll
                { "width": "3%", "className": "text-right", "targets": 158 },//ReceiptAllGap

                { "width": "3%", "className": "text-center none", "targets": 159 },//BagNumber

                { "width": "3%", "className": "text-center", "targets": 160 },//TrxZip
                { "width": "3%", "className": "text-center", "targets": 161 },//TrxCe

                { "width": "3%", "className": "text-center", "targets": 162 },//Ctr01

                { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertCtrFlagBooleanGet(row['IsOpe'], row['IsCe'], 1, 1), data); } },

                { "targets": 3, "render": function (data, type, row) { return GetDhmValueNullableFromDataTableDate(data); } },
                { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

                { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 9, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },



                { "targets": 10, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 11, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 12, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 13, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertPost', 'fas fa-eye', '0048ff'); } },
                { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertMsgPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertZipPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertPostLaneSearch', data, 'fas fa-search', '0048ff'); } },

                { "targets": 154, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 155, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

                { "targets": 156, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 157, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 158, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

                { "targets": 159, "render": function (data, type, row) { return GetGapPostWithoutReceiptFromDataTable(data, row['CashierNumber']); } },


                { "targets": 160, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },
                { "targets": 161, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 10,
            "processing": false,
            "responsive": true,
            "bFilter": true,
            "autoWidth": false,
            "searching": true,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(6).footer()).html(DataTableFormatDoubleGet(Total1));

                Total2 = api.column(155).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(155).footer()).html(DataTableFormatDoubleGet(Total2));

                Total3 = api.column(156).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(156).footer()).html(DataTableFormatDoubleGet(Total3));

                Total4 = api.column(157).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(157).footer()).html(DataTableFormatDoubleGet(Total4));

                //Total3 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);



                //$(api.column(12).footer()).html(numShortFormat(Total3));

            }
        });
    }
    if (TableSource == 'CtrTrx') {
        $('#' + PatternTableId).DataTable({
            "initComplete": function (settings, json) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
                ShowReport(PatternTableReportId);
            },
            "ajax": {
                "url": "/Cert/CertPostGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "Id": Id,
                    "TableSource": TableSource,
                }
            },
            "columns": [

                { "data": "SiteName" },//0
                { "data": "StationNumber" },//1
                { "data": "LaneName" },//2
                { "data": "DhmValueStart" },//3
                { "data": "DhmValue" },//4
                { "data": "CashierNumber" },//5

                { "data": "MpNumber" },//6

                { "data": "ReceiptLane" },//7
                { "data": "ReceiptCe" },//8
                { "data": "ReceiptGap" },//9

                { "data": "IsLane" },//10
                { "data": "IsOpe" },//11
                { "data": "IsCe" },//12

                { "data": "CertPostRecoId" },//13 Trx
                { "data": "CertPostRecoId" },//14 Msg
                { "data": "CertPostRecoId" },//15 Zip
                { "data": "CertPostRecoId" },//16 Lane

                { "data": "Mp01C1Receipt" },//17
                { "data": "Mp01C2Receipt" },//14
                { "data": "Mp01C3Receipt" },//15
                { "data": "Mp01Receipt" },//16
                { "data": "Mp01C1Number" },//17
                { "data": "Mp01C2Number" },//18
                { "data": "Mp01C3Number" },//19
                { "data": "Mp01Number" },//20

                { "data": "Mp28C1Receipt" },//21
                { "data": "Mp28C2Receipt" },//22
                { "data": "Mp28C3Receipt" },//23
                { "data": "Mp28Receipt" },//24
                { "data": "Mp28C1Number" },//25
                { "data": "Mp28C2Number" },//26
                { "data": "Mp28C3Number" },//27
                { "data": "Mp28Number" },//28

                { "data": "Mp40C1Receipt" },//29
                { "data": "Mp40C2Receipt" },//30
                { "data": "Mp40C3Receipt" },//31
                { "data": "Mp40Receipt" },//32
                { "data": "Mp40C1Number" },//33
                { "data": "Mp40C2Number" },//34
                { "data": "Mp40C3Number" },//35
                { "data": "Mp40Number" },//36

                { "data": "Mp29C1Receipt" },//37
                { "data": "Mp29C2Receipt" },//38
                { "data": "Mp29C3Receipt" },//39
                { "data": "Mp29Receipt" },//40
                { "data": "Mp29C1Number" },//41
                { "data": "Mp29C2Number" },//42
                { "data": "Mp29C3Number" },//43
                { "data": "Mp29Number" },//44

                { "data": "Mp05C1Receipt" },//45
                { "data": "Mp05C2Receipt" },//46
                { "data": "Mp05C3Receipt" },//47
                { "data": "Mp05Receipt" },//48
                { "data": "Mp05C1Number" },//49
                { "data": "Mp05C2Number" },//50
                { "data": "Mp05C3Number" },//51
                { "data": "Mp05Number" },//52

                { "data": "Mp06C1Receipt" },//53
                { "data": "Mp06C2Receipt" },//54
                { "data": "Mp06C3Receipt" },//55
                { "data": "Mp06Receipt" },//56
                { "data": "Mp06C1Number" },//57
                { "data": "Mp06C2Number" },//58
                { "data": "Mp06C3Number" },//59
                { "data": "Mp06Number" },//60

                { "data": "Mp07C1Receipt" },//
                { "data": "Mp07C2Receipt" },//
                { "data": "Mp07C3Receipt" },//
                { "data": "Mp07Receipt" },//
                { "data": "Mp07C1Number" },//
                { "data": "Mp07C2Number" },//
                { "data": "Mp07C3Number" },//
                { "data": "Mp07Number" },//

                { "data": "Mp08C1Receipt" },//
                { "data": "Mp08C2Receipt" },//
                { "data": "Mp08C3Receipt" },//
                { "data": "Mp08Receipt" },//
                { "data": "Mp08C1Number" },//
                { "data": "Mp08C2Number" },//
                { "data": "Mp08C3Number" },//
                { "data": "Mp08Number" },//

                { "data": "Mp09C1Receipt" },//
                { "data": "Mp09C2Receipt" },//
                { "data": "Mp09C3Receipt" },//
                { "data": "Mp09Receipt" },//
                { "data": "Mp09C1Number" },//
                { "data": "Mp09C2Number" },//
                { "data": "Mp09C3Number" },//
                { "data": "Mp09Number" },//

                { "data": "Mp15C1Receipt" },//
                { "data": "Mp15C2Receipt" },//
                { "data": "Mp15C3Receipt" },//
                { "data": "Mp15Receipt" },//
                { "data": "Mp15C1Number" },//
                { "data": "Mp15C2Number" },//
                { "data": "Mp15C3Number" },//
                { "data": "Mp15Number" },//

                { "data": "Mp16C1Receipt" },//
                { "data": "Mp16C2Receipt" },//
                { "data": "Mp16C3Receipt" },//
                { "data": "Mp16Receipt" },//
                { "data": "Mp16C1Number" },//
                { "data": "Mp16C2Number" },//
                { "data": "Mp16C3Number" },//
                { "data": "Mp16Number" },//

                { "data": "Mp12C1Receipt" },//
                { "data": "Mp12C2Receipt" },//
                { "data": "Mp12C3Receipt" },//
                { "data": "Mp12Receipt" },//
                { "data": "Mp12C1Number" },//
                { "data": "Mp12C2Number" },//
                { "data": "Mp12C3Number" },//
                { "data": "Mp12Number" },//

                { "data": "Mp41C1Receipt" },//
                { "data": "Mp41C2Receipt" },//
                { "data": "Mp41C3Receipt" },//
                { "data": "Mp41Receipt" },//
                { "data": "Mp41C1Number" },//
                { "data": "Mp41C2Number" },//
                { "data": "Mp41C3Number" },//
                { "data": "Mp41Number" },//

                { "data": "Mp13C1Receipt" },//
                { "data": "Mp13C2Receipt" },//
                { "data": "Mp13C3Receipt" },//
                { "data": "Mp13Receipt" },//
                { "data": "Mp13C1Number" },//
                { "data": "Mp13C2Number" },//
                { "data": "Mp13C3Number" },//
                { "data": "Mp13Number" },//

                { "data": "Mp30C1Receipt" },//
                { "data": "Mp30C2Receipt" },//
                { "data": "Mp30C3Receipt" },//
                { "data": "Mp30Receipt" },//
                { "data": "Mp30C1Number" },//
                { "data": "Mp30C2Number" },//
                { "data": "Mp30C3Number" },//
                { "data": "Mp30Number" },//

                { "data": "Mp31C1Receipt" },//
                { "data": "Mp31C2Receipt" },//
                { "data": "Mp31C3Receipt" },//
                { "data": "Mp31Receipt" },//
                { "data": "Mp31C1Number" },//
                { "data": "Mp31C2Number" },//
                { "data": "Mp31C3Number" },//
                { "data": "Mp31Number" },//

                { "data": "Mp32C1Receipt" },//
                { "data": "Mp32C2Receipt" },//
                { "data": "Mp32C3Receipt" },//
                { "data": "Mp32Receipt" },//
                { "data": "Mp32C1Number" },//
                { "data": "Mp32C2Number" },//
                { "data": "Mp32C3Number" },//
                { "data": "Mp32Number" },

                { "mData": function vehicle(data, type, dataToSet) { return data.ModeId + '-' + data.ModeName; } },//1
                { "data": "IsZip" },//

                { "data": "MpReceipt" },//

                { "data": "ReceiptLaneAll" },//
                { "data": "ReceiptCeAll" },//
                { "data": "ReceiptAllGap" },//

                { "data": "BagNumber" },//9

                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//160
                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//161

                { "data": "Ctr01" },
            ],
            "columnDefs": [
                { "width": "3%", "className": "text-center none", "targets": 0 },//SiteName
                { "width": "3%", "className": "text-center", "targets": 1 },//StationNumber
                { "width": "3%", "className": "text-center", "targets": 2 },//LaneName
                { "width": "3%", "className": "text-center " + IsCtrTrx + " " + IsNrMp, "targets": 3 },//DhmValueStart
                { "width": "3%", "className": "text-center", "targets": 4 },//DhmValue
                { "width": "3%", "className": "text-center " + IsPostStation, "targets": 5 },//CashierNumber

                { "width": "3%", "className": "text-center " + IsNrMp, "targets": 6 },//MpNumber

                { "width": "3%", "className": "text-right " + IsPostStation, "targets": 7 },
                { "width": "3%", "className": "text-right " + IsPostStation, "targets": 8 },
                { "width": "3%", "className": "text-center" + IsPostStation + " " + IsNrSite, "targets": 9 },

                { "width": "3%", "className": "text-center none", "targets": 10 },//IsLane
                { "width": "3%", "className": "text-center " + IsNrMp, "targets": 11 },//IsOpe
                { "width": "3%", "className": "text-center " + IsNrMp, "targets": 12 },//IsCe

                { "width": "3%", "className": "text-center", "targets": 13 },//Trx
                { "width": "3%", "className": "text-center none", "targets": 14 },//Msg
                { "width": "3%", "className": "text-center", "targets": 15 },//Zip
                { "width": "3%", "className": "text-center none", "targets": 16 },//Lane

                //MP
                { "width": "0%", "className": "text-center none", "targets": 17 },
                { "width": "0%", "className": "text-center none", "targets": 18 },
                { "width": "0%", "className": "text-center none", "targets": 19 },
                { "width": "0%", "className": "text-center none", "targets": 20 },
                { "width": "0%", "className": "text-center none", "targets": 21 },
                { "width": "0%", "className": "text-center none", "targets": 22 },
                { "width": "0%", "className": "text-center none", "targets": 23 },
                { "width": "3%", "className": "text-center " + IsCtrTrx, "targets": 24 },

                { "width": "0%", "className": "text-center none", "targets": 25 },
                { "width": "0%", "className": "text-center none", "targets": 26 },
                { "width": "0%", "className": "text-center none", "targets": 27 },
                { "width": "0%", "className": "text-center none", "targets": 28 },
                { "width": "0%", "className": "text-center none", "targets": 29 },
                { "width": "0%", "className": "text-center none", "targets": 30 },
                { "width": "0%", "className": "text-center none", "targets": 31 },
                { "width": "3%", "className": "text-center " + IsCtrTrx, "targets": 32 },

                { "width": "0%", "className": "text-center none", "targets": 33 },
                { "width": "0%", "className": "text-center none", "targets": 34 },
                { "width": "0%", "className": "text-center none", "targets": 35 },
                { "width": "0%", "className": "text-center none", "targets": 36 },
                { "width": "0%", "className": "text-center none", "targets": 37 },
                { "width": "0%", "className": "text-center none", "targets": 38 },
                { "width": "0%", "className": "text-center none", "targets": 39 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 40 },

                { "width": "0%", "className": "text-center none", "targets": 41 },
                { "width": "0%", "className": "text-center none", "targets": 42 },
                { "width": "0%", "className": "text-center none", "targets": 43 },
                { "width": "0%", "className": "text-center none", "targets": 44 },
                { "width": "0%", "className": "text-center none", "targets": 45 },
                { "width": "0%", "className": "text-center none", "targets": 46 },
                { "width": "0%", "className": "text-center none", "targets": 47 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 48 },

                { "width": "0%", "className": "text-center none", "targets": 49 },
                { "width": "0%", "className": "text-center none", "targets": 50 },
                { "width": "0%", "className": "text-center none", "targets": 51 },
                { "width": "0%", "className": "text-center none", "targets": 52 },
                { "width": "0%", "className": "text-center none", "targets": 53 },
                { "width": "0%", "className": "text-center none", "targets": 54 },
                { "width": "0%", "className": "text-center none", "targets": 55 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 56 },

                { "width": "0%", "className": "text-center none", "targets": 57 },
                { "width": "0%", "className": "text-center none", "targets": 58 },
                { "width": "0%", "className": "text-center none", "targets": 59 },
                { "width": "0%", "className": "text-center none", "targets": 60 },
                { "width": "0%", "className": "text-center none", "targets": 61 },
                { "width": "0%", "className": "text-center none", "targets": 62 },
                { "width": "0%", "className": "text-center none", "targets": 63 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 64 },

                { "width": "0%", "className": "text-center none", "targets": 65 },
                { "width": "0%", "className": "text-center none", "targets": 66 },
                { "width": "0%", "className": "text-center none", "targets": 67 },
                { "width": "0%", "className": "text-center none", "targets": 68 },
                { "width": "0%", "className": "text-center none", "targets": 69 },
                { "width": "0%", "className": "text-center none", "targets": 70 },
                { "width": "0%", "className": "text-center none", "targets": 71 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 72 },

                { "width": "0%", "className": "text-center none", "targets": 73 },
                { "width": "0%", "className": "text-center none", "targets": 74 },
                { "width": "0%", "className": "text-center none", "targets": 75 },
                { "width": "0%", "className": "text-center none", "targets": 76 },
                { "width": "0%", "className": "text-center none", "targets": 77 },
                { "width": "0%", "className": "text-center none", "targets": 78 },
                { "width": "0%", "className": "text-center none", "targets": 79 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 80 },

                { "width": "0%", "className": "text-center none", "targets": 81 },
                { "width": "0%", "className": "text-center none", "targets": 82 },
                { "width": "0%", "className": "text-center none", "targets": 83 },
                { "width": "0%", "className": "text-center none", "targets": 84 },
                { "width": "0%", "className": "text-center none", "targets": 85 },
                { "width": "0%", "className": "text-center none", "targets": 86 },
                { "width": "0%", "className": "text-center none", "targets": 87 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 88 },

                { "width": "0%", "className": "text-center none", "targets": 89 },
                { "width": "0%", "className": "text-center none", "targets": 90 },
                { "width": "0%", "className": "text-center none", "targets": 91 },
                { "width": "0%", "className": "text-center none", "targets": 92 },
                { "width": "0%", "className": "text-center none", "targets": 93 },
                { "width": "0%", "className": "text-center none", "targets": 94 },
                { "width": "0%", "className": "text-center none", "targets": 95 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 96 },

                { "width": "0%", "className": "text-center none", "targets": 97 },
                { "width": "0%", "className": "text-center none", "targets": 98 },
                { "width": "0%", "className": "text-center none", "targets": 99 },
                { "width": "0%", "className": "text-center none", "targets": 100 },
                { "width": "0%", "className": "text-center none", "targets": 101 },
                { "width": "0%", "className": "text-center none", "targets": 102 },
                { "width": "0%", "className": "text-center none", "targets": 103 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 104 },

                { "width": "0%", "className": "text-center none", "targets": 105 },
                { "width": "0%", "className": "text-center none", "targets": 106 },
                { "width": "0%", "className": "text-center none", "targets": 107 },
                { "width": "0%", "className": "text-center none", "targets": 108 },
                { "width": "0%", "className": "text-center none", "targets": 109 },
                { "width": "0%", "className": "text-center none", "targets": 110 },
                { "width": "0%", "className": "text-center none", "targets": 111 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 112 },

                { "width": "0%", "className": "text-center none", "targets": 113 },
                { "width": "0%", "className": "text-center none", "targets": 114 },
                { "width": "0%", "className": "text-center none", "targets": 115 },
                { "width": "0%", "className": "text-center none", "targets": 116 },
                { "width": "0%", "className": "text-center none", "targets": 117 },
                { "width": "0%", "className": "text-center none", "targets": 118 },
                { "width": "0%", "className": "text-center none", "targets": 119 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 120 },

                { "width": "0%", "className": "text-center none", "targets": 121 },
                { "width": "0%", "className": "text-center none", "targets": 122 },
                { "width": "0%", "className": "text-center none", "targets": 123 },
                { "width": "0%", "className": "text-center none", "targets": 124 },
                { "width": "0%", "className": "text-center none", "targets": 125 },
                { "width": "0%", "className": "text-center none", "targets": 126 },
                { "width": "0%", "className": "text-center none", "targets": 127 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 128 },

                { "width": "0%", "className": "text-center none", "targets": 129 },
                { "width": "0%", "className": "text-center none", "targets": 130 },
                { "width": "0%", "className": "text-center none", "targets": 131 },
                { "width": "0%", "className": "text-center none", "targets": 132 },
                { "width": "0%", "className": "text-center none", "targets": 133 },
                { "width": "0%", "className": "text-center none", "targets": 134 },
                { "width": "0%", "className": "text-center none", "targets": 135 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 136 },

                { "width": "0%", "className": "text-center none", "targets": 137 },
                { "width": "0%", "className": "text-center none", "targets": 138 },
                { "width": "0%", "className": "text-center none", "targets": 139 },
                { "width": "0%", "className": "text-center none", "targets": 140 },
                { "width": "0%", "className": "text-center none", "targets": 141 },
                { "width": "0%", "className": "text-center none", "targets": 142 },
                { "width": "0%", "className": "text-center none", "targets": 143 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 144 },

                { "width": "0%", "className": "text-center none", "targets": 145 },
                { "width": "0%", "className": "text-center none", "targets": 146 },
                { "width": "0%", "className": "text-center none", "targets": 147 },
                { "width": "0%", "className": "text-center none", "targets": 148 },
                { "width": "0%", "className": "text-center none", "targets": 149 },
                { "width": "0%", "className": "text-center none", "targets": 150 },
                { "width": "0%", "className": "text-center none", "targets": 151 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 152 },

                { "width": "3%", "className": "text-center none", "targets": 153 },//ModeNameToll
                { "width": "3%", "className": "text-center none", "targets": 154 },//IsZip

                { "width": "3%", "className": "text-right " + IsNrMp, "targets": 155 },//MpReceipt

                { "width": "3%", "className": "text-right " + IsNrSite, "targets": 156 },//ReceiptLaneAll
                { "width": "3%", "className": "text-right " + IsNrSite, "targets": 157 },//ReceiptCeAll
                { "width": "3%", "className": "text-right " + IsNrSite, "targets": 158 },//ReceiptAllGap

                { "width": "3%", "className": "text-center ", "targets": 159 },//BagNumber

                { "width": "3%", "className": "text-center", "targets": 160 },//TrxZip
                { "width": "3%", "className": "text-center", "targets": 161 },//TrxCe

                { "width": "3%", "className": "text-center", "targets": 162 },//Ctr01

                { "targets": 3, "render": function (data, type, row) { return GetDhmValueNullableFromDataTableDate(data); } },
                { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

                { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 9, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },



                { "targets": 10, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 11, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 12, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 13, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertPost', 'fas fa-eye', '0048ff'); } },
                { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertMsgPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertZipPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertPostLaneSearch', data, 'fas fa-search', '0048ff'); } },

                { "targets": 154, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 155, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

                { "targets": 156, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 157, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 158, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

                { "targets": 159, "render": function (data, type, row) { return GetGapPostWithoutReceiptFromDataTable(data, row['CashierNumber']); } },


                { "targets": 160, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },
                { "targets": 161, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 10,
            "processing": false,
            "responsive": true,
            "bFilter": true,
            "autoWidth": false,
            "searching": true,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(6).footer()).html(DataTableFormatDoubleGet(Total1));

                Total2 = api.column(155).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(155).footer()).html(DataTableFormatDoubleGet(Total2));

                Total3 = api.column(156).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(156).footer()).html(DataTableFormatDoubleGet(Total3));

                Total4 = api.column(157).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(157).footer()).html(DataTableFormatDoubleGet(Total4));

                //Total3 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);



                //$(api.column(12).footer()).html(numShortFormat(Total3));

            }
        });
    }
    if (TableSource == 'NrMp') {
        $('#' + PatternTableId).DataTable({
            "initComplete": function (settings, json) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
                ShowReport(PatternTableReportId);
            },
            "ajax": {
                "url": "/Cert/CertPostGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "Id": Id,
                    "TableSource": TableSource,
                }
            },
            "columns": [

                { "data": "SiteName" },//0
                { "data": "StationNumber" },//1
                { "data": "LaneName" },//2
                { "data": "DhmValueStart" },//3
                { "data": "DhmValue" },//4
                { "data": "CashierNumber" },//5

                { "data": "MpNumber" },//6

                { "data": "ReceiptLane" },//7
                { "data": "ReceiptCe" },//8
                { "data": "ReceiptGap" },//9

                { "data": "IsLane" },//10
                { "data": "IsOpe" },//11
                { "data": "IsCe" },//12

                { "data": "CertPostRecoId" },//13 Trx
                { "data": "CertPostRecoId" },//14 Msg
                { "data": "CertPostRecoId" },//15 Zip
                { "data": "CertPostRecoId" },//16 Lane

                { "data": "Mp01C1Receipt" },//17
                { "data": "Mp01C2Receipt" },//14
                { "data": "Mp01C3Receipt" },//15
                { "data": "Mp01Receipt" },//16
                { "data": "Mp01C1Number" },//17
                { "data": "Mp01C2Number" },//18
                { "data": "Mp01C3Number" },//19
                { "data": "Mp01Number" },//20

                { "data": "Mp28C1Receipt" },//21
                { "data": "Mp28C2Receipt" },//22
                { "data": "Mp28C3Receipt" },//23
                { "data": "Mp28Receipt" },//24
                { "data": "Mp28C1Number" },//25
                { "data": "Mp28C2Number" },//26
                { "data": "Mp28C3Number" },//27
                { "data": "Mp28Number" },//28

                { "data": "Mp40C1Receipt" },//29
                { "data": "Mp40C2Receipt" },//30
                { "data": "Mp40C3Receipt" },//31
                { "data": "Mp40Receipt" },//32
                { "data": "Mp40C1Number" },//33
                { "data": "Mp40C2Number" },//34
                { "data": "Mp40C3Number" },//35
                { "data": "Mp40Number" },//36

                { "data": "Mp29C1Receipt" },//37
                { "data": "Mp29C2Receipt" },//38
                { "data": "Mp29C3Receipt" },//39
                { "data": "Mp29Receipt" },//40
                { "data": "Mp29C1Number" },//41
                { "data": "Mp29C2Number" },//42
                { "data": "Mp29C3Number" },//43
                { "data": "Mp29Number" },//44

                { "data": "Mp05C1Receipt" },//45
                { "data": "Mp05C2Receipt" },//46
                { "data": "Mp05C3Receipt" },//47
                { "data": "Mp05Receipt" },//48
                { "data": "Mp05C1Number" },//49
                { "data": "Mp05C2Number" },//50
                { "data": "Mp05C3Number" },//51
                { "data": "Mp05Number" },//52

                { "data": "Mp06C1Receipt" },//53
                { "data": "Mp06C2Receipt" },//54
                { "data": "Mp06C3Receipt" },//55
                { "data": "Mp06Receipt" },//56
                { "data": "Mp06C1Number" },//57
                { "data": "Mp06C2Number" },//58
                { "data": "Mp06C3Number" },//59
                { "data": "Mp06Number" },//60

                { "data": "Mp07C1Receipt" },//
                { "data": "Mp07C2Receipt" },//
                { "data": "Mp07C3Receipt" },//
                { "data": "Mp07Receipt" },//
                { "data": "Mp07C1Number" },//
                { "data": "Mp07C2Number" },//
                { "data": "Mp07C3Number" },//
                { "data": "Mp07Number" },//

                { "data": "Mp08C1Receipt" },//
                { "data": "Mp08C2Receipt" },//
                { "data": "Mp08C3Receipt" },//
                { "data": "Mp08Receipt" },//
                { "data": "Mp08C1Number" },//
                { "data": "Mp08C2Number" },//
                { "data": "Mp08C3Number" },//
                { "data": "Mp08Number" },//

                { "data": "Mp09C1Receipt" },//
                { "data": "Mp09C2Receipt" },//
                { "data": "Mp09C3Receipt" },//
                { "data": "Mp09Receipt" },//
                { "data": "Mp09C1Number" },//
                { "data": "Mp09C2Number" },//
                { "data": "Mp09C3Number" },//
                { "data": "Mp09Number" },//

                { "data": "Mp15C1Receipt" },//
                { "data": "Mp15C2Receipt" },//
                { "data": "Mp15C3Receipt" },//
                { "data": "Mp15Receipt" },//
                { "data": "Mp15C1Number" },//
                { "data": "Mp15C2Number" },//
                { "data": "Mp15C3Number" },//
                { "data": "Mp15Number" },//

                { "data": "Mp16C1Receipt" },//
                { "data": "Mp16C2Receipt" },//
                { "data": "Mp16C3Receipt" },//
                { "data": "Mp16Receipt" },//
                { "data": "Mp16C1Number" },//
                { "data": "Mp16C2Number" },//
                { "data": "Mp16C3Number" },//
                { "data": "Mp16Number" },//

                { "data": "Mp12C1Receipt" },//
                { "data": "Mp12C2Receipt" },//
                { "data": "Mp12C3Receipt" },//
                { "data": "Mp12Receipt" },//
                { "data": "Mp12C1Number" },//
                { "data": "Mp12C2Number" },//
                { "data": "Mp12C3Number" },//
                { "data": "Mp12Number" },//

                { "data": "Mp41C1Receipt" },//
                { "data": "Mp41C2Receipt" },//
                { "data": "Mp41C3Receipt" },//
                { "data": "Mp41Receipt" },//
                { "data": "Mp41C1Number" },//
                { "data": "Mp41C2Number" },//
                { "data": "Mp41C3Number" },//
                { "data": "Mp41Number" },//

                { "data": "Mp13C1Receipt" },//
                { "data": "Mp13C2Receipt" },//
                { "data": "Mp13C3Receipt" },//
                { "data": "Mp13Receipt" },//
                { "data": "Mp13C1Number" },//
                { "data": "Mp13C2Number" },//
                { "data": "Mp13C3Number" },//
                { "data": "Mp13Number" },//

                { "data": "Mp30C1Receipt" },//
                { "data": "Mp30C2Receipt" },//
                { "data": "Mp30C3Receipt" },//
                { "data": "Mp30Receipt" },//
                { "data": "Mp30C1Number" },//
                { "data": "Mp30C2Number" },//
                { "data": "Mp30C3Number" },//
                { "data": "Mp30Number" },//

                { "data": "Mp31C1Receipt" },//
                { "data": "Mp31C2Receipt" },//
                { "data": "Mp31C3Receipt" },//
                { "data": "Mp31Receipt" },//
                { "data": "Mp31C1Number" },//
                { "data": "Mp31C2Number" },//
                { "data": "Mp31C3Number" },//
                { "data": "Mp31Number" },//

                { "data": "Mp32C1Receipt" },//
                { "data": "Mp32C2Receipt" },//
                { "data": "Mp32C3Receipt" },//
                { "data": "Mp32Receipt" },//
                { "data": "Mp32C1Number" },//
                { "data": "Mp32C2Number" },//
                { "data": "Mp32C3Number" },//
                { "data": "Mp32Number" },

                { "mData": function vehicle(data, type, dataToSet) { return data.ModeId + '-' + data.ModeName; } },//1
                { "data": "IsZip" },//

                { "data": "MpReceipt" },//

                { "data": "ReceiptLaneAll" },//
                { "data": "ReceiptCeAll" },//
                { "data": "ReceiptAllGap" },//

                { "data": "BagNumber" },//9

                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//160
                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//161

                { "data": "Ctr01" },
            ],
            "columnDefs": [
                { "width": "3%", "className": "text-center none", "targets": 0 },//SiteName
                { "width": "3%", "className": "text-center", "targets": 1 },//StationNumber
                { "width": "3%", "className": "text-center", "targets": 2 },//LaneName
                { "width": "3%", "className": "text-center " + IsCtrTrx + " " + IsNrMp, "targets": 3 },//DhmValueStart
                { "width": "3%", "className": "text-center", "targets": 4 },//DhmValue
                { "width": "3%", "className": "text-center " + IsPostStation, "targets": 5 },//CashierNumber

                { "width": "3%", "className": "text-center " + IsNrMp, "targets": 6 },//MpNumber

                { "width": "3%", "className": "text-right " + IsPostStation, "targets": 7 },
                { "width": "3%", "className": "text-right " + IsPostStation, "targets": 8 },
                { "width": "3%", "className": "text-center" + IsPostStation + " " + IsNrSite, "targets": 9 },

                { "width": "3%", "className": "text-center none", "targets": 10 },//IsLane
                { "width": "3%", "className": "text-center " + IsNrMp, "targets": 11 },//IsOpe
                { "width": "3%", "className": "text-center " + IsNrMp, "targets": 12 },//IsCe

                { "width": "3%", "className": "text-center", "targets": 13 },//Trx
                { "width": "3%", "className": "text-center none", "targets": 14 },//Msg
                { "width": "3%", "className": "text-center", "targets": 15 },//Zip
                { "width": "3%", "className": "text-center none", "targets": 16 },//Lane

                //MP
                { "width": "0%", "className": "text-center none", "targets": 17 },
                { "width": "0%", "className": "text-center none", "targets": 18 },
                { "width": "0%", "className": "text-center none", "targets": 19 },
                { "width": "0%", "className": "text-center none", "targets": 20 },
                { "width": "0%", "className": "text-center none", "targets": 21 },
                { "width": "0%", "className": "text-center none", "targets": 22 },
                { "width": "0%", "className": "text-center none", "targets": 23 },
                { "width": "3%", "className": "text-center " + IsCtrTrx, "targets": 24 },

                { "width": "0%", "className": "text-center none", "targets": 25 },
                { "width": "0%", "className": "text-center none", "targets": 26 },
                { "width": "0%", "className": "text-center none", "targets": 27 },
                { "width": "0%", "className": "text-center none", "targets": 28 },
                { "width": "0%", "className": "text-center none", "targets": 29 },
                { "width": "0%", "className": "text-center none", "targets": 30 },
                { "width": "0%", "className": "text-center none", "targets": 31 },
                { "width": "3%", "className": "text-center " + IsCtrTrx, "targets": 32 },

                { "width": "0%", "className": "text-center none", "targets": 33 },
                { "width": "0%", "className": "text-center none", "targets": 34 },
                { "width": "0%", "className": "text-center none", "targets": 35 },
                { "width": "0%", "className": "text-center none", "targets": 36 },
                { "width": "0%", "className": "text-center none", "targets": 37 },
                { "width": "0%", "className": "text-center none", "targets": 38 },
                { "width": "0%", "className": "text-center none", "targets": 39 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 40 },

                { "width": "0%", "className": "text-center none", "targets": 41 },
                { "width": "0%", "className": "text-center none", "targets": 42 },
                { "width": "0%", "className": "text-center none", "targets": 43 },
                { "width": "0%", "className": "text-center none", "targets": 44 },
                { "width": "0%", "className": "text-center none", "targets": 45 },
                { "width": "0%", "className": "text-center none", "targets": 46 },
                { "width": "0%", "className": "text-center none", "targets": 47 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 48 },

                { "width": "0%", "className": "text-center none", "targets": 49 },
                { "width": "0%", "className": "text-center none", "targets": 50 },
                { "width": "0%", "className": "text-center none", "targets": 51 },
                { "width": "0%", "className": "text-center none", "targets": 52 },
                { "width": "0%", "className": "text-center none", "targets": 53 },
                { "width": "0%", "className": "text-center none", "targets": 54 },
                { "width": "0%", "className": "text-center none", "targets": 55 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 56 },

                { "width": "0%", "className": "text-center none", "targets": 57 },
                { "width": "0%", "className": "text-center none", "targets": 58 },
                { "width": "0%", "className": "text-center none", "targets": 59 },
                { "width": "0%", "className": "text-center none", "targets": 60 },
                { "width": "0%", "className": "text-center none", "targets": 61 },
                { "width": "0%", "className": "text-center none", "targets": 62 },
                { "width": "0%", "className": "text-center none", "targets": 63 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 64 },

                { "width": "0%", "className": "text-center none", "targets": 65 },
                { "width": "0%", "className": "text-center none", "targets": 66 },
                { "width": "0%", "className": "text-center none", "targets": 67 },
                { "width": "0%", "className": "text-center none", "targets": 68 },
                { "width": "0%", "className": "text-center none", "targets": 69 },
                { "width": "0%", "className": "text-center none", "targets": 70 },
                { "width": "0%", "className": "text-center none", "targets": 71 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 72 },

                { "width": "0%", "className": "text-center none", "targets": 73 },
                { "width": "0%", "className": "text-center none", "targets": 74 },
                { "width": "0%", "className": "text-center none", "targets": 75 },
                { "width": "0%", "className": "text-center none", "targets": 76 },
                { "width": "0%", "className": "text-center none", "targets": 77 },
                { "width": "0%", "className": "text-center none", "targets": 78 },
                { "width": "0%", "className": "text-center none", "targets": 79 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 80 },

                { "width": "0%", "className": "text-center none", "targets": 81 },
                { "width": "0%", "className": "text-center none", "targets": 82 },
                { "width": "0%", "className": "text-center none", "targets": 83 },
                { "width": "0%", "className": "text-center none", "targets": 84 },
                { "width": "0%", "className": "text-center none", "targets": 85 },
                { "width": "0%", "className": "text-center none", "targets": 86 },
                { "width": "0%", "className": "text-center none", "targets": 87 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 88 },

                { "width": "0%", "className": "text-center none", "targets": 89 },
                { "width": "0%", "className": "text-center none", "targets": 90 },
                { "width": "0%", "className": "text-center none", "targets": 91 },
                { "width": "0%", "className": "text-center none", "targets": 92 },
                { "width": "0%", "className": "text-center none", "targets": 93 },
                { "width": "0%", "className": "text-center none", "targets": 94 },
                { "width": "0%", "className": "text-center none", "targets": 95 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 96 },

                { "width": "0%", "className": "text-center none", "targets": 97 },
                { "width": "0%", "className": "text-center none", "targets": 98 },
                { "width": "0%", "className": "text-center none", "targets": 99 },
                { "width": "0%", "className": "text-center none", "targets": 100 },
                { "width": "0%", "className": "text-center none", "targets": 101 },
                { "width": "0%", "className": "text-center none", "targets": 102 },
                { "width": "0%", "className": "text-center none", "targets": 103 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 104 },

                { "width": "0%", "className": "text-center none", "targets": 105 },
                { "width": "0%", "className": "text-center none", "targets": 106 },
                { "width": "0%", "className": "text-center none", "targets": 107 },
                { "width": "0%", "className": "text-center none", "targets": 108 },
                { "width": "0%", "className": "text-center none", "targets": 109 },
                { "width": "0%", "className": "text-center none", "targets": 110 },
                { "width": "0%", "className": "text-center none", "targets": 111 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 112 },

                { "width": "0%", "className": "text-center none", "targets": 113 },
                { "width": "0%", "className": "text-center none", "targets": 114 },
                { "width": "0%", "className": "text-center none", "targets": 115 },
                { "width": "0%", "className": "text-center none", "targets": 116 },
                { "width": "0%", "className": "text-center none", "targets": 117 },
                { "width": "0%", "className": "text-center none", "targets": 118 },
                { "width": "0%", "className": "text-center none", "targets": 119 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 120 },

                { "width": "0%", "className": "text-center none", "targets": 121 },
                { "width": "0%", "className": "text-center none", "targets": 122 },
                { "width": "0%", "className": "text-center none", "targets": 123 },
                { "width": "0%", "className": "text-center none", "targets": 124 },
                { "width": "0%", "className": "text-center none", "targets": 125 },
                { "width": "0%", "className": "text-center none", "targets": 126 },
                { "width": "0%", "className": "text-center none", "targets": 127 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 128 },

                { "width": "0%", "className": "text-center none", "targets": 129 },
                { "width": "0%", "className": "text-center none", "targets": 130 },
                { "width": "0%", "className": "text-center none", "targets": 131 },
                { "width": "0%", "className": "text-center none", "targets": 132 },
                { "width": "0%", "className": "text-center none", "targets": 133 },
                { "width": "0%", "className": "text-center none", "targets": 134 },
                { "width": "0%", "className": "text-center none", "targets": 135 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 136 },

                { "width": "0%", "className": "text-center none", "targets": 137 },
                { "width": "0%", "className": "text-center none", "targets": 138 },
                { "width": "0%", "className": "text-center none", "targets": 139 },
                { "width": "0%", "className": "text-center none", "targets": 140 },
                { "width": "0%", "className": "text-center none", "targets": 141 },
                { "width": "0%", "className": "text-center none", "targets": 142 },
                { "width": "0%", "className": "text-center none", "targets": 143 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 144 },

                { "width": "0%", "className": "text-center none", "targets": 145 },
                { "width": "0%", "className": "text-center none", "targets": 146 },
                { "width": "0%", "className": "text-center none", "targets": 147 },
                { "width": "0%", "className": "text-center none", "targets": 148 },
                { "width": "0%", "className": "text-center none", "targets": 149 },
                { "width": "0%", "className": "text-center none", "targets": 150 },
                { "width": "0%", "className": "text-center none", "targets": 151 },
                { "width": "0%", "className": "text-center " + IsCtrTrx, "targets": 152 },

                { "width": "3%", "className": "text-center none", "targets": 153 },//ModeNameToll
                { "width": "3%", "className": "text-center none", "targets": 154 },//IsZip

                { "width": "3%", "className": "text-right " + IsNrMp, "targets": 155 },//MpReceipt

                { "width": "3%", "className": "text-right " + IsNrSite, "targets": 156 },//ReceiptLaneAll
                { "width": "3%", "className": "text-right " + IsNrSite, "targets": 157 },//ReceiptCeAll
                { "width": "3%", "className": "text-right " + IsNrSite, "targets": 158 },//ReceiptAllGap

                { "width": "3%", "className": "text-center ", "targets": 159 },//BagNumber

                { "width": "3%", "className": "text-center", "targets": 160 },//TrxZip
                { "width": "3%", "className": "text-center", "targets": 161 },//TrxCe

                { "width": "3%", "className": "text-center", "targets": 162 },//Ctr01

                { "targets": 3, "render": function (data, type, row) { return GetDhmValueNullableFromDataTableDate(data); } },
                { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

                { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 9, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },



                { "targets": 10, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 11, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 12, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 13, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertPost', 'fas fa-eye', '0048ff'); } },
                { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertMsgPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertZipPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertPostLaneSearch', data, 'fas fa-search', '0048ff'); } },

                { "targets": 154, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 155, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

                { "targets": 156, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 157, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 158, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

                { "targets": 159, "render": function (data, type, row) { return GetGapPostWithoutReceiptFromDataTable(data, row['CashierNumber']); } },


                { "targets": 160, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },
                { "targets": 161, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 10,
            "processing": false,
            "responsive": true,
            "bFilter": true,
            "autoWidth": false,
            "searching": true,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(6).footer()).html(DataTableFormatDoubleGet(Total1));

                Total2 = api.column(155).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(155).footer()).html(DataTableFormatDoubleGet(Total2));

                Total3 = api.column(156).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(156).footer()).html(DataTableFormatDoubleGet(Total3));

                Total4 = api.column(157).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(157).footer()).html(DataTableFormatDoubleGet(Total4));

                //Total3 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);



                //$(api.column(12).footer()).html(numShortFormat(Total3));

            }
        });
    }

    if (TableSource == 'CertReceiptBag') {
        $('#' + PatternTableId).DataTable({
            "initComplete": function (settings, json) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
                ShowReport(PatternTableReportId);
            },
            "ajax": {
                "url": "/Cert/CertPostGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "Id": Id,
                    "TableSource": TableSource,
                }
            },
            "columns": [

                { "data": "SiteName" },//0
                { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.StationNumber; } },//1
                //{ "data": "StationNumber" },//1
                { "data": "LaneName" },//2
                { "data": "DhmValueStart" },//3
                { "data": "DhmValue" },//4
                { "data": "CashierNumber" },//5

                { "data": "MpNumber" },//6

                { "data": "ReceiptLane" },//7
                { "data": "ReceiptCe" },//8
                { "data": "ReceiptGap" },//9

                { "data": "IsLane" },//10
                { "data": "IsOpe" },//11
                { "data": "IsCe" },//12

                { "data": "CertPostRecoId" },//13 Trx
                { "data": "CertPostRecoId" },//14 Msg
                { "data": "CertPostRecoId" },//15 Zip
                { "data": "CertPostRecoId" },//16 Lane

                { "data": "Mp01C1Receipt" },//17
                { "data": "Mp01C2Receipt" },//14
                { "data": "Mp01C3Receipt" },//15
                { "data": "Mp01Receipt" },//16
                { "data": "Mp01C1Number" },//17
                { "data": "Mp01C2Number" },//18
                { "data": "Mp01C3Number" },//19
                { "data": "Mp01Number" },//20

                { "data": "Mp28C1Receipt" },//21
                { "data": "Mp28C2Receipt" },//22
                { "data": "Mp28C3Receipt" },//23
                { "data": "Mp28Receipt" },//24
                { "data": "Mp28C1Number" },//25
                { "data": "Mp28C2Number" },//26
                { "data": "Mp28C3Number" },//27
                { "data": "Mp28Number" },//28

                { "data": "Mp40C1Receipt" },//29
                { "data": "Mp40C2Receipt" },//30
                { "data": "Mp40C3Receipt" },//31
                { "data": "Mp40Receipt" },//32
                { "data": "Mp40C1Number" },//33
                { "data": "Mp40C2Number" },//34
                { "data": "Mp40C3Number" },//35
                { "data": "Mp40Number" },//36

                { "data": "Mp29C1Receipt" },//37
                { "data": "Mp29C2Receipt" },//38
                { "data": "Mp29C3Receipt" },//39
                { "data": "Mp29Receipt" },//40
                { "data": "Mp29C1Number" },//41
                { "data": "Mp29C2Number" },//42
                { "data": "Mp29C3Number" },//43
                { "data": "Mp29Number" },//44

                { "data": "Mp05C1Receipt" },//45
                { "data": "Mp05C2Receipt" },//46
                { "data": "Mp05C3Receipt" },//47
                { "data": "Mp05Receipt" },//48
                { "data": "Mp05C1Number" },//49
                { "data": "Mp05C2Number" },//50
                { "data": "Mp05C3Number" },//51
                { "data": "Mp05Number" },//52

                { "data": "Mp06C1Receipt" },//53
                { "data": "Mp06C2Receipt" },//54
                { "data": "Mp06C3Receipt" },//55
                { "data": "Mp06Receipt" },//56
                { "data": "Mp06C1Number" },//57
                { "data": "Mp06C2Number" },//58
                { "data": "Mp06C3Number" },//59
                { "data": "Mp06Number" },//60

                { "data": "Mp07C1Receipt" },//
                { "data": "Mp07C2Receipt" },//
                { "data": "Mp07C3Receipt" },//
                { "data": "Mp07Receipt" },//
                { "data": "Mp07C1Number" },//
                { "data": "Mp07C2Number" },//
                { "data": "Mp07C3Number" },//
                { "data": "Mp07Number" },//

                { "data": "Mp08C1Receipt" },//
                { "data": "Mp08C2Receipt" },//
                { "data": "Mp08C3Receipt" },//
                { "data": "Mp08Receipt" },//
                { "data": "Mp08C1Number" },//
                { "data": "Mp08C2Number" },//
                { "data": "Mp08C3Number" },//
                { "data": "Mp08Number" },//

                { "data": "Mp09C1Receipt" },//
                { "data": "Mp09C2Receipt" },//
                { "data": "Mp09C3Receipt" },//
                { "data": "Mp09Receipt" },//
                { "data": "Mp09C1Number" },//
                { "data": "Mp09C2Number" },//
                { "data": "Mp09C3Number" },//
                { "data": "Mp09Number" },//

                { "data": "Mp15C1Receipt" },//
                { "data": "Mp15C2Receipt" },//
                { "data": "Mp15C3Receipt" },//
                { "data": "Mp15Receipt" },//
                { "data": "Mp15C1Number" },//
                { "data": "Mp15C2Number" },//
                { "data": "Mp15C3Number" },//
                { "data": "Mp15Number" },//

                { "data": "Mp16C1Receipt" },//
                { "data": "Mp16C2Receipt" },//
                { "data": "Mp16C3Receipt" },//
                { "data": "Mp16Receipt" },//
                { "data": "Mp16C1Number" },//
                { "data": "Mp16C2Number" },//
                { "data": "Mp16C3Number" },//
                { "data": "Mp16Number" },//

                { "data": "Mp12C1Receipt" },//
                { "data": "Mp12C2Receipt" },//
                { "data": "Mp12C3Receipt" },//
                { "data": "Mp12Receipt" },//
                { "data": "Mp12C1Number" },//
                { "data": "Mp12C2Number" },//
                { "data": "Mp12C3Number" },//
                { "data": "Mp12Number" },//

                { "data": "Mp41C1Receipt" },//
                { "data": "Mp41C2Receipt" },//
                { "data": "Mp41C3Receipt" },//
                { "data": "Mp41Receipt" },//
                { "data": "Mp41C1Number" },//
                { "data": "Mp41C2Number" },//
                { "data": "Mp41C3Number" },//
                { "data": "Mp41Number" },//

                { "data": "Mp13C1Receipt" },//
                { "data": "Mp13C2Receipt" },//
                { "data": "Mp13C3Receipt" },//
                { "data": "Mp13Receipt" },//
                { "data": "Mp13C1Number" },//
                { "data": "Mp13C2Number" },//
                { "data": "Mp13C3Number" },//
                { "data": "Mp13Number" },//

                { "data": "Mp30C1Receipt" },//
                { "data": "Mp30C2Receipt" },//
                { "data": "Mp30C3Receipt" },//
                { "data": "Mp30Receipt" },//
                { "data": "Mp30C1Number" },//
                { "data": "Mp30C2Number" },//
                { "data": "Mp30C3Number" },//
                { "data": "Mp30Number" },//

                { "data": "Mp31C1Receipt" },//
                { "data": "Mp31C2Receipt" },//
                { "data": "Mp31C3Receipt" },//
                { "data": "Mp31Receipt" },//
                { "data": "Mp31C1Number" },//
                { "data": "Mp31C2Number" },//
                { "data": "Mp31C3Number" },//
                { "data": "Mp31Number" },//

                { "data": "Mp32C1Receipt" },//
                { "data": "Mp32C2Receipt" },//
                { "data": "Mp32C3Receipt" },//
                { "data": "Mp32Receipt" },//
                { "data": "Mp32C1Number" },//
                { "data": "Mp32C2Number" },//
                { "data": "Mp32C3Number" },//
                { "data": "Mp32Number" },

                { "mData": function vehicle(data, type, dataToSet) { return data.ModeId + '-' + data.ModeNameToll; } },//1
                { "data": "IsZip" },//

                { "data": "MpReceipt" },//

                { "data": "ReceiptLaneAll" },//
                { "data": "ReceiptCeAll" },//
                { "data": "ReceiptAllGap" },//

                { "data": "BagNumber" },

                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//160
                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//161

                { "data": "Ctr01" },
            ],
            "columnDefs": [
                { "width": "3%", "className": "text-center none", "targets": 0 },//SiteName
                { "width": "3%", "className": "text-center", "targets": 1 },//StationNumber
                { "width": "3%", "className": "text-center", "targets": 2 },//LaneName
                { "width": "3%", "className": "text-center none", "targets": 3 },//DhmValueStart
                { "width": "3%", "className": "text-center", "targets": 4 },//DhmValue
                { "width": "3%", "className": "text-center", "targets": 5 },//CashierNumber

                { "width": "3%", "className": "text-center none", "targets": 6 },//MpNumber

                { "width": "3%", "className": "text-right", "targets": 7 },//ReceiptLane
                { "width": "3%", "className": "text-right", "targets": 8 },//ReceiptCe
                { "width": "3%", "className": "text-center", "targets": 9 },//ReceiptGap

                { "width": "3%", "className": "text-center none", "targets": 10 },//IsLane
                { "width": "3%", "className": "text-center", "targets": 11 },//IsOpe
                { "width": "3%", "className": "text-center", "targets": 12 },//IsCe

                { "width": "3%", "className": "text-center", "targets": 13 },//Trx
                { "width": "3%", "className": "text-center none", "targets": 14 },//Msg
                { "width": "3%", "className": "text-center none", "targets": 15 },//Zip
                { "width": "3%", "className": "text-center none", "targets": 16 },//Lane

                //MP
                { "width": "0%", "className": "text-center none", "targets": 17 },
                { "width": "0%", "className": "text-center none", "targets": 18 },
                { "width": "0%", "className": "text-center none", "targets": 19 },
                { "width": "0%", "className": "text-center none", "targets": 20 },
                { "width": "0%", "className": "text-center none", "targets": 21 },
                { "width": "0%", "className": "text-center none", "targets": 22 },
                { "width": "0%", "className": "text-center none", "targets": 23 },
                { "width": "3%", "className": "text-center none", "targets": 24 },

                { "width": "0%", "className": "text-center none", "targets": 25 },
                { "width": "0%", "className": "text-center none", "targets": 26 },
                { "width": "0%", "className": "text-center none", "targets": 27 },
                { "width": "0%", "className": "text-center none", "targets": 28 },
                { "width": "0%", "className": "text-center none", "targets": 29 },
                { "width": "0%", "className": "text-center none", "targets": 30 },
                { "width": "0%", "className": "text-center none", "targets": 31 },
                { "width": "3%", "className": "text-center none", "targets": 32 },

                { "width": "0%", "className": "text-center none", "targets": 33 },
                { "width": "0%", "className": "text-center none", "targets": 34 },
                { "width": "0%", "className": "text-center none", "targets": 35 },
                { "width": "0%", "className": "text-center none", "targets": 36 },
                { "width": "0%", "className": "text-center none", "targets": 37 },
                { "width": "0%", "className": "text-center none", "targets": 38 },
                { "width": "0%", "className": "text-center none", "targets": 39 },
                { "width": "0%", "className": "text-center none", "targets": 40 },

                { "width": "0%", "className": "text-center none", "targets": 41 },
                { "width": "0%", "className": "text-center none", "targets": 42 },
                { "width": "0%", "className": "text-center none", "targets": 43 },
                { "width": "0%", "className": "text-center none", "targets": 44 },
                { "width": "0%", "className": "text-center none", "targets": 45 },
                { "width": "0%", "className": "text-center none", "targets": 46 },
                { "width": "0%", "className": "text-center none", "targets": 47 },
                { "width": "0%", "className": "text-center none", "targets": 48 },

                { "width": "0%", "className": "text-center none", "targets": 49 },
                { "width": "0%", "className": "text-center none", "targets": 50 },
                { "width": "0%", "className": "text-center none", "targets": 51 },
                { "width": "0%", "className": "text-center none", "targets": 52 },
                { "width": "0%", "className": "text-center none", "targets": 53 },
                { "width": "0%", "className": "text-center none", "targets": 54 },
                { "width": "0%", "className": "text-center none", "targets": 55 },
                { "width": "0%", "className": "text-center none", "targets": 56 },

                { "width": "0%", "className": "text-center none", "targets": 57 },
                { "width": "0%", "className": "text-center none", "targets": 58 },
                { "width": "0%", "className": "text-center none", "targets": 59 },
                { "width": "0%", "className": "text-center none", "targets": 60 },
                { "width": "0%", "className": "text-center none", "targets": 61 },
                { "width": "0%", "className": "text-center none", "targets": 62 },
                { "width": "0%", "className": "text-center none", "targets": 63 },
                { "width": "0%", "className": "text-center none", "targets": 64 },

                { "width": "0%", "className": "text-center none", "targets": 65 },
                { "width": "0%", "className": "text-center none", "targets": 66 },
                { "width": "0%", "className": "text-center none", "targets": 67 },
                { "width": "0%", "className": "text-center none", "targets": 68 },
                { "width": "0%", "className": "text-center none", "targets": 69 },
                { "width": "0%", "className": "text-center none", "targets": 70 },
                { "width": "0%", "className": "text-center none", "targets": 71 },
                { "width": "0%", "className": "text-center none", "targets": 72 },

                { "width": "0%", "className": "text-center none", "targets": 73 },
                { "width": "0%", "className": "text-center none", "targets": 74 },
                { "width": "0%", "className": "text-center none", "targets": 75 },
                { "width": "0%", "className": "text-center none", "targets": 76 },
                { "width": "0%", "className": "text-center none", "targets": 77 },
                { "width": "0%", "className": "text-center none", "targets": 78 },
                { "width": "0%", "className": "text-center none", "targets": 79 },
                { "width": "0%", "className": "text-center none", "targets": 80 },

                { "width": "0%", "className": "text-center none", "targets": 81 },
                { "width": "0%", "className": "text-center none", "targets": 82 },
                { "width": "0%", "className": "text-center none", "targets": 83 },
                { "width": "0%", "className": "text-center none", "targets": 84 },
                { "width": "0%", "className": "text-center none", "targets": 85 },
                { "width": "0%", "className": "text-center none", "targets": 86 },
                { "width": "0%", "className": "text-center none", "targets": 87 },
                { "width": "0%", "className": "text-center none", "targets": 88 },

                { "width": "0%", "className": "text-center none", "targets": 89 },
                { "width": "0%", "className": "text-center none", "targets": 90 },
                { "width": "0%", "className": "text-center none", "targets": 91 },
                { "width": "0%", "className": "text-center none", "targets": 92 },
                { "width": "0%", "className": "text-center none", "targets": 93 },
                { "width": "0%", "className": "text-center none", "targets": 94 },
                { "width": "0%", "className": "text-center none", "targets": 95 },
                { "width": "0%", "className": "text-center none", "targets": 96 },

                { "width": "0%", "className": "text-center none", "targets": 97 },
                { "width": "0%", "className": "text-center none", "targets": 98 },
                { "width": "0%", "className": "text-center none", "targets": 99 },
                { "width": "0%", "className": "text-center none", "targets": 100 },
                { "width": "0%", "className": "text-center none", "targets": 101 },
                { "width": "0%", "className": "text-center none", "targets": 102 },
                { "width": "0%", "className": "text-center none", "targets": 103 },
                { "width": "0%", "className": "text-center none", "targets": 104 },

                { "width": "0%", "className": "text-center none", "targets": 105 },
                { "width": "0%", "className": "text-center none", "targets": 106 },
                { "width": "0%", "className": "text-center none", "targets": 107 },
                { "width": "0%", "className": "text-center none", "targets": 108 },
                { "width": "0%", "className": "text-center none", "targets": 109 },
                { "width": "0%", "className": "text-center none", "targets": 110 },
                { "width": "0%", "className": "text-center none", "targets": 111 },
                { "width": "0%", "className": "text-center none", "targets": 112 },

                { "width": "0%", "className": "text-center none", "targets": 113 },
                { "width": "0%", "className": "text-center none", "targets": 114 },
                { "width": "0%", "className": "text-center none", "targets": 115 },
                { "width": "0%", "className": "text-center none", "targets": 116 },
                { "width": "0%", "className": "text-center none", "targets": 117 },
                { "width": "0%", "className": "text-center none", "targets": 118 },
                { "width": "0%", "className": "text-center none", "targets": 119 },
                { "width": "0%", "className": "text-center none", "targets": 120 },

                { "width": "0%", "className": "text-center none", "targets": 121 },
                { "width": "0%", "className": "text-center none", "targets": 122 },
                { "width": "0%", "className": "text-center none", "targets": 123 },
                { "width": "0%", "className": "text-center none", "targets": 124 },
                { "width": "0%", "className": "text-center none", "targets": 125 },
                { "width": "0%", "className": "text-center none", "targets": 126 },
                { "width": "0%", "className": "text-center none", "targets": 127 },
                { "width": "0%", "className": "text-center none", "targets": 128 },

                { "width": "0%", "className": "text-center none", "targets": 129 },
                { "width": "0%", "className": "text-center none", "targets": 130 },
                { "width": "0%", "className": "text-center none", "targets": 131 },
                { "width": "0%", "className": "text-center none", "targets": 132 },
                { "width": "0%", "className": "text-center none", "targets": 133 },
                { "width": "0%", "className": "text-center none", "targets": 134 },
                { "width": "0%", "className": "text-center none", "targets": 135 },
                { "width": "0%", "className": "text-center none", "targets": 136 },

                { "width": "0%", "className": "text-center none", "targets": 137 },
                { "width": "0%", "className": "text-center none", "targets": 138 },
                { "width": "0%", "className": "text-center none", "targets": 139 },
                { "width": "0%", "className": "text-center none", "targets": 140 },
                { "width": "0%", "className": "text-center none", "targets": 141 },
                { "width": "0%", "className": "text-center none", "targets": 142 },
                { "width": "0%", "className": "text-center none", "targets": 143 },
                { "width": "0%", "className": "text-center none", "targets": 144 },

                { "width": "0%", "className": "text-center none", "targets": 145 },
                { "width": "0%", "className": "text-center none", "targets": 146 },
                { "width": "0%", "className": "text-center none", "targets": 147 },
                { "width": "0%", "className": "text-center none", "targets": 148 },
                { "width": "0%", "className": "text-center none", "targets": 149 },
                { "width": "0%", "className": "text-center none", "targets": 150 },
                { "width": "0%", "className": "text-center none", "targets": 151 },
                { "width": "0%", "className": "text-center none", "targets": 152 },

                { "width": "3%", "className": "text-center none", "targets": 153 },//ModeNameToll
                { "width": "3%", "className": "text-center", "targets": 154 },//IsZip

                { "width": "3%", "className": "text-right none", "targets": 155 },//MpReceipt

                { "width": "3%", "className": "text-right none", "targets": 156 },//ReceiptLaneAll
                { "width": "3%", "className": "text-right none", "targets": 157 },//ReceiptCeAll
                { "width": "3%", "className": "text-right none", "targets": 158 },//ReceiptAllGap

                { "width": "3%", "className": "text-center", "targets": 159 },//BagNumber

                { "width": "3%", "className": "text-center none", "targets": 160 },//TrxZip
                { "width": "3%", "className": "text-center none", "targets": 161 },//TrxCe

                { "width": "3%", "className": "text-center none", "targets": 162 },//Ctr01

                { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertCtrFlagBooleanGet(row['IsOpe'], row['IsCe'], 1, 1), data); } },

                { "targets": 3, "render": function (data, type, row) { return GetDhmValueNullableFromDataTableDate(data); } },
                { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

                { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 9, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },



                { "targets": 10, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 11, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 12, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 13, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertPost', 'fas fa-eye', '0048ff'); } },
                { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertMsgPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertZipPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertPostLaneSearch', data, 'fas fa-search', '0048ff'); } },

                { "targets": 154, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 155, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

                { "targets": 156, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 157, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 158, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

                { "targets": 159, "render": function (data, type, row) { return GetGapPostWithoutReceiptFromDataTable(data, row['CashierNumber']); } },


                { "targets": 160, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },
                { "targets": 161, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

                { "targets": 162, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 10,
            "processing": false,
            "responsive": true,
            "bFilter": true,
            "autoWidth": false,
            "searching": true,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };


                Total7 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(7).footer()).html(numFormat(Total7));

                Total8 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(8).footer()).html(numFormat(Total8));

                Total9 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(9).footer()).html(numFormat(Total9));


                Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(6).footer()).html(DataTableFormatDoubleGet(Total1));

                Total2 = api.column(155).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(155).footer()).html(DataTableFormatDoubleGet(Total2));

                Total3 = api.column(156).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(156).footer()).html(DataTableFormatDoubleGet(Total3));

                Total4 = api.column(157).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(157).footer()).html(DataTableFormatDoubleGet(Total4));

                //Total3 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);



                //$(api.column(12).footer()).html(numShortFormat(Total3));

            }
        });
    }

    if (TableSource == 'CertPostStation') {
        $('#' + PatternTableId).DataTable({
            "initComplete": function (settings, json) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
                ShowReport(PatternTableReportId);
            },
            "ajax": {
                "url": "/Cert/CertPostGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "Id": Id,
                    "TableSource": TableSource,
                }
            },
            "columns": [

                { "data": "SiteName" },//0
                { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.StationNumber; } },//1
                //{ "data": "StationNumber" },//1
                { "data": "LaneName" },//2
                { "data": "DhmValueStart" },//3
                { "data": "DhmValue" },//4
                { "data": "CashierNumber" },//5

                { "data": "MpNumber" },//6

                { "data": "ReceiptLane" },//7
                { "data": "ReceiptCe" },//8
                { "data": "ReceiptGap" },//9

                { "data": "IsLane" },//10
                { "data": "IsOpe" },//11
                { "data": "IsCe" },//12

                { "data": "CertPostRecoId" },//13 Trx
                { "data": "CertPostRecoId" },//14 Msg
                { "data": "CertPostRecoId" },//15 Zip
                { "data": "CertPostRecoId" },//16 Lane

                { "data": "Mp01C1Receipt" },//17
                { "data": "Mp01C2Receipt" },//14
                { "data": "Mp01C3Receipt" },//15
                { "data": "Mp01Receipt" },//16
                { "data": "Mp01C1Number" },//17
                { "data": "Mp01C2Number" },//18
                { "data": "Mp01C3Number" },//19
                { "data": "Mp01Number" },//20

                { "data": "Mp28C1Receipt" },//21
                { "data": "Mp28C2Receipt" },//22
                { "data": "Mp28C3Receipt" },//23
                { "data": "Mp28Receipt" },//24
                { "data": "Mp28C1Number" },//25
                { "data": "Mp28C2Number" },//26
                { "data": "Mp28C3Number" },//27
                { "data": "Mp28Number" },//28

                { "data": "Mp40C1Receipt" },//29
                { "data": "Mp40C2Receipt" },//30
                { "data": "Mp40C3Receipt" },//31
                { "data": "Mp40Receipt" },//32
                { "data": "Mp40C1Number" },//33
                { "data": "Mp40C2Number" },//34
                { "data": "Mp40C3Number" },//35
                { "data": "Mp40Number" },//36

                { "data": "Mp29C1Receipt" },//37
                { "data": "Mp29C2Receipt" },//38
                { "data": "Mp29C3Receipt" },//39
                { "data": "Mp29Receipt" },//40
                { "data": "Mp29C1Number" },//41
                { "data": "Mp29C2Number" },//42
                { "data": "Mp29C3Number" },//43
                { "data": "Mp29Number" },//44

                { "data": "Mp05C1Receipt" },//45
                { "data": "Mp05C2Receipt" },//46
                { "data": "Mp05C3Receipt" },//47
                { "data": "Mp05Receipt" },//48
                { "data": "Mp05C1Number" },//49
                { "data": "Mp05C2Number" },//50
                { "data": "Mp05C3Number" },//51
                { "data": "Mp05Number" },//52

                { "data": "Mp06C1Receipt" },//53
                { "data": "Mp06C2Receipt" },//54
                { "data": "Mp06C3Receipt" },//55
                { "data": "Mp06Receipt" },//56
                { "data": "Mp06C1Number" },//57
                { "data": "Mp06C2Number" },//58
                { "data": "Mp06C3Number" },//59
                { "data": "Mp06Number" },//60

                { "data": "Mp07C1Receipt" },//
                { "data": "Mp07C2Receipt" },//
                { "data": "Mp07C3Receipt" },//
                { "data": "Mp07Receipt" },//
                { "data": "Mp07C1Number" },//
                { "data": "Mp07C2Number" },//
                { "data": "Mp07C3Number" },//
                { "data": "Mp07Number" },//

                { "data": "Mp08C1Receipt" },//
                { "data": "Mp08C2Receipt" },//
                { "data": "Mp08C3Receipt" },//
                { "data": "Mp08Receipt" },//
                { "data": "Mp08C1Number" },//
                { "data": "Mp08C2Number" },//
                { "data": "Mp08C3Number" },//
                { "data": "Mp08Number" },//

                { "data": "Mp09C1Receipt" },//
                { "data": "Mp09C2Receipt" },//
                { "data": "Mp09C3Receipt" },//
                { "data": "Mp09Receipt" },//
                { "data": "Mp09C1Number" },//
                { "data": "Mp09C2Number" },//
                { "data": "Mp09C3Number" },//
                { "data": "Mp09Number" },//

                { "data": "Mp15C1Receipt" },//
                { "data": "Mp15C2Receipt" },//
                { "data": "Mp15C3Receipt" },//
                { "data": "Mp15Receipt" },//
                { "data": "Mp15C1Number" },//
                { "data": "Mp15C2Number" },//
                { "data": "Mp15C3Number" },//
                { "data": "Mp15Number" },//

                { "data": "Mp16C1Receipt" },//
                { "data": "Mp16C2Receipt" },//
                { "data": "Mp16C3Receipt" },//
                { "data": "Mp16Receipt" },//
                { "data": "Mp16C1Number" },//
                { "data": "Mp16C2Number" },//
                { "data": "Mp16C3Number" },//
                { "data": "Mp16Number" },//

                { "data": "Mp12C1Receipt" },//
                { "data": "Mp12C2Receipt" },//
                { "data": "Mp12C3Receipt" },//
                { "data": "Mp12Receipt" },//
                { "data": "Mp12C1Number" },//
                { "data": "Mp12C2Number" },//
                { "data": "Mp12C3Number" },//
                { "data": "Mp12Number" },//

                { "data": "Mp41C1Receipt" },//
                { "data": "Mp41C2Receipt" },//
                { "data": "Mp41C3Receipt" },//
                { "data": "Mp41Receipt" },//
                { "data": "Mp41C1Number" },//
                { "data": "Mp41C2Number" },//
                { "data": "Mp41C3Number" },//
                { "data": "Mp41Number" },//

                { "data": "Mp13C1Receipt" },//
                { "data": "Mp13C2Receipt" },//
                { "data": "Mp13C3Receipt" },//
                { "data": "Mp13Receipt" },//
                { "data": "Mp13C1Number" },//
                { "data": "Mp13C2Number" },//
                { "data": "Mp13C3Number" },//
                { "data": "Mp13Number" },//

                { "data": "Mp30C1Receipt" },//
                { "data": "Mp30C2Receipt" },//
                { "data": "Mp30C3Receipt" },//
                { "data": "Mp30Receipt" },//
                { "data": "Mp30C1Number" },//
                { "data": "Mp30C2Number" },//
                { "data": "Mp30C3Number" },//
                { "data": "Mp30Number" },//

                { "data": "Mp31C1Receipt" },//
                { "data": "Mp31C2Receipt" },//
                { "data": "Mp31C3Receipt" },//
                { "data": "Mp31Receipt" },//
                { "data": "Mp31C1Number" },//
                { "data": "Mp31C2Number" },//
                { "data": "Mp31C3Number" },//
                { "data": "Mp31Number" },//

                { "data": "Mp32C1Receipt" },//
                { "data": "Mp32C2Receipt" },//
                { "data": "Mp32C3Receipt" },//
                { "data": "Mp32Receipt" },//
                { "data": "Mp32C1Number" },//
                { "data": "Mp32C2Number" },//
                { "data": "Mp32C3Number" },//
                { "data": "Mp32Number" },

                { "mData": function vehicle(data, type, dataToSet) { return data.ModeId + '-' + data.ModeName; } },//1
                { "data": "IsZip" },//

                { "data": "MpReceipt" },//

                { "data": "ReceiptLaneAll" },//
                { "data": "ReceiptCeAll" },//
                { "data": "ReceiptAllGap" },//

                { "data": "BagNumber" },//9

                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//160
                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//161

                { "data": "Ctr01" },
            ],
            "columnDefs": [
                { "width": "3%", "className": "text-center none", "targets": 0 },//SiteName
                { "width": "3%", "className": "text-center", "targets": 1 },//StationNumber
                { "width": "3%", "className": "text-center", "targets": 2 },//LaneName
                { "width": "3%", "className": "text-center none", "targets": 3 },//DhmValueStart
                { "width": "3%", "className": "text-center", "targets": 4 },//DhmValue
                { "width": "3%", "className": "text-center", "targets": 5 },//CashierNumber

                { "width": "3%", "className": "text-center none", "targets": 6 },//MpNumber

                { "width": "3%", "className": "text-right", "targets": 7 },//ReceiptLane
                { "width": "3%", "className": "text-right", "targets": 8 },//ReceiptCe
                { "width": "3%", "className": "text-center", "targets": 9 },//ReceiptGap

                { "width": "3%", "className": "text-center none", "targets": 10 },//IsLane
                { "width": "3%", "className": "text-center", "targets": 11 },//IsOpe
                { "width": "3%", "className": "text-center", "targets": 12 },//IsCe

                { "width": "3%", "className": "text-center", "targets": 13 },//Trx
                { "width": "3%", "className": "text-center none", "targets": 14 },//Msg
                { "width": "3%", "className": "text-center none", "targets": 15 },//Zip
                { "width": "3%", "className": "text-center none", "targets": 16 },//Lane

                //MP
                { "width": "0%", "className": "text-center none", "targets": 17 },
                { "width": "0%", "className": "text-center none", "targets": 18 },
                { "width": "0%", "className": "text-center none", "targets": 19 },
                { "width": "0%", "className": "text-center none", "targets": 20 },
                { "width": "0%", "className": "text-center none", "targets": 21 },
                { "width": "0%", "className": "text-center none", "targets": 22 },
                { "width": "0%", "className": "text-center none", "targets": 23 },
                { "width": "3%", "className": "text-center none", "targets": 24 },

                { "width": "0%", "className": "text-center none", "targets": 25 },
                { "width": "0%", "className": "text-center none", "targets": 26 },
                { "width": "0%", "className": "text-center none", "targets": 27 },
                { "width": "0%", "className": "text-center none", "targets": 28 },
                { "width": "0%", "className": "text-center none", "targets": 29 },
                { "width": "0%", "className": "text-center none", "targets": 30 },
                { "width": "0%", "className": "text-center none", "targets": 31 },
                { "width": "3%", "className": "text-center none", "targets": 32 },

                { "width": "0%", "className": "text-center none", "targets": 33 },
                { "width": "0%", "className": "text-center none", "targets": 34 },
                { "width": "0%", "className": "text-center none", "targets": 35 },
                { "width": "0%", "className": "text-center none", "targets": 36 },
                { "width": "0%", "className": "text-center none", "targets": 37 },
                { "width": "0%", "className": "text-center none", "targets": 38 },
                { "width": "0%", "className": "text-center none", "targets": 39 },
                { "width": "0%", "className": "text-center none", "targets": 40 },

                { "width": "0%", "className": "text-center none", "targets": 41 },
                { "width": "0%", "className": "text-center none", "targets": 42 },
                { "width": "0%", "className": "text-center none", "targets": 43 },
                { "width": "0%", "className": "text-center none", "targets": 44 },
                { "width": "0%", "className": "text-center none", "targets": 45 },
                { "width": "0%", "className": "text-center none", "targets": 46 },
                { "width": "0%", "className": "text-center none", "targets": 47 },
                { "width": "0%", "className": "text-center none", "targets": 48 },

                { "width": "0%", "className": "text-center none", "targets": 49 },
                { "width": "0%", "className": "text-center none", "targets": 50 },
                { "width": "0%", "className": "text-center none", "targets": 51 },
                { "width": "0%", "className": "text-center none", "targets": 52 },
                { "width": "0%", "className": "text-center none", "targets": 53 },
                { "width": "0%", "className": "text-center none", "targets": 54 },
                { "width": "0%", "className": "text-center none", "targets": 55 },
                { "width": "0%", "className": "text-center none", "targets": 56 },

                { "width": "0%", "className": "text-center none", "targets": 57 },
                { "width": "0%", "className": "text-center none", "targets": 58 },
                { "width": "0%", "className": "text-center none", "targets": 59 },
                { "width": "0%", "className": "text-center none", "targets": 60 },
                { "width": "0%", "className": "text-center none", "targets": 61 },
                { "width": "0%", "className": "text-center none", "targets": 62 },
                { "width": "0%", "className": "text-center none", "targets": 63 },
                { "width": "0%", "className": "text-center none", "targets": 64 },

                { "width": "0%", "className": "text-center none", "targets": 65 },
                { "width": "0%", "className": "text-center none", "targets": 66 },
                { "width": "0%", "className": "text-center none", "targets": 67 },
                { "width": "0%", "className": "text-center none", "targets": 68 },
                { "width": "0%", "className": "text-center none", "targets": 69 },
                { "width": "0%", "className": "text-center none", "targets": 70 },
                { "width": "0%", "className": "text-center none", "targets": 71 },
                { "width": "0%", "className": "text-center none", "targets": 72 },

                { "width": "0%", "className": "text-center none", "targets": 73 },
                { "width": "0%", "className": "text-center none", "targets": 74 },
                { "width": "0%", "className": "text-center none", "targets": 75 },
                { "width": "0%", "className": "text-center none", "targets": 76 },
                { "width": "0%", "className": "text-center none", "targets": 77 },
                { "width": "0%", "className": "text-center none", "targets": 78 },
                { "width": "0%", "className": "text-center none", "targets": 79 },
                { "width": "0%", "className": "text-center none", "targets": 80 },

                { "width": "0%", "className": "text-center none", "targets": 81 },
                { "width": "0%", "className": "text-center none", "targets": 82 },
                { "width": "0%", "className": "text-center none", "targets": 83 },
                { "width": "0%", "className": "text-center none", "targets": 84 },
                { "width": "0%", "className": "text-center none", "targets": 85 },
                { "width": "0%", "className": "text-center none", "targets": 86 },
                { "width": "0%", "className": "text-center none", "targets": 87 },
                { "width": "0%", "className": "text-center none", "targets": 88 },

                { "width": "0%", "className": "text-center none", "targets": 89 },
                { "width": "0%", "className": "text-center none", "targets": 90 },
                { "width": "0%", "className": "text-center none", "targets": 91 },
                { "width": "0%", "className": "text-center none", "targets": 92 },
                { "width": "0%", "className": "text-center none", "targets": 93 },
                { "width": "0%", "className": "text-center none", "targets": 94 },
                { "width": "0%", "className": "text-center none", "targets": 95 },
                { "width": "0%", "className": "text-center none", "targets": 96 },

                { "width": "0%", "className": "text-center none", "targets": 97 },
                { "width": "0%", "className": "text-center none", "targets": 98 },
                { "width": "0%", "className": "text-center none", "targets": 99 },
                { "width": "0%", "className": "text-center none", "targets": 100 },
                { "width": "0%", "className": "text-center none", "targets": 101 },
                { "width": "0%", "className": "text-center none", "targets": 102 },
                { "width": "0%", "className": "text-center none", "targets": 103 },
                { "width": "0%", "className": "text-center none", "targets": 104 },

                { "width": "0%", "className": "text-center none", "targets": 105 },
                { "width": "0%", "className": "text-center none", "targets": 106 },
                { "width": "0%", "className": "text-center none", "targets": 107 },
                { "width": "0%", "className": "text-center none", "targets": 108 },
                { "width": "0%", "className": "text-center none", "targets": 109 },
                { "width": "0%", "className": "text-center none", "targets": 110 },
                { "width": "0%", "className": "text-center none", "targets": 111 },
                { "width": "0%", "className": "text-center none", "targets": 112 },

                { "width": "0%", "className": "text-center none", "targets": 113 },
                { "width": "0%", "className": "text-center none", "targets": 114 },
                { "width": "0%", "className": "text-center none", "targets": 115 },
                { "width": "0%", "className": "text-center none", "targets": 116 },
                { "width": "0%", "className": "text-center none", "targets": 117 },
                { "width": "0%", "className": "text-center none", "targets": 118 },
                { "width": "0%", "className": "text-center none", "targets": 119 },
                { "width": "0%", "className": "text-center none", "targets": 120 },

                { "width": "0%", "className": "text-center none", "targets": 121 },
                { "width": "0%", "className": "text-center none", "targets": 122 },
                { "width": "0%", "className": "text-center none", "targets": 123 },
                { "width": "0%", "className": "text-center none", "targets": 124 },
                { "width": "0%", "className": "text-center none", "targets": 125 },
                { "width": "0%", "className": "text-center none", "targets": 126 },
                { "width": "0%", "className": "text-center none", "targets": 127 },
                { "width": "0%", "className": "text-center none", "targets": 128 },

                { "width": "0%", "className": "text-center none", "targets": 129 },
                { "width": "0%", "className": "text-center none", "targets": 130 },
                { "width": "0%", "className": "text-center none", "targets": 131 },
                { "width": "0%", "className": "text-center none", "targets": 132 },
                { "width": "0%", "className": "text-center none", "targets": 133 },
                { "width": "0%", "className": "text-center none", "targets": 134 },
                { "width": "0%", "className": "text-center none", "targets": 135 },
                { "width": "0%", "className": "text-center none", "targets": 136 },

                { "width": "0%", "className": "text-center none", "targets": 137 },
                { "width": "0%", "className": "text-center none", "targets": 138 },
                { "width": "0%", "className": "text-center none", "targets": 139 },
                { "width": "0%", "className": "text-center none", "targets": 140 },
                { "width": "0%", "className": "text-center none", "targets": 141 },
                { "width": "0%", "className": "text-center none", "targets": 142 },
                { "width": "0%", "className": "text-center none", "targets": 143 },
                { "width": "0%", "className": "text-center none", "targets": 144 },

                { "width": "0%", "className": "text-center none", "targets": 145 },
                { "width": "0%", "className": "text-center none", "targets": 146 },
                { "width": "0%", "className": "text-center none", "targets": 147 },
                { "width": "0%", "className": "text-center none", "targets": 148 },
                { "width": "0%", "className": "text-center none", "targets": 149 },
                { "width": "0%", "className": "text-center none", "targets": 150 },
                { "width": "0%", "className": "text-center none", "targets": 151 },
                { "width": "0%", "className": "text-center none", "targets": 152 },

                { "width": "3%", "className": "text-center", "targets": 153 },//ModeNameToll
                { "width": "3%", "className": "text-center", "targets": 154 },//IsZip

                { "width": "3%", "className": "text-right none", "targets": 155 },//MpReceipt

                { "width": "3%", "className": "text-right", "targets": 156 },//ReceiptLaneAll
                { "width": "3%", "className": "text-right", "targets": 157 },//ReceiptCeAll
                { "width": "3%", "className": "text-right", "targets": 158 },//ReceiptAllGap

                { "width": "3%", "className": "text-center ", "targets": 159 },//BagNumber

                { "width": "3%", "className": "text-center", "targets": 160 },//TrxZip
                { "width": "3%", "className": "text-center", "targets": 161 },//TrxCe

                { "width": "3%", "className": "text-center", "targets": 162 },//Ctr01

                { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertCtrFlagBooleanGet(row['IsOpe'], row['IsCe'], 1, 1), data); } },

                { "targets": 3, "render": function (data, type, row) { return GetDhmValueNullableFromDataTableDate(data); } },
                { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

                { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 9, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },



                { "targets": 10, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 11, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
                { "targets": 12, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 13, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertPost', 'fas fa-eye', '0048ff'); } },
                { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertMsgPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertZipPostSearch', data, 'fas fa-search', '0048ff'); } },
                { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertPostLaneSearch', data, 'fas fa-search', '0048ff'); } },

                { "targets": 154, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

                { "targets": 155, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

                { "targets": 156, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 157, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 158, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

                { "targets": 159, "render": function (data, type, row) { return GetGapPostWithoutReceiptFromDataTable(data, row['CashierNumber']); } },


                { "targets": 160, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },
                { "targets": 161, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 10,
            "processing": false,
            "responsive": true,
            "bFilter": true,
            "autoWidth": false,
            "searching": true,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(6).footer()).html(DataTableFormatDoubleGet(Total1));

                Total2 = api.column(155).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(155).footer()).html(DataTableFormatDoubleGet(Total2));

                Total3 = api.column(156).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(156).footer()).html(DataTableFormatDoubleGet(Total3));

                Total4 = api.column(157).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(157).footer()).html(DataTableFormatDoubleGet(Total4));

                Total5 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(7).footer()).html(DataTableFormatDoubleGet(Total5));

                Total6 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(8).footer()).html(DataTableFormatDoubleGet(Total6));

            }
        });
    }
}

function CertPostLook(Id) {
    var ActionBtnId = new String('CertPostLookBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Icon = 'fas fa-eye';

    HideReport("CertPostTableReportId");

    HideReport('CertFilePlan' + 'TableReportId');

    ParamMessageReset();
    $('#CertPostTableId').DataTable().destroy();
    $('#CertPostTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertPostTableReportId");
        },
        "processing": true,
        "ajax": {
            "url": "/Cert/CertPostLook",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id
            }
        },
        "columns": [

            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "LaneName" },//2
            { "data": "DhmValueStart" },//3
            { "data": "DhmValue" },//4
            { "data": "CashierNumber" },//5

            { "data": "MpNumber" },//6

            { "data": "ReceiptLane" },//7
            { "data": "ReceiptCe" },//8

            { "data": "BagNumber" },//9

            { "data": "PostLane" },//10
            { "data": "PostOpe" },//11
            { "data": "PostCe" },//12

            { "data": "CertPostRecoId" },//13 Trx
            { "data": "CertPostRecoId" },//14 Msg
            { "data": "CertPostRecoId" },//15 Zip
            { "data": "CertPostRecoId" },//16 Lane

            { "data": "Mp01C1Receipt" },//13
            { "data": "Mp01C2Receipt" },//14
            { "data": "Mp01C3Receipt" },//15
            { "data": "Mp01Receipt" },//16
            { "data": "Mp01C1Number" },//17
            { "data": "Mp01C2Number" },//18
            { "data": "Mp01C3Number" },//19
            { "data": "Mp01Number" },//20

            { "data": "Mp28C1Receipt" },//21
            { "data": "Mp28C2Receipt" },//22
            { "data": "Mp28C3Receipt" },//23
            { "data": "Mp28Receipt" },//24
            { "data": "Mp28C1Number" },//25
            { "data": "Mp28C2Number" },//26
            { "data": "Mp28C3Number" },//27
            { "data": "Mp28Number" },//28

            { "data": "Mp40C1Receipt" },//29
            { "data": "Mp40C2Receipt" },//30
            { "data": "Mp40C3Receipt" },//31
            { "data": "Mp40Receipt" },//32
            { "data": "Mp40C1Number" },//33
            { "data": "Mp40C2Number" },//34
            { "data": "Mp40C3Number" },//35
            { "data": "Mp40Number" },//36

            { "data": "Mp29C1Receipt" },//37
            { "data": "Mp29C2Receipt" },//38
            { "data": "Mp29C3Receipt" },//39
            { "data": "Mp29Receipt" },//40
            { "data": "Mp29C1Number" },//41
            { "data": "Mp29C2Number" },//42
            { "data": "Mp29C3Number" },//43
            { "data": "Mp29Number" },//44

            { "data": "Mp05C1Receipt" },//45
            { "data": "Mp05C2Receipt" },//46
            { "data": "Mp05C3Receipt" },//47
            { "data": "Mp05Receipt" },//48
            { "data": "Mp05C1Number" },//49
            { "data": "Mp05C2Number" },//50
            { "data": "Mp05C3Number" },//51
            { "data": "Mp05Number" },//52

            { "data": "Mp06C1Receipt" },//53
            { "data": "Mp06C2Receipt" },//54
            { "data": "Mp06C3Receipt" },//55
            { "data": "Mp06Receipt" },//56
            { "data": "Mp06C1Number" },//57
            { "data": "Mp06C2Number" },//58
            { "data": "Mp06C3Number" },//59
            { "data": "Mp06Number" },//60

            { "data": "Mp07C1Receipt" },//
            { "data": "Mp07C2Receipt" },//
            { "data": "Mp07C3Receipt" },//
            { "data": "Mp07Receipt" },//
            { "data": "Mp07C1Number" },//
            { "data": "Mp07C2Number" },//
            { "data": "Mp07C3Number" },//
            { "data": "Mp07Number" },//

            { "data": "Mp08C1Receipt" },//
            { "data": "Mp08C2Receipt" },//
            { "data": "Mp08C3Receipt" },//
            { "data": "Mp08Receipt" },//
            { "data": "Mp08C1Number" },//
            { "data": "Mp08C2Number" },//
            { "data": "Mp08C3Number" },//
            { "data": "Mp08Number" },//

            { "data": "Mp09C1Receipt" },//
            { "data": "Mp09C2Receipt" },//
            { "data": "Mp09C3Receipt" },//
            { "data": "Mp09Receipt" },//
            { "data": "Mp09C1Number" },//
            { "data": "Mp09C2Number" },//
            { "data": "Mp09C3Number" },//
            { "data": "Mp09Number" },//

            { "data": "Mp15C1Receipt" },//
            { "data": "Mp15C2Receipt" },//
            { "data": "Mp15C3Receipt" },//
            { "data": "Mp15Receipt" },//
            { "data": "Mp15C1Number" },//
            { "data": "Mp15C2Number" },//
            { "data": "Mp15C3Number" },//
            { "data": "Mp15Number" },//

            { "data": "Mp16C1Receipt" },//
            { "data": "Mp16C2Receipt" },//
            { "data": "Mp16C3Receipt" },//
            { "data": "Mp16Receipt" },//
            { "data": "Mp16C1Number" },//
            { "data": "Mp16C2Number" },//
            { "data": "Mp16C3Number" },//
            { "data": "Mp16Number" },//

            { "data": "Mp12C1Receipt" },//
            { "data": "Mp12C2Receipt" },//
            { "data": "Mp12C3Receipt" },//
            { "data": "Mp12Receipt" },//
            { "data": "Mp12C1Number" },//
            { "data": "Mp12C2Number" },//
            { "data": "Mp12C3Number" },//
            { "data": "Mp12Number" },//

            { "data": "Mp41C1Receipt" },//
            { "data": "Mp41C2Receipt" },//
            { "data": "Mp41C3Receipt" },//
            { "data": "Mp41Receipt" },//
            { "data": "Mp41C1Number" },//
            { "data": "Mp41C2Number" },//
            { "data": "Mp41C3Number" },//
            { "data": "Mp41Number" },//

            { "data": "Mp13C1Receipt" },//
            { "data": "Mp13C2Receipt" },//
            { "data": "Mp13C3Receipt" },//
            { "data": "Mp13Receipt" },//
            { "data": "Mp13C1Number" },//
            { "data": "Mp13C2Number" },//
            { "data": "Mp13C3Number" },//
            { "data": "Mp13Number" },//

            { "data": "Mp30C1Receipt" },//
            { "data": "Mp30C2Receipt" },//
            { "data": "Mp30C3Receipt" },//
            { "data": "Mp30Receipt" },//
            { "data": "Mp30C1Number" },//
            { "data": "Mp30C2Number" },//
            { "data": "Mp30C3Number" },//
            { "data": "Mp30Number" },//

            { "data": "Mp31C1Receipt" },//
            { "data": "Mp31C2Receipt" },//
            { "data": "Mp31C3Receipt" },//
            { "data": "Mp31Receipt" },//
            { "data": "Mp31C1Number" },//
            { "data": "Mp31C2Number" },//
            { "data": "Mp31C3Number" },//
            { "data": "Mp31Number" },//

            { "data": "Mp32C1Receipt" },//
            { "data": "Mp32C2Receipt" },//
            { "data": "Mp32C3Receipt" },//
            { "data": "Mp32Receipt" },//
            { "data": "Mp32C1Number" },//
            { "data": "Mp32C2Number" },//
            { "data": "Mp32C3Number" },//
            { "data": "Mp32Number" },

            { "data": "ModeName" },
            { "data": "IsZip" },//
        ],
        "columnDefs": [
            { "width": "4%", "className": "text-center", "targets": 0 },//SiteName
            { "width": "4%", "className": "text-center", "targets": 1 },//StationNumber
            { "width": "6%", "className": "text-center", "targets": 2 },//LaneName
            { "width": "8%", "className": "text-center none", "targets": 3 },//DhmValueStart
            { "width": "8%", "className": "text-center", "targets": 4 },//DhmValue
            { "width": "6%", "className": "text-center", "targets": 5 },//CashierNumber

            { "width": "3%", "className": "text-right none", "targets": 6 },//MpNumber

            { "width": "6%", "className": "text-right none", "targets": 7 },//ReceiptLane     
            { "width": "6%", "className": "text-right", "targets": 8 },//ReceiptCe 

            { "width": "3%", "className": "text-right", "targets": 9 },//BagNumber

            { "width": "3%", "className": "text-center none", "targets": 10 },//IsLane
            { "width": "3%", "className": "text-center", "targets": 11 },//IsOpe
            { "width": "3%", "className": "text-center", "targets": 12 },//IsCe

            { "width": "3%", "className": "text-center none", "targets": 13 },//Trx
            { "width": "3%", "className": "text-center none", "targets": 14 },//Msg
            { "width": "3%", "className": "text-center none", "targets": 15 },//Zip
            { "width": "3%", "className": "text-center none", "targets": 16 },//Lane

            //MP
            { "width": "0%", "className": "text-center none", "targets": 17 },
            { "width": "0%", "className": "text-center none", "targets": 18 },
            { "width": "0%", "className": "text-center none", "targets": 19 },
            { "width": "0%", "className": "text-center none", "targets": 20 },
            { "width": "0%", "className": "text-center none", "targets": 21 },
            { "width": "0%", "className": "text-center none", "targets": 22 },
            { "width": "0%", "className": "text-center none", "targets": 23 },
            { "width": "3%", "className": "text-center none", "targets": 24 },

            { "width": "0%", "className": "text-center none", "targets": 25 },
            { "width": "0%", "className": "text-center none", "targets": 26 },
            { "width": "0%", "className": "text-center none", "targets": 27 },
            { "width": "0%", "className": "text-center none", "targets": 28 },
            { "width": "0%", "className": "text-center none", "targets": 29 },
            { "width": "0%", "className": "text-center none", "targets": 30 },
            { "width": "0%", "className": "text-center none", "targets": 31 },
            { "width": "3%", "className": "text-center none", "targets": 32 },

            { "width": "0%", "className": "text-center none", "targets": 33 },
            { "width": "0%", "className": "text-center none", "targets": 34 },
            { "width": "0%", "className": "text-center none", "targets": 35 },
            { "width": "0%", "className": "text-center none", "targets": 36 },
            { "width": "0%", "className": "text-center none", "targets": 37 },
            { "width": "0%", "className": "text-center none", "targets": 38 },
            { "width": "0%", "className": "text-center none", "targets": 39 },
            { "width": "0%", "className": "text-center none", "targets": 40 },

            { "width": "0%", "className": "text-center none", "targets": 41 },
            { "width": "0%", "className": "text-center none", "targets": 42 },
            { "width": "0%", "className": "text-center none", "targets": 43 },
            { "width": "0%", "className": "text-center none", "targets": 44 },
            { "width": "0%", "className": "text-center none", "targets": 45 },
            { "width": "0%", "className": "text-center none", "targets": 46 },
            { "width": "0%", "className": "text-center none", "targets": 47 },
            { "width": "0%", "className": "text-center none", "targets": 48 },

            { "width": "0%", "className": "text-center none", "targets": 49 },
            { "width": "0%", "className": "text-center none", "targets": 50 },
            { "width": "0%", "className": "text-center none", "targets": 51 },
            { "width": "0%", "className": "text-center none", "targets": 52 },
            { "width": "0%", "className": "text-center none", "targets": 53 },
            { "width": "0%", "className": "text-center none", "targets": 54 },
            { "width": "0%", "className": "text-center none", "targets": 55 },
            { "width": "0%", "className": "text-center none", "targets": 56 },

            { "width": "0%", "className": "text-center none", "targets": 57 },
            { "width": "0%", "className": "text-center none", "targets": 58 },
            { "width": "0%", "className": "text-center none", "targets": 59 },
            { "width": "0%", "className": "text-center none", "targets": 60 },
            { "width": "0%", "className": "text-center none", "targets": 61 },
            { "width": "0%", "className": "text-center none", "targets": 62 },
            { "width": "0%", "className": "text-center none", "targets": 63 },
            { "width": "0%", "className": "text-center none", "targets": 64 },

            { "width": "0%", "className": "text-center none", "targets": 65 },
            { "width": "0%", "className": "text-center none", "targets": 66 },
            { "width": "0%", "className": "text-center none", "targets": 67 },
            { "width": "0%", "className": "text-center none", "targets": 68 },
            { "width": "0%", "className": "text-center none", "targets": 69 },
            { "width": "0%", "className": "text-center none", "targets": 70 },
            { "width": "0%", "className": "text-center none", "targets": 71 },
            { "width": "0%", "className": "text-center none", "targets": 72 },

            { "width": "0%", "className": "text-center none", "targets": 73 },
            { "width": "0%", "className": "text-center none", "targets": 74 },
            { "width": "0%", "className": "text-center none", "targets": 75 },
            { "width": "0%", "className": "text-center none", "targets": 76 },
            { "width": "0%", "className": "text-center none", "targets": 77 },
            { "width": "0%", "className": "text-center none", "targets": 78 },
            { "width": "0%", "className": "text-center none", "targets": 79 },
            { "width": "0%", "className": "text-center none", "targets": 80 },

            { "width": "0%", "className": "text-center none", "targets": 81 },
            { "width": "0%", "className": "text-center none", "targets": 82 },
            { "width": "0%", "className": "text-center none", "targets": 83 },
            { "width": "0%", "className": "text-center none", "targets": 84 },
            { "width": "0%", "className": "text-center none", "targets": 85 },
            { "width": "0%", "className": "text-center none", "targets": 86 },
            { "width": "0%", "className": "text-center none", "targets": 87 },
            { "width": "0%", "className": "text-center none", "targets": 88 },

            { "width": "0%", "className": "text-center none", "targets": 89 },
            { "width": "0%", "className": "text-center none", "targets": 90 },
            { "width": "0%", "className": "text-center none", "targets": 91 },
            { "width": "0%", "className": "text-center none", "targets": 92 },
            { "width": "0%", "className": "text-center none", "targets": 93 },
            { "width": "0%", "className": "text-center none", "targets": 94 },
            { "width": "0%", "className": "text-center none", "targets": 95 },
            { "width": "0%", "className": "text-center none", "targets": 96 },

            { "width": "0%", "className": "text-center none", "targets": 97 },
            { "width": "0%", "className": "text-center none", "targets": 98 },
            { "width": "0%", "className": "text-center none", "targets": 99 },
            { "width": "0%", "className": "text-center none", "targets": 100 },
            { "width": "0%", "className": "text-center none", "targets": 101 },
            { "width": "0%", "className": "text-center none", "targets": 102 },
            { "width": "0%", "className": "text-center none", "targets": 103 },
            { "width": "0%", "className": "text-center none", "targets": 104 },

            { "width": "0%", "className": "text-center none", "targets": 105 },
            { "width": "0%", "className": "text-center none", "targets": 106 },
            { "width": "0%", "className": "text-center none", "targets": 107 },
            { "width": "0%", "className": "text-center none", "targets": 108 },
            { "width": "0%", "className": "text-center none", "targets": 109 },
            { "width": "0%", "className": "text-center none", "targets": 110 },
            { "width": "0%", "className": "text-center none", "targets": 111 },
            { "width": "0%", "className": "text-center none", "targets": 112 },

            { "width": "0%", "className": "text-center none", "targets": 113 },
            { "width": "0%", "className": "text-center none", "targets": 114 },
            { "width": "0%", "className": "text-center none", "targets": 115 },
            { "width": "0%", "className": "text-center none", "targets": 116 },
            { "width": "0%", "className": "text-center none", "targets": 117 },
            { "width": "0%", "className": "text-center none", "targets": 118 },
            { "width": "0%", "className": "text-center none", "targets": 119 },
            { "width": "0%", "className": "text-center none", "targets": 120 },

            { "width": "0%", "className": "text-center none", "targets": 121 },
            { "width": "0%", "className": "text-center none", "targets": 122 },
            { "width": "0%", "className": "text-center none", "targets": 123 },
            { "width": "0%", "className": "text-center none", "targets": 124 },
            { "width": "0%", "className": "text-center none", "targets": 125 },
            { "width": "0%", "className": "text-center none", "targets": 126 },
            { "width": "0%", "className": "text-center none", "targets": 127 },
            { "width": "0%", "className": "text-center none", "targets": 128 },

            { "width": "0%", "className": "text-center none", "targets": 129 },
            { "width": "0%", "className": "text-center none", "targets": 130 },
            { "width": "0%", "className": "text-center none", "targets": 131 },
            { "width": "0%", "className": "text-center none", "targets": 132 },
            { "width": "0%", "className": "text-center none", "targets": 133 },
            { "width": "0%", "className": "text-center none", "targets": 134 },
            { "width": "0%", "className": "text-center none", "targets": 135 },
            { "width": "0%", "className": "text-center none", "targets": 136 },

            { "width": "0%", "className": "text-center none", "targets": 137 },
            { "width": "0%", "className": "text-center none", "targets": 138 },
            { "width": "0%", "className": "text-center none", "targets": 139 },
            { "width": "0%", "className": "text-center none", "targets": 140 },
            { "width": "0%", "className": "text-center none", "targets": 141 },
            { "width": "0%", "className": "text-center none", "targets": 142 },
            { "width": "0%", "className": "text-center none", "targets": 143 },
            { "width": "0%", "className": "text-center none", "targets": 144 },

            { "width": "0%", "className": "text-center none", "targets": 145 },
            { "width": "0%", "className": "text-center none", "targets": 146 },
            { "width": "0%", "className": "text-center none", "targets": 147 },
            { "width": "0%", "className": "text-center none", "targets": 148 },
            { "width": "0%", "className": "text-center none", "targets": 149 },
            { "width": "0%", "className": "text-center none", "targets": 150 },
            { "width": "0%", "className": "text-center none", "targets": 151 },
            { "width": "0%", "className": "text-center none", "targets": 152 },

            { "width": "3%", "className": "text-center", "targets": 153 },//ModeName
            { "width": "3%", "className": "text-center none", "targets": 154 },//IsZip

            { "targets": 3, "render": function (data, type, row) { return GetDateValueNullableFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return GetGapPostWithoutReceiptFromDataTable(data, row['CashierNumber'], row['ModeName']); } },

            { "targets": 10, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
            { "targets": 11, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertPostTrxLaneSearch', data, 'fas fa-gem', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertMsgPostSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertPostZipSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertPostLaneSearch', data, 'fas fa-search', '0048ff'); } }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total2 = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total3 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(10).footer()).html(numShortFormat(Total1));
            //$(api.column(11).footer()).html(numShortFormat(Total2));
            //$(api.column(12).footer()).html(numShortFormat(Total3));

        }
    });
}


function DataTableGetBooleanValue(data) {
    if ($('<div/>').text(data).html() !== "true")
        return '<span  class="badge badge-danger">0</span>';
    else return '<span  class="badge badge-success" >1</span>';
}

function CertPostBillingIdSearch(Id) {
    var ActionBtnId = new String('CertPostBillingIdSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    var Pattern = 'CertPostBillingId';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';
    HideReport(PatternTableReportId);

    HideReport('CertFilePlan' + 'TableReportId');
    HideReport('CertPost' + 'TableReportId');

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertPostSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id,

            }
        },
        "columns": [

            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "LaneName" },//2
            { "data": "DhmValueStart" },//3
            { "data": "DhmValue" },//4
            { "data": "CashierNumber" },//5

            { "data": "MpNumber" },//6

            { "data": "ReceiptLane", "render": $.fn.dataTable.render.number(' ', ',', 2) },//7
            { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//8

            { "data": "BagNumber" },//9

            { "data": "IsLane" },//10
            { "data": "IsOpe" },//11
            { "data": "IsCe" },//12

            { "data": "CertPostRecoId" },//13 Trx
            { "data": "CertPostRecoId" },//14 Msg
            { "data": "CertPostRecoId" },//15 Zip
            { "data": "CertPostRecoId" },//16 Lane

            { "data": "Mp01C1Receipt" },//17
            { "data": "Mp01C2Receipt" },//14
            { "data": "Mp01C3Receipt" },//15
            { "data": "Mp01Receipt" },//16
            { "data": "Mp01C1Number" },//17
            { "data": "Mp01C2Number" },//18
            { "data": "Mp01C3Number" },//19
            { "data": "Mp01Number" },//20

            { "data": "Mp28C1Receipt" },//21
            { "data": "Mp28C2Receipt" },//22
            { "data": "Mp28C3Receipt" },//23
            { "data": "Mp28Receipt" },//24
            { "data": "Mp28C1Number" },//25
            { "data": "Mp28C2Number" },//26
            { "data": "Mp28C3Number" },//27
            { "data": "Mp28Number" },//28

            { "data": "Mp40C1Receipt" },//29
            { "data": "Mp40C2Receipt" },//30
            { "data": "Mp40C3Receipt" },//31
            { "data": "Mp40Receipt" },//32
            { "data": "Mp40C1Number" },//33
            { "data": "Mp40C2Number" },//34
            { "data": "Mp40C3Number" },//35
            { "data": "Mp40Number" },//36

            { "data": "Mp29C1Receipt" },//37
            { "data": "Mp29C2Receipt" },//38
            { "data": "Mp29C3Receipt" },//39
            { "data": "Mp29Receipt" },//40
            { "data": "Mp29C1Number" },//41
            { "data": "Mp29C2Number" },//42
            { "data": "Mp29C3Number" },//43
            { "data": "Mp29Number" },//44

            { "data": "Mp05C1Receipt" },//45
            { "data": "Mp05C2Receipt" },//46
            { "data": "Mp05C3Receipt" },//47
            { "data": "Mp05Receipt" },//48
            { "data": "Mp05C1Number" },//49
            { "data": "Mp05C2Number" },//50
            { "data": "Mp05C3Number" },//51
            { "data": "Mp05Number" },//52

            { "data": "Mp06C1Receipt" },//53
            { "data": "Mp06C2Receipt" },//54
            { "data": "Mp06C3Receipt" },//55
            { "data": "Mp06Receipt" },//56
            { "data": "Mp06C1Number" },//57
            { "data": "Mp06C2Number" },//58
            { "data": "Mp06C3Number" },//59
            { "data": "Mp06Number" },//60

            { "data": "Mp07C1Receipt" },//
            { "data": "Mp07C2Receipt" },//
            { "data": "Mp07C3Receipt" },//
            { "data": "Mp07Receipt" },//
            { "data": "Mp07C1Number" },//
            { "data": "Mp07C2Number" },//
            { "data": "Mp07C3Number" },//
            { "data": "Mp07Number" },//

            { "data": "Mp08C1Receipt" },//
            { "data": "Mp08C2Receipt" },//
            { "data": "Mp08C3Receipt" },//
            { "data": "Mp08Receipt" },//
            { "data": "Mp08C1Number" },//
            { "data": "Mp08C2Number" },//
            { "data": "Mp08C3Number" },//
            { "data": "Mp08Number" },//

            { "data": "Mp09C1Receipt" },//
            { "data": "Mp09C2Receipt" },//
            { "data": "Mp09C3Receipt" },//
            { "data": "Mp09Receipt" },//
            { "data": "Mp09C1Number" },//
            { "data": "Mp09C2Number" },//
            { "data": "Mp09C3Number" },//
            { "data": "Mp09Number" },//

            { "data": "Mp15C1Receipt" },//
            { "data": "Mp15C2Receipt" },//
            { "data": "Mp15C3Receipt" },//
            { "data": "Mp15Receipt" },//
            { "data": "Mp15C1Number" },//
            { "data": "Mp15C2Number" },//
            { "data": "Mp15C3Number" },//
            { "data": "Mp15Number" },//

            { "data": "Mp16C1Receipt" },//
            { "data": "Mp16C2Receipt" },//
            { "data": "Mp16C3Receipt" },//
            { "data": "Mp16Receipt" },//
            { "data": "Mp16C1Number" },//
            { "data": "Mp16C2Number" },//
            { "data": "Mp16C3Number" },//
            { "data": "Mp16Number" },//

            { "data": "Mp12C1Receipt" },//
            { "data": "Mp12C2Receipt" },//
            { "data": "Mp12C3Receipt" },//
            { "data": "Mp12Receipt" },//
            { "data": "Mp12C1Number" },//
            { "data": "Mp12C2Number" },//
            { "data": "Mp12C3Number" },//
            { "data": "Mp12Number" },//

            { "data": "Mp41C1Receipt" },//
            { "data": "Mp41C2Receipt" },//
            { "data": "Mp41C3Receipt" },//
            { "data": "Mp41Receipt" },//
            { "data": "Mp41C1Number" },//
            { "data": "Mp41C2Number" },//
            { "data": "Mp41C3Number" },//
            { "data": "Mp41Number" },//

            { "data": "Mp13C1Receipt" },//
            { "data": "Mp13C2Receipt" },//
            { "data": "Mp13C3Receipt" },//
            { "data": "Mp13Receipt" },//
            { "data": "Mp13C1Number" },//
            { "data": "Mp13C2Number" },//
            { "data": "Mp13C3Number" },//
            { "data": "Mp13Number" },//

            { "data": "Mp30C1Receipt" },//
            { "data": "Mp30C2Receipt" },//
            { "data": "Mp30C3Receipt" },//
            { "data": "Mp30Receipt" },//
            { "data": "Mp30C1Number" },//
            { "data": "Mp30C2Number" },//
            { "data": "Mp30C3Number" },//
            { "data": "Mp30Number" },//

            { "data": "Mp31C1Receipt" },//
            { "data": "Mp31C2Receipt" },//
            { "data": "Mp31C3Receipt" },//
            { "data": "Mp31Receipt" },//
            { "data": "Mp31C1Number" },//
            { "data": "Mp31C2Number" },//
            { "data": "Mp31C3Number" },//
            { "data": "Mp31Number" },//

            { "data": "Mp32C1Receipt" },//
            { "data": "Mp32C2Receipt" },//
            { "data": "Mp32C3Receipt" },//
            { "data": "Mp32Receipt" },//
            { "data": "Mp32C1Number" },//
            { "data": "Mp32C2Number" },//
            { "data": "Mp32C3Number" },//
            { "data": "Mp32Number" },

            { "data": "ModeName" },//
            { "data": "IsZip" },//
        ],
        "columnDefs": [
            { "width": "4%", "className": "text-center none", "targets": 0 },//SiteName
            { "width": "4%", "className": "text-center", "targets": 1 },//StationNumber
            { "width": "6%", "className": "text-center", "targets": 2 },//LaneName
            { "width": "8%", "className": "text-center", "targets": 3 },//DhmValueStart
            { "width": "8%", "className": "text-center", "targets": 4 },//DhmValue
            { "width": "6%", "className": "text-center none", "targets": 5 },//CashierNumber

            { "width": "3%", "className": "text-right none", "targets": 6 },//MpNumber

            { "width": "6%", "className": "text-center none", "targets": 7 },//ReceiptLane     
            { "width": "6%", "className": "text-center none", "targets": 8 },//ReceiptCe 

            { "width": "3%", "className": "text-right none", "targets": 9 },//BagNumber

            { "width": "3%", "className": "text-center none", "targets": 10 },//IsLane
            { "width": "3%", "className": "text-center none", "targets": 11 },//IsOpe
            { "width": "3%", "className": "text-center none", "targets": 12 },//IsCe

            { "width": "3%", "className": "text-center", "targets": 13 },//Trx
            { "width": "3%", "className": "text-center none", "targets": 14 },//Msg
            { "width": "3%", "className": "text-center none", "targets": 15 },//Zip
            { "width": "3%", "className": "text-center none", "targets": 16 },//Lane

            //MP
            { "width": "0%", "className": "text-center none", "targets": 17 },
            { "width": "0%", "className": "text-center none", "targets": 18 },
            { "width": "0%", "className": "text-center none", "targets": 19 },
            { "width": "0%", "className": "text-center none", "targets": 20 },
            { "width": "0%", "className": "text-center none", "targets": 21 },
            { "width": "0%", "className": "text-center none", "targets": 22 },
            { "width": "0%", "className": "text-center none", "targets": 23 },
            { "width": "3%", "className": "text-center", "targets": 24 },

            { "width": "0%", "className": "text-center none", "targets": 25 },
            { "width": "0%", "className": "text-center none", "targets": 26 },
            { "width": "0%", "className": "text-center none", "targets": 27 },
            { "width": "0%", "className": "text-center none", "targets": 28 },
            { "width": "0%", "className": "text-center none", "targets": 29 },
            { "width": "0%", "className": "text-center none", "targets": 30 },
            { "width": "0%", "className": "text-center none", "targets": 31 },
            { "width": "3%", "className": "text-center", "targets": 32 },

            { "width": "0%", "className": "text-center none", "targets": 33 },
            { "width": "0%", "className": "text-center none", "targets": 34 },
            { "width": "0%", "className": "text-center none", "targets": 35 },
            { "width": "0%", "className": "text-center none", "targets": 36 },
            { "width": "0%", "className": "text-center none", "targets": 37 },
            { "width": "0%", "className": "text-center none", "targets": 38 },
            { "width": "0%", "className": "text-center none", "targets": 39 },
            { "width": "0%", "className": "text-center", "targets": 40 },

            { "width": "0%", "className": "text-center none", "targets": 41 },
            { "width": "0%", "className": "text-center none", "targets": 42 },
            { "width": "0%", "className": "text-center none", "targets": 43 },
            { "width": "0%", "className": "text-center none", "targets": 44 },
            { "width": "0%", "className": "text-center none", "targets": 45 },
            { "width": "0%", "className": "text-center none", "targets": 46 },
            { "width": "0%", "className": "text-center none", "targets": 47 },
            { "width": "0%", "className": "text-center", "targets": 48 },

            { "width": "0%", "className": "text-center none", "targets": 49 },
            { "width": "0%", "className": "text-center none", "targets": 50 },
            { "width": "0%", "className": "text-center none", "targets": 51 },
            { "width": "0%", "className": "text-center none", "targets": 52 },
            { "width": "0%", "className": "text-center none", "targets": 53 },
            { "width": "0%", "className": "text-center none", "targets": 54 },
            { "width": "0%", "className": "text-center none", "targets": 55 },
            { "width": "0%", "className": "text-center", "targets": 56 },

            { "width": "0%", "className": "text-center none", "targets": 57 },
            { "width": "0%", "className": "text-center none", "targets": 58 },
            { "width": "0%", "className": "text-center none", "targets": 59 },
            { "width": "0%", "className": "text-center none", "targets": 60 },
            { "width": "0%", "className": "text-center none", "targets": 61 },
            { "width": "0%", "className": "text-center none", "targets": 62 },
            { "width": "0%", "className": "text-center none", "targets": 63 },
            { "width": "0%", "className": "text-center", "targets": 64 },

            { "width": "0%", "className": "text-center none", "targets": 65 },
            { "width": "0%", "className": "text-center none", "targets": 66 },
            { "width": "0%", "className": "text-center none", "targets": 67 },
            { "width": "0%", "className": "text-center none", "targets": 68 },
            { "width": "0%", "className": "text-center none", "targets": 69 },
            { "width": "0%", "className": "text-center none", "targets": 70 },
            { "width": "0%", "className": "text-center none", "targets": 71 },
            { "width": "0%", "className": "text-center", "targets": 72 },

            { "width": "0%", "className": "text-center none", "targets": 73 },
            { "width": "0%", "className": "text-center none", "targets": 74 },
            { "width": "0%", "className": "text-center none", "targets": 75 },
            { "width": "0%", "className": "text-center none", "targets": 76 },
            { "width": "0%", "className": "text-center none", "targets": 77 },
            { "width": "0%", "className": "text-center none", "targets": 78 },
            { "width": "0%", "className": "text-center none", "targets": 79 },
            { "width": "0%", "className": "text-center", "targets": 80 },

            { "width": "0%", "className": "text-center none", "targets": 81 },
            { "width": "0%", "className": "text-center none", "targets": 82 },
            { "width": "0%", "className": "text-center none", "targets": 83 },
            { "width": "0%", "className": "text-center none", "targets": 84 },
            { "width": "0%", "className": "text-center none", "targets": 85 },
            { "width": "0%", "className": "text-center none", "targets": 86 },
            { "width": "0%", "className": "text-center none", "targets": 87 },
            { "width": "0%", "className": "text-center", "targets": 88 },

            { "width": "0%", "className": "text-center none", "targets": 89 },
            { "width": "0%", "className": "text-center none", "targets": 90 },
            { "width": "0%", "className": "text-center none", "targets": 91 },
            { "width": "0%", "className": "text-center none", "targets": 92 },
            { "width": "0%", "className": "text-center none", "targets": 93 },
            { "width": "0%", "className": "text-center none", "targets": 94 },
            { "width": "0%", "className": "text-center none", "targets": 95 },
            { "width": "0%", "className": "text-center", "targets": 96 },

            { "width": "0%", "className": "text-center none", "targets": 97 },
            { "width": "0%", "className": "text-center none", "targets": 98 },
            { "width": "0%", "className": "text-center none", "targets": 99 },
            { "width": "0%", "className": "text-center none", "targets": 100 },
            { "width": "0%", "className": "text-center none", "targets": 101 },
            { "width": "0%", "className": "text-center none", "targets": 102 },
            { "width": "0%", "className": "text-center none", "targets": 103 },
            { "width": "0%", "className": "text-center", "targets": 104 },

            { "width": "0%", "className": "text-center none", "targets": 105 },
            { "width": "0%", "className": "text-center none", "targets": 106 },
            { "width": "0%", "className": "text-center none", "targets": 107 },
            { "width": "0%", "className": "text-center none", "targets": 108 },
            { "width": "0%", "className": "text-center none", "targets": 109 },
            { "width": "0%", "className": "text-center none", "targets": 110 },
            { "width": "0%", "className": "text-center none", "targets": 111 },
            { "width": "0%", "className": "text-center", "targets": 112 },

            { "width": "0%", "className": "text-center none", "targets": 113 },
            { "width": "0%", "className": "text-center none", "targets": 114 },
            { "width": "0%", "className": "text-center none", "targets": 115 },
            { "width": "0%", "className": "text-center none", "targets": 116 },
            { "width": "0%", "className": "text-center none", "targets": 117 },
            { "width": "0%", "className": "text-center none", "targets": 118 },
            { "width": "0%", "className": "text-center none", "targets": 119 },
            { "width": "0%", "className": "text-center", "targets": 120 },

            { "width": "0%", "className": "text-center none", "targets": 121 },
            { "width": "0%", "className": "text-center none", "targets": 122 },
            { "width": "0%", "className": "text-center none", "targets": 123 },
            { "width": "0%", "className": "text-center none", "targets": 124 },
            { "width": "0%", "className": "text-center none", "targets": 125 },
            { "width": "0%", "className": "text-center none", "targets": 126 },
            { "width": "0%", "className": "text-center none", "targets": 127 },
            { "width": "0%", "className": "text-center", "targets": 128 },

            { "width": "0%", "className": "text-center none", "targets": 129 },
            { "width": "0%", "className": "text-center none", "targets": 130 },
            { "width": "0%", "className": "text-center none", "targets": 131 },
            { "width": "0%", "className": "text-center none", "targets": 132 },
            { "width": "0%", "className": "text-center none", "targets": 133 },
            { "width": "0%", "className": "text-center none", "targets": 134 },
            { "width": "0%", "className": "text-center none", "targets": 135 },
            { "width": "0%", "className": "text-center", "targets": 136 },

            { "width": "0%", "className": "text-center none", "targets": 137 },
            { "width": "0%", "className": "text-center none", "targets": 138 },
            { "width": "0%", "className": "text-center none", "targets": 139 },
            { "width": "0%", "className": "text-center none", "targets": 140 },
            { "width": "0%", "className": "text-center none", "targets": 141 },
            { "width": "0%", "className": "text-center none", "targets": 142 },
            { "width": "0%", "className": "text-center none", "targets": 143 },
            { "width": "0%", "className": "text-center", "targets": 144 },

            { "width": "0%", "className": "text-center none", "targets": 145 },
            { "width": "0%", "className": "text-center none", "targets": 146 },
            { "width": "0%", "className": "text-center none", "targets": 147 },
            { "width": "0%", "className": "text-center none", "targets": 148 },
            { "width": "0%", "className": "text-center none", "targets": 149 },
            { "width": "0%", "className": "text-center none", "targets": 150 },
            { "width": "0%", "className": "text-center none", "targets": 151 },
            { "width": "0%", "className": "text-center", "targets": 152 },

            { "width": "3%", "className": "text-center none", "targets": 153 },//ModeName
            { "width": "3%", "className": "text-center none", "targets": 154 },//IsZip

            { "targets": 3, "render": function (data, type, row) { return GetDhmValueNullableFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 9, "render": function (data, type, row) { return GetGapPostWithoutReceiptFromDataTable(data, row['CashierNumber']); } },

            { "targets": 10, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
            { "targets": 11, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertPostTrxLaneSearch', data, 'fas fa-gem', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertMsgPostSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertPostZipSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertPostLaneSearch', data, 'fas fa-search', '0048ff'); } },

            { "targets": 154, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total2 = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total3 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(10).footer()).html(numShortFormat(Total1));
            //$(api.column(11).footer()).html(numShortFormat(Total2));
            //$(api.column(12).footer()).html(numShortFormat(Total3));

        }
    });
}

function CertPostStationValidate(CertPostStationValidateId) {
    $('#CertPostStationValidateBtnId' + CertPostStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertPostStationValidateId = CertPostStationValidateId;

    $.ajax({
        url: "/Cert/CertPostStationValidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertPostStationValidateBtnId' + CertPostStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
            $('#CertPostStationValidateBtnId' + CertPostStationValidateId).find('span').attr('style', 'color:#28a745');
            $('#CertPostStationValidateBtnId' + CertPostStationValidateId).attr('onclick', 'CertPostStationUnvalidate(\'' + CertPostStationValidateId + '\')');
            $('#CertPostStationValidateBtnId' + CertPostStationValidateId).attr('id', 'CertPostStationUnvalidateBtnId' + CertPostStationValidateId);
        }
    });

}

function CertPostStationUnvalidate(CertPostStationValidateId) {
    $('#CertPostStationUnvalidateBtnId' + CertPostStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertPostStationValidateId = CertPostStationValidateId;

    $.ajax({
        url: "/Cert/CertPostStationUnvalidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertPostStationUnvalidateBtnId' + CertPostStationValidateId).find('span').attr('class', 'fas fa-clock');
            $('#CertPostStationUnvalidateBtnId' + CertPostStationValidateId).find('span').attr('style', 'color:#a3a3a3');
            $('#CertPostStationUnvalidateBtnId' + CertPostStationValidateId).attr('onclick', 'CertPostStationValidate(\'' + CertPostStationValidateId + '\')');
            $('#CertPostStationUnvalidateBtnId' + CertPostStationValidateId).attr('id', 'CertPostStationValidateBtnId' + CertPostStationValidateId);
        },
        error: function (request, status, error) {
            alert('Veuiller contacter votre administrateur pour dévalider votre journée.');
            $('#CertPostStationUnvalidateBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
        }
    });

}

function CertPostCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertPostCexTableReportId');
    HideReport('CertPostStationTableReportId');
    HideReport('CertPostTableReportId');
    ParamMessageReset();
    $('#CertPostCexTableId').DataTable().destroy();
    $('#CertPostCexTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertPostCexTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertPostCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "DhmValue" },//1   
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteHandledNumber + "/" + data.BagContainerNumber; } },//2
            { "data": "PostOpe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//3
            { "data": "PostCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//4
            { "data": "PostGapCtr01" },//5
            { "data": "PostLane", "render": $.fn.dataTable.render.number(' ', ',', 0) },//6
            { "data": "PostGapCtr02" },//7            
            { "data": "CertPostCexValidateId" },//8 Validate
            { "data": "CertPostCexValidateId" },//9 Search
            { "data": "DhmModification" },//10
            { "data": "FullName" },//11      
            { "data": "IpNumber" },//12
            { "data": "PhoneNumber" }//13
        ],
        "columnDefs": [
            { "width": "10%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "15%", "className": "text-center", "targets": 1 },//DhmValue
            { "width": "10%", "className": "text-center", "targets": 2 },//SiteHandledNumber            
            { "width": "15%", "className": "text-right", "targets": 3 },//PostOpe
            { "width": "15%", "className": "text-right", "targets": 4 },//PostCe
            { "width": "15%", "className": "text-right", "targets": 5 },//PostGapCe           
            { "width": "0%", "className": "text-right none", "targets": 6 },//PostLane
            { "width": "0%", "className": "text-right", "targets": 7 },//PostGapOpe
            { "width": "10%", "className": "text-center", "targets": 8 },//Validate
            { "width": "10%", "className": "text-center", "targets": 9 },//Search
            { "width": "0%", "className": "text-center none", "targets": 10 },//DhmModification
            { "width": "0%", "className": "text-center none", "targets": 11 },//FullName
            { "width": "0%", "className": "text-center none", "targets": 12 },//IpNumber
            { "width": "0%", "className": "text-center none", "targets": 13 },//PhoneNumber

            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data) } },
            { "targets": 10, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 2, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['SiteGap']); } },

            { "targets": 5, "render": function (data, type, row) { return GetGapNumberFromDataTable(data) } },
            { "targets": 7, "render": function (data, type, row) { return GetGapNumberFromDataTable(data) } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGetButtonValidateBlockTwo(data, row['PostGapCtr01'], row['PostGapCtr02'], row['IsValid'], 'CertPostCex'); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertPostStationSearch', data, 'fas fa-cube', '0048ff'); } }
        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            PostLaneTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            PostOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            PostCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            PostGapOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            PostGapCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(2).footer()).html(PostLaneTotal);
            $(api.column(3).footer()).html(PostOpeTotal);
            $(api.column(4).footer()).html(PostCeTotal);

            if (PostGapOpeTotal == 0)
                $(api.column(5).footer()).html('<span  class="badge badge-success">' + PostGapOpeTotal + '</span>');
            else $(api.column(5).footer()).html('<span  class="badge badge-danger">' + PostGapOpeTotal + '</span>');

            if (PostGapCeTotal == 0)
                $(api.column(6).footer()).html('<span  class="badge badge-success">' + PostGapCeTotal + '</span>');
            else $(api.column(6).footer()).html('<span  class="badge badge-danger">' + PostGapCeTotal + '</span>');
        }
    });
}

function CertPostCexDisplay() {
    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != "" &&
        DateStringStart != null && DateStringStart != "" &&
        DateStringEnd != null && DateStringEnd != "") {
        CertPostCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon)
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertPostStationSearch(Id) {

    var ActionBtnId = new String('CertPostStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var Icon = 'fas fa-eye';
    var IsGap = false;

    CertPostStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap)
}

function CertReceiptBagGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'CertReceiptBag';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);


    if (TableSource == 'CertInterfaceStation') {
        $('#' + PatternTableId).DataTable().destroy();;
        $('#' + PatternTableId).DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'excel'
            ],
            "initComplete": function (settings, json) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
                ShowReport(PatternTableReportId);
            },
            "processing": true,
            "ajax": {
                "url": "/Cert/CertReceiptBagGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "Id": Id,
                    "TableSource": TableSource
                }
            },
            "columns": [
                { "data": "DhmValue" },//0
                { "data": "SiteName" }, //1
                { "mData": function vehicle(data, type, dataToSet) { return data.StationName + ' (' + data.StationCeNumber + ')'; } },//2

                { "data": "BagNumber" },//3  
                { "data": "CashierNumber" },//4

                { "data": "ReceiptTOpe" },//5
                { "data": "ReceiptDOpe" },//6
                { "data": "ReceiptVOpe" },//7

                { "data": "ReceiptTCe" },//8            
                { "data": "ReceiptDCe" },//9              
                { "data": "ReceiptVCe" },//10

                { "data": "Ctr01" },//11
                { "data": "Ctr02" },//12
                { "data": "Ctr03" },//13

                { "data": "GapToDeductCe" },//14
                { "data": "GapPositiveCe" },//15
                { "data": "GapPositiveExpectedCe" },//16
                { "data": "GapNegativeJustifiedCe" },//17

                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + GetDigits(data.Minute, 2) + GetDigits(data.Second, 2) + data.SiteId + data.StationNumber + data.BagNumber; } },//18
                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + GetDigits(data.Minute, 2) + GetDigits(data.Second, 2) + data.SiteId + data.StationNumber + data.BagNumber; } },//19
                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + GetDigits(data.Minute, 2) + GetDigits(data.Second, 2) + data.SiteId + data.StationNumber; } },//20
            ],
            "columnDefs": [
                { "width": "3%", "className": "text-center", "targets": 0 },
                { "width": "3%", "className": "text-center", "targets": 1 },
                { "width": "3%", "className": "text-center", "targets": 2 },

                { "width": "3%", "className": "text-center", "targets": 3 },
                { "width": "3%", "className": "text-center", "targets": 4 },

                { "width": "3%", "className": "text-right none", "targets": 5 },
                { "width": "3%", "className": "text-right none", "targets": 6 },
                { "width": "3%", "className": "text-right none", "targets": 7 },

                { "width": "3%", "className": "text-right none", "targets": 8 },
                { "width": "3%", "className": "text-right none", "targets": 9 },
                { "width": "3%", "className": "text-right none", "targets": 10 },

                { "width": "3%", "className": "text-center none", "targets": 11 },
                { "width": "3%", "className": "text-center none", "targets": 12 },
                { "width": "3%", "className": "text-center none", "targets": 13 },

                { "width": "3%", "className": "text-center", "targets": 14 },
                { "width": "3%", "className": "text-center", "targets": 15 },
                { "width": "3%", "className": "text-center", "targets": 16 },
                { "width": "3%", "className": "text-center", "targets": 17 },

                { "width": "3%", "className": "text-center", "targets": 18 },
                { "width": "3%", "className": "text-center", "targets": 19 },
                { "width": "3%", "className": "text-center", "targets": 20 },

                { "targets": 0, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
                { "targets": 1, "render": function (data, type, row) { return data; } },
                { "targets": 2, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), DataTableStringTruncate(data, 30)); } },

                { "targets": 3, "render": function (data, type, row) { return data; } },
                { "targets": 4, "render": function (data, type, row) { return data; } },

                { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
                { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
                { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },

                { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
                { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
                { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },

                { "targets": 11, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
                { "targets": 12, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
                { "targets": 13, "render": function (data, type, row) { return GetGapFromDataTable(data); } },

                { "targets": 14, "render": function (data, type, row) { return DataTableFormatDoubleGet(- data); } },
                { "targets": 15, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 16, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 17, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

                { "targets": 18, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertPostSearch', data, 'CertReceiptBag', 'fas fa-eye', '0048ff'); } },
                { "targets": 19, "render": function (data, type, row) { return DataTableGetButton('CertZipReceiptSearch', data, 'fas fa-eye', '0048ff'); } },
                {
                    "targets": 20, "render": function (data, type, row) {
                        return DataTableButtonDeleteGet('CertReceiptBag', data);
                    }
                },
            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 10,
            "processing": false,
            "responsive": true,
            "bFilter": false,
            "autoWidth": false,
            "searching": true,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {

                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total3 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                Total4 = api.column(14).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total5 = api.column(15).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total6 = api.column(16).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total7 = api.column(17).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(8).footer()).html(numFormat(Total1));
                $(api.column(9).footer()).html(numFormat(Total2));
                $(api.column(10).footer()).html(numFormat(Total3));

                $(api.column(14).footer()).html(numFormat(- Total4));
                $(api.column(15).footer()).html(numFormat(Total5));
                $(api.column(16).footer()).html(numFormat(Total6));
                $(api.column(17).footer()).html(numFormat(Total7));

            }
        });
    }
    else {
        $('#' + PatternTableId).DataTable().destroy();;
        $('#' + PatternTableId).DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'excel'
            ],
            "initComplete": function (settings, json) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
                ShowReport(PatternTableReportId);
            },
            "processing": true,
            "ajax": {
                "url": "/Cert/CertReceiptBagGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "Id": Id,
                    "TableSource": TableSource
                }
            },
            "columns": [
                { "data": "DhmValue" },//0
                { "data": "SiteName" }, //1
                { "mData": function vehicle(data, type, dataToSet) { return data.StationName + ' (' + data.StationCeNumber + ')'; } },//2

                { "data": "BagNumber" },//3  
                { "data": "CashierNumber" },//4

                { "data": "ReceiptTOpe" },//5
                { "data": "ReceiptDOpe" },//6
                { "data": "ReceiptVOpe" },//7

                { "data": "ReceiptTCe" },//8            
                { "data": "ReceiptDCe" },//9              
                { "data": "ReceiptVCe" },//10

                { "data": "Ctr01" },//11
                { "data": "Ctr02" },//12
                { "data": "Ctr03" },//13

                { "data": "GapToDeductCe" },//14
                { "data": "GapPositiveCe" },//15
                { "data": "GapPositiveExpectedCe" },//16
                { "data": "GapNegativeJustifiedCe" },//17

                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + GetDigits(data.Minute, 2) + GetDigits(data.Second, 2) + data.SiteId + data.StationNumber + data.BagNumber; } },//18
                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + GetDigits(data.Minute, 2) + GetDigits(data.Second, 2) + data.SiteId + data.StationNumber + data.BagNumber; } },//19

                { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + GetDigits(data.Minute, 2) + GetDigits(data.Second, 2) + data.SiteId + data.StationNumber; } },//20
            ],
            "columnDefs": [
                { "width": "3%", "className": "text-center", "targets": 0 },
                { "width": "3%", "className": "text-center", "targets": 1 },
                { "width": "3%", "className": "text-center", "targets": 2 },

                { "width": "3%", "className": "text-center", "targets": 3 },
                { "width": "3%", "className": "text-center", "targets": 4 },

                { "width": "3%", "className": "text-right", "targets": 5 },
                { "width": "3%", "className": "text-right", "targets": 6 },
                { "width": "3%", "className": "text-right", "targets": 7 },

                { "width": "3%", "className": "text-right", "targets": 8 },
                { "width": "3%", "className": "text-right", "targets": 9 },
                { "width": "3%", "className": "text-right", "targets": 10 },

                { "width": "3%", "className": "text-center", "targets": 11 },
                { "width": "3%", "className": "text-center", "targets": 12 },
                { "width": "3%", "className": "text-center", "targets": 13 },

                { "width": "3%", "className": "text-center  none", "targets": 14 },
                { "width": "3%", "className": "text-center none", "targets": 15 },
                { "width": "3%", "className": "text-center none", "targets": 16 },
                { "width": "3%", "className": "text-center none", "targets": 17 },

                { "width": "3%", "className": "text-center", "targets": 18 },
                { "width": "3%", "className": "text-center", "targets": 19 },

                { "width": "3%", "className": "text-center", "targets": 20 },

                { "targets": 0, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
                { "targets": 1, "render": function (data, type, row) { return data; } },
                { "targets": 2, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), DataTableStringTruncate(data, 30)); } },

                { "targets": 3, "render": function (data, type, row) { return data; } },
                { "targets": 4, "render": function (data, type, row) { return data; } },

                { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
                { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
                { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },

                { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
                { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
                { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },

                { "targets": 11, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
                { "targets": 12, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
                { "targets": 13, "render": function (data, type, row) { return GetGapFromDataTable(data); } },

                { "targets": 14, "render": function (data, type, row) { return DataTableFormatDoubleGet(- data); } },
                { "targets": 15, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 16, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
                { "targets": 17, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

                { "targets": 18, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertPostSearch', data, 'CertReceiptBag', 'fas fa-eye', '0048ff'); } },
                //{ "targets": 19, "render": function (data, type, row) { return DataTableGetButton('CertZipReceiptSearch', data, 'fas fa-eye', '0048ff'); } },
                { "targets": 19, "render": function (data, type, row) { return DataTableButtonGet('CertRecoDataSearch', data + '0', '51,' + data + ',0', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-search btn-icon-cl gc-c1-cl', ''); } },

                {
                    "targets": 20, "render": function (data, type, row) {
                        return DataTableButtonDeleteGet('CertReceiptBag', data);
                    }
                },
            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 10,
            "processing": false,
            "responsive": true,
            "bFilter": false,
            "autoWidth": false,
            "searching": true,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {

                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                Total1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total3 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                Total4 = api.column(14).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total5 = api.column(15).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total6 = api.column(16).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                Total7 = api.column(17).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(8).footer()).html(numFormat(Total1));
                $(api.column(9).footer()).html(numFormat(Total2));
                $(api.column(10).footer()).html(numFormat(Total3));

                $(api.column(14).footer()).html(numFormat(- Total4));
                $(api.column(15).footer()).html(numFormat(Total5));
                $(api.column(16).footer()).html(numFormat(Total6));
                $(api.column(17).footer()).html(numFormat(Total7));
            }
        });
    }

}

function CertReceiptBagDisplay() {

    $("#ParamActionBtnId").find('span').attr('class', 'fa fa-spinner fa-spin');

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationId = GetElementValue('StationId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var StationNumber = '0';
    var Icon = 'fas fa-eye';
    var CtrId = GetElementValue('CtrId');

    if (SiteId != null && SiteId != '' &&
        BagContainerId != null && BagContainerId != '' &&
        StationId != null && StationId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '' &&
        CtrId != null) {

        CertReceiptBagGet(ActionBtnId, SiteId, BagContainerId, StationId, StationNumber, DateStringStart, DateStringEnd, Icon, CtrId);
    }
    else {
        ParamMessageError();
    };
}



function updateChart() {
    var deltaY, yVal;
    var dps = chart.options.data[0].dataPoints;
    for (var i = 0; i < dps.length; i++) {
        deltaY = (1 + Math.random() * (-1 - 1)) * 0.1 * dps[i].y;
        yVal = deltaY + dps[i].y > 0 ? dps[i].y + deltaY : 0;
        dps[i].y = yVal;
    }
    chart.options.data[0].dataPoints = dps;
    chart.render();
};

function CertReceiptBagSearch(Id, TableSource) {
    var ActionBtnId = new String('CertReceiptBagSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';

    CertReceiptBagGet(ActionBtnId, Icon, Id, TableSource);
}

function CertReceiptBagSave(ReceiptBagRecoId) {
    $('#CertReceiptBagSaveBtnId' + ReceiptBagRecoId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var FormData1 = new FormData();
    FormData1.set("ReceiptBagRecoId", ReceiptBagRecoId);
    FormData1.set("ReceiptEsOpe", GetElementValue('ReceiptEsOpeId' + ReceiptBagRecoId));

    $.ajax({
        url: "/Cert/CertReceiptBagSave",
        method: "POST",
        contentType: false,
        processData: false,
        data: FormData1,
        success: function (data) {
            $('#CertReceiptBagSaveBtnId' + ReceiptBagRecoId).find('span').attr('class', 'far fa-save');
            CertReceiptBagDisplay();
        }
    });
}

function CertReceiptBagZipSearch(ReceiptBagRecoId) {
    $('#CertReceiptBagZipSearchBtnId' + ReceiptBagRecoId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertReceiptBagMsgTableReportId');
    HideReport('CertReceiptBagMsgPostTableReportId');
    HideReport('CertReceiptBagZipTableReportId');
    HideReport('CertReceiptBagZipPostTableReportId');
    HideReport('CertReceiptBagZipRacFormReportId');
    HideReport('BarChartReportId');
    HideReport('PieChartReportId');
    $('#CertReceiptBagZipTableId').DataTable().destroy();;
    $("#CertReceiptBagZipTableId").DataTable({
        "initComplete": function (settings, json) {
            $('#CertReceiptBagZipSearchBtnId' + ReceiptBagRecoId).find('span').attr('class', 'far fa-file-archive');
            ShowReport('CertReceiptBagZipTableReportId');
        },
        "processing": true,
        "ajax": {
            "url": "/Cert/CertReceiptBagZipSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "ReceiptBagRecoId": ReceiptBagRecoId
            }
        },
        "columns": [
            { "data": "FileName" }, //0
            { "data": "StationNumber" }, //1
            { "data": "DhmValue" },//2
            { "data": "CashierNumber" },//3
            { "data": "BagNumber" },//4
            { "data": "ReceiptT", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
            { "data": "DataLine" },//6
            { "data": "CertReceiptBagZipId" },//7
            { "data": "CertReceiptBagZipId" }//8
        ],
        "columnDefs": [
            { "width": "25%", "className": "text-center", "targets": 0 }, //FileName
            { "width": "20%", "className": "text-center", "targets": 1 }, //StationNumber
            { "width": "15%", "className": "text-center", "targets": 2 }, //DhmValue
            { "width": "10%", "className": "text-center", "targets": 3 }, //CashierNumber
            { "width": "10%", "className": "text-center", "targets": 4 },//BagNumber
            { "width": "10%", "className": "text-right", "targets": 5 },//ReceiptT
            { "width": "0%", "className": "text-center none", "targets": 6 },//DataLine
            { "width": "0%", "className": "text-center", "targets": 7 },//Download
            { "width": "5%", "className": "text-center", "targets": 8 },//SearchPost
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<span id="StationNumberId' + $('<div/>').text(row['CertReceiptBagZipId']).html() + '" >' + data + '</span>'
                }
            },
            {
                "targets": 2,
                "render": function (data, type, row) {
                    if (data === null) return "";
                    var pattern = /Date\(([^)]+)\)/;
                    var results = pattern.exec(data);
                    var dt = new Date(parseFloat(results[1]));
                    return '<span id="DhmValueId' + $('<div/>').text(row['CertReceiptBagZipId']).html() + '">' +
                        '' + dt.toLocaleDateString() + ' ' + dt.toLocaleTimeString() + '</span>'
                }
            },
            {
                "targets": 3,
                "render": function (data, type, row) {
                    return '<span id="CashierNumberId' + $('<div/>').text(row['CertReceiptBagZipId']).html() + '" >' + data + '</span>'
                }
            },
            {
                "targets": 6,
                "render": function (data, type, row) {
                    return '<span id="DataLineId' + $('<div/>').text(row['CertReceiptBagZipId']).html() + '" >' + data + '</span>'
                }
            },
            {
                "targets": 7, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertReceiptBagZipDownloadBtnId' + data + '" ' +
                        'style="background-color: Transparent;border: none"' +
                        'onclick="CertReceiptBagZipDownload(\'' + data + '\')" >' +
                        '<span class="fas fa-download" style="color:#a3a3a3" ></span></button>';
                }
            },
            {
                "targets": 8, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertReceiptBagZipPostSearchBtnId' + data + '" ' +
                        'style="background-color: Transparent;border: none"' +
                        'onclick="CertReceiptBagZipPostSearch(\'' + data + '\')" >' +
                        '<span class="fas fa-search" style="color:#a3a3a3" ></span></button>'
                }
            }
        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": false,
        "bPaginate": false,
        "bFilter": false
    });
}

function CertReceiptBagZipDownload(CertReceiptBagZipId) {
    //var FileName = "CE01" + new String($('#DhmValueId' + ReceiptBagZipId).text().replace('/', '').replace('/', '').substr(0, 8)) + "_0001.RED";
    //var DataLine = new String($('#DataLineId' + ReceiptBagZipId).text());

    //alert(FileName);
    //alert(DataLine);
    $("#CertReceiptBagZipDownloadBtnId" + CertReceiptBagZipId).find('span').attr('class', 'fa fa-spinner fa-spin');

    $.ajax({
        url: "/Cert/CertReceiptBagZipDownload",
        method: "POST",
        dataType: "text",
        data: {
            CertReceiptBagZipId: CertReceiptBagZipId
        },
        success: function (data) {
            $("#CertReceiptBagZipDownloadBtnId" + CertReceiptBagZipId).find('span').attr('class', 'fas fa-download');
            window.location = '/Cert/CertReceiptBagZipDownload?CertReceiptBagZipId=' + CertReceiptBagZipId;
        }
    });
}

function CertReceiptBagZipPostDownload(Id) {
    var ButtonIdHash = "#" + new String("DownloadPostDataBtn" + Id);
    $(ButtonIdHash).closest('tr').find('td:eq(8)').find('span').attr('class', 'fa fa-spinner fa-spin');
    $(ButtonIdHash).closest('tr').find('td:eq(8)').find('span').attr('style', 'font-size:16px');
    var StationNumber = new String($(ButtonIdHash).closest('tr').find('td:eq(0)').text());
    var DhmString = new String($(ButtonIdHash).closest('tr').find('td:eq(1)').text()
        .replace('/', '')
        .replace('/', '')
        .replace(' ', '')
        .replace(':', '')
        .replace(':', ''));
    var LaneName = new String($(ButtonIdHash).closest('tr').find('td:eq(3)').text());
    var PostDataId = new String(DhmString + StationNumber + LaneName);
    $.ajax({
        url: "/Cert/CertReceiptBagZipPostDownload",
        method: "POST",
        dataType: "text",
        data: "PostDataId=" + PostDataId,
        success: function (data) {
            $(ButtonIdHash).removeAttr('class');
            $(ButtonIdHash).closest('tr').find('td:eq(8)').find('span').attr('class', '');
            $(ButtonIdHash).attr('class', 'glyphicon glyphicon-ok');
            window.location = '/CertificationReconstitution/DownloadPostData?PostDataId=' + PostDataId;
        }
    });
}

function CertReceiptBagZipPostSearch(CertReceiptBagZipId) {
    $('#CertReceiptBagZipPostSearchBtnId' + CertReceiptBagZipId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var DhmStringStart = new String(CertReceiptBagZipId).substr(0, 14);
    var SiteIdReco = new String(CertReceiptBagZipId).substr(14, 2);
    var StationNumberReco = new String('StationNumberId' + CertReceiptBagZipId);
    var CashierNumberReco = GetElementValue('CashierNumberId' + CertReceiptBagZipId);

    HideReport('CertReceiptBagZipPostTableReportId');
    HideReport('CertReceiptBagZipRacTableReportId');

    $('#CertReceiptBagZipPostTableId').DataTable().destroy();;
    $('#CertReceiptBagZipPostTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#CertReceiptBagZipPostSearchBtnId' + CertReceiptBagZipId).find('span').attr('class', 'fas fa-search');
            ShowReport('CertReceiptBagZipPostTableReportId');
        },
        "ajax": {
            "url": "/Cert/CertReceiptBagZipPostSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DhmStringStart": DhmStringStart,
                "SiteIdReco": SiteIdReco,
                "StationNumberReco": StationNumberReco,
                "CashierNumberReco": CashierNumberReco
            }
        },
        "columns": [
            { "data": "ZipFileName" }, //0
            { "data": "StationNumber" }, //1
            { "data": "DhmValue" },//2
            { "data": "CashierNumber" },//3
            { "data": "LaneName" },//4
            { "data": "Receipt", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
            { "data": "CertReceiptBagZipPostId" },//6
            { "data": "PostNumber" },//7
            { "data": "DataLine" },//8
            { "data": "CertReceiptBagZipPostId" }//9
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-center", "targets": 0 }, //ZipFileName
            { "width": "5%", "className": "text-left", "targets": 1 }, //Gare
            { "width": "25%", "className": "text-center", "targets": 2 }, //DhmValue
            { "width": "10%", "className": "text-center", "targets": 3 },//CashierNumber
            { "width": "10%", "className": "text-center", "targets": 4 },//LaneName
            { "width": "10%", "className": "text-right", "targets": 5 },//ReceiptT
            { "width": "10%", "className": "text-center", "targets": 6 },//CHECKBOX
            { "width": "5%", "className": "text-center", "targets": 7 },//PostNumber
            { "width": "20%", "className": "text-center none", "targets": 8 },//DataLine
            { "width": "5%", "className": "text-center", "targets": 9 },//button
            {
                "targets": 2,
                "render": function (value) {
                    if (value === null) return "";
                    var pattern = /Date\(([^)]+)\)/;//date format from server side
                    var results = pattern.exec(value);
                    var dt = new Date(parseFloat(results[1]));

                    return dt.toLocaleDateString() + " " + dt.toLocaleTimeString();
                }
            },
            {
                "targets": 9, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertReceiptBagZipPostDownloadBtnId' + data + '" ' +
                        'style="background-color: Transparent;border: none" ' +
                        'onclick="CertReceiptBagZipPostDownload(\'' + data + '\')" >' +
                        '<span class="fas fa-search" style="color:#a3a3a3" ></span></button>';
                }
            },
            {
                "targets": 6, "searchable": false, "orderable": false, "className": "dt-body-center",
                "render": function (data, type, full, meta) {
                    return '<input type="checkbox" name="id[]" value="' + $('<div/>').text(data).html() + '" ' +
                        'onclick="UpdateRacDataLine()" >';
                }
            }
        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": false,
        "bPaginate": false,
        "bFilter": false
    });
}

function CertReceiptBagZipRacDownload() {
    var ButtonIdHash = "#" + "DownloadRacDataBtn"
    var ButtonIdSpanHash = "#" + $(this).attr('id') + "Span";
    $(ButtonIdSpanHash).removeAttr('class');
    $(ButtonIdSpanHash).attr('class', 'fa fa-spinner fa-spin');
    $(ButtonIdSpanHash).attr('style', 'font-size:16px');

    var RacDataLine = new String($('#RacDataLine').val());

    $.ajax({
        url: "/Cert/CertReceiptBagZipRacDownload",
        method: "POST",
        dataType: "text",
        data: "RacDataLine=" + RacDataLine,
        success: function (data) {
            $(ButtonIdSpanHash).removeAttr('class');
            $(ButtonIdSpanHash).attr('class', 'glyphicon glyphicon-ok');
            $(ButtonIdSpanHash).attr('style', 'font-size:16px');
            window.location = '/CertificationReconstitution/DownloadRacData?RacDataLine=' + RacDataLine;
        }
    });
}

function CertReceiptBagPostSearch(ReceiptBagRecoIdPlus) {
    $('#CertReceiptBagPostSearchBtnId' + ReceiptBagRecoIdPlus).find('span').attr('class', 'fa fa-spinner fa-spin');

    HideReport('CertPostTableReportId');
    $('#CertPostTableId').DataTable().destroy();
    $('#CertPostTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#CertReceiptBagPostSearchBtnId' + ReceiptBagRecoIdPlus).find('span').attr('class', 'fas fa-eye');
            ShowReport("CertPostTableReportId");
        },
        "processing": true,
        "ajax": {
            "url": "/Cert/CertReceiptBagPostSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "ReceiptBagRecoIdPlus": ReceiptBagRecoIdPlus,

            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "LaneName" },//2
            { "data": "DhmValueStart" },//3
            { "data": "DhmValue" },//4
            { "data": "CashierNumber" },//5

            { "data": "MpNumber" },//6

            { "data": "ReceiptLane", "render": $.fn.dataTable.render.number(' ', ',', 2) },//7
            { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//8

            { "data": "BagNumber" },//9

            { "data": "IsLane" },//10
            { "data": "IsOpe" },//11
            { "data": "IsCe" },//12

            { "data": "CertPostRecoId" },//13 Trx
            { "data": "CertPostRecoId" },//14 Msg
            { "data": "CertPostRecoId" },//15 Zip
            { "data": "CertPostRecoId" },//16 Lane

            { "data": "Mp01C1Receipt" },//
            { "data": "Mp01C2Receipt" },//
            { "data": "Mp01C3Receipt" },//
            { "data": "Mp01Receipt" },//
            { "data": "Mp01C1Number" },//
            { "data": "Mp01C2Number" },//
            { "data": "Mp01C3Number" },//
            { "data": "Mp01Number" },//

            { "data": "Mp28C1Receipt" },//
            { "data": "Mp28C2Receipt" },//
            { "data": "Mp28C3Receipt" },//
            { "data": "Mp28Receipt" },//
            { "data": "Mp28C1Number" },//
            { "data": "Mp28C2Number" },//
            { "data": "Mp28C3Number" },//
            { "data": "Mp28Number" },//

            { "data": "Mp40C1Receipt" },//
            { "data": "Mp40C2Receipt" },//
            { "data": "Mp40C3Receipt" },//
            { "data": "Mp40Receipt" },//
            { "data": "Mp40C1Number" },//
            { "data": "Mp40C2Number" },//
            { "data": "Mp40C3Number" },//
            { "data": "Mp40Number" },//

            { "data": "Mp29C1Receipt" },//
            { "data": "Mp29C2Receipt" },//
            { "data": "Mp29C3Receipt" },//
            { "data": "Mp29Receipt" },//
            { "data": "Mp29C1Number" },//
            { "data": "Mp29C2Number" },//
            { "data": "Mp29C3Number" },//
            { "data": "Mp29Number" },//

            { "data": "Mp05C1Receipt" },//
            { "data": "Mp05C2Receipt" },//
            { "data": "Mp05C3Receipt" },//
            { "data": "Mp05Receipt" },//
            { "data": "Mp05C1Number" },//
            { "data": "Mp05C2Number" },//
            { "data": "Mp05C3Number" },//
            { "data": "Mp05Number" },//

            { "data": "Mp06C1Receipt" },//
            { "data": "Mp06C2Receipt" },//
            { "data": "Mp06C3Receipt" },//
            { "data": "Mp06Receipt" },//
            { "data": "Mp06C1Number" },//
            { "data": "Mp06C2Number" },//
            { "data": "Mp06C3Number" },//
            { "data": "Mp06Number" },//

            { "data": "Mp07C1Receipt" },//
            { "data": "Mp07C2Receipt" },//
            { "data": "Mp07C3Receipt" },//
            { "data": "Mp07Receipt" },//
            { "data": "Mp07C1Number" },//
            { "data": "Mp07C2Number" },//
            { "data": "Mp07C3Number" },//
            { "data": "Mp07Number" },//

            { "data": "Mp08C1Receipt" },//
            { "data": "Mp08C2Receipt" },//
            { "data": "Mp08C3Receipt" },//
            { "data": "Mp08Receipt" },//
            { "data": "Mp08C1Number" },//
            { "data": "Mp08C2Number" },//
            { "data": "Mp08C3Number" },//
            { "data": "Mp08Number" },//

            { "data": "Mp09C1Receipt" },//
            { "data": "Mp09C2Receipt" },//
            { "data": "Mp09C3Receipt" },//
            { "data": "Mp09Receipt" },//
            { "data": "Mp09C1Number" },//
            { "data": "Mp09C2Number" },//
            { "data": "Mp09C3Number" },//
            { "data": "Mp09Number" },//

            { "data": "Mp15C1Receipt" },//
            { "data": "Mp15C2Receipt" },//
            { "data": "Mp15C3Receipt" },//
            { "data": "Mp15Receipt" },//
            { "data": "Mp15C1Number" },//
            { "data": "Mp15C2Number" },//
            { "data": "Mp15C3Number" },//
            { "data": "Mp15Number" },//

            { "data": "Mp16C1Receipt" },//
            { "data": "Mp16C2Receipt" },//
            { "data": "Mp16C3Receipt" },//
            { "data": "Mp16Receipt" },//
            { "data": "Mp16C1Number" },//
            { "data": "Mp16C2Number" },//
            { "data": "Mp16C3Number" },//
            { "data": "Mp16Number" },//

            { "data": "Mp12C1Receipt" },//
            { "data": "Mp12C2Receipt" },//
            { "data": "Mp12C3Receipt" },//
            { "data": "Mp12Receipt" },//
            { "data": "Mp12C1Number" },//
            { "data": "Mp12C2Number" },//
            { "data": "Mp12C3Number" },//
            { "data": "Mp12Number" },//

            { "data": "Mp41C1Receipt" },//
            { "data": "Mp41C2Receipt" },//
            { "data": "Mp41C3Receipt" },//
            { "data": "Mp41Receipt" },//
            { "data": "Mp41C1Number" },//
            { "data": "Mp41C2Number" },//
            { "data": "Mp41C3Number" },//
            { "data": "Mp41Number" },//

            { "data": "Mp13C1Receipt" },//
            { "data": "Mp13C2Receipt" },//
            { "data": "Mp13C3Receipt" },//
            { "data": "Mp13Receipt" },//
            { "data": "Mp13C1Number" },//
            { "data": "Mp13C2Number" },//
            { "data": "Mp13C3Number" },//
            { "data": "Mp13Number" },//

            { "data": "Mp30C1Receipt" },//
            { "data": "Mp30C2Receipt" },//
            { "data": "Mp30C3Receipt" },//
            { "data": "Mp30Receipt" },//
            { "data": "Mp30C1Number" },//
            { "data": "Mp30C2Number" },//
            { "data": "Mp30C3Number" },//
            { "data": "Mp30Number" },//

            { "data": "Mp31C1Receipt" },//
            { "data": "Mp31C2Receipt" },//
            { "data": "Mp31C3Receipt" },//
            { "data": "Mp31Receipt" },//
            { "data": "Mp31C1Number" },//
            { "data": "Mp31C2Number" },//
            { "data": "Mp31C3Number" },//
            { "data": "Mp31Number" },//

            { "data": "Mp32C1Receipt" },//
            { "data": "Mp32C2Receipt" },//
            { "data": "Mp32C3Receipt" },//
            { "data": "Mp32Receipt" },//
            { "data": "Mp32C1Number" },//
            { "data": "Mp32C2Number" },//
            { "data": "Mp32C3Number" },//
            { "data": "Mp32Number" }
        ],
        "columnDefs": [
            { "width": "4%", "className": "text-center", "targets": 0 },//SiteName
            { "width": "4%", "className": "text-center", "targets": 1 },//StationNumber
            { "width": "6%", "className": "text-center", "targets": 2 },//LaneName
            { "width": "8%", "className": "text-center", "targets": 3 },//DhmValueStart
            { "width": "8%", "className": "text-center", "targets": 4 },//DhmValue
            { "width": "6%", "className": "text-center", "targets": 5 },//CashierNumber

            { "width": "3%", "className": "text-right none", "targets": 6 },//MpNumber

            { "width": "6%", "className": "text-center", "targets": 7 },//ReceiptLane     
            { "width": "6%", "className": "text-center", "targets": 8 },//ReceiptCe 

            { "width": "3%", "className": "text-right", "targets": 9 },//BagNumber

            { "width": "3%", "className": "text-center", "targets": 10 },//IsLane
            { "width": "3%", "className": "text-center", "targets": 11 },//IsOpe
            { "width": "3%", "className": "text-center", "targets": 12 },//IsCe

            { "width": "3%", "className": "text-center", "targets": 13 },//Trx
            { "width": "3%", "className": "text-center none", "targets": 14 },//Msg
            { "width": "3%", "className": "text-center none", "targets": 15 },//Zip
            { "width": "3%", "className": "text-center none", "targets": 16 },//Lane

            //MP
            { "width": "0%", "className": "text-center none", "targets": 17 },
            { "width": "0%", "className": "text-center none", "targets": 18 },
            { "width": "0%", "className": "text-center none", "targets": 19 },
            { "width": "0%", "className": "text-center none", "targets": 20 },
            { "width": "0%", "className": "text-center none", "targets": 21 },
            { "width": "0%", "className": "text-center none", "targets": 22 },
            { "width": "0%", "className": "text-center none", "targets": 23 },
            { "width": "0%", "className": "text-center none", "targets": 24 },
            { "width": "0%", "className": "text-center none", "targets": 25 },
            { "width": "0%", "className": "text-center none", "targets": 26 },
            { "width": "0%", "className": "text-center none", "targets": 27 },
            { "width": "0%", "className": "text-center none", "targets": 28 },
            { "width": "0%", "className": "text-center none", "targets": 29 },
            { "width": "0%", "className": "text-center none", "targets": 30 },
            { "width": "0%", "className": "text-center none", "targets": 31 },
            { "width": "0%", "className": "text-center none", "targets": 32 },
            { "width": "0%", "className": "text-center none", "targets": 33 },
            { "width": "0%", "className": "text-center none", "targets": 34 },
            { "width": "0%", "className": "text-center none", "targets": 35 },
            { "width": "0%", "className": "text-center none", "targets": 36 },
            { "width": "0%", "className": "text-center none", "targets": 37 },
            { "width": "0%", "className": "text-center none", "targets": 38 },
            { "width": "0%", "className": "text-center none", "targets": 39 },
            { "width": "0%", "className": "text-center none", "targets": 40 },
            { "width": "0%", "className": "text-center none", "targets": 41 },
            { "width": "0%", "className": "text-center none", "targets": 42 },
            { "width": "0%", "className": "text-center none", "targets": 43 },
            { "width": "0%", "className": "text-center none", "targets": 44 },
            { "width": "0%", "className": "text-center none", "targets": 45 },
            { "width": "0%", "className": "text-center none", "targets": 46 },
            { "width": "0%", "className": "text-center none", "targets": 47 },
            { "width": "0%", "className": "text-center none", "targets": 48 },
            { "width": "0%", "className": "text-center none", "targets": 49 },
            { "width": "0%", "className": "text-center none", "targets": 50 },
            { "width": "0%", "className": "text-center none", "targets": 51 },
            { "width": "0%", "className": "text-center none", "targets": 52 },
            { "width": "0%", "className": "text-center none", "targets": 53 },
            { "width": "0%", "className": "text-center none", "targets": 54 },
            { "width": "0%", "className": "text-center none", "targets": 55 },
            { "width": "0%", "className": "text-center none", "targets": 56 },
            { "width": "0%", "className": "text-center none", "targets": 57 },
            { "width": "0%", "className": "text-center none", "targets": 58 },
            { "width": "0%", "className": "text-center none", "targets": 59 },
            { "width": "0%", "className": "text-center none", "targets": 60 },
            { "width": "0%", "className": "text-center none", "targets": 61 },
            { "width": "0%", "className": "text-center none", "targets": 62 },
            { "width": "0%", "className": "text-center none", "targets": 63 },
            { "width": "0%", "className": "text-center none", "targets": 64 },
            { "width": "0%", "className": "text-center none", "targets": 65 },
            { "width": "0%", "className": "text-center none", "targets": 66 },
            { "width": "0%", "className": "text-center none", "targets": 67 },
            { "width": "0%", "className": "text-center none", "targets": 68 },
            { "width": "0%", "className": "text-center none", "targets": 69 },
            { "width": "0%", "className": "text-center none", "targets": 70 },
            { "width": "0%", "className": "text-center none", "targets": 71 },
            { "width": "0%", "className": "text-center none", "targets": 72 },
            { "width": "0%", "className": "text-center none", "targets": 73 },
            { "width": "0%", "className": "text-center none", "targets": 74 },
            { "width": "0%", "className": "text-center none", "targets": 75 },
            { "width": "0%", "className": "text-center none", "targets": 76 },
            { "width": "0%", "className": "text-center none", "targets": 77 },
            { "width": "0%", "className": "text-center none", "targets": 78 },
            { "width": "0%", "className": "text-center none", "targets": 79 },
            { "width": "0%", "className": "text-center none", "targets": 80 },
            { "width": "0%", "className": "text-center none", "targets": 81 },
            { "width": "0%", "className": "text-center none", "targets": 82 },
            { "width": "0%", "className": "text-center none", "targets": 83 },
            { "width": "0%", "className": "text-center none", "targets": 84 },
            { "width": "0%", "className": "text-center none", "targets": 85 },
            { "width": "0%", "className": "text-center none", "targets": 86 },
            { "width": "0%", "className": "text-center none", "targets": 87 },
            { "width": "0%", "className": "text-center none", "targets": 88 },
            { "width": "0%", "className": "text-center none", "targets": 89 },
            { "width": "0%", "className": "text-center none", "targets": 90 },
            { "width": "0%", "className": "text-center none", "targets": 91 },
            { "width": "0%", "className": "text-center none", "targets": 92 },
            { "width": "0%", "className": "text-center none", "targets": 93 },
            { "width": "0%", "className": "text-center none", "targets": 94 },
            { "width": "0%", "className": "text-center none", "targets": 95 },
            { "width": "0%", "className": "text-center none", "targets": 96 },
            { "width": "0%", "className": "text-center none", "targets": 97 },
            { "width": "0%", "className": "text-center none", "targets": 98 },
            { "width": "0%", "className": "text-center none", "targets": 99 },
            { "width": "0%", "className": "text-center none", "targets": 100 },
            { "width": "0%", "className": "text-center none", "targets": 101 },
            { "width": "0%", "className": "text-center none", "targets": 102 },
            { "width": "0%", "className": "text-center none", "targets": 103 },
            { "width": "0%", "className": "text-center none", "targets": 104 },
            { "width": "0%", "className": "text-center none", "targets": 105 },
            { "width": "0%", "className": "text-center none", "targets": 106 },
            { "width": "0%", "className": "text-center none", "targets": 107 },
            { "width": "0%", "className": "text-center none", "targets": 108 },
            { "width": "0%", "className": "text-center none", "targets": 109 },
            { "width": "0%", "className": "text-center none", "targets": 110 },
            { "width": "0%", "className": "text-center none", "targets": 111 },
            { "width": "0%", "className": "text-center none", "targets": 112 },
            { "width": "0%", "className": "text-center none", "targets": 113 },
            { "width": "0%", "className": "text-center none", "targets": 114 },
            { "width": "0%", "className": "text-center none", "targets": 115 },
            { "width": "0%", "className": "text-center none", "targets": 116 },
            { "width": "0%", "className": "text-center none", "targets": 117 },
            { "width": "0%", "className": "text-center none", "targets": 118 },
            { "width": "0%", "className": "text-center none", "targets": 119 },
            { "width": "0%", "className": "text-center none", "targets": 120 },
            { "width": "0%", "className": "text-center none", "targets": 121 },
            { "width": "0%", "className": "text-center none", "targets": 122 },
            { "width": "0%", "className": "text-center none", "targets": 123 },
            { "width": "0%", "className": "text-center none", "targets": 124 },
            { "width": "0%", "className": "text-center none", "targets": 125 },
            { "width": "0%", "className": "text-center none", "targets": 126 },
            { "width": "0%", "className": "text-center none", "targets": 127 },
            { "width": "0%", "className": "text-center none", "targets": 128 },
            { "width": "0%", "className": "text-center none", "targets": 129 },
            { "width": "0%", "className": "text-center none", "targets": 130 },
            { "width": "0%", "className": "text-center none", "targets": 131 },
            { "width": "0%", "className": "text-center none", "targets": 132 },
            { "width": "0%", "className": "text-center none", "targets": 133 },
            { "width": "0%", "className": "text-center none", "targets": 134 },
            { "width": "0%", "className": "text-center none", "targets": 135 },
            { "width": "0%", "className": "text-center none", "targets": 136 },
            { "width": "0%", "className": "text-center none", "targets": 137 },
            { "width": "0%", "className": "text-center none", "targets": 138 },
            { "width": "0%", "className": "text-center none", "targets": 139 },
            { "width": "0%", "className": "text-center none", "targets": 140 },
            { "width": "0%", "className": "text-center none", "targets": 141 },
            { "width": "0%", "className": "text-center none", "targets": 142 },
            { "width": "0%", "className": "text-center none", "targets": 143 },
            { "width": "0%", "className": "text-center none", "targets": 144 },
            { "width": "0%", "className": "text-center none", "targets": 145 },
            { "width": "0%", "className": "text-center none", "targets": 146 },
            { "width": "0%", "className": "text-center none", "targets": 147 },
            { "width": "0%", "className": "text-center none", "targets": 148 },
            { "width": "0%", "className": "text-center none", "targets": 149 },
            { "width": "0%", "className": "text-center none", "targets": 150 },
            { "width": "0%", "className": "text-center none", "targets": 151 },

            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 10, "render": function (data, type, row) { return DataTableGetBooleanValue(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGetBooleanValue(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGetBooleanValue(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertPostTrxLaneSearch', data, 'fas fa-gem', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertPostMsgSearch', data, 'fas fa-sticky-note', '0048ff'); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertPostZipSearch', data, 'fas fa-archive', '0048ff'); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertPostLaneSearch', data, 'fas fa-dice-four', '0048ff'); } }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DoubleTotal1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            DoubleTotal2 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(7).footer()).html(numFormat(DoubleTotal1));
            $(api.column(8).footer()).html(numFormat(DoubleTotal2));


            //if (DoubleTotal3 !== 0)
            //    $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numFormat(DoubleTotal3) + '</span>');
            //else $(api.column(6).footer()).html('<span  class="badge badge-success">' + numFormat(DoubleTotal3) + '</span>');

            //if (DoubleTotal6 !== 0)
            //    $(api.column(9).footer()).html('<span  class="badge badge-danger">' + numFormat(DoubleTotal6) + '</span>');
            //else $(api.column(9).footer()).html('<span  class="badge badge-success">' + numFormat(DoubleTotal6) + '</span>');


        }
    });
}



function DataTableGetBooleanValue(data) {
    if ($('<div/>').text(data).html() !== "true")
        return '<span  class="badge badge-danger">0</span>';
    else return '<span  class="badge badge-success" >1</span>';
}


function CertReceiptStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    var CtrId = '0';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');
    HideReport('CertReceiptStationTableReportId');
    HideReport('CertReceiptBagTableReportId');
    HideReport('CertReportId');
    ParamMessageReset();

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#CertReceiptStationTableId').DataTable().destroy();
    $('#CertReceiptStationTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport('CertReceiptStationTableReportId');
        },
        "ajax": {
            "url": "/Cert/CertReceiptStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0 
            { "data": "StationName" },//1
            { "data": "" },//2 Date

            { "data": "ReceiptTOpe" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6

            { "data": "ReceiptTCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6       

            { "data": "GapAbsolute" },//7
            { "data": "GapRelative" },//8

            { "data": "ReceiptDOpe" },//9
            { "data": "ReceiptDCe" },//10      
            { "data": "ReceiptVOpe" },//11
            { "data": "ReceiptVCe" },//12       

            { "data": "Ctr01" },//13
            { "data": "Ctr02" },//14
            { "data": "Ctr03" },//15
            { "data": "Ctr04" },//16

            { "data": "Ctr05" },//17
            { "data": "Ctr06" },//18
            { "data": "Ctr07" },//19
            { "data": "Ctr08" },//20

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//21     
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//22

        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left ", "targets": 1 },
            { "width": "3%", "className": "text-center ", "targets": 2 },

            { "width": "3%", "className": "text-right " + max700, "targets": 3 },
            { "width": "3%", "className": "text-left " + max700, "targets": 4 },

            { "width": "3%", "className": "text-right " + max700, "targets": 5 },
            { "width": "3%", "className": "text-left " + max700, "targets": 6 },

            { "width": "3%", "className": "text-right " + max700, "targets": 7 },
            { "width": "3%", "className": "text-right " + max700, "targets": 8 },

            { "width": "3%", "className": "text-right " + max700 + " " + min701, "targets": 9 },
            { "width": "3%", "className": "text-right " + max700 + " " + min701, "targets": 10 },
            { "width": "3%", "className": "text-right " + max700 + " " + min701, "targets": 11 },
            { "width": "3%", "className": "text-right " + max700 + " " + min701, "targets": 12 },

            { "width": "3%", "className": "text-right none", "targets": 13 },
            { "width": "3%", "className": "text-right none", "targets": 14 },
            { "width": "3%", "className": "text-right none", "targets": 15 },
            { "width": "3%", "className": "text-right none", "targets": 16 },

            { "width": "3%", "className": "text-right " + max700 + " " + min701, "targets": 17 },
            { "width": "3%", "className": "text-right " + max700 + " " + min701, "targets": 18 },
            { "width": "3%", "className": "text-right " + max700 + " " + min701, "targets": 19 },
            { "width": "3%", "className": "text-right " + max700 + " " + min701, "targets": 20 },

            { "width": "3%", "className": "text-center ", "targets": 21 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 22 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), DataTableStringTruncate(data, 30)); } },

            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(row['ReceiptTOpe']); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    return DataTableGetButton('CertFileUpdateAdd', '08' + '81' + data, 'fas fa-redo-alt', '9c9c9c');
                    //return ContentSecGet(DataTableGetButton('CertFileUpdateAdd', '08' + '81' + data, 'fas fa-redo-alt', '9c9c9c'),
                    //                     "Administrateur", "Fatourati", "DP", "", "", "", "", "", "", "")
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(row['ReceiptTCe']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '72' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    if (row['ReceiptTOpe'].toFixed(2) != 0) {
                        var evo = ((row['ReceiptTCe'] - row['ReceiptTOpe']) / row['ReceiptTOpe']) * 10000;
                        if (evo.toFixed(2) > 6 || evo.toFixed(2) < -6) {
                            return '<span  class="badge badge-danger" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                        else {
                            return '<span class="badge badge-success" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                    }
                    else {
                        return '<span  class="badge badge-danger" >10 000 %%</span>';
                    }
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },

            { "targets": 13, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 14, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 15, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            //{ "targets": 16, "render": function (data, type, row) { return GetGapCtrSumFromDataTable(data); } },

            { "targets": 17, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 18, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 19, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 20, "render": function (data, type, row) { return CertCtrBitGet(data); } },

            { "targets": 21, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertReceiptBagSearch', data, 'CertReceiptStation', 'fas fa-eye', '0048ff'); } },
            { "targets": 22, "render": function (data, type, row) { return DataTableButtonDeleteGet('Receipt', data); } },

        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },


        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {

            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numFormat(Total1));

            Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total2));

            Total3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total3));
        }
    });
}

function CertReceiptStationDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));


    HideReport('CertDayTableReportId');

    if (DateStringStart != '' && DateStringEnd != '') {
        CertReceiptStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertReceiptStationValidate(CertReceiptStationValidateId) {
    $('#CertReceiptStationValidateBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertReceiptStationValidateId = CertReceiptStationValidateId;

    $.ajax({
        url: "/Cert/CertReceiptStationValidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertReceiptStationValidateBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
            $('#CertReceiptStationValidateBtnId' + CertReceiptStationValidateId).find('span').attr('style', 'color:#28a745');
            $('#CertReceiptStationValidateBtnId' + CertReceiptStationValidateId).attr('onclick', 'CertNrSiteUnvalidate(\'' + CertReceiptStationValidateId + '\')');
            $('#CertReceiptStationValidateBtnId' + CertReceiptStationValidateId).attr('id', 'CertNrSiteUnvalidateBtnId' + CertReceiptStationValidateId);
        }
    });

}

function CertReceiptStationUnvalidate(CertReceiptStationValidateId) {
    $('#CertReceiptStationUnvalidateBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertReceiptStationValidateId = CertReceiptStationValidateId;

    $.ajax({
        url: "/Cert/CertReceiptStationUnvalidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertReceiptStationUnvalidateBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'fas fa-clock');
            $('#CertReceiptStationUnvalidateBtnId' + CertReceiptStationValidateId).find('span').attr('style', 'color:#a3a3a3');
            $('#CertReceiptStationUnvalidateBtnId' + CertReceiptStationValidateId).attr('onclick', 'CertReceiptStationValidate(\'' + CertReceiptStationValidateId + '\')');
            $('#CertReceiptStationUnvalidateBtnId' + CertReceiptStationValidateId).attr('id', 'CertReceiptStationValidateBtnId' + CertReceiptStationValidateId);
        },
        error: function (request, status, error) {
            alert('Veuiller contacter votre administrateur pour dévalider votre journée.');
            $('#CertReceiptStationUnvalidateBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
        }
    });

}


function CertReceiptStationNotify(CertReceiptStationValidateId) {
    $('#CertReceiptStationNotifyBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertReceiptStationValidateId = CertReceiptStationValidateId;

    $.ajax({
        url: "/Cert/CertReceiptStationNotify",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            var UpdateTypeId = "00";
            var ModuleId = "02";
            var PluginId = "00";
            var UpdateMessage = new String(data);

            var obj = {};
            obj.UpdateTypeId = UpdateTypeId;
            obj.ModuleId = ModuleId;
            obj.PluginId = PluginId;
            obj.UpdateMessage = UpdateMessage;

            $('#ActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');

            $.ajax({
                url: "/Home/HomeUpdateAdd",
                method: "POST",
                data: JSON.stringify(obj),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    $('#CertReceiptStationNotifyBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'far fa-bell');
                    $('#CertReceiptStationNotifyBtnId' + CertReceiptStationValidateId).find('span').attr('style', 'color:#ffa200');
                    $('#CertReceiptStationNotifyBtnId' + CertReceiptStationValidateId).attr('onclick', '');
                    $('#CertReceiptStationNotifyBtnId' + CertReceiptStationValidateId).attr('id', '');
                }
            });
        }
    });

}

function CertReceiptCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport("CertReceiptCexTableReportId");
    HideReport("CertReceiptStationTableReportId");
    HideReport("CertReceiptBagTableReportId");
    //HideReport('BarChartReportId');
    //HideReport('PieChartReportId');
    ParamMessageReset();

    $('#CertReceiptCexTableId').DataTable().destroy();
    $("#CertReceiptCexTableId").DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertReceiptCexTableReportId");

            //var labels = GetColumnArray('CertReceiptCexTableId', 0);
            //var data1 = GetColumnArray('CertReceiptCexTableId', 3);
            //var data2 = GetColumnArray('CertReceiptCexTableId', 4);
            //var backgroundColor = GetBackgroundColor('CertReceiptCexTableId');
            //DisplayChartBar(labels, data1, data2, "OPE", "CE");
            //DisplayChartDoughnut(labels, backgroundColor, data1)
        },
        "ajax": {
            "url": "/Cert/CertReceiptCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0  
            { "data": "DhmValue" },//1
            { "data": "ReceiptTOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//2
            { "data": "ReceiptTCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//3          
            { "data": "ReceiptDOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
            { "data": "ReceiptDCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5          
            { "data": "ReceiptVOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//6
            { "data": "ReceiptVCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//7          

            { "data": "Ctr01" },//8
            { "data": "Ctr02" },//9
            { "data": "Ctr03" },//10
            { "data": "Ctr04" },//11

            { "data": "CertValidateCexId" },//12 Validate
            { "data": "CertValidateCexId" },//13 Search
            { "data": "CertValidateCexId" },//14 Contact
        ],
        "columnDefs": [
            { "width": "4%", "className": "text-left StationName", "targets": 0 },//SiteName
            { "width": "7%", "className": "text-center", "targets": 1 },//Date

            { "width": "7%", "className": "text-right none ReceiptTOpeSum", "targets": 2 },//ReceiptTOpe
            { "width": "7%", "className": "text-right ReceiptTCeSum", "targets": 3 },//ReceiptTCe            
            { "width": "7%", "className": "text-right none ReceiptTOpeSum", "targets": 4 },//ReceiptTOpe
            { "width": "7%", "className": "text-right ReceiptTCeSum", "targets": 5 },//ReceiptTCe            
            { "width": "7%", "className": "text-right none ReceiptTOpeSum", "targets": 6 },//ReceiptVOpe
            { "width": "7%", "className": "text-right ReceiptTCeSum", "targets": 7 },//ReceiptVCe

            { "width": "6%", "className": "text-right", "targets": 8 },//Ctr01
            { "width": "6%", "className": "text-right", "targets": 9 },//Ctr02
            { "width": "6%", "className": "text-right", "targets": 10 },//Ctr03
            { "width": "6%", "className": "text-right", "targets": 11 },//Ctr04

            { "width": "4%", "className": "text-center", "targets": 12 },//Validate 
            { "width": "4%", "className": "text-center", "targets": 13 },//Search
            { "width": "0%", "className": "text-center none", "targets": 14 },//Contact

            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 8, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 9, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 10, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 11, "render": function (data, type, row) { return GetGapCtrSumFromDataTable(data); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGetButtonValidateBlockFour(data, row['Ctr01'], row['Ctr02'], row['Ctr03'], 0, row['IsValid'], 'CertReceiptCex'); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertReceiptStationSearch', data, 'fas fa-cube', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableGetContact(row, data); } }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {

            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(3).footer()).html(numFormat(Total1));
            $(api.column(5).footer()).html(numFormat(Total2));
            $(api.column(7).footer()).html(numFormat(Total3));
        }
    });
}

function CertReceiptCexThreadLaunch() {
    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';
    var ConnectionId = NotiConnectionIdGet(GetElementValue('HubUrlId'));

    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '' &&
        ConnectionId != null && ConnectionId != '') {

        $("#ParamActionBtnId").find('span').attr('class', 'fa fa-spinner fa-spin');

        var obj = {};
        obj.SiteId = SiteId;
        obj.DateStringStart = DateStringStart;
        obj.DateStringEnd = DateStringEnd;
        obj.ConnectionId = ConnectionId;
        $.ajax({
            url: "/Cert/CertReceiptCexThreadLaunch",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: true
        });

    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertReceiptCexDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        CertReceiptCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertReceiptStationSearch(Id) {

    var ActionBtnId = new String('CertReceiptStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var StationId = '0';
    var BagContainerId = '0';
    var Icon = 'fas fa-eye';
    var IsGap = false;

    CertReceiptStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, IsGap);
}

function CertReceiptPeriodThreadLaunch() {
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var ConnectionId = NotiConnectionIdGet(GetElementValue('HubUrlId'));

    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '' &&
        ConnectionId != null && ConnectionId != '') {

        $("#ParamActionBtnId").find('span').attr('class', 'fa fa-spinner fa-spin');

        var obj = {};
        obj.SiteId = SiteId;
        obj.DateStringStart = DateStringStart;
        obj.DateStringEnd = DateStringEnd;
        obj.ConnectionId = ConnectionId;
        $.ajax({
            url: "/Cert/CertReceiptPeriodThreadLaunch",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: true
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertReceiptPeriodDisplay() {
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {

        $("#ParamActionBtnId").find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport("CertReceiptPeriodTableReportId");
        HideReport("CertReceiptCexTableReportId");
        HideReport("CertReceiptStationTableReportId");
        HideReport("CertReceiptBagTableReportId");
        HideReport('BarChartReportId');
        HideReport('PieChartReportId');
        ParamMessageReset();

        $('#CertReceiptPeriodTableId').DataTable().destroy();
        $('#CertReceiptPeriodTableId').DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "initComplete": function (settings, json) {
                $("#ParamActionBtnId").find('span').attr('class', 'fas fa-eye');
                ShowReport("CertReceiptPeriodTableReportId");

                //var labels = GetColumnArray('CertReceiptPeriodTableId', 0);
                //var data1 = GetColumnArray('CertReceiptPeriodTableId', 5);
                //var data2 = GetColumnArray('CertReceiptPeriodTableId', 6);
                //var backgroundColor = GetBackgroundColor('CertReceiptPeriodTableId');

                //DisplayChartBar(labels, data1, data2, "OPE", "CE");
                //DisplayChartDoughnut(labels, backgroundColor, data1);
            },
            "ajax": {
                "url": "/Cert/CertReceiptPeriodDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    SiteId: SiteId,
                    DateStringStart: DateStringStart,
                    DateStringEnd: DateStringEnd
                }
            },
            "columns": [
                { "data": "SiteName" },//0
                { "data": "DhmValueStart" },//1
                { "data": "DhmValueEnd" },//2
                { "mData": function vehicle(data, type, dataToSet) { return data.DaysHandledNumber + "/" + data.DaysNumber; } },//3
                { "mData": function vehicle(data, type, dataToSet) { return data.StationsHandledNumber + "/" + (data.StationsNumber * data.DaysNumber); } },//4
                { "data": "ReceiptOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
                { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//6
                { "data": "ReceiptGap" },//7
                { "data": "ReceiptDaysHandledId" },//8
            ],
            "columnDefs": [
                { "width": "5%", "className": "text-left SiteName", "targets": 0 },//Cex
                { "width": "15%", "className": "text-center", "targets": 1 },//Du
                { "width": "15%", "className": "text-center", "targets": 2 },//Au
                { "width": "5%", "className": "text-center", "targets": 3 },//Jours
                { "width": "5%", "className": "text-center", "targets": 4 },//Gares
                { "width": "20%", "className": "text-right ReceiptTOpeSum", "targets": 5 },//ReceiptOpe
                { "width": "20%", "className": "text-right ReceiptTCeSum", "targets": 6 },//ReceiptCe
                { "width": "10%", "className": "text-right", "targets": 7 },//ReceiptGap
                { "width": "5%", "className": "text-center", "targets": 8 },//Search

                { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
                { "targets": 2, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

                { "targets": 3, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['DaysGap']); } },
                { "targets": 4, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['StationsGap']); } },
                { "targets": 7, "render": function (data, type, row) { return GetGapFromDataTable(data); } },

                { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertReceiptCexSearch', data, 'fas fa-adjust', '0048ff'); } }
            ],
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "iDisplayLength": 100,
            "processing": false,
            "responsive": true,
            "bFilter": true,
            "autoWidth": false,
            "searching": false,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                DoubleTotal1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                DoubleTotal2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                DoubleTotal3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(5).footer()).html(numFormat(DoubleTotal1));
                $(api.column(6).footer()).html(numFormat(DoubleTotal2));
                $(api.column(7).footer()).html(numFormat(DoubleTotal3));

                if (DoubleTotal3 !== 0)
                    $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(DoubleTotal3) + '</span>');
                else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(DoubleTotal3) + '</span>');
            }
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertReceiptCexSearch(ReceiptDaysHandledId) {

    var ActionBtnId = new String('CertReceiptCexSearchBtnId' + ReceiptDaysHandledId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(ReceiptDaysHandledId).substr(2, 8);
    var DateStringEnd = new String(ReceiptDaysHandledId).substr(10, 8);
    var SiteId = new String(ReceiptDaysHandledId).substr(0, 2);
    var Icon = 'fas fa-adjust';
    CertReceiptCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon);
}

function CertDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();
    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "Year" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsOkNumber + ' / ' + data.StationsTotalNumber; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "TotalZip" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "TotalOpe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "data": "TotalCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8

            { "data": "GapAbsolute" },//9
            { "data": "GapRelative" },//10

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11


        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center none", "targets": 1 },
            { "width": "3%", "className": "text-left none", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },



            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr01']); } },
            {
                "targets": 2, "render": function (data, type, row) {
                    return DataTableBtnGet('CertDayGapGet', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-info-circle btn-icon-cl cg-c-cl', '');
                }
            },

            {
                "targets": 3, "render": function (data, type, row) {
                    if (Pattern == 'CertReceiptDay' || Pattern == 'CertNrDay' || Pattern == 'CertVersDay' || Pattern == 'CertTraficDay'
                        || Pattern == 'CertTraficOdDay' || Pattern == 'CertNrTrxLaneDay' || Pattern == 'CertTraficBiDay') {
                        return '';
                    }
                    if (Pattern == 'CertPostDay' || Pattern == 'CertTrxLaneDay') {
                        return DataTableFormatIntNullAlertGet(data);
                    }
                    if (Pattern == 'CertInterfaceDay') {
                        return DataTableFormatDoubleNullAlertGet(data);
                    }
                }
            },

            {
                "targets": 4, "render": function (data, type, row) {
                    if (Pattern == 'CertReceiptDay' ||
                        Pattern == 'CertNrDay' ||
                        Pattern == 'CertVersDay' ||
                        Pattern == 'CertTraficDay' ||
                        Pattern == 'CertTraficOdDay' ||
                        Pattern == 'CertNrTrxLaneDay' ||
                        Pattern == 'CertTraficBiDay') {
                        return '';
                    }

                    if (Pattern == 'CertTrxLaneDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertPostDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '05' + '53' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertInterfaceDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '10' + 'C1' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                }
            },

            {
                "targets": 5, "render": function (data, type, row) {
                    if (Pattern == 'CertReceiptDay' ||
                        Pattern == 'CertNrDay' ||
                        Pattern == 'CertVersDay') {
                        return DataTableFormatDoubleNullAlertGet(data);
                    }

                    if (Pattern == 'CertPostDay' ||
                        Pattern == 'CertTraficDay' ||
                        Pattern == 'CertTraficOdDay' ||
                        Pattern == 'CertNrTrxLaneDay' ||
                        Pattern == 'CertTraficBiDay') {
                        return DataTableFormatIntNullAlertGet(data);
                    }

                    if (Pattern == "CertTrxLaneDay" || Pattern == "CertInterfaceDay") {
                        return '';
                    }
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    if (Pattern == 'CertReceiptDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '08' + '81' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertNrDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '08' + '83' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertPostDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '08' + '82' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertVersDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '08' + '87' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertTraficDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '08' + '80' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertTraficOdDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '08' + '85' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertNrTrxLaneDay' || Pattern == 'CertTraficBiDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertTrxLaneDay' || Pattern == 'CertInterfaceDay') {
                        return '';
                    }
                }
            },

            {
                "targets": 7, "render": function (data, type, row) {
                    if (Pattern == 'CertReceiptDay') {
                        return DataTableFormatDoubleNullAlertGet(data);
                    }
                    if (Pattern == 'CertNrDay') {
                        return DataTableFormatDoubleNullAlertGet(data);
                    }
                    if (Pattern == 'CertPostDay') {
                        return DataTableFormatIntNullAlertGet(data);
                    }
                    if (Pattern == 'CertVersDay' || Pattern == 'CertInterfaceDay') {
                        return DataTableFormatDoubleNullAlertGet(data);
                    }
                    if (Pattern == 'CertTraficDay') {
                        return DataTableFormatIntNullAlertGet(data);
                    }
                    if (Pattern == 'CertTraficOdDay') {
                        return DataTableFormatIntNullAlertGet(data);
                    }
                    if (Pattern == 'CertNrTrxLaneDay' || Pattern == 'CertTraficBiDay') {
                        return DataTableFormatIntNullAlertGet(data);
                    }
                    if (Pattern == 'CertTrxLaneDay') {
                        return DataTableFormatIntNullAlertGet(data);
                    }
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {
                    if (Pattern == 'CertReceiptDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + '72' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertNrDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + '71' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertPostDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + '73' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertVersDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + '77' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertTraficDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + '70' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertTraficOdDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + 'T1' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertNrTrxLaneDay' || Pattern == 'CertTraficBiDay') {
                        return '';
                    }
                    if (Pattern == 'CertTrxLaneDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                    if (Pattern == 'CertInterfaceDay') {
                        return DataTableGetButton('CertFileUpdateAdd', '07' + 'xx' + data, 'fas fa-redo-alt', '9c9c9c');
                    }
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {
                    if (Pattern == 'CertTrxLaneDay' || Pattern == 'CertInterfaceDay') {
                        return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 10000);
                    }
                    else {
                        return DataTableGapThresholdGet(row['TotalCe'], row['TotalOpe'], 6, 10000);
                    }
                }
            },

            {
                "targets": 11, "render": function (data, type, row) {

                    if (Pattern == 'CertReceiptDay') {
                        return DataTableGetButton('CertReceiptStationSearch', data, 'fas fa-eye', '0048ff');
                    }
                    if (Pattern == 'CertNrDay') {
                        return DataTableGetButton('CertNrSiteSearch', data, 'fas fa-eye', '0048ff');
                    }
                    if (Pattern == 'CertPostDay') {
                        return DataTableGetButton('CertPostStationSearch', data, 'fas fa-eye', '0048ff');
                    }
                    if (Pattern == 'CertVersDay') {
                        return DataTableGetButton('CertVersSearch', data, 'fas fa-eye', '0048ff');
                    }
                    if (Pattern == 'CertTraficDay') {
                        return DataTableGetButton('CertTraficStationSearch', data, 'fas fa-eye', '0048ff');
                    }
                    if (Pattern == 'CertTraficOdDay') {
                        return DataTableGetButton('CertTraficOdStationSearch', data, 'fas fa-eye', '0048ff');
                    }
                    if (Pattern == 'CertNrTrxLaneDay') {
                        return DataTableGetButton('CertTrxLaneBiStationSearch', data, 'fas fa-eye', '0048ff');
                    }
                    if (Pattern == 'CertTraficBiDay') {
                        return DataTableGetButton('CertTraficBiStationSearch', data, 'fas fa-eye', '0048ff');
                    }
                    if (Pattern == 'CertTrxLaneDay') {
                        return DataTableGetButton('CertTrxLaneStationSearch', data, 'fas fa-eye', '0048ff');
                    }
                    if (Pattern == 'CertInterfaceDay') {
                        return DataTableGetButton('CertInterfaceStationSearch', data, 'fas fa-eye', '0048ff');
                    }
                }
            },


        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            if (Pattern == 'CertReceiptDay' || Pattern == 'CertNrDay' || Pattern == 'CertPostDay' || Pattern == 'CertVersDay' || Pattern == 'CertNrTrxLaneDay') {
                Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(2).footer()).html(numFormat(Total1));

                Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(4).footer()).html(numFormat(Total2));

                Total3 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(6).footer()).html(numFormat(Total3));
            }
            if (Pattern == 'CertPostDay' || Pattern == 'CertTraficDay' || Pattern == 'CertTraficOdDay' || Pattern == 'CertTrxLaneDay') {
                Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(2).footer()).html(numShortFormat(Total1));

                Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(4).footer()).html(numShortFormat(Total2));

                Total3 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(6).footer()).html(numShortFormat(Total3));
            }
        }
    });
}

function CertDayDisplay(Pattern) {
    var ActionBtnId = 'ParamActionBtnId1';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    if (DateStringStart != '') {
        if (Pattern == 'CertInterface' || Pattern == 'CertReceiptPdvDay') {
            CertInterfaceDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
        }
        else {
            if (Pattern == 'CertNrTrxLaneDay') {
                CertNrTrxLaneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
            }
            else {
                if (Pattern == 'CertTrxPdvDay') {
                    CertTrxPdvDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                }
                else {
                    if (Pattern == 'CertVersDay') {
                        CertVersDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                    }
                    else {
                        if (Pattern == 'CertTrxLaneDay') {
                            CertTrxLaneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                        }
                        else {
                            if (Pattern == 'CertBiRevenueDay') {
                                CertBiRevenueDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                            }
                            else {
                                if (Pattern == 'CertBiTraficDay') {
                                    CertBiTraficDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                }
                                else {
                                    if (Pattern == 'CertTraficOdDay') {
                                        CertTraficOdDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                    }
                                    else {
                                        if (Pattern == 'CertTrxBorneDay') {
                                            CertTrxBorneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                        }
                                        else {
                                            if (Pattern == 'CertImageLaneDay') {
                                                //CertImageLaneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                            }
                                            else {
                                                if (Pattern == 'CertImageBorneDay') {
                                                    CertImageBorneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                }
                                                else {
                                                    if (Pattern == 'CertEventDay') {
                                                        CertEventDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                    }
                                                    else {
                                                        if (Pattern == 'CertTrxLaneFullDay') {
                                                            CertTrxLaneFullDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                        }
                                                        else {
                                                            if (Pattern == 'QualifTrxLaneDay') {
                                                                QualifTrxLaneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                            }
                                                            else {
                                                                if (Pattern == 'CertReportingTraficDay') {
                                                                    CertReportingTraficDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                                }
                                                                else {
                                                                    if (Pattern == 'CertReportingRevenueDay') {
                                                                        CertReportingRevenueDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                                    }
                                                                    else {
                                                                        if (Pattern == 'CertTraficOdMonthDay') {
                                                                            CertTraficOdDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                                        }
                                                                        else {
                                                                            if (Pattern == 'CertTraficSectionDay') {
                                                                                CertTraficSectionDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                                            }
                                                                            else {
                                                                                if (Pattern == 'CertLoyTrxLaneDay') {
                                                                                    CertLoyTrxLaneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                                                }
                                                                                else {
                                                                                    if (Pattern == 'CertRealTrxLaneDay') {
                                                                                        CertRealTrxLaneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                                                    }
                                                                                    else {
                                                                                        CertDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertDayGapGet(DateString, Pattern) {

    var obj = {};
    obj.DateString = DateString;
    obj.Pattern = Pattern;

    var ActionBtnId = 'CertDayGapGetBtnId' + DateString;
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl cg-c-cl');

    var Icon = 'fas fa-info-circle btn-icon-cl cg-c-cl';

    $.ajax({
        url: "/Cert/CertDayGapGet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {


            var HtmlElement = '';
            jQuery.each(data, function (index, itemData) {
                var i = 0;
                for (i = 0; i < itemData.length; i++) {

                    var SiteId = itemData[i].SiteId;
                    var StationNumber = itemData[i].StationNumber;
                    var StationCeNumber = itemData[i].StationCeNumber;
                    var SiteName = itemData[i].SiteName;

                    HtmlElement = HtmlElement + '     ' + SiteName + '|' + StationNumber;
                }

            });

            $('#' + ActionBtnId).find('span').attr('class', Icon);
            alert(HtmlElement);
        },
        error: function (request, status, error) {
            //alert('Vous ne disposez pas des autorisations nécessaires pour effectuer cette action');
            //$('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    });
}

function CertVersGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd) {
    //$('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');
    //HideReport('CertVersTableReportId');

    //var max700 = 'none';
    //var min701 = 'none';

    //if (screen.width < 700) {
    //    max700 = 'none';
    //    min701 = '';
    //}
    //else {
    //    max700 = '';
    //    min701 = 'none';
    //}

    //$('#CertVersTableId').DataTable().destroy();;
    //$('#CertVersTableId').DataTable({
    //    "initComplete": function (settings, json) {
    //        ShowReport('CertVersTableReportId');
    //        $('#' + ActionBtnId).find('span').attr('class', Icon);
    //    },
    //    "ajax": {
    //        "url": "/Cert/CertVersGet",
    //        "type": "GET",
    //        "datatype": "json",
    //        "data": {
    //            "SiteId": SiteId,
    //            "BagContainerId": BagContainerId,
    //            "DateStringStart": DateStringStart,
    //            "DateStringEnd": DateStringEnd
    //        }
    //    },
    //    "columns": [
    //        { "data": "DhmValue" },//0
    //        { "data": "SiteName" },//1
    //        { "mData": function vehicle(data, type, dataToSet) { return data.StationName + ' (' + data.StationCeNumber + ')'; } },//2

    //        { "data": "TotalZipDec" },//3
    //        { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//4

    //        { "data": "TotalCeDec" },//5
    //        { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//6

    //        { "data": "GapAbsolute" },//7
    //        { "data": "GapAbsolute" },//8

    //        { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//9
    //        { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//10

    //    ],                                   
    //    "columnDefs": [
    //        { "width": "3%", "className": "text-left", "targets": 0 },
    //        { "width": "3%", "className": "text-left", "targets": 1 },
    //        { "width": "3%", "className": "text-left", "targets": 2 }, 

    //        { "width": "3%", "className": "text-right", "targets": 3 },
    //        { "width": "3%", "className": "text-left", "targets": 4 },

    //        { "width": "3%", "className": "text-right", "targets": 5 },
    //        { "width": "3%", "className": "text-left", "targets": 6 },

    //        { "width": "3%", "className": "text-right", "targets": 7 },
    //        { "width": "3%", "className": "text-right", "targets": 8 },

    //        { "width": "3%", "className": "text-center", "targets": 9 },
    //        { "width": "3%", "className": "text-center none", "targets": 10 },

    //        { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
    //        { "targets": 2, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), DataTableStringTruncate(data, 30)); } },

    //        { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
    //        { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '57' + data, 'fas fa-redo-alt', '9c9c9c'); } },

    //        { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
    //        { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '77' + data, 'fas fa-redo-alt', '9c9c9c'); } },

    //        { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
    //        { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCeDec'], row['TotalZipDec'], 6, 10000); } },

    //        { "targets": 9, "render": function (data, type, row) { return DataTableBtnGet('CertReceiptBagSearch', data, data + '\', \'CertVers', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-txt-cl'); } },
    //        { "targets": 10, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertVersDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
    //    ],
    //    "iDisplayLength": 10,
    //    "language": {
    //        "lengthMenu": "Afficher _MENU_ lignes par page",
    //        "zeroRecords": "Veuillez patienter...",
    //        "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
    //        "infoEmpty": "---",
    //        "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
    //        "search": "Filtrer ",
    //        "oPaginate": {
    //            "sNext": "Suivant",
    //            "sPrevious": "Précédent"
    //        }
    //    },
    //    "processing": false,
    //    "responsive": true,
    //    "bFilter": true,
    //    "autoWidth": false,
    //    "searching": true,
    //    "lengthChange": true,
    //    "showNEntries": true,
    //    "bInfo": true,
    //    "bPaginate": true,
    //    "ordering": false,
    //    "footerCallback": function (row, data, start, end, display) {

    //        var api = this.api(), data;
    //        var intVal = function (i) {
    //            return typeof i === 'string' ?
    //                i.replace(/[\$,]/g, '') * 1 :
    //                typeof i === 'number' ?
    //                    i : 0;
    //        };

    //        //Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
    //        //$(api.column(4).footer()).html(numFormat(Total1));

    //        //Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
    //        //$(api.column(6).footer()).html(numFormat(Total2));

    //        //Total3 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
    //        //$(api.column(8).footer()).html(numFormat(Total3));
    //    }
    //});

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertPdvVersTableReportId');

    var Pattern = 'CertPdvVers';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertVersGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationNumber": StationNumber,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "SiteName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName + ' (' + data.StationCeNumber + ')'; } },//2

            { "data": "Receipt" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//4

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//6

        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center none", "targets": 6 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '78' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertPdvVers', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-txt-cl'); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertVersDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {

            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numFormat(Total1));

            //Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(6).footer()).html(numFormat(Total2));

            //Total3 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numFormat(Total3));
        }
    });
}

function CertVersDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertVersDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "Year" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsOkNumber + ' / ' + data.StationsTotalNumber; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "TotalZipDec" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "TotalCeDec" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapAbsolute" },//8

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr01']); } },

            {
                "targets": 2, "render": function (data, type, row) {
                    return DataTableBtnGet('CertDayGapGet', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-info-circle btn-icon-cl cg-c-cl', '');
                }
            },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '57' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '77' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCeDec'], row['TotalZipDec'], 6, 10000); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableBtnGet('CertVersSearch', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-txt-cl'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertInterfaceDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numFormat(Total0));

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numFormat(Total1));

            //Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numFormat(Total2));

        }
    });
}

//function CertVersSave(CertVersRecoId) {
//    $('#CertVersSaveBtnId' + CertVersRecoId).find('span').attr('class', 'fa fa-spinner fa-spin');   

//    var FormData1 = new FormData();
//    FormData1.set("CertVersRecoId", CertVersRecoId);
//    FormData1.set("ReceiptVOpe", GetElementValue('ReceiptVOpeId' + CertVersRecoId));

//    var files = $('#UploadFilesId' + CertVersRecoId).get(0).files;

//    if (files != null) {
//        for (var i = 0; i < files.length; i++) {
//            FormData1.append('UploadFilesId' + CertVersRecoId, files[i]);
//        };
//    }

//    $.ajax({
//        url: "/Cert/CertVersSave",
//        method: "POST",
//        contentType: false,
//        processData: false,
//        data: FormData1,
//        success: function (data) {

//            $('#CertVersSaveBtnId' + CertVersRecoId).find('span').attr('class', 'far fa-save');
//            CertVersDisplay();
//        }
//    });
//}


function CertVersSave(CertVersRecoId) {
    $('#CertVersSaveBtnId' + CertVersRecoId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var FormData1 = new FormData();
    FormData1.set("CertVersRecoId", CertVersRecoId);
    FormData1.set("ReceiptVOpe", GetElementValue('ReceiptVOpeId' + CertVersRecoId));

    //var files = $('#UploadFilesId' + CertVersRecoId).get(0).files;

    //if (files != null) {
    //    for (var i = 0; i < files.length; i++) {
    //        FormData1.append('UploadFilesId' + CertVersRecoId, files[i]);
    //    };
    //}

    $.ajax({
        url: "/Cert/CertVersSave",
        method: "POST",
        contentType: false,
        processData: false,
        data: FormData1,
        success: function (data) {
            $('#CertVersSaveBtnId' + CertVersRecoId).find('span').attr('class', 'far fa-save');
            CertVersDisplay();
        }
    });
}

function CertVersDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (DateStringStart != '' && DateStringEnd != '') {
        CertVersGet(ActionBtnId, Icon, SiteId, BagContainerId, DateStringStart, DateStringEnd)
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertVersDownload(CertVersId) {
    $("#CertVersDownloadBtnId" + CertVersId).find('span').attr('class', 'fa fa-spinner fa-spin');

    $.ajax({
        url: "/Cert/CertVersDownload",
        method: "POST",
        dataType: "text",
        data: {
            CertVersId: CertVersId
        },
        success: function (data) {
            window.location = '/Cert/CertVersDownload?CertVersId=' + CertVersId;
            $("#CertVersDownloadBtnId" + CertVersId).find('span').attr('class', 'fas fa-download');
        }
    });





    //$.ajax({
    //    url: "/Cert/CertReceiptBagZipDownload",
    //    method: "POST",
    //    dataType: "text",
    //    data: {
    //        FileName: FileName,
    //        DataLine: DataLine
    //    },
    //    success: function (data) {
    //        $("#CertReceiptBagZipDownloadBtnId" + ReceiptBagZipId).find('span').attr('class', 'fas fa-download');
    //        //window.location = '/Cert/ReceiptBagZipDownload?ReceiptBagDataId=' + ReceiptBagDataId;
    //        //window.location = '/Cert/ReceiptBagZipDownload?FileName=' + FileName + '&DataLine=' + DataLine;
    //    }
    //});
}

function CertVersValidate(CertVersRecoValidateId) {
    $('#CertVersValidateBtnId' + CertVersRecoValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.CertVersRecoValidateId = CertVersRecoValidateId;
    $.ajax({
        url: "/Cert/CertVersValidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertVersValidateBtnId' + CertVersRecoValidateId).find('span').attr('class', 'fas fa-unlock-alt');
            $('#CertVersValidateBtnId' + CertVersRecoValidateId).find('span').attr('style', 'color:#28a745');
            $('#CertVersValidateBtnId' + CertVersRecoValidateId).attr('onclick', 'CertVersUnvalidate(\'' + CertVersRecoValidateId + '\')');
            $('#CertVersValidateBtnId' + CertVersRecoValidateId).attr('id', 'CertVersUnvalidateBtnId' + CertVersRecoValidateId);
        }
    });

}

function CertVersUnvalidate(CertVersRecoValidateId) {
    $('#CertVersUnvalidateBtnId' + CertVersRecoValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.CertVersRecoValidateId = CertVersRecoValidateId;
    $.ajax({
        url: "/Cert/CertVersUnvalidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertVersUnvalidateBtnId' + CertVersRecoValidateId).find('span').attr('class', 'fas fa-clock');
            $('#CertVersUnvalidateBtnId' + CertVersRecoValidateId).find('span').attr('style', 'color:#a3a3a3');
            $('#CertVersUnvalidateBtnId' + CertVersRecoValidateId).attr('onclick', 'CertVersValidate(\'' + CertVersRecoValidateId + '\')');
            $('#CertVersUnvalidateBtnId' + CertVersRecoValidateId).attr('id', 'CertVersValidateBtnId' + CertVersRecoValidateId);
        },
        error: function (request, status, error) {
            alert('Veuillez contacter votre administrateur!');
            $('#CertVersUnvalidateBtnId' + CertVersRecoValidateId).find('span').attr('class', 'fas fa-unlock-alt');
        }
    });

}

function CertVersReceiptBagSearch(CertVersRecoId) {
    $('#CertVersReceiptBagSearchBtnId' + CertVersRecoId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport("CertReceiptBagTableReportId");
    //HideReport('BarChartReportId');
    //HideReport('PieChartReportId');
    ParamMessageReset();
    $('#CertReceiptBagTableId').DataTable().destroy();
    $('#CertReceiptBagTableId').DataTable({
        "initComplete": function (settings, json) {
            $('#CertVersReceiptBagSearchBtnId' + CertVersRecoId).find('span').attr('class', 'fas fa-search');
            ShowReport("CertReceiptBagTableReportId");

            //var labels = GetColumnArray('CertReceiptBagTableId', 2);
            //var data1 = GetColumnArray('CertReceiptBagTableId', 3);
            //var data2 = GetColumnArray('CertReceiptBagTableId', 4);
            //var backgroundColor = GetBackgroundColor('CertReceiptBagTableId');
            //DisplayChartBar(labels, data1, data2, "OPE", "CE");
            //DisplayChartDoughnut(labels, backgroundColor, data1)
        },
        "processing": true,
        "ajax": {
            "url": "/Cert/CertVersReceiptBagGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "CertVersRecoId": CertVersRecoId
            }
        },
        "columns": [
            { "data": "SiteName" }, //0 
            { "data": "StationNumber" }, //1               
            { "data": "DhmValue" },//2
            { "data": "BagNumber" },//3
            { "data": "CashierNumber" },//4

            { "data": "ReceiptTCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5                    
            { "data": "ReceiptDCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//6                     
            { "data": "ReceiptVCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//7

            { "data": "Ctr01" },//8
            { "data": "Ctr02" },//9
            { "data": "Ctr03" },//10
            { "data": "Ctr04" },//11

            { "data": "ReceiptBagRecoId" },//12 PostSearch
            { "data": "ReceiptBagRecoId" },//13 ZipSearch
            { "data": "ReceiptBagRecoId" },//14 MsgSearch 

            { "data": "ReceiptTOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//15
            { "data": "ReceiptDOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//16
            { "data": "ReceiptVOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//17

            { "data": "ReceiptEsOpe" },//18 Erreur saisie
            { "data": "ReceiptBagRecoId" },//19 Save

            { "data": "StationName" }//20            
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-center", "targets": 0 },//SiteName
            { "width": "5%", "className": "text-center", "targets": 1 },//StationNumber
            { "width": "7%", "className": "text-center", "targets": 2 },//DhmValue
            { "width": "5%", "className": "text-center BagNumber", "targets": 3 },//BagNumber
            { "width": "5%", "className": "text-center", "targets": 4 },//CashierNumber

            { "width": "6%", "className": "text-right", "targets": 5 },//ReceiptTCe
            { "width": "6%", "className": "text-right", "targets": 6 },//ReceiptDCe           
            { "width": "6%", "className": "text-right", "targets": 7 },//ReceiptVCe

            { "width": "5%", "className": "text-center", "targets": 8 },//Ctr01
            { "width": "5%", "className": "text-center", "targets": 9 },//Ctr02
            { "width": "5%", "className": "text-center", "targets": 10 },//Ctr03
            { "width": "5%", "className": "text-center", "targets": 11 },//Ctr04            

            { "width": "0%", "className": "text-center", "targets": 12 },//PostSearch
            { "width": "0%", "className": "text-center", "targets": 13 },//ZipSearch
            { "width": "0%", "className": "text-center", "targets": 14 },//MsgSearch  

            { "width": "6%", "className": "text-right none", "targets": 15 },//ReceiptTOpe
            { "width": "6%", "className": "text-right none", "targets": 16 },//ReceiptDOpe           
            { "width": "6%", "className": "text-right none", "targets": 17 },//ReceiptVOpe

            { "width": "0%", "className": "text-right none", "targets": 18 },//Erreur saisie
            { "width": "0%", "className": "text-center none", "targets": 19 },//Save 

            { "width": "0%", "className": "text-center none", "targets": 20 },//StationName           

            { "targets": 2, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 8, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 9, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 10, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 11, "render": function (data, type, row) { return GetGapCtrFromDataTable(row['TollGap'], row['Ctr04']); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertReceiptBagPostSearch', data + row['CashierNumber'], 'fas fa-eye', '0048ff'); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertMsgReceiptSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertZipReceiptSearch', data, 'fas fa-search', '0048ff'); } },


            {
                "targets": 18, "searchable": false, "orderable": false,
                "render": function (data, type, row) {
                    return '<input id="ReceiptEsOpeId' + row['ReceiptBagRecoId'] + '" type="number" value="' + data + '" style="text-align:right;width:100%" >'
                }
            },
            { "targets": 19, "render": function (data, type, row) { return DataTableGetButton('CertReceiptBagSave', data, 'far fa-save', '000000'); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {

            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(5).footer()).html(numFormat(Total1));
            $(api.column(6).footer()).html(numFormat(Total2));
            $(api.column(7).footer()).html(numFormat(Total3));

        }
    });

}

function CertVersOpeUnvalidate(CertVersRecoValidateId) {
    $('#CertVersOpeUnvalidateBtnId' + CertVersRecoValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.CertVersRecoId = CertVersRecoValidateId;
    $.ajax({
        url: "/Cert/CertVersOpeUnvalidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            //$('#CertVersOpeUnvalidateBtnId' + CertVersRecoValidateId).find('span').attr('class', 'far fa-save');
            //$('#CertVersOpeUnvalidateBtnId' + CertVersRecoValidateId).find('span').attr('style', 'color:#a3a3a3');
            //$('#CertVersOpeUnvalidateBtnId' + CertVersRecoValidateId).attr('onclick', 'CertVersSave(\'' + CertVersRecoValidateId + '\')');
            //$('#CertVersOpeUnvalidateBtnId' + CertVersRecoValidateId).attr('id', 'CertVersSaveBtnId' + CertVersRecoValidateId); 
            CertVersDisplay();
        },
        error: function (request, status, error) {
            alert('Veuillez contacter votre administrateur!');
            //$('#CertVersRecoUnvalidateBtnId' + CertVersRecoValidateId).find('span').attr('class', 'fas fa-unlock-alt');
        }
    });

}

function CertVersPeriodGet(ActionBtnId, SiteId, BagContainerId, DateStringStart, DateStringEnd, IconOnSuccess) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertVersPeriodTableReportId');
    HideReport('CertVersTableReportId');
    $('#CertVersPeriodTableId').DataTable().destroy();;
    $('#CertVersPeriodTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            ShowReport('CertVersPeriodTableReportId');
            $('#' + ActionBtnId).find('span').attr('class', IconOnSuccess);
        },
        "ajax": {
            "url": "/Cert/CertVersPeriodGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "BagContainerId" },//1
            { "data": "DhmValueFrom" },//2
            { "data": "DhmValueTo" },//3
            { "data": "ReceiptVOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
            { "data": "ReceiptVCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
            { "data": "ReceiptVGap" },//6
            { "data": "CertVersPeriodId" }//7 Search
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 }, //SiteName
            { "width": "5%", "className": "text-left", "targets": 1 }, //BagContainerId
            { "width": "20%", "className": "text-left", "targets": 2 }, //DhmValueFrom 
            { "width": "20%", "className": "text-left", "targets": 3 }, //DhmValueTo 
            { "width": "15%", "className": "text-right", "targets": 4 }, //ReceiptVOpe
            { "width": "15%", "className": "text-right", "targets": 5 }, //ReceiptVCe
            { "width": "15%", "className": "text-center", "targets": 6 }, //ReceiptVGap
            { "width": "2%", "className": "text-center", "targets": 7 },//Search

            { "targets": 2, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 6, "render": function (data, type, row) { return GetGapFromDataTable(data); } },

            {
                "targets": 7, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertVersSearchBtnId' + data + '" style="background-color: Transparent;border: none;" ' +
                        'onclick="CertVersSearch(\'' + data + '\')" >' +
                        '<span class="fas fa-truck" style="color:#a3a3a3"></span></button>'
                }
            }
        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            OpeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            CeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            GapTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(4).footer()).html(numFormat(OpeTotal));
            $(api.column(5).footer()).html(numFormat(CeTotal));

            if ((GapTotal.toFixed(2) !== '0.00') && (GapTotal.toFixed(2) !== '-0.00'))
                $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numFormat(GapTotal) + '</span>');
            else $(api.column(6).footer()).html('<span  class="badge badge-success">0.00</span>');
        }
    });
}

function CertVersPeriodDisplay() {

    $('#ActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
    var ActionBtnId = 'ActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (SiteId != null &&
        BagContainerId != null &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        ParamMessageReset();
        CertVersPeriodGet(ActionBtnId, SiteId, BagContainerId, DateStringStart, DateStringEnd, 'fas fa-search');
    }
    else {
        $('#ActionBtnId').find('span').attr('class', 'fas fa-search');
        ParamMessageErrorDisplay();
    };
}

function CertVersSearch(Id) {
    var ActionBtnId = new String('CertVersSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var StationNumber = new String(Id).substr(10, 2);
    var BagContainerId = '0';
    var Icon = 'fas fa-eye';

    if (new String(Id).length == 16) {
        SiteId = new String(Id).substr(12, 2);
        StationNumber = new String(Id).substr(14, 2);
    }
    //CertVersGet(ActionBtnId, Icon, SiteId, BagContainerId, DateStringStart, DateStringEnd);

    CertVersGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
}

function CertCtrTrxStationGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, CtrTypeId, Icon, IsGap) {
    CertAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertLaneCtr' + 'TableReportId');
    ShowReport('CertLaneCtrStation' + 'TableReportId');
    ShowReport('CertCtrStationDetail' + 'TableReportId');
    ShowReport('CertCtrTrxStation' + 'TableReportId');

    ParamMessageReset();

    var Pattern = 'CertCtrTrxStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternReportId = Pattern + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternReportId);
            ShowReport('CertReportId');
        },
        "ajax": {
            "url": "/Cert/CertCtrTrxStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                CtrTypeId: CtrTypeId
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "" },//2 DhmValue
            { "data": "Gap" },//3
            {
                "mData": function vehicle(data, type, dataToSet) {
                    var Id = GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + GetDigits(data.Year, 2) + data.SiteId + data.StationNumber
                    return Id;
                }
            },//4 CtrTrxLaneSearch
            {
                "mData": function vehicle(data, type, dataToSet) {
                    var Id = GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + GetDigits(data.Year, 2) + data.SiteId + data.StationNumber
                    return Id;
                }
            },// 5 CeUpdate
            {
                "mData": function vehicle(data, type, dataToSet) {
                    var Id = GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + GetDigits(data.Year, 2) + data.SiteId + data.StationNumber
                    return Id;
                }
            },// 6 MsgDownload P
            {
                "mData": function vehicle(data, type, dataToSet) {
                    var Id = GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + GetDigits(data.Year, 2) + data.SiteId + data.StationNumber
                    return Id;
                }
            },// 7 MsgDownload R

            {
                "mData": function vehicle(data, type, dataToSet) {
                    var Id = GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + GetDigits(data.Year, 2) + data.SiteId + data.StationNumber
                    return Id;
                }
            },// 8 PostStationDisplay
            {
                "mData": function vehicle(data, type, dataToSet) {
                    var Id = GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + GetDigits(data.Year, 2) + data.SiteId + data.StationNumber
                    return Id;
                }
            },// 9 ReceiptStationDisplay
            {
                "mData": function vehicle(data, type, dataToSet) {
                    var Id = GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + GetDigits(data.Year, 2) + data.SiteId + data.StationNumber
                    return Id;
                }
            },// 10 NrSiteDisplay
            {
                "mData": function vehicle(data, type, dataToSet) {
                    var Id = GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + GetDigits(data.Year, 2) + data.SiteId + data.StationNumber
                    return Id;
                }
            },// 11
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "3%", "className": "text-left", "targets": 1 },//StationNumber
            { "width": "3%", "className": "text-center", "targets": 2 },//DhmValue
            { "width": "3%", "className": "text-right", "targets": 3 },//Gap
            { "width": "3%", "className": "text-center", "targets": 4 },//CtrTrxLaneSearch
            { "width": "3%", "className": "text-center none", "targets": 5 },//CeUpdate
            { "width": "3%", "className": "text-center none", "targets": 6 },//MsgDownload
            { "width": "3%", "className": "text-center none", "targets": 7 },//MsgDownload

            { "width": "3%", "className": "text-center none", "targets": 8 },//PostStationDisplay
            { "width": "3%", "className": "text-center none", "targets": 9 },//ReceiptStationDisplay
            { "width": "3%", "className": "text-center none", "targets": 10 },//NrSiteDisplay
            { "width": "3%", "className": "text-center none", "targets": 11 },

            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            //{ "targets": 3, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertCtrTrxLaneSearch', data, 'fas fa-eye', '0048ff'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdate', '07' + 'Y8' + data + "ALL", 'fas fa-redo-alt', '0048ff'); } },//CeUpdate
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertMsgFileDownload', 'P' + '44' + data, 'fas fa-download', '0048ff'); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertMsgFileDownload', 'R' + '44' + data, 'fas fa-download', '0048ff'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertPostStationLook', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertReceiptStationLook', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGetButton('CertNrSiteLook', data, 'fas fa-eye', '0048ff'); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertMsgTransfer', '44' + data, 'fas fa-upload', '0048ff'); } }
        ],
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertCtrTrxStationDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));
    var CtrId = GetElementValue('CtrId');
    var CtrTypeId = GetElementValue('CtrTypeId');

    var Icon = 'fas fa-eye';

    if (DateStringStart != '' && DateStringEnd != '') {

        HideReport('CertReportId');
        HideReport('CertCtrTrxStation' + 'TableReportId');
        HideReport('CertCtrTrxLane' + 'TableReportId');
        HideReport('CertCtrTrxBillingId' + 'TableReportId');
        HideReport('CertCtrTrxEoj' + 'TableReportId');
        HideReport('CertCtrTrxEojDiff' + 'TableReportId');

        HideReport('CertCtrCohBojSansEoj' + 'TableReportId');
        HideReport('CertCtrCohEojSansRac' + 'TableReportId');
        HideReport('CertCtrCohEojDouble' + 'TableReportId');

        HideReport('CertReceiptStation' + 'TableReportId');
        HideReport('CertNrSite' + 'TableReportId');
        HideReport('CertPostStation' + 'TableReportId');

        HideReport('CertTrxLaneStation' + 'TableReportId');
        HideReport('CertTrxLaneLane' + 'TableReportId');
        HideReport('CertTrxLaneSpecificLane' + 'TableReportId');
        HideReport('CertTrxLaneSpecificBillingId' + 'TableReportId');
        HideReport('CertTrxLaneBillingId' + 'TableReportId');
        HideReport('CertTrxLane' + 'TableReportId');

        HideReport('CertRecoReceipt' + 'TableReportId');
        HideReport('CertRecoPost' + 'TableReportId');
        HideReport('CertRecoTrxLane' + 'TableReportId');

        HideReport('CertFilePlan' + 'TableReportId');

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

        if (CtrId == '02') {

            if (CtrTypeId == '01') {
                CertCtrCohBojSansEojGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
            }
            if (CtrTypeId == '02') {
                CertCtrCohEojSansRacGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
            }
            if (CtrTypeId == '03') {
                CertCtrCohEojDoubleGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
            }
            if (CtrTypeId == '0' || CtrTypeId == '99') {
                CertCtrCohBojSansEojGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
                CertCtrCohEojSansRacGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
                CertCtrCohEojDoubleGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
            }
        }
        if (CtrId == '03') {
            CertCtrTrxStationGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, CtrTypeId, Icon);
        }
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertCtrTrxLaneSearch(Id) {
    var ActionBtnId = new String('CertCtrTrxLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    ParamMessageReset();

    var Pattern = 'CertCtrTrxLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertLaneCtr' + 'TableReportId');
    ShowReport('CertLaneCtrStation' + 'TableReportId');
    ShowReport('CertCtrStationDetail' + 'TableReportId');
    ShowReport('CertCtrTrxStation' + 'TableReportId');

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrTrxLaneSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "LaneName" },//2
            { "data": "" },//3 DhmValue
            { "data": "Gap" },//4

            { "mData": function vehicle(data, type, dataToSet) { return Id + data.LaneName; } },//5 CertCtrTrxBillingIdSearch

            { "mData": function vehicle(data, type, dataToSet) { return Id + data.LaneName; } },//6

            { "mData": function vehicle(data, type, dataToSet) { return Id + data.LaneName; } },//7
            { "mData": function vehicle(data, type, dataToSet) { return Id + data.LaneName; } },//8
            { "mData": function vehicle(data, type, dataToSet) { return Id + data.LaneName; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return Id + data.LaneName; } },//10

        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-left", "targets": 1 },//StationNumber
            { "width": "5%", "className": "text-left", "targets": 2 },//LaneName
            { "width": "20%", "className": "text-center", "targets": 3 },//DhmValue
            { "width": "10%", "className": "text-right", "targets": 4 },//Ctr01

            { "width": "3%", "className": "text-center", "targets": 5 },//

            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center none", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center none", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },

            { "targets": 3, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },

            //{ "targets": 4, "render": function (data, type, row) { return DataTableGapDetailGetGap(data, 'Int', 'CertCtrTrxBillingIdSearch', Id + row['LaneName']); } }, 
            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertCtrTrxBillingIdSearch', data, 'fas fa-eye', '0048ff'); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'Y8' + data, 'fas fa-redo-alt', '0048ff'); } },//Ce

            { "targets": 7, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '03' + data, 'fas fa-eye', '9c9c9c'), DataTableGetButton('CertFileUpdateAdd', '03' + '34' + data + 'x', 'fas fa-redo-alt', '9c9c9c')); } },//Lane
            { "targets": 8, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '05' + data, 'fas fa-eye', '0048ff'), DataTableGetButton('CertFileUpdateAdd', '05' + '58' + data, 'fas fa-redo-alt', '0048ff')); } },//Zip
            { "targets": 9, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '08' + data, 'fas fa-eye', '9c9c9c'), ''); } },//Ope
            { "targets": 10, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '04' + data, 'fas fa-eye', '9c9c9c'), DataTableGetButton('CertFileUpdateAdd', '04' + '44' + data + 'x', 'fas fa-redo-alt', '9c9c9c')); } },//Msg 
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertCtrTrxEojGroupSearch(Id) {
    var ActionBtnId = new String('CertCtrTrxEojGroupSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var Pattern = 'CertCtrTrxEojGroup';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');


    HideReport('CertCtrTrxEoj' + 'TableReportId');
    HideReport('CertCtrTrxEojDiff' + 'TableReportId');

    HideReport('CertReceiptStation' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertPostStation' + 'TableReportId');

    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificBillingId' + 'TableReportId');
    HideReport('CertTrxLaneBillingId' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    HideReport('CertRecoReceipt' + 'TableReportId');
    HideReport('CertRecoPost' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');

    HideReport('CertFilePlan' + 'TableReportId');


    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrTrxEojGroupSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "LaneName" },//2
            { "data": "BillingId" },//3
            { "data": "" },//4 DateValue

            { "data": "EojNumber" },//5
            { "data": "EojReceipt" },//6
            { "data": "EojNumberGap" },//7

            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//8

            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//10

            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//11
            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//13
            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//14
            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//15

            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//16
            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//17
            { "mData": function vehicle(data, type, dataToSet) { return Id; } },//18
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center none", "targets": 11 },
            { "width": "3%", "className": "text-center none", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center none", "targets": 14 },
            { "width": "3%", "className": "text-center", "targets": 15 },

            { "width": "3%", "className": "text-center none", "targets": 16 },
            { "width": "3%", "className": "text-center none", "targets": 17 },
            { "width": "3%", "className": "text-center none", "targets": 18 },

            { "targets": 4, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertCtrTrxEojSearch', data, 'fas fa-eye', '0048ff'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneSpecificBillingIdGroupSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneSpecificBillingIdAllGroupSearch', data, 'fas fa-eye', '0048ff'); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '03' + '34' + data, 'fas fa-plus-circle', '0048ff'); } },//Lane
            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-plus-circle', '0048ff'); } },//Zip
            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '08' + '84' + data, 'fas fa-plus-circle', '0048ff'); } },//Ope
            { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '04' + '44' + data, 'fas fa-plus-circle', '0048ff'); } },//Msg
            { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-plus-circle', '0048ff'); } },//Ce

            { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertCtrCohBojSansEojSearch', data, 'fas fa-eye', '0048ff'); } },//
            { "targets": 17, "render": function (data, type, row) { return DataTableGetButton('CertCtrCohEojSansRacSearch', data, 'fas fa-eye', '0048ff'); } },//
            { "targets": 18, "render": function (data, type, row) { return DataTableGetButton('CertCtrCohEojDoubleSearch', data, 'fas fa-eye', '0048ff'); } },//
        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertCtrTrxEojSearch(Id) {
    var ActionBtnId = new String('CertCtrTrxEojSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var Pattern = 'CertCtrTrxEoj';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');


    HideReport('CertCtrTrxEoj' + 'TableReportId');
    HideReport('CertCtrTrxEojDiff' + 'TableReportId');

    HideReport('CertReceiptStation' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertPostStation' + 'TableReportId');

    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificBillingId' + 'TableReportId');
    HideReport('CertTrxLaneBillingId' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    HideReport('CertRecoReceipt' + 'TableReportId');
    HideReport('CertRecoPost' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');

    HideReport('CertFilePlan' + 'TableReportId');


    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrTrxEojSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "LaneName" },//2
            { "data": "BillingId" },//3
            { "data": "CategoryId" },//4
            { "data": "DhmValueStart" },//5
            { "data": "DhmValue" },//6

            { "data": "EojNumber" },//7
            { "data": "EojReceipt" },//8

            { "data": "EojNumberGap" },//9

            { "data": "LaneType" },//10
            { "data": "CertCtrTrxEojId" },//11
            { "data": "CertCtrTrxEojId" },//12

            { "data": "CertCtrTrxEojId" },//13
            { "data": "CertCtrTrxEojId" },//14
            { "data": "CertCtrTrxEojId" },//15
            { "data": "CertCtrTrxEojId" },//16
            { "data": "CertCtrTrxEojId" },//17
            { "data": "CertCtrTrxEojId" },//18

            { "data": "CertCtrTrxEojId" },//19
            { "data": "CertCtrTrxEojId" },//20
            { "data": "CertCtrTrxEojId" },//21
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },

            { "width": "3%", "className": "text-right none", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "width": "3%", "className": "text-center none", "targets": 14 },
            { "width": "3%", "className": "text-center", "targets": 15 },
            { "width": "3%", "className": "text-center", "targets": 16 },
            { "width": "3%", "className": "text-center none", "targets": 17 },
            { "width": "3%", "className": "text-center", "targets": 18 },

            { "width": "3%", "className": "text-center none", "targets": 19 },
            { "width": "3%", "className": "text-center none", "targets": 20 },
            { "width": "3%", "className": "text-center none", "targets": 21 },

            { "targets": 5, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 6, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 9, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertCtrTrxEojDiffSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneSpecificBillingIdSearch', data, 'fas fa-eye', '0048ff'); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '03' + '34' + data, 'fas fa-plus-circle', '0048ff'); } },//Lane
            { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-plus-circle', '0048ff'); } },//Zip
            { "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '08' + '84' + data, 'fas fa-plus-circle', '0048ff'); } },//Ope
            { "targets": 17, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '04' + '44' + data, 'fas fa-plus-circle', '0048ff'); } },//Msg
            { "targets": 18, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-plus-circle', '0048ff'); } },//Ce

            { "targets": 19, "render": function (data, type, row) { return DataTableGetButton('CertCtrCohBojSansEojSearch', data, 'fas fa-eye', '0048ff'); } },//
            { "targets": 20, "render": function (data, type, row) { return DataTableGetButton('CertCtrCohEojSansRacSearch', data, 'fas fa-eye', '0048ff'); } },//
            { "targets": 21, "render": function (data, type, row) { return DataTableGetButton('CertCtrCohEojDoubleSearch', data, 'fas fa-eye', '0048ff'); } },//
        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertCtrTrxEojDiffSearch(Id) {
    var ActionBtnId = new String('CertCtrTrxEojDiffSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var Pattern = 'CertCtrTrxEojDiff';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    //HideReport(PatternTableReportId);
    //HideReport('CertCtrTrxBillingId' + 'TableReportId');
    //HideReport('CertTrxLane' + 'TableReportId');
    //HideReport('CertRecoTrxLane' + 'TableReportId');
    //HideReport('CertFilePlan' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrTrxEojDiffSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "LaneName" },//2
            { "data": "BillingId" },//3
            { "data": "CategoryId" },//4

            { "data": "DhmValueBoj" },//5
            { "data": "DhmValueEoj" },//6

            { "data": "EojNumber" },//7
            { "data": "TrxNumber" },//8
            { "data": "Ctr01" },//9

            { "data": "EojReceipt" },//10
            { "data": "TrxReceipt" },//11
            { "data": "Ctr02" },//12

            { "data": "CertCtrTrxEojDiffId" },//13 Search
            { "data": "CertCtrTrxEojDiffId" },//14 Search
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-center", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-center", "targets": 1 },//StationName
            { "width": "5%", "className": "text-center", "targets": 2 },//LaneName
            { "width": "10%", "className": "text-center", "targets": 3 },//BillingId
            { "width": "3%", "className": "text-center", "targets": 4 },//CategoryId

            { "width": "3%", "className": "text-center", "targets": 5 },//DhmValueStart
            { "width": "3%", "className": "text-center", "targets": 6 },//DhmValue

            { "width": "3%", "className": "text-right", "targets": 7 },//EojNumber
            { "width": "3%", "className": "text-right", "targets": 8 },//TrxNumber
            { "width": "3%", "className": "text-right", "targets": 9 },//Ctr01

            { "width": "3%", "className": "text-right", "targets": 10 },//EojReceipt
            { "width": "3%", "className": "text-right", "targets": 11 },//TrxReceipt
            { "width": "3%", "className": "text-right", "targets": 12 },//Ctr01

            { "width": "3%", "className": "text-center", "targets": 13 },//TrxSearch
            { "width": "3%", "className": "text-center", "targets": 14 },//EojSearch

            { "targets": 5, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 6, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 9, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneFromEojDiffSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableGetButton('CertCtrTrxPostSearch', data, 'fas fa-eye', '0048ff'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertCtrTrxLaneBillingIdSearch(Id) {
    var ActionBtnId = new String('CertCtrTrxLaneBillingIdSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    var Pattern = 'CertTrxLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    CertLaneAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertLaneCtr' + 'TableReportId');
    ShowReport('CertLaneCtrStation' + 'TableReportId');
    ShowReport('CertCtrStationDetail' + 'TableReportId');
    ShowReport('CertCtrTrxStation' + 'TableReportId');
    ShowReport('CertCtrTrxLane' + 'TableReportId');
    ShowReport('CertTrxLaneSpecificBillingId' + 'TableReportId');

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertTrxLaneTableReportId');
    HideReport('CertFilePlanReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrTrxLaneBillingIdSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "data": "StationNumber" }, //1
            { "data": "LaneName" }, //2
            { "data": "BillingId" },//3            
            { "data": "CategoryPostDacId" },//4
            { "data": "CashierNumber" },//5

            { "data": "DhmValuePostStart" },//6
            { "data": "DhmValue" },//7
            { "data": "TrxNumber" },//8
            { "data": "TrxIndex" },//9
            { "data": "PartialPriceCe" },//10           

            { "data": "ProductNumber" },//11      
            { "data": "ObsPassId" },//12
            { "data": "ObsTickId" },//13
            { "data": "ObsMpId" },//14
            { "data": "ObsSequId" },//15
            { "data": "ObsOcrId" },//16
            { "data": "CategoryPreDacId" },//17

            { "data": "IsLane" },//18
            { "data": "IsZip" },//19
            { "data": "IsOpe" },//20
            { "data": "IsMsg" },//21
            { "data": "IsCe" },//22

            { "data": "CertTrxLaneRecoId" },//23
            { "data": "CertTrxLaneRecoId" },//24
            { "data": "CertTrxLaneRecoId" },//25
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + GetDigits(data.Hour, 2) + GetDigits(data.Minute, 2) + GetDigits(data.Second, 2) + data.SiteId + data.StationNumber + data.LaneName; } },//26
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center none", "targets": 11 },
            { "width": "3%", "className": "text-center none", "targets": 12 },
            { "width": "3%", "className": "text-center none", "targets": 13 },
            { "width": "3%", "className": "text-center none", "targets": 14 },
            { "width": "3%", "className": "text-center none", "targets": 15 },
            { "width": "3%", "className": "text-center none", "targets": 16 },
            { "width": "3%", "className": "text-center none", "targets": 17 },

            { "width": "3%", "className": "text-center none", "targets": 18 },
            { "width": "3%", "className": "text-center", "targets": 19 },
            { "width": "3%", "className": "text-center", "targets": 20 },
            { "width": "3%", "className": "text-center none", "targets": 21 },
            { "width": "3%", "className": "text-center", "targets": 22 },

            { "width": "3%", "className": "text-center none", "targets": 23 },
            { "width": "3%", "className": "text-center", "targets": 24 },
            { "width": "3%", "className": "text-center none", "targets": 25 },
            { "width": "3%", "className": "text-center", "targets": 26 },

            { "targets": 6, "render": function (data, type, row) { return GetDhmValueNullableFromDataTableDate(data); } },
            { "targets": 7, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 18, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
            { "targets": 19, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
            { "targets": 20, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
            { "targets": 21, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },
            { "targets": 22, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } },

            { "targets": 23, "render": function (data, type, row) { return DataTableGetButton('CertLaneTrxLaneSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 24, "render": function (data, type, row) { return DataTableGetButton('CertZipTrxLaneSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 25, "render": function (data, type, row) { return DataTableGetButton('CertMsgTrxLaneSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 26, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '08' + '84' + data, 'fas fa-redo-alt', '9c9c9c'); } },//TrxOpe
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DoubleTotal1 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //DoubleTotal2 = api.column(25).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(10).footer()).html(numFormat(DoubleTotal1));
            //$(api.column(25).footer()).html(numFormat(DoubleTotal2));

            //$(api.column(8).footer()).html(numShortFormat(IntTotal1));
            //$(api.column(10).footer()).html(numShortFormat(IntTotal2));
        }
    });
}

function CertCtrCohBojSansEojSearch(Id) {
    var ActionBtnId = new String('CertCtrCohBojSansEojSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var Pattern = 'CertCtrCohBojSansEoj';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(PatternTableReportId);

    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrCohBojSansEojSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "DhmValue" },//2
            { "data": "LaneName" },//3
            { "data": "LaneType" },//4
            { "data": "CashierNumber" },//5
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "targets": 2, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total6 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total7 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total9 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total10 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(6).footer()).html(numFormat(Total6));
            //$(api.column(7).footer()).html(numFormat(Total7));
            //$(api.column(9).footer()).html(numFormat(Total9));
            //$(api.column(10).footer()).html(numFormat(Total10));
        }
    });
}

function CertCtrCohEojSansRacSearch(Id) {
    var ActionBtnId = new String('CertCtrCohEojSansRacSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var Pattern = 'CertCtrCohEojSansRacSearch';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(PatternTableReportId);

    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrCohEojSansRacSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "DhmValue" },//2
            { "data": "LaneName" },//3
            { "data": "CashierNumber" },//4

            { "data": "EojNumber" },//5
            { "data": "ReceiptEoj1" },//6
            { "data": "ReceiptEoj2" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "targets": 2, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total6 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total7 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total9 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total10 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(6).footer()).html(numFormat(Total6));
            //$(api.column(7).footer()).html(numFormat(Total7));
            //$(api.column(9).footer()).html(numFormat(Total9));
            //$(api.column(10).footer()).html(numFormat(Total10));
        }
    });
}

function CertCtrCohEojDoubleSearch(Id) {
    var ActionBtnId = new String('CertCtrCohEojDoubleSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var Pattern = 'CertCtrCohEojDoubleSearch';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(PatternTableReportId);

    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrCohEojDoubleSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "DhmValue" },//2
            { "data": "LaneName" },//3
            { "data": "CashierNumber" },//4

            { "data": "EojNumber" },//5
            { "data": "ReceiptEoj1" },//6
            { "data": "ReceiptEoj2" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "targets": 2, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total6 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total7 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total9 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total10 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(6).footer()).html(numFormat(Total6));
            //$(api.column(7).footer()).html(numFormat(Total7));
            //$(api.column(9).footer()).html(numFormat(Total9));
            //$(api.column(10).footer()).html(numFormat(Total10));
        }
    });
}

function CertCtrCohBojSansEojGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon) {
    var Pattern = 'CertCtrCohBojSansEoj';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertLaneCtr' + 'TableReportId');
    ShowReport('CertLaneCtrStation' + 'TableReportId');
    ShowReport('CertCtrStationDetail' + 'TableReportId');
    //ShowReport('CertCtrTrxStation' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrCohBojSansEojGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "DhmValue" },//2
            { "data": "LaneName" },//3
            { "data": "LaneType" },//4
            { "data": "CashierNumber" },//5

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//6 Ce

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//7 Lane
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//8 Zip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//9 Ope
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//10 Msg

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//11 Eoj
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//12 Trx
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center none", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center none", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 2, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'Y8' + data, 'fas fa-redo-alt', '0048ff'); } },//Ce
            { "targets": 7, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '03' + data, 'fas fa-eye', '9c9c9c'), DataTableGetButton('CertFileUpdateAdd', '03' + '34' + data, 'fas fa-redo-alt', '9c9c9c')) } },//TrxLane
            { "targets": 8, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '05' + data, 'fas fa-eye', '0048ff'), DataTableGetButton('CertFileUpdateAdd', '05' + '58' + data, 'fas fa-redo-alt', '0048ff')) } },//TrxZip
            { "targets": 9, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '08' + data, 'fas fa-eye', '9c9c9c'), DataTableGetButton('CertFileUpdateAdd', '08' + '84' + data, 'fas fa-redo-alt', '9c9c9c')) } },//TrxOpe
            { "targets": 10, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '04' + data, 'fas fa-eye', '9c9c9c'), DataTableGetButton('CertFileUpdateAdd', '04' + '44' + data, 'fas fa-redo-alt', '9c9c9c')) } },//TrxMsg

            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertMsgTransfer', '43' + data, 'fas fa-upload', '0048ff'); } },//Eoj
            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertMsgTransfer', '44' + data, 'fas fa-upload', '0048ff'); } }//Trx
        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total6 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total7 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total9 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total10 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(6).footer()).html(numFormat(Total6));
            //$(api.column(7).footer()).html(numFormat(Total7));
            //$(api.column(9).footer()).html(numFormat(Total9));
            //$(api.column(10).footer()).html(numFormat(Total10));
        }
    });
}

function CertCtrCohEojSansRacGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon) {
    var Pattern = 'CertCtrCohEojSansRac';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertLaneCtr' + 'TableReportId');
    ShowReport('CertLaneCtrStation' + 'TableReportId');
    ShowReport('CertCtrStationDetail' + 'TableReportId');
    ShowReport('CertCtrTrxStation' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrCohEojSansRacGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "DhmValue" },//2
            { "data": "LaneName" },//3
            { "data": "CashierNumber" },//4

            { "data": "EojNumber" },//5
            { "data": "ReceiptEoj1" },//6
            { "data": "ReceiptEoj2" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "targets": 2, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total6 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total7 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total9 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total10 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(6).footer()).html(numFormat(Total6));
            //$(api.column(7).footer()).html(numFormat(Total7));
            //$(api.column(9).footer()).html(numFormat(Total9));
            //$(api.column(10).footer()).html(numFormat(Total10));
        }
    });
}

function CertCtrCohEojDoubleGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon) {
    var Pattern = 'CertCtrCohEojDouble';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertLaneCtr' + 'TableReportId');
    ShowReport('CertLaneCtrStation' + 'TableReportId');
    ShowReport('CertCtrStationDetail' + 'TableReportId');
    ShowReport('CertCtrTrxStation' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrCohEojDoubleGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "DhmBoj" },//2
            { "data": "LaneName" },//3
            { "data": "CashierNumber" },//4

            { "data": "EojNumber" },//5

            { "data": "DhmEoj1" },//6
            { "data": "ReceiptEoj1" },//7

            { "data": "DhmEoj2" },//8
            { "data": "ReceiptEoj2" },//9

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day1, 2) + GetDigits(data.Month1, 2) + data.Year1 + data.SiteId + data.StationNumber + data.LaneName; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day1, 2) + GetDigits(data.Month1, 2) + data.Year1 + data.SiteId + data.StationNumber + data.LaneName; } },//11
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day1, 2) + GetDigits(data.Month1, 2) + data.Year1 + data.SiteId + data.StationNumber + data.LaneName; } },//12
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-left", "targets": 12 },

            { "targets": 2, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 6, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 8, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 10, "render": function (data, type, row) { return DataTableGetButton('CertPostLook', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '53' + data, 'fas fa-plus-circle', 'ff6000'); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertPostBillingIdSearch', data, 'fas fa-eye', 'ff6000'); } },

        ],
        "autoWidth": false,
        "iDisplayLength": 31,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total6 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total7 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total9 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total10 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(6).footer()).html(numFormat(Total6));
            //$(api.column(7).footer()).html(numFormat(Total7));
            //$(api.column(9).footer()).html(numFormat(Total9));
            //$(api.column(10).footer()).html(numFormat(Total10));
        }
    });
}

function CertTrxLaneGapSearch(Id) {
    var ActionBtnId = new String('CertTrxLaneGapSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-gem';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'CertTrxLaneGap';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport('CertTrxLaneTableReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneGapSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "data": "StationNumber" }, //1
            { "data": "LaneName" }, //2            
            { "data": "DhmValue" },//3   
            { "data": "TrxNumber" }, //4
            { "data": "TrxIndex" }, //5

            { "data": "CashierNumber" },//6
            { "data": "PartialPrice", "render": $.fn.dataTable.render.number(' ', ',', 2) },//7

            { "data": "TrxLane" }, //8
            { "data": "TrxCe" }, //9

            { "data": "ProductNumber" },//10
            { "data": "BillingId" },//11
            { "data": "ObsPassId" },//12
            { "data": "ObsTickId" },//13
            { "data": "ObsMpId" },//14
            { "data": "ObsSequId" },//15
            { "data": "ObsOcrId" },//16

            { "data": "Id" },//17 Msg
            { "data": "Id" },//18 Zip 
            { "data": "Id" },//19 Lane
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-center", "targets": 0 },//SiteName
            { "width": "5%", "className": "text-center", "targets": 1 },//StationNumber
            { "width": "5%", "className": "text-center", "targets": 2 },//LaneNumber
            { "width": "10%", "className": "text-center", "targets": 3 },//DhmValue
            { "width": "3%", "className": "text-center", "targets": 4 },//TrxNumber
            { "width": "3%", "className": "text-center", "targets": 5 },//TrxIndex

            { "width": "7%", "className": "text-center", "targets": 6 }, //CashierNumber
            { "width": "5%", "className": "text-center", "targets": 7 }, //PartialPrice

            { "width": "5%", "className": "text-center", "targets": 8 },//IsLane
            { "width": "5%", "className": "text-center", "targets": 9 },//IsCe                     

            { "width": "3%", "className": "text-center none", "targets": 10 },//Produit
            { "width": "3%", "className": "text-center none", "targets": 11 },//MP
            { "width": "3%", "className": "text-center none", "targets": 12 },//PAS
            { "width": "3%", "className": "text-center none", "targets": 13 },//TT
            { "width": "3%", "className": "text-center none", "targets": 14 },//CMP
            { "width": "3%", "className": "text-center none", "targets": 15 },//SEQ
            { "width": "3%", "className": "text-center none", "targets": 16 },//OCR

            { "width": "5%", "className": "text-center none", "targets": 17 },//Msg
            { "width": "5%", "className": "text-center none", "targets": 18 },//Zip
            { "width": "5%", "className": "text-center none", "targets": 19 },//Lane

            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 8, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 9, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },

            { "targets": 17, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneMsgSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneZipSearch', data, 'fas fa-search', '0048ff'); } },
            { "targets": 19, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneLaneSearch', data, 'fas fa-search', '0048ff'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //DoubleTotal1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal1 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(7).footer()).html(numFormat(DoubleTotal1));
            //$(api.column(8).footer()).html(numShortFormat(IntTotal1));
            //$(api.column(9).footer()).html(numShortFormat(IntTotal2));
        }
    });
}

function CertPostStationLook(Id) {
    var ActionBtnId = new String('CertPostStationLookBtnId' + Id);
    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = "0";
    var StationNumber = new String(Id).substr(10, 2);
    var CtrId = "0";
    var Icon = 'fas fa-eye';

    HideReport('CertCtrTrxLane' + 'TableReportId');
    HideReport('CertCtrTrxBillingId' + 'TableReportId');
    HideReport('CertCtrTrxEoj' + 'TableReportId');
    HideReport('CertCtrTrxEojDiff' + 'TableReportId');

    HideReport('CertReceiptStation' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertPostStation' + 'TableReportId');

    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificBillingId' + 'TableReportId');
    HideReport('CertTrxLaneBillingId' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    HideReport('CertRecoReceipt' + 'TableReportId');
    HideReport('CertRecoPost' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');

    HideReport('CertFilePlan' + 'TableReportId');

    CertPostStationGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, CtrId, Icon);
}

function CertReceiptStationLook(Id) {
    var ActionBtnId = new String('CertReceiptStationLookBtnId' + Id);
    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = "0";
    var StationNumber = new String(Id).substr(10, 2);
    var CtrId = "0";
    var Icon = 'fas fa-eye';

    HideReport('CertCtrTrxLane' + 'TableReportId');
    HideReport('CertCtrTrxBillingId' + 'TableReportId');
    HideReport('CertCtrTrxEoj' + 'TableReportId');
    HideReport('CertCtrTrxEojDiff' + 'TableReportId');

    HideReport('CertReceiptStation' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertPostStation' + 'TableReportId');

    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificBillingId' + 'TableReportId');
    HideReport('CertTrxLaneBillingId' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    HideReport('CertRecoReceipt' + 'TableReportId');
    HideReport('CertRecoPost' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');

    HideReport('CertFilePlan' + 'TableReportId');

    CertReceiptStationGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon, CtrId);
}

function CertNrSiteLook(Id) {
    var ActionBtnId = new String('CertNrSiteLookBtnId' + Id);
    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = new String(Id).substr(10, 2);
    var Icon = 'fas fa-eye';

    HideReport('CertCtrTrxLane' + 'TableReportId');
    HideReport('CertCtrTrxBillingId' + 'TableReportId');
    HideReport('CertCtrTrxEoj' + 'TableReportId');
    HideReport('CertCtrTrxEojDiff' + 'TableReportId');

    HideReport('CertReceiptStation' + 'TableReportId');
    HideReport('CertNrSite' + 'TableReportId');
    HideReport('CertPostStation' + 'TableReportId');

    HideReport('CertTrxLaneStation' + 'TableReportId');
    HideReport('CertTrxLaneLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificLane' + 'TableReportId');
    HideReport('CertTrxLaneSpecificBillingId' + 'TableReportId');
    HideReport('CertTrxLaneBillingId' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');

    HideReport('CertRecoReceipt' + 'TableReportId');
    HideReport('CertRecoPost' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');

    HideReport('CertFilePlan' + 'TableReportId');

    CertNrSiteGet(ActionBtnId, SiteId, BagContainerId, DateStringStart, DateStringEnd, Icon)
}

function CertCtrTrxBillingIdSearch(Id) {
    var ActionBtnId = new String('CertCtrTrxBillingIdSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertCtrTrxBillingId' + 'TableReportId');
    ParamMessageReset();

    var Pattern = 'CertCtrTrxBillingId';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrTrxBillingIdSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "LaneName" },//2
            { "data": "BillingId" },//3
            { "data": "DhmValue" },//4
            { "data": "Gap" },//5

            { "mData": function vehicle(data, type, dataToSet) { return Id + data.BillingId; } },//6
            { "mData": function vehicle(data, type, dataToSet) { return Id + data.BillingId; } },//7

            { "mData": function vehicle(data, type, dataToSet) { return Id + data.BillingId; } },//8
            { "mData": function vehicle(data, type, dataToSet) { return Id + data.BillingId; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return Id + data.BillingId; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return Id + data.BillingId; } },//11
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "3%", "className": "text-left", "targets": 1 },//StationNumber
            { "width": "3%", "className": "text-left", "targets": 2 },//LaneName
            { "width": "3%", "className": "text-center", "targets": 3 },//BillingId
            { "width": "3%", "className": "text-center", "targets": 4 },//DhmValue
            { "width": "3%", "className": "text-center", "targets": 5 },//Ctr01

            { "width": "3%", "className": "text-center none", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center none", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },

            { "targets": 4, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 5, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertCtrTrxEojGroupSearch', data, 'fas fa-eye', '0048ff'); } },//CtrTrxEojSearch
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'Y8' + data, 'fas fa-redo-alt', '0048ff'); } },//Ce

            { "targets": 8, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '03' + data, 'fas fa-eye', '9c9c9c'), DataTableGetButton('CertFileUpdateAdd', '03' + '34' + data, 'fas fa-redo-alt', '9c9c9c')); } },//Lane
            { "targets": 9, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '05' + data, 'fas fa-eye', '0048ff'), DataTableGetButton('CertFileUpdateAdd', '05' + '58' + data, 'fas fa-redo-alt', '0048ff')); } },//Zip
            { "targets": 10, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '08' + data, 'fas fa-eye', '9c9c9c'), DataTableGetButton('CertFileUpdateAdd', '08' + '84' + data, 'fas fa-redo-alt', '9c9c9c')); } },//Ope
            { "targets": 11, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableGetButton('CertTrxLaneSpecificBillingIdAllSearch', '04' + data, 'fas fa-eye', '9c9c9c'), DataTableGetButton('CertFileUpdateAdd', '04' + '44' + data, 'fas fa-redo-alt', '9c9c9c')); } },//Msg           
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertTrxLaneSpecificBillingIdSearch(Id) {
    var ActionBtnId = new String('CertTrxLaneSpecificBillingIdSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var Pattern = 'CertTrxLaneSpecificBillingId';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(PatternTableReportId);
    //HideReport('CertCtrTrxBillingId' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneSpecificBillingIdSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "LaneName" },//2
            { "data": "BillingId" },//3
            { "data": "CategoryPreDacId" },//4
            { "data": "LaneName" },//5 DhmValue

            { "data": "TrxLane" },//6  
            { "data": "TrxZip" },//7
            { "data": "TrxOpe" },//8
            { "data": "TrxMsg" },//9
            { "data": "TrxCe" },//10

            { "data": "GapCe" },//11
            { "data": "GapZip" },//12
            { "data": "GapOpe" },//13
            { "data": "GapMsg" },//14

            {
                "mData": function vehicle(data, type, dataToSet) {
                    return GetDigits(data.Day, 2) +
                        GetDigits(data.Month, 2) +
                        data.Year +
                        data.SiteId +
                        data.StationNumber +
                        data.LaneName +
                        data.BillingId +
                        data.CategoryPreDacId;
                }
            },//15

            { "data": "PartialPriceLane" },//16
            { "data": "PartialPriceCe" },//17
            { "data": "PartialPriceGap" },//18            

        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-left", "targets": 1 },//StationName
            { "width": "5%", "className": "text-left", "targets": 2 },//LaneName
            { "width": "5%", "className": "text-center", "targets": 3 },//BillingId
            { "width": "10%", "className": "text-center", "targets": 4 },//CategoryId
            { "width": "10%", "className": "text-center", "targets": 5 },//DhmValue

            { "width": "3%", "className": "text-right none", "targets": 6 },//Lane 
            { "width": "3%", "className": "text-right", "targets": 7 },//Zip
            { "width": "3%", "className": "text-right", "targets": 8 },//Ope
            { "width": "3%", "className": "text-right none", "targets": 9 },//Msg
            { "width": "3%", "className": "text-right", "targets": 10 },//Ce

            { "width": "3%", "className": "text-right none", "targets": 11 },//GapLane
            { "width": "3%", "className": "text-right", "targets": 12 },//GapZip
            { "width": "3%", "className": "text-right", "targets": 13 },//GapOpe
            { "width": "3%", "className": "text-right none", "targets": 14 },//GapMsg

            { "width": "3%", "className": "text-right", "targets": 15 },//Search

            { "width": "3%", "className": "text-right none", "targets": 16 },//PriceLane            
            { "width": "3%", "className": "text-right none", "targets": 17 },//PriceCe
            { "width": "3%", "className": "text-right none", "targets": 18 },//PriceGap

            { "targets": 5, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 11, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },
            { "targets": 13, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },
            { "targets": 14, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },

            { "targets": 15, "render": function (data, type, row) { return DataTableGetButton('CertCtrTrxLaneBillingIdSearch', data, 'fas fa-eye', '0048ff'); } },//CertTrxLaneLaneSearch

            { "targets": 18, "render": function (data, type, row) { return GetGapCtrFromDataTable(data, row['PartialPriceGap']); } },

        ],
        "autoWidth": false,
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total6 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total7 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total9 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total10 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(6).footer()).html(numFormat(Total6));
            //$(api.column(7).footer()).html(numFormat(Total7));
            //$(api.column(9).footer()).html(numFormat(Total9));
            //$(api.column(10).footer()).html(numFormat(Total10));
        }
    });
}

function CertTrxLaneSpecificBillingIdAllSearch(Id) {

    var ActionBtnId = new String('CertTrxLaneSpecificBillingIdAllSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var Pattern = 'CertTrxLaneSpecificBillingId';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    var ShowTrxLane = 'none';
    var ShowTrxZip = 'none';
    var ShowTrxOpe = 'none';
    var ShowTrxMsg = 'none';

    var SourceName = new String(Id).substr(0, 2);

    Id = new String(Id).substr(2, new String(Id).length - 2);

    if (SourceName == '03')//Lane
    {
        ShowTrxLane = '';
        ShowTrxZip = 'none';
        ShowTrxOpe = 'none';
        ShowTrxMsg = 'none';
    }
    if (SourceName == '05')//Zip
    {
        ShowTrxLane = 'none';
        ShowTrxZip = '';
        ShowTrxOpe = 'none';
        ShowTrxMsg = 'none';
    }
    if (SourceName == '08')//Ope
    {
        ShowTrxLane = 'none';
        ShowTrxZip = 'none';
        ShowTrxOpe = '';
        ShowTrxMsg = 'none';
    }
    if (SourceName == '04')//Msg
    {
        ShowTrxLane = 'none';
        ShowTrxZip = 'none';
        ShowTrxOpe = 'none';
        ShowTrxMsg = '';
    }

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    //CertAllReportsHide();
    // ShowReport('ParamReportId');
    //  ShowReport('CertLaneCtr' + 'TableReportId');
    //  ShowReport('CertLaneCtrStation' + 'TableReportId');
    // ShowReport('CertCtrStationDetail' + 'TableReportId');
    //  ShowReport('CertCtrTrxStation' + 'TableReportId');
    //  ShowReport('CertCtrTrxLane' + 'TableReportId');
    //  ShowReport('CertCtrCohBojSansEoj' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneSpecificBillingIdAllSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "LaneName" },//2
            { "data": "BillingId" },//3
            { "data": "CategoryPreDacId" },//4
            { "data": "" },//5 DhmValue

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId + data.CategoryPreDacId; } },//6 TrxLane
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId + data.CategoryPreDacId; } },//7 TrxZip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId + data.CategoryPreDacId; } },//8 TrxOpe
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId + data.CategoryPreDacId; } },//9 TrxMsg
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId + data.CategoryPreDacId; } },//10 TrxCe

            { "data": "GapCe" },//11
            { "data": "GapZip" },//12
            { "data": "GapOpe" },//13
            { "data": "GapMsg" },//14

            { "data": "PartialPrice" },//15
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId + data.CategoryPreDacId; } },//16

        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-right none", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right none", "targets": 8 },
            { "width": "3%", "className": "text-right none", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },//Ce

            { "width": "3%", "className": "text-right none", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right none", "targets": 13 },
            { "width": "3%", "className": "text-right none", "targets": 14 },

            { "width": "3%", "className": "text-right", "targets": 15 },
            { "width": "3%", "className": "text-right", "targets": 16 },

            { "targets": 5, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableFormatIntGet(row['TrxLane']), DataTableGetButton('CertFileUpdateAdd', '03' + '34' + data, 'fas fa-redo-alt', '9c9c9c')); } },//TrxLane
            { "targets": 7, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableFormatIntGet(row['TrxZip']), DataTableGetButton('CertFileUpdateAdd', '05' + '58' + data, 'fas fa-redo-alt', '9c9c9c')); } },//TrxZip
            { "targets": 8, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableFormatIntGet(row['TrxOpe']), DataTableGetButton('CertFileUpdateAdd', '08' + '84' + data, 'fas fa-redo-alt', '9c9c9c')); } },//TrxOpe
            { "targets": 9, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableFormatIntGet(row['TrxMsg']), DataTableGetButton('CertFileUpdateAdd', '04' + '44' + data, 'fas fa-redo-alt', '9c9c9c')); } },//TrxMsg
            { "targets": 10, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableFormatIntGet(row['TrxCe']), DataTableGetButton('CertFileUpdateAdd', '07' + 'Y8' + data, 'fas fa-redo-alt', '9c9c9c')); } },//TrxCe

            { "targets": 11, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },//GapCe
            { "targets": 12, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },//GapZip
            { "targets": 13, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },//GapOpe
            { "targets": 14, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },//GapMsg

            { "targets": 15, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            //{ "targets": 16, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneSearch', data, 'fas fa-eye', '0048ff'); } },//CertTrxLaneLaneSearch
            { "targets": 16, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneHourSearch', data, 'CertTrxLaneSpecificBillingIdAll', 'fas fa-eye', '0048ff'); } },

        ],
        "autoWidth": false,
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total6 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total7 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total9 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //Total10 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(6).footer()).html(numFormat(Total6));
            //$(api.column(7).footer()).html(numFormat(Total7));
            //$(api.column(9).footer()).html(numFormat(Total9));
            //$(api.column(10).footer()).html(numFormat(Total10));
        }
    });
}

function CertTrxLaneSpecificLaneSearch(Id) {
    var ActionBtnId = new String('CertTrxLaneSpecificLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    var Pattern = 'CertTrxLaneSpecificLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(PatternTableReportId);
    HideReport('CertCtrTrxBillingId' + 'TableReportId');
    HideReport('CertTrxLane' + 'TableReportId');
    HideReport('CertRecoTrxLane' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneSpecificLaneSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "LaneName" },//2
            { "data": "" },//3 DhmValue
            { "data": "TrxLane", "render": $.fn.dataTable.render.number(' ', ',', 0) },//4
            { "data": "TrxCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//5
            { "data": "Gap" },//6
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-left", "targets": 1 },//StationName
            { "width": "5%", "className": "text-left", "targets": 2 },//LaneName
            { "width": "20%", "className": "text-center", "targets": 3 },//DhmValue
            { "width": "10%", "className": "text-right", "targets": 4 },//TrxOpe
            { "width": "10%", "className": "text-right", "targets": 5 },//TrxCe
            { "width": "10%", "className": "text-right", "targets": 6 },//Gap

            { "targets": 3, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 6, "render": function (data, type, row) { return GetGapIntFromDataTable(data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertTrxLaneBiMpSearch(Id) {
    var ActionBtnId = new String('CertTrxLaneBiMpSearchBtnId' + Id);
    var Icon = 'fas fa-eye';

    ParamMessageReset();

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertTrxLaneBiMp';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneBiMpGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationNumber + ' - ' + data.StationCeName + ' (' + data.StationCeNumber + ')'; } },//1           
            { "data": "" },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.MpId + ' - ' + data.MpNameCe; } },//3

            { "data": "TotalRef" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//5

            { "data": "Total" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//7

            { "data": "GapAbsolute" },//8
            { "data": "GapRelative" },//9

            { "data": "ReceiptBiTrxC1" },//10
            { "data": "ReceiptBiTrxC2" },//11
            { "data": "ReceiptBiTrxC3" },//12

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.MpId; } },//13
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.MpId; } },//14                   
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right " + max700, "targets": 4 },
            { "width": "3%", "className": "text-left " + max700, "targets": 5 },

            { "width": "3%", "className": "text-right " + max700, "targets": 6 },
            { "width": "3%", "className": "text-left " + max700, "targets": 7 },

            { "width": "3%", "className": "text-right " + max700, "targets": 8 },
            { "width": "3%", "className": "text-right " + max700, "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 14 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },


            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            //{ "targets": 5, "render": function (data, type, row) { return ''; } },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = row['MpId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            //{ "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '13';
                    var FileTypeId = 'A1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var BillingId = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 8, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    if (row['TotalRef'].toFixed(2) != 0) {
                        var evo = ((row['Total'] - row['TotalRef']) / row['TotalRef']) * 10000;
                        if (evo.toFixed(2) > 6 || evo.toFixed(2) < -6) {
                            return '<span  class="badge badge-danger" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                        else {
                            return '<span class="badge badge-success" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                    }
                    else {
                        return '<span  class="badge badge-danger" >10 000 %%</span>';
                    }
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableBtnGet('CertBiRevenueLaneSearch', data, data, '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBiMp', data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total0));

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numFormat(Total1));

            Total2 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));
        }
    });
}

function CertTrxLaneBiStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertTrxLaneBi';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneBiStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationNumber + ' - ' + data.StationCeName + ' (' + data.StationCeNumber + ')'; } },//1
            { "data": "" },//2

            { "data": "TotalRef" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//4

            { "data": "Total" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapRelative" },//8

            { "data": "Ctr01" },//9
            { "data": "Ctr02" },//10
            { "data": "Ctr03" },//11

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//13                    
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right " + max700, "targets": 3 },
            { "width": "3%", "className": "text-left " + max700, "targets": 4 },

            { "width": "3%", "className": "text-right " + max700, "targets": 5 },
            { "width": "3%", "className": "text-left " + max700, "targets": 6 },

            { "width": "3%", "className": "text-right " + max700, "targets": 7 },
            { "width": "3%", "className": "text-right " + max700, "targets": 8 },

            { "width": "3%", "className": "text-center none", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 13 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },


            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            //{ "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var BillingId = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            //{ "targets": 6, "render": function (data, type, row) { return ''; } },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '13';
                    var FileTypeId = 'A1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var BillingId = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['Total'], row['TotalRef'], 0, 10000); } },
            { "targets": 9, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 10, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return CertCtrBitGet(data); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertTrxLaneBiMpSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBi', data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": true,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numFormat(Total0) + 'DH');

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total1) + 'DH');
        }
    });
}


function CertTrxLaneBiStationDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    var Icon = 'fas fa-eye';

    HideReport('CertDayTableReportId');
    document.getElementById('ParamActionIconId3').style.color = 'black';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTrxLaneBiStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTrxLaneBiStationSearch(Id) {

    var ActionBtnId = new String('CertTrxLaneBiStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var Icon = 'fas fa-eye';
    var IsGap = false;
    CertTrxLaneBiStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertTraficBiClSearch(Id) {
    var ActionBtnId = new String('CertTrxLaneBiMpSearchBtnId' + Id);
    var Icon = 'fas fa-eye';

    ParamMessageReset();

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertTraficBiMp';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficBiMpGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationCeNumber + ' - ' + data.StationCeName; } },//1            
            { "data": "" },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.MpId + ' - ' + data.MpNameCe; } },//3
            { "data": "ClassNmber" },//0

            { "data": "TotalRef" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//5

            { "data": "Total" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//7

            { "data": "GapAbsolute" },//8
            { "data": "" },//9

            { "data": "Ctr01" },//10
            { "data": "Ctr02" },//11
            { "data": "Ctr03" },//12

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//13
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//14                   
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right " + max700, "targets": 4 },
            { "width": "3%", "className": "text-left " + max700, "targets": 5 },

            { "width": "3%", "className": "text-right " + max700, "targets": 6 },
            { "width": "3%", "className": "text-left " + max700, "targets": 7 },

            { "width": "3%", "className": "text-right " + max700, "targets": 8 },
            { "width": "3%", "className": "text-right " + max700, "targets": 9 },

            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },
            { "width": "3%", "className": "text-center none", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 14 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },


            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return ''; } },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['Total'], row['TotalRef'], 6, 10000); } },

            { "targets": 10, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 11, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return CertCtrBitGet(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertTraficBiClSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBiMp', data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total0));

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numFormat(Total1));

            Total2 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));
        }
    });
}

function CertTraficBiMpSearch(Id) {
    var ActionBtnId = new String('CertTraficBiMpSearchBtnId' + Id);
    var Icon = 'fas fa-eye';

    ParamMessageReset();

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertTraficBiMp';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficBiMpGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationCeNumber + ' - ' + data.StationCeName; } },//1            
            { "data": "" },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.MpId + ' - ' + data.MpNameCe; } },//3

            { "data": "TotalRef" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//5

            { "data": "Total" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//7

            { "data": "GapAbsolute" },//8
            { "data": "" },//9

            { "data": "Ctr01" },//10
            { "data": "Ctr02" },//11
            { "data": "Ctr03" },//12

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.MpId; } },//13
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.MpId; } },//14                   
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right " + max700, "targets": 4 },
            { "width": "3%", "className": "text-left " + max700, "targets": 5 },

            { "width": "3%", "className": "text-right " + max700, "targets": 6 },
            { "width": "3%", "className": "text-left " + max700, "targets": 7 },

            { "width": "3%", "className": "text-right " + max700, "targets": 8 },
            { "width": "3%", "className": "text-right " + max700, "targets": 9 },

            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },
            { "width": "3%", "className": "text-center none", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 14 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },


            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return ''; } },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['Total'], row['TotalRef'], 6, 10000); } },

            { "targets": 10, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 11, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return CertCtrBitGet(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableBtnGet('CertBiTraficLaneSearch', data, data, '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBiMp', data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total0));

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numFormat(Total1));

            Total2 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));
        }
    });
}

function CertTraficBiStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertTraficBi';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var max700 = 'none';
    var min701 = 'none';

    if (screen.width < 700) {
        max700 = 'none';
        min701 = '';
    }
    else {
        max700 = '';
        min701 = 'none';
    }

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTraficBiStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationCeNumber + ' - ' + data.StationCeName; } },//1
            { "data": "" },//2

            { "data": "TotalRef" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//4

            { "data": "Total" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6

            { "data": "TraficBiGap" },//7
            { "data": "" },//8

            { "data": "Ctr01" },//9
            { "data": "Ctr02" },//10
            { "data": "Ctr03" },//11

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//13                    
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right " + max700, "targets": 3 },
            { "width": "3%", "className": "text-left " + max700, "targets": 4 },

            { "width": "3%", "className": "text-right " + max700, "targets": 5 },
            { "width": "3%", "className": "text-left " + max700, "targets": 6 },

            { "width": "3%", "className": "text-right " + max700, "targets": 7 },
            { "width": "3%", "className": "text-right " + max700, "targets": 8 },

            { "width": "3%", "className": "text-center none", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center " + max700 + " " + min701, "targets": 13 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },


            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return ''; } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['Total'], row['TotalRef'], 0, 10000); } },
            { "targets": 9, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 10, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return CertCtrBitGet(data); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGetButton('CertTraficBiMpSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBi', data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total0));

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total1));
        }
    });
}

function CertTraficBiStationDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));
    var Icon = 'fas fa-eye';

    HideReport('CertDayTableReportId');
    document.getElementById('ParamActionIconId3').style.color = 'black';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertTraficBiStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTraficBiStationSearch(Id) {

    var ActionBtnId = new String('CertTraficBiStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var Icon = 'fas fa-eye';
    var IsGap = false;

    CertTraficBiStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertBiRevenueDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertBiRevenueDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "DhmValue" },//0

            { "data": "ReceiptCe" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "ReceiptBi" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "GapAbsoluteReceipt" },//5
            { "data": "GapAbsoluteReceipt" },//6

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var BillingId = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            //{
            //    "targets": 3, "render": function (data, type, row) {
            //        var TaskId = '04';
            //        var SourceId = '11';
            //        var FileTypeId = 'H4';
            //        var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
            //        var SiteId = '--';
            //        var LSId = '--';
            //        var BagContainerId = '--';
            //        var StationNumber = '--';
            //        var LaneName = '---';
            //        var BillingId = '--';
            //        var PdvId = '--';
            //        var BillingId = '--';
            //        var CategoryId = '--';
            //        var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

            //        var Pattern = 'CertTaskAdd';
            //        var RowId = data + ParamId;
            //        var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
            //        var text = '';
            //        var BtnClass = 'dt-btn-cl gc-bc1-cl';
            //        var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
            //        var TextClass = 'dt-text-cl';
            //        return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
            //    }
            //},

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '13';
                    var FileTypeId = 'A2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var BillingId = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGapThresholdGet(row['ReceiptBi'], row['ReceiptCe'], 1, 1); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableBtnGet('CertTrxLaneBiStationSearch', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-txt-cl'); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '13';
                    var FileTypeId = 'A3';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var BillingId = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            { "targets": 9, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertInterfaceDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numFormat(Total0));

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numFormat(Total1));

            //Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numFormat(Total2));

        }
    });
}

function CertBiRevenueLaneGet(ActionBtnId, Icon, Id) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertBiRevenueLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertBiRevenueLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "data": "SiteName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName + '(' + data.StationCeNumber + ')'; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.BillingId + '-' + data.MpName; } },//3
            { "data": "LaneName" },//4

            { "data": "TotalZip" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//6

            { "data": "TotalCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//8

            { "data": "GapAbsolute" },//9
            { "data": "GapAbsolute" },//10

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//11
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//12                    
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center none", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 0, 'NA'); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertInterfaceLane', 'fas fa-eye', '0048ff'); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBi', data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total0));

            Total1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total1));

            Total2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numFormat(Total2));
        }
    });
}

function CertBiRevenueLaneSearch(Id) {
    var ActionBtnId = new String('CertBiRevenueLaneSearchBtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    ParamMessageReset();

    CertBiRevenueLaneGet(ActionBtnId, Icon, Id);
}

function CertBiTraficDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertBiTraficDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "DhmValue" },//0

            { "data": "NumberCe" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "NumberBi" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "GapAbsoluteNumber" },//5
            { "data": "GapAbsoluteNumber" },//6

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center none", "targets": 8 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '57' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '77' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGapThresholdGet(row['NumberBi'], row['NumberCe'], 6, 100); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableBtnGet('CertTraficBiStationSearch', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-txt-cl'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertInterfaceDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numFormat(Total0));

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numFormat(Total1));

            //Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numFormat(Total2));

        }
    });
}

function CertBiTraficLaneGet(ActionBtnId, Icon, Id) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertBiTraficLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertBiTraficLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "data": "SiteName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName + '(' + data.StationCeNumber + ')'; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.BillingId + '-' + data.MpName; } },//3
            { "data": "LaneName" },//4

            { "data": "TotalZip" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//6

            { "data": "TotalCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//8

            { "data": "GapAbsolute" },//9
            { "data": "GapAbsolute" },//10

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//11
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId; } },//12                    
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center none", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 0, 'NA'); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertInterfaceLane', 'fas fa-eye', '0048ff'); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBi', data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total0));

            Total1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total1));

            Total2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numFormat(Total2));
        }
    });
}

function CertBiTraficLaneSearch(Id) {
    var ActionBtnId = new String('CertBiTraficLaneSearchBtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    ParamMessageReset();

    CertBiTraficLaneGet(ActionBtnId, Icon, Id);
}

function CertBiRevenueMonthGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertBiRevenueMonth';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "Year" },//0
            { "data": "Month" },//1

            { "data": "PcRevenue" },//2
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3

            { "data": "BiRevenue" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5

            { "data": "GapAbsolute" },//6
            { "data": "GapAbsolute" },//7

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center none", "targets": 9 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 3, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var BillingId = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '13';
                    var FileTypeId = 'A1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var BillingId = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGapThresholdGet(row['BiRevenue'], row['PcRevenue'], 1, 100); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableBtnGet('CertTrxLaneBiStationSearch', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-txt-cl'); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertInterfaceDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 31,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numFormat(Total0));

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numFormat(Total1));

            //Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numFormat(Total2));

        }
    });
}



function CertRecoDataSearch(FileTypeId, SourceRowId, RowIndex) {
    var ActionBtnId = new String('CertRecoDataSearch' + 'BtnId' + SourceRowId + RowIndex);

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fa fa-check btn-icon-cl gc-c1-cl';
    var Pattern = 'CertRecoData';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);



    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "processing": true,
        "ajax": {
            "url": "/Cert/CertRecoDataSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "FileTypeId": FileTypeId,
                "SourceRowId": SourceRowId
            }
        },
        "columns": [
            { "data": "SourceName" },//0  
            { "data": "FileNameSource" },//1
            { "data": "Type" },//2
            { "data": "MessageType" },//3

            { "data": "RecoTrxLaneRowId" },//4      
            { "data": "RecoTrxLaneRowId" },//5
            { "data": "RecoTrxLaneRowId" },//6

            { "data": "DataLine" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center none", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center none", "targets": 6 },

            { "width": "3%", "className": "text-center none", "targets": 7 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertRecoTrxLaneDownload', data, 'fas fa-download', '0048ff'); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertRecoTrxLaneSourceDownload', data, 'fas fa-download', '0048ff'); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertRecoTrxLaneSend', data, 'fas fa-upload', '0048ff'); } },

            { "targets": 7, "render": function (data, type, row) { return data; } },
        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": false,
        "bPaginate": false,
        "bFilter": false
    });
}

function CertRecoTrxLaneSend(CertRecoTrxLaneId) {
    var ActionBtnId = new String('CertRecoTrxLaneSend' + 'BtnId' + CertRecoTrxLaneId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-download';
    $.ajax({
        url: "/Cert/CertRecoTrxLaneSend",
        method: "POST",
        dataType: "text",
        data: {
            CertRecoTrxLaneId: CertRecoTrxLaneId
        },
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    });
}

function CertRecoTrxLaneDownload(RecoTrxLaneRowId) {
    var ActionBtnId = new String('CertRecoTrxLaneDownload' + 'BtnId' + RecoTrxLaneRowId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-download';
    $.ajax({
        url: "/CertReco/CertRecoTrxLaneDownload",
        method: "POST",
        dataType: "text",
        data: {
            RecoTrxLaneRowId: RecoTrxLaneRowId
        },
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            window.location = '/CertReco/CertRecoTrxLaneDownload?CertRecoTrxLaneId=' + RecoTrxLaneRowId;
        },
        error: function (request, status, error) {
            alert('Vous n\'avez pas les autorisations nécessaires pour effectuer cette action.');
        }
    });
}

function CertRecoTrxLaneSourceDownload(RecoTrxLaneRowId) {
    var ActionBtnId = new String('CertRecoTrxLaneSourceDownload' + 'BtnId' + RecoTrxLaneRowId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-download';
    $.ajax({
        url: "/CertReco/CertRecoTrxLaneSourceDownload",
        method: "POST",
        dataType: "text",
        data: {
            RecoTrxLaneRowId: RecoTrxLaneRowId
        },
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            window.location = '/CertReco/CertRecoTrxLaneSourceDownload?RecoTrxLaneRowId=' + RecoTrxLaneRowId;
        }
    });
}

function CertZipPostSearch(Id) {
    var ActionBtnId = new String('CertZipPostSearchBtnId' + Id);
    var Icon = 'fas fa-search';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'CertRecoPost';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "processing": true,
        "ajax": {
            "url": "/CertZip/CertZipPostSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "Id": Id
            }
        },
        "columns": [
            { "data": "SourceName" },//0
            { "data": "DhmValue" },//1
            { "data": "SiteName" },//2
            { "data": "StationNumber" },//3
            { "data": "LaneName" },//4

            { "data": "RowId" },//5 Download Converted
            { "data": "DataLine" },//6
            { "data": "RowId" },//7 Send
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "0%", "className": "text-center none", "targets": 6 },
            { "width": "3%", "className": "text-center none", "targets": 7 },

            { "targets": 1, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertRecoPostDownload', data, 'fas fa-download', '0048ff'); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertRecoPostSend', data, 'fas fa-upload', '0048ff'); } },
        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": false,
        "bPaginate": false,
        "bFilter": false
    });

}

function CertRecoPostDownload(Id) {
    var ActionBtnId = new String('CertRecoPostDownloadBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-download';
    $.ajax({
        url: "/CertReco/CertRecoPostDownload",
        method: "POST",
        dataType: "text",
        data: {
            Id: Id
        },
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            window.location = '/CertReco/CertRecoPostDownload?Id=' + Id;
        }
    });
}

function CertRecoReceiptDownload(CertRecoReceiptId) {
    var ActionBtnId = new String('CertRecoReceiptDownload' + 'BtnId' + CertRecoReceiptId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-download';
    $.ajax({
        url: "/CertReco/CertRecoReceiptDownload",
        method: "POST",
        dataType: "text",
        data: {
            CertRecoReceiptId: CertRecoReceiptId
        },
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            window.location = '/CertReco/CertRecoReceiptDownload?CertMsgReceiptId=' + CertRecoReceiptId;
        }
    });
}

function CertLaneTrxLaneSearch(CertTrxLaneId) {
    var ActionBtnId = new String('CertLaneTrxLaneSearch' + 'BtnId' + CertTrxLaneId);
    var Url = "/CertLane/CertLaneTrxLaneSearch";
    CertRecoTrxLaneSearch(CertTrxLaneId, ActionBtnId, Url);
}

function CertZipTrxLaneSearch(CertTrxLaneId) {
    var ActionBtnId = new String('CertZipTrxLaneSearch' + 'BtnId' + CertTrxLaneId);
    var Url = "/CertZip/CertZipTrxLaneSearch";
    CertRecoTrxLaneSearch(CertTrxLaneId, ActionBtnId, Url);
}

function CertMsgTrxLaneSearch(CertTrxLaneId) {
    var ActionBtnId = new String('CertMsgTrxLaneSearch' + 'BtnId' + CertTrxLaneId);
    var Url = "/CertMsg/CertMsgTrxLaneSearch";
    CertRecoTrxLaneSearch(CertTrxLaneId, ActionBtnId, Url);
}

function CertMsgPostSearch(CertPostId) {
    var ActionBtnId = new String('CertMsgPostSearch' + 'BtnId' + CertPostId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Icon = 'fas fa-search';
    var Pattern = 'CertMsgPost';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        //"processing": true,
        "ajax": {
            "url": "/CertMsg/CertMsgPostSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "CertPostId": CertPostId
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "data": "StationNumber" }, //1
            { "data": "LaneName" },//2
            { "data": "DhmValue" },//3                     
            { "data": "Receipt", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
            { "data": "CachierNumber" },//5
            { "data": "MessageType" },//6
            { "data": "CertMsgPostId" },//7 Download
            { "data": "DataLine" }//8
        ],
        "columnDefs": [
            { "width": "15%", "className": "text-left", "targets": 0 },
            { "width": "15%", "className": "text-left", "targets": 1 },
            { "width": "25%", "className": "text-center", "targets": 2 },
            { "width": "10%", "className": "text-center", "targets": 3 },
            { "width": "10%", "className": "text-center", "targets": 4 },
            { "width": "10%", "className": "text-right", "targets": 5 },
            { "width": "5%", "className": "text-center", "targets": 6 },
            { "width": "0%", "className": "text-center none", "targets": 7 },

            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertMsgPostDownload', data, 'fas fa-download', '0048ff'); } },
        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": false,
        "bPaginate": false,
        "bFilter": false
    });
}

function CertMsgPostDownload(CertMsgPostId) {
    var ActionBtnId = new String('CertMsgPostDownload' + 'BtnId' + CertMsgPostId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-download';
    $.ajax({
        url: "/CertMsg/CertMsgPostDownload",
        method: "POST",
        dataType: "text",
        data: {
            CertMsgPostId: CertMsgPostId
        },
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            window.location = '/CertMsg/CertMsgPostDownload?CertMsgPostId=' + CertMsgPostId;
        }
    });
}

function CertMsgTransfer(Id) {

    var ActionBtnId = 'CertMsgTransfer' + 'BtnId' + Id;
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-upload';

    var obj = {};
    obj.Id = Id;
    $.ajax({
        url: "/Cert/CertMsgTransfer",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        //dataType: "text",
        async: true,
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        error: function (request, status, error) {
            alert('Le proessus s\'est arrêté');
        }
    });
}

function CertLaneCtrDetailUpload(CertLaneCtrId) {

    var ActionBtnId = 'CertLaneCtrDetailUpload' + 'BtnId' + CertLaneCtrId;
    var Icon = 'fas fa-check';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertLaneCtrId = CertLaneCtrId;
    $.ajax({
        url: "/Cert/CertLaneCtrDetailUpload",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(obj),
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            //var Source = '07';
            //var FileTypeId = 'V2';
            //var DateStringStart = new String(CertLaneCtrId).substr(0, 8);
            //var DateStringEnd = new String(CertLaneCtrId).substr(0, 8);
            //var SiteId = new String(CertLaneCtrId).substr(8, 2);
            //var BagContainerId = '0';
            //var StationNumber = new String(CertLaneCtrId).substr(10, 2);
            //CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber);
        },
        error: function (request, status, error) {
            alert('La mise à jour a échoué');
        }
    });
}

function CertLaneCtrUpload(CertLaneCtrId) {

    var ActionBtnId = 'CertLaneCtrUpload' + 'BtnId' + CertLaneCtrId;
    var Icon = 'fas fa-check';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertLaneCtrId).substr(0, 8);
    var DateStringEnd = new String(CertLaneCtrId).substr(0, 8);

    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var LaneName = '0';
    var FileTypeId = '';

    var Source = '07';

    FileTypeId = '63'; //Contrôle TRX
    CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber, LaneName);

    var FileTypeId = '66'; //Contrôle Cohérence Boj Sans Eoj
    CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber, LaneName);

    FileTypeId = '67'; //Contrôle Cohérence Eoj Sans Rac
    CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber, LaneName);

    FileTypeId = '68'; //Contrôle Cohérence EOJ Double
    CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber, LaneName);



    //$('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    //JsSleep(60000);
    //$('#' + ActionBtnId).find('span').attr('class', Icon);
}


function CertLaneCtrTransfer(CertLaneCtrId) {

    var ActionBtnId = 'CertLaneCtrTransfer' + 'BtnId' + CertLaneCtrId;
    var Icon = 'fas fa-check';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertLaneCtrId = CertLaneCtrId;
    $.ajax({
        url: "/Cert/CertLaneCtrTransfer",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(obj),
        success: function (data) {
            //$('#' + ActionBtnId).find('span').attr('class', Icon);
            //CertLaneCtrUpdate(CertLaneCtrId);
            var Source = '07';
            var FileTypeId = 'V2';
            var DateStringStart = new String(CertLaneCtrId).substr(0, 8);
            var DateStringEnd = new String(CertLaneCtrId).substr(0, 8);
            var SiteId = new String(CertLaneCtrId).substr(8, 2);
            var BagContainerId = '0';
            var StationNumber = new String(CertLaneCtrId).substr(10, 2);
            CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber);
        },
        error: function (request, status, error) {
            alert('Le transfert manuel a échoué');
        }
    });
}

function CertLaneCtrUpdate(CertLaneCtrId) {

    var ActionBtnId = 'CertLaneCtrUpdate' + 'BtnId' + CertLaneCtrId;
    var Icon = 'fas fa-check';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertLaneCtrId = CertLaneCtrId;
    $.ajax({
        url: "/Cert/CertLaneCtrUpdate",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(obj),
        success: function (data) {

            var Source = '07';
            var FileTypeId = 'V2';
            var DateStringStart = new String(CertLaneCtrId).substr(0, 8);
            var DateStringEnd = new String(CertLaneCtrId).substr(0, 8);
            //var SiteId = new String(CertLaneCtrId).substr(8, 2);
            var SiteId = '0';
            var BagContainerId = '0';
            //var StationNumber = new String(CertLaneCtrId).substr(10, 2);
            var StationNumber = '0';
            CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber);
            //$('#' + ActionBtnId).find('span').attr('class', Icon);

        },
        error: function (request, status, error) {
            alert('La mise à jour a échoué');
        }
    });
}

function CertLaneCtrValidate(CertLaneCtrId) {

    var ActionBtnId = 'CertLaneCtrValidate' + 'BtnId' + CertLaneCtrId;
    var Icon = 'fas fa-check';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertLaneCtrId = CertLaneCtrId;
    $.ajax({
        url: "/Cert/CertLaneCtrValidate",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(obj),
        success: function (data) {
            //$('#' + ActionBtnId).find('span').attr('class', Icon);

            var Source = '07';
            var FileTypeId = 'V2';
            var DateStringStart = new String(CertLaneCtrId).substr(0, 8);
            var DateStringEnd = new String(CertLaneCtrId).substr(0, 8);
            var SiteId = new String(CertLaneCtrId).substr(8, 2);
            var BagContainerId = '0';
            var StationNumber = new String(CertLaneCtrId).substr(10, 2);
            CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber);
        },
        error: function (request, status, error) {
            alert('La validation a échoué');
        }
    });
}

function CertLaneCtrGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    var Pattern = 'CertLaneCtr';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertLaneCtrGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "mData": function vehicle(data, type, dataToSet) { return data.StationsOkNumber + ' / ' + data.StationsTotalNumber; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsValidNumber + ' / ' + data.StationsOkNumber; } },//2

            { "data": "AlertNumber" },//3

            { "data": "CertLaneCtrId" },//4
            { "data": "CertLaneCtrId" },//5
            { "data": "CertLaneCtrId" },//6
            { "data": "CertLaneCtrId" },//7
            { "data": "CertLaneCtrId" },//8
        ],
        "columnDefs": [
            { "width": "20%", "className": "text-left", "targets": 0 },

            { "width": "20%", "className": "text-center", "targets": 1 },
            { "width": "20%", "className": "text-center", "targets": 2 },

            { "width": "20%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 1, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr01']); } },
            { "targets": 2, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr02']); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertLaneCtrUpdate', data, 'fas fa-redo-alt', '0048ff'); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertLaneCtrUpload', data, 'fas fa-upload', '0048ff'); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertLaneCtrTransfer', data, 'fas fa-share', '0048ff'); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertLaneCtrValidate', data, 'fas fa-toggle-on', '0048ff'); } },
            //{ "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertLaneCtrStationSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertLaneCtrStationSearch', data, 'CertLaneCtr', 'fas fa-eye', '0048ff'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertLaneCtrRegionGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    var Pattern = 'CertLaneCtrRegion';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertLaneCtrRegionGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "RegionNameShort" },//0
            { "data": "" },//1
            { "mData": function vehicle(data, type, dataToSet) { return (data.StationsTotalNumber - data.StationsOkNumber) + ' / ' + data.StationsTotalNumber; } },//2

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId; } },//7

        ],
        "columnDefs": [
            { "width": "10%", "className": "text-left", "targets": 0 },
            { "width": "20%", "className": "text-left", "targets": 1 },
            { "width": "20%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 2, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['StationsTotalNumber'] - row['StationsOkNumber']); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableGetButton('CertLaneCtrUpdate', data, 'fas fa-redo-alt', '0048ff'); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertLaneCtrUpload', data, 'fas fa-upload', '0048ff'); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertLaneCtrTransfer', data, 'fas fa-share', '0048ff'); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertLaneCtrValidate', data, 'fas fa-toggle-on', '0048ff'); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertLaneCtrStationSearch', data + row['RegionId'], 'CertLaneCtrRegion', 'fas fa-eye', '0048ff'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertLaneCtrDisplay() {
    var ActionBtnId = 'ParamActionBtnId0';
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertLaneCtrGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertLaneCtrRegionDisplay() {
    var ActionBtnId = 'ParamActionBtnId0';
    var RegionId = GetElementValue('RegionId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertLaneCtrRegionGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertLaneCtrStationSearch(Id, TableSource) {

    var ActionBtnId = 'CertLaneCtrStationSearch' + 'BtnId' + Id;
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'CertLaneCtrStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    HideReport('CertFilePlanTableReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertLaneCtrStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: TableSource
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' | ' + data.StationName; } },//1
            //{ "data": "StationName" },//1
            { "data": "" },//2

            { "data": "CertLaneCtrStationId" },//3
            { "data": "CertLaneCtrStationId" },//4
            { "data": "CertLaneCtrStationId" },//5
            { "data": "CertLaneCtrStationId" },//6           
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertCtrFlagBooleanGet(row['IsCtr0'], row['IsCtr1'], row['IsCtr2'], row['IsCtr3']), data); } },

            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableDataWithButtonGet(GetGapBooleanFromDataTable(row['IsCtr0']), DataTableGetButton('CertCtrStationDetailSearch', data + '01' + '06' + '0', 'fas fa-eye', '0048ff')); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableDataWithButtonGet(GetGapBooleanFromDataTable(row['IsCtr1']), DataTableGetButton('CertCtrStationDetailSearch', data + '01' + '06' + '1', 'fas fa-eye', '0048ff')); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableDataWithButtonGet(GetGapBooleanFromDataTable(row['IsCtr2']), DataTableGetButton('CertCtrStationDetailSearch', data + '01' + '06' + '2', 'fas fa-eye', '0048ff')); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableDataWithButtonGet(GetGapBooleanFromDataTable(row['IsCtr3']), DataTableGetButton('CertCtrStationDetailSearch', data + '01' + '06' + '3', 'fas fa-eye', '0048ff')); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertCtrStationDetailSearch(Id) {

    var ActionBtnId = 'CertCtrStationDetailSearch' + 'BtnId' + Id;
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'CertCtrStationDetail';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    //CertAllReportsHide();
    //ShowReport('ParamReportId');
    //ShowReport('CertLaneCtr' + 'TableReportId');
    //ShowReport('CertLaneCtrStation' + 'TableReportId');

    HideReport(PatternTableReportId);
    //HideReport('CertTrxPdvTableReportId');
    //HideReport('BarChartReportId');
    //HideReport('PieChartReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertCtrStationDetailGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "" },//2

            { "data": "CtrName" },//3
            { "data": "" },//4
            { "data": "Object" },//5
            { "data": "Detail" },//6

            {
                "mData": function vehicle(data, type, dataToSet) {
                    return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year +
                        data.SiteId + data.StationNumber + data.PluginId + data.DataId + data.CtrFamilyId + data.CtrId;
                }
            },//7
            {
                "mData": function vehicle(data, type, dataToSet) {
                    return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year +
                        data.SiteId + data.StationNumber + data.PluginId + data.DataId + data.CtrFamilyId + data.CtrId;
                }
            },//8

        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-left", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertCtrDetailGet', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertCtrDetailUpdate', data, 'fas fa-redo-alt', '0048ff'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertLaneTransfer(Id) {

    var ActionBtnId = 'CertLaneTransfer' + 'BtnId' + Id;
    var Icon = 'fas fa-check';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.Id = Id;
    $.ajax({
        url: "/Cert/CertLaneTransfer",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(obj),
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        error: function (request, status, error) {
            alert('Le transfert manuel a échoué');
        }
    });
}

function CertMsgReceiptSearch(CertReceiptId) {

    var ActionBtnId = new String('CertMsgReceiptSearch' + 'BtnId' + CertReceiptId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Icon = 'fas fa-search';
    var Pattern = 'CertRecoReceipt';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "processing": true,
        "ajax": {
            "url": "/CertMsg/CertMsgReceiptSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                "CertReceiptId": CertReceiptId
            }
        },
        "columns": [
            { "data": "SourceName" }, //0
            { "data": "SiteName" }, //1
            { "data": "StationNumber" }, //2
            { "data": "DhmValue" },//3        
            { "data": "BagNumber" },//4
            { "data": "CashierNumber" },//5         
            { "data": "ReceiptD", "render": $.fn.dataTable.render.number(' ', ',', 2) },//6      
            { "data": "CertMsgReceiptId" },//7 Download
            { "data": "DataLine" }//8
        ],
        "columnDefs": [
            { "width": "20%", "className": "text-left", "targets": 0 },//SourceName
            { "width": "20%", "className": "text-left", "targets": 1 }, //SiteName
            { "width": "20%", "className": "text-left", "targets": 2 }, //StationNumber
            { "width": "15%", "className": "text-left", "targets": 3 }, //DhmValue
            { "width": "25%", "className": "text-center", "targets": 4 }, //BagNumber
            { "width": "10%", "className": "text-center", "targets": 5 }, //CashierNumber
            { "width": "10%", "className": "text-center", "targets": 6 },//ReceiptD            
            { "width": "5%", "className": "text-center", "targets": 7 },//CertMsgReceiptDownload
            { "width": "50%", "className": "text-center none", "targets": 8 },//DataLine

            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertRecoReceiptDownload', data, 'fas fa-download', '0048ff'); } },
        ],
        "iDisplayLength": 2,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "---",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "Veuillez patienter",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": false,
        "bPaginate": false,
        "bFilter": false
    });
}

function CertTrxPdvSearch(Id, TableSource) {
    var ActionBtnId = new String('CertTrxPdvSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    CertTrxPdvGet(ActionBtnId, Icon, Id, TableSource);
}

function CertTrxPdvPdvGet(ActionBtnId, Icon, Id, TableSource) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertTrxPdvPdv';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxPdvPdvGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: TableSource
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "data": "SiteName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationNumber; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.PdvId + '-' + data.PdvName; } },//3

            { "data": "TotalPdv" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId + data.SiteId + data.StationNumber; } },//5

            { "data": "TotalCe" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId + data.SiteId + data.StationNumber; } },//7

            { "data": "GapAbsolute" },//8
            { "data": "GapAbsolute" },//9

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId + data.SiteId + data.StationNumber; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.PdvId; } },//11               
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-left", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            //{ "targets": 2, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '10' + 'C1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalPdv'], 0, 'NA'); } },

            {
                "targets": 10, "render": function (data, type, row) {
                    return DataTableBtnGet('CertTrxPdvSearch', data, data + '\', \'CertInterfacePdv', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-text-cl');
                }
            },
            { "targets": 11, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBi', data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numFormat(Total0));

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numFormat(Total1));

            //Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numFormat(Total2));
        }
    });
}

function CertTrxPdvPdvSearch(Id, TableSource) {

    var ActionBtnId = new String('CertTrxPdvPdvSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    CertTrxPdvPdvGet(ActionBtnId, Icon, Id, TableSource)
}

function CertTrxPdvStationGet(ActionBtnId, Icon, Id, IsGap) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertTrxPdvStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxPdvStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//0
            { "data": "SiteName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationNumber; } },//2

            { "data": "TotalPdv" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId + data.SiteId + data.StationNumber; } },//4

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.FlowId + data.FlowCategoryId + data.SiteId + data.StationNumber; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapAbsolute" },//8

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//10                   
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            //{ "targets": 2, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '10' + 'C1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalPdv'], 0, 'NA'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertTrxPdvPdvSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableButtonDeleteGet('TrxLaneBi', data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numFormat(Total0));

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numFormat(Total1));

            //Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numFormat(Total2));
        }
    });
}

function CertTrxPdvStationSearch(Id) {

    var ActionBtnId = new String('CertTrxPdvStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsGap = false;

    CertTrxPdvStationGet(ActionBtnId, Icon, Id, IsGap)
}

function CertTrxPdvDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertTrxPdvDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "Year" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsOkNumber + ' / ' + data.StationsTotalNumber; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "TotalPdv" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapAbsolute" },//8

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr01']); } },

            {
                "targets": 2, "render": function (data, type, row) {
                    return DataTableBtnGet('CertDayGapGet', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-info-circle btn-icon-cl cg-c-cl', '');
                }
            },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '09' + '90' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'P1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalPdv'], 6, 10000); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertTrxPdvStationSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertTrxPdvDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": true,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numFormat(Total0));

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total1));

            Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total2));

        }
    });
}

function CertPdvBillingGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    HideReport(PatternTableReportId);

    var Pattern = 'CertPdvBilling';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertPdvBillingGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: TableSource,
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "PdvId" },//1
            { "data": "" },//2 DhmValue

            { "data": "BagNumber" },//3
            { "data": "PaymentModeNameCe" },//4

            { "data": "Receipt" },//5

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertPdvReceiptSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableButtonDeleteGet('CertPdvReceipt', data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total1));
        }
    });
}

function CertPdvBillingSearch(Id, Pattern) {
    var ActionBtnId = 'CertPdvBillingSearchBtnId' + Id;
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';

    CertPdvBillingGet(ActionBtnId, Icon, Id, Pattern);
}

function CertPdvBillingDisplay() {
    //var ActionBtnId = 'ParamActionBtnId';
    //var SiteId = GetElementValue('SiteId');
    //var BagContainerId = GetElementValue('BagContainerId');
    //var StationNumber = GetElementValue('StationNumberId');
    //var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    //var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    //var Icon = 'fas fa-eye';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertPdvBillingGet(ActionBtnId, Icon, Id, Pattern);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertPdvCtrUpdate(CertPdvCtrId) {

    var ActionBtnId = 'CertPdvCtrUpdate' + 'BtnId' + CertPdvCtrId;
    var Icon = 'fas fa-check';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertPdvCtrId = CertPdvCtrId;
    $.ajax({
        url: "/Cert/CertPdvCtrUpdate",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(obj),
        success: function (data) {

            var Source = '07';
            var FileTypeId = 'P2';
            var DateStringStart = new String(CertPdvCtrId).substr(0, 8);
            var DateStringEnd = new String(CertPdvCtrId).substr(0, 8);
            var SiteId = '0';
            var BagContainerId = '0';
            var StationNumber = '0';
            CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber);
            //$('#' + ActionBtnId).find('span').attr('class', Icon);

        },
        error: function (request, status, error) {
            alert('La mise à jour a échoué');
        }
    });
}

function CertPdvCtrValidate(CertPdvCtrId) {

    var ActionBtnId = 'CertPdvCtrValidate' + 'BtnId' + CertPdvCtrId;
    var Icon = 'fas fa-check';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertPdvCtrId = CertPdvCtrId;
    $.ajax({
        url: "/Cert/CertPdvCtrValidate",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(obj),
        success: function (data) {
            var Source = '07';
            var FileTypeId = 'P2';
            var DateStringStart = new String(CertPdvCtrId).substr(0, 8);
            var DateStringEnd = new String(CertPdvCtrId).substr(0, 8);
            var SiteId = '0';
            var BagContainerId = '0';
            var StationNumber = '0';
            CertFileUpload(ActionBtnId, Icon, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, BagContainerId, StationNumber);
        },
        error: function (request, status, error) {
            alert('La validation a échoué');
        }
    });
}

function CertPdvCtrGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    var Pattern = 'CertPdvCtr';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertPdvCtrGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "mData": function vehicle(data, type, dataToSet) { return data.StationsOkNumber + ' / ' + data.StationsTotalNumber; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsValidNumber + ' / ' + data.StationsOkNumber; } },//2

            { "data": "AlertNumber" },//3

            { "data": "CertPdvCtrId" },//4
            { "data": "CertPdvCtrId" },//5
            { "data": "CertPdvCtrId" },//6
            { "data": "CertPdvCtrId" },//7
            { "data": "CertPdvCtrId" },//8
        ],
        "columnDefs": [
            { "width": "20%", "className": "text-left", "targets": 0 },

            { "width": "20%", "className": "text-center", "targets": 1 },
            { "width": "20%", "className": "text-center", "targets": 2 },

            { "width": "20%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center none", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 1, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr01']); } },
            { "targets": 2, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr02']); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertPdvCtrUpdate', data, 'fas fa-redo-alt', '0048ff'); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertPdvCtrUpload', data, 'fas fa-upload', '0048ff'); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertPdvCtrTransfer', data, 'fas fa-share', '0048ff'); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertPdvCtrValidate', data, 'fas fa-toggle-on', '0048ff'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertPdvCtrStationSearch', data, 'fas fa-eye', '0048ff'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertPdvCtrDisplay() {
    var ActionBtnId = 'ParamActionBtnId0';
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    if (DateStringStart != '' && DateStringEnd != '') {
        CertPdvCtrGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertPdvCtrStationSearch(Id) {

    var ActionBtnId = 'CertPdvCtrStationSearch' + 'BtnId' + Id;
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'CertPdvCtrStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    //HideReport('CertTrxPdvTableReportId');
    //HideReport('BarChartReportId');
    //HideReport('PieChartReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertPdvCtrStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "" },//2

            { "data": "CertPdvCtrStationId" },//3
            { "data": "CertPdvCtrStationId" },//4        
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableDataWithButtonGet(GetGapBooleanFromDataTable(row['IsCtr0']), DataTableGetButton('CertCtrStationDetailSearch', data + '02' + '06' + '2', 'fas fa-eye', '0048ff')); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableDataWithButtonGet(GetGapBooleanFromDataTable(row['IsCtr1']), DataTableGetButton('CertCtrStationDetailSearch', data + '02' + '06' + '3', 'fas fa-eye', '0048ff')); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertTrxPdvCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport("CertTrxPdvCexTableReportId");
    HideReport("CertTrxPdvStationTableReportId");
    HideReport("CertTrxPdvTableReportId");
    //HideReport('BarChartReportId');
    //HideReport('PieChartReportId');
    ParamMessageReset();

    $('#CertTrxPdvCexTableId').DataTable().destroy();
    $("#CertTrxPdvCexTableId").DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertTrxPdvCexTableReportId");
            //var labels = GetColumnArray('CertReceiptCexTableId', 0);
            //var data1 = GetColumnArray('CertReceiptCexTableId', 3);
            //var data2 = GetColumnArray('CertReceiptCexTableId', 4);
            //var backgroundColor = GetBackgroundColor('CertReceiptCexTableId');
            //DisplayChartBar(labels, data1, data2, "OPE", "CE");
            //DisplayChartDoughnut(labels, backgroundColor, data1)
        },
        "ajax": {
            "url": "/Cert/CertTrxPdvCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "DhmValue" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsHandledNumber + "/" + data.StationsNumber; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.PdvsHandledNumber + "/" + data.PdvsNumber; } },//3
            { "data": "TrxPdv", "render": $.fn.dataTable.render.number(' ', ',', 0) },//4
            { "data": "TrxCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//5
            { "data": "TrxGap" },//5
            { "data": "CertTrxPdvCexValidateId" },//7 Validate
            { "data": "CertTrxPdvCexValidateId" },//8 Search
            { "data": "DhmModification" },//9
            { "data": "FullName" },//10
            { "data": "IpNumber" },//11
            { "data": "PhoneNumber" }//12
        ],
        "columnDefs": [
            { "width": "10%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "15%", "className": "text-center", "targets": 1 },//DhmValue
            { "width": "10%", "className": "text-center", "targets": 2 },//StationsHandledNumber 
            { "width": "10%", "className": "text-center", "targets": 3 },//PdvsHandledNumber
            { "width": "10%", "className": "text-right", "targets": 4 },//TrxOpe
            { "width": "10%", "className": "text-right", "targets": 5 },//TrxCe
            { "width": "10%", "className": "text-right", "targets": 6 },//TrxGap
            { "width": "10%", "className": "text-center", "targets": 7 },//Validate
            { "width": "10%", "className": "text-center", "targets": 8 },//Search
            { "width": "0%", "className": "text-center none", "targets": 9 },//DhmModification
            { "width": "0%", "className": "text-center none", "targets": 10 },//FullName
            { "width": "0%", "className": "text-center none", "targets": 11 },//IpNumber
            { "width": "0%", "className": "text-center none", "targets": 12 },//PhoneNumber

            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data) } },
            { "targets": 9, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data) } },

            { "targets": 2, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['StationsGap']); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['PdvsGap']); } },

            { "targets": 6, "render": function (data, type, row) { return GetGapNumberFromDataTable(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGetButtonValidateBlock(data, row['TrxGap'], row['IsValid'], 'CertTrxPdvCex'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertTrxPdvStationSearch', data, 'fas fa-cube', '0048ff'); } }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DoubleTotal1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            DoubleTotal2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            DoubleTotal3 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(4).footer()).html(numShortFormat(DoubleTotal1));
            $(api.column(5).footer()).html(numShortFormat(DoubleTotal2));
            $(api.column(6).footer()).html(numShortFormat(DoubleTotal3));

            if (DoubleTotal3 !== 0)
                $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numShortFormat(DoubleTotal3) + '</span>');
            else $(api.column(6).footer()).html('<span  class="badge badge-success">' + numShortFormat(DoubleTotal3) + '</span>');
        }
    });
}

function CertTrxPdvCexDisplay() {
    var ActionBtnId = 'ActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        CertTrxPdvCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertCheckGet(ActionBtnId, SiteId, BagContainerId, StationId, StationNumber, DateStringStart, DateStringEnd, Icon) {

    HideReport("CertCheckTableReportId");
    //HideReport('BarChartReportId');
    //HideReport('PieChartReportId');

    //alert(ActionBtnId);
    //alert(SiteId);
    //alert(BagContainerId);
    //alert(StationId);
    //alert(StationNumber);
    //alert(DateStringStart);
    //alert(DateStringEnd);
    //alert(Icon);


    ParamMessageReset();

    $('#CertCheckTableId').DataTable().destroy();
    $('#CertCheckTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertCheckTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertCheckGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationId": StationId,
                "StationNumber": StationNumber,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" }, //0  
            { "data": "StationNumber" }, //1  
            { "data": "PdvName" }, //2
            { "data": "DhmValue" },//3
            { "data": "BankName" },//4
            { "data": "CheckNumber" },//5
            { "data": "Client" },//6
            { "data": "Receipt", "render": $.fn.dataTable.render.number(' ', ',', 2) },//7
            { "data": "CertCheckId" },//8 BillNumber
            { "data": "CheckState" },//9
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-center", "targets": 0 },//SiteName
            { "width": "5%", "className": "text-center", "targets": 1 },//StationNumber
            { "width": "10%", "className": "text-center", "targets": 2 },//PdvName
            { "width": "10%", "className": "text-center", "targets": 3 },//DhmValue
            { "width": "15%", "className": "text-left", "targets": 4 },//BankName
            { "width": "10%", "className": "text-center", "targets": 5 },//CertCheckId
            { "width": "0%", "className": "text-left none", "targets": 6 },//Client

            { "width": "10%", "className": "text-right", "targets": 7 },//Receipt
            { "width": "10%", "className": "text-center", "targets": 8 },//BillNumber
            { "width": "10%", "className": "text-left", "targets": 9 },//CheckState

            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 9, "render": function (data, type, row) { return GetGapStringFromDataTable(data, 'NON REMIS'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DoubleTotal1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(7).footer()).html(numFormat(DoubleTotal1));
        }
    });
}

function CertCheckDisplay() {

    $("#ActionBtnId").find('span').attr('class', 'fa fa-spinner fa-spin');

    var ActionBtnId = 'ActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationId = GetElementValue('StationId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var StationNumber = '0';
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        BagContainerId != null && BagContainerId != '' &&
        StationId != null && StationId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {

        CertCheckGet(ActionBtnId, SiteId, BagContainerId, StationId, StationNumber, DateStringStart, DateStringEnd, Icon);
    }
    else {
        ParamMessageError();
    };
}

function CertCheckStationGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertCheckStationTableReportId');
    HideReport('CertCheckTableReportId');
    HideReport('CertFilePlan' + 'TableReportId');
    ParamMessageReset();

    $('#CertCheckStationTableId').DataTable().destroy();
    $('#CertCheckStationTableId').DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertCheckStationTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertCheckStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "StationName" },//2

            { "data": "" },//3

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//4
            { "data": "ReceiptNonRemis" },//5
            { "data": "NumberNonRemis" },//6

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//8
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-center none", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "targets": 3, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableFormatDoubleNullAlertGet(row['Receipt']), DataTableGetButton('CertFileUpdateAdd', '07' + '76' + data, 'fas fa-redo-alt', '9c9c9c')); } },
            { "targets": 5, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },
            { "targets": 6, "render": function (data, type, row) { return GetGapNumberFromDataTable(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertCheckSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableButtonDeleteGet('Check', data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            //var api = this.api(), data;
            //var intVal = function (i) {
            //    return typeof i === 'string' ?
            //        i.replace(/[\$,]/g, '') * 1 :
            //        typeof i === 'number' ?
            //            i : 0;
            //};

            //DoubleTotal1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //DoubleTotal2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(3).footer()).html(numFormat(DoubleTotal1));
            //$(api.column(4).footer()).html(numFormat(DoubleTotal2));
            //$(api.column(5).footer()).html(numShortFormat(IntTotal1));

            //if (DoubleTotal2 !== 0)
            //    $(api.column(4).footer()).html('<span  class="badge badge-danger">' + numFormat(DoubleTotal2) + '</span>');
            //else $(api.column(4).footer()).html('<span  class="badge badge-success">' + numFormat(DoubleTotal2) + '</span>');

            //if (IntTotal1 !== 0)
            //    $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numShortFormat(IntTotal1) + '</span>');
            //else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numShortFormat(IntTotal1) + '</span>');

        }
    });
}

function CertCheckStationDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        BagContainerId != null && BagContainerId != '' &&
        StationNumber != null && StationNumber != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {

        CertCheckStationGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon)
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertCheckSearch(CertCheckStationValidateId) {

    var ActionBtnId = new String('CertCheckSearchBtnId' + CertCheckStationValidateId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertCheckStationValidateId).substr(0, 8);
    var DateStringEnd = new String(CertCheckStationValidateId).substr(0, 8);
    var SiteId = new String(CertCheckStationValidateId).substr(8, 2);
    var BagContainerId = '0';
    var StationId = '0';
    var StationNumber = new String(CertCheckStationValidateId).substr(10, 2);
    var Icon = 'fas fa-eye';
    CertCheckGet(ActionBtnId, SiteId, BagContainerId, StationId, StationNumber, DateStringStart, DateStringEnd, Icon);

}

function CertCheckStationValidate(CertCheckStationValidateId) {
    $('#CertCheckStationValidateBtnId' + CertCheckStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertCheckStationValidateId = CertCheckStationValidateId;

    $.ajax({
        url: "/Cert/CertCheckStationValidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertCheckStationValidateBtnId' + CertCheckStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
            $('#CertCheckStationValidateBtnId' + CertCheckStationValidateId).find('span').attr('style', 'color:#28a745');
            $('#CertCheckStationValidateBtnId' + CertCheckStationValidateId).attr('onclick', 'CertCheckStationUnvalidate(\'' + CertCheckStationValidateId + '\')');
            $('#CertCheckStationValidateBtnId' + CertCheckStationValidateId).attr('id', 'CertCheckStationUnvalidateBtnId' + CertCheckStationValidateId);
        }
    });

}

function CertCheckStationUnvalidate(CertCheckStationValidateId) {
    $('#CertCheckStationUnvalidateBtnId' + CertCheckStationValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.CertCheckStationValidateId = CertCheckStationValidateId;

    $.ajax({
        url: "/Cert/CertCheckStationUnvalidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertCheckStationUnvalidateBtnId' + CertCheckStationValidateId).find('span').attr('class', 'fas fa-clock');
            $('#CertCheckStationUnvalidateBtnId' + CertCheckStationValidateId).find('span').attr('style', 'color:#a3a3a3');
            $('#CertCheckStationUnvalidateBtnId' + CertCheckStationValidateId).attr('onclick', 'CertCheckStationValidate(\'' + CertCheckStationValidateId + '\')');
            $('#CertCheckStationUnvalidateBtnId' + CertCheckStationValidateId).attr('id', 'CertCheckStationValidateBtnId' + CertCheckStationValidateId);
        },
        error: function (request, status, error) {
            alert('Veuiller contacter votre administrateur pour dévalider votre journée.');
            $('#CertCheckStationUnvalidateBtnId' + CertReceiptStationValidateId).find('span').attr('class', 'fas fa-unlock-alt');
        }
    });

}

function CertCheckCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport("CertCheckCexTableReportId");
    HideReport("CertCheckStationTableReportId");
    HideReport("CertCheckTableReportId");
    //HideReport('BarChartReportId');
    //HideReport('PieChartReportId');
    ParamMessageReset();

    $('#CertCheckCexTableId').DataTable().destroy();
    $("#CertCheckCexTableId").DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertCheckCexTableReportId");
            //var labels = GetColumnArray('CertReceiptCexTableId', 0);
            //var data1 = GetColumnArray('CertReceiptCexTableId', 3);
            //var data2 = GetColumnArray('CertReceiptCexTableId', 4);
            //var backgroundColor = GetBackgroundColor('CertReceiptCexTableId');
            //DisplayChartBar(labels, data1, data2, "OPE", "CE");
            //DisplayChartDoughnut(labels, backgroundColor, data1)
        },
        "ajax": {
            "url": "/Cert/CertCheckCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "DhmValue" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsHandledNumber + "/" + data.PdvsNumber; } },//2
            { "data": "Receipt", "render": $.fn.dataTable.render.number(' ', ',', 2) },//3
            { "data": "ReceiptNonRemis" },//4
            { "data": "NumberNonRemis" },//5
            { "data": "CertCheckCexValidateId" },//6 Validate
            { "data": "CertCheckCexValidateId" },//7 Search
            { "data": "DhmModification" },//8
            { "data": "FullName" },//9
            { "data": "IpNumber" },//10
            { "data": "PhoneNumber" }//11
        ],
        "columnDefs": [
            { "width": "10%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "15%", "className": "text-center", "targets": 1 },//DhmValue

            { "width": "10%", "className": "text-center", "targets": 2 },//StationHandledNumber 

            { "width": "10%", "className": "text-right", "targets": 3 },//Receipt
            { "width": "10%", "className": "text-right", "targets": 4 },//ReceiptNonRemis
            { "width": "10%", "className": "text-center", "targets": 5 },//NumberNonRemis
            { "width": "10%", "className": "text-center", "targets": 6 },//Validate
            { "width": "10%", "className": "text-center", "targets": 7 },//Search
            { "width": "0%", "className": "text-center none", "targets": 8 },//DhmModification
            { "width": "0%", "className": "text-center none", "targets": 9 },//FullName
            { "width": "0%", "className": "text-center none", "targets": 10 },//IpNumber
            { "width": "0%", "className": "text-center none", "targets": 11 },//PhoneNumber

            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data) } },
            { "targets": 8, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data) } },

            { "targets": 2, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['StationsGap']); } },

            { "targets": 4, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },
            { "targets": 5, "render": function (data, type, row) { return GetGapNumberFromDataTable(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGetButtonValidateBlockThree(data, row['StationsGap'], row['NumberNonRemis'], 0, row['IsValid'], 'CertCheckCex'); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertCheckStationSearch', data, 'fas fa-cube', '0048ff'); } }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DoubleTotal1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            DoubleTotal2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            IntTotal1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(3).footer()).html(numFormat(DoubleTotal1));
            $(api.column(4).footer()).html(numFormat(DoubleTotal2));
            $(api.column(5).footer()).html(numShortFormat(IntTotal1));

            if (DoubleTotal2 !== 0)
                $(api.column(4).footer()).html('<span  class="badge badge-danger">' + numFormat(DoubleTotal2) + '</span>');
            else $(api.column(4).footer()).html('<span  class="badge badge-success">' + numFormat(DoubleTotal2) + '</span>');

            if (IntTotal1 !== 0)
                $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numShortFormat(IntTotal1) + '</span>');
            else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numShortFormat(IntTotal1) + '</span>');
        }
    });
}

function CertCheckCexDisplay() {
    var ActionBtnId = 'ActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        CertCheckCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertCheckStationSearch(CertCheckCexValidateId) {

    var ActionBtnId = new String('CertTrxLaneStationSearchBtnId' + CertCheckCexValidateId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertCheckCexValidateId).substr(0, 8);
    var DateStringEnd = new String(CertCheckCexValidateId).substr(0, 8);
    var SiteId = new String(CertCheckCexValidateId).substr(8, 2);
    var StationId = '0';
    var BagContainerId = '0';
    var Icon = 'fas fa-cube';
    var IsGap = false;
    CertCheckStationGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon, IsGap);
}

function CertPdvReceiptStationDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        BagContainerId != null && BagContainerId != '' &&
        StationNumber != null && StationNumber != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {

        CertPdvReceiptStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd)
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertPdvReceiptStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    //HideReport('CertCheckStationTableReportId');
    //HideReport('CertCheckTableReportId');
    //HideReport('CertFilePlan' + 'TableReportId');
    ParamMessageReset();

    HideReport(PatternTableReportId);

    var Pattern = 'CertPdvReceiptStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertPdvReceiptStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationNumber" },//1
            { "data": "" },//2

            { "data": "ReceiptCheck" },//4
            { "data": "ReceiptVgt" },//4
            { "data": "ReceiptCmi" },//5
            { "data": "ReceiptCash" },//6

            { "data": "ReceiptCard" },//7
            { "data": "ReceiptTeleps" },//8
            { "data": "ReceiptTelepr" },//9

            { "data": "ReceiptCdpt" },//10
            { "data": "ReceiptCdps" },//11
            { "data": "ReceiptCdpr" },//12
            { "data": "ReceiptCdat" },//13
            { "data": "ReceiptCdas" },//14
            { "data": "ReceiptCdar" },//15

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//16 
            { "data": "ReceiptDecl" },//17
            { "data": "ReceiptVerse" },//18

            { "data": "PostiveGap" },//19
            { "data": "NegativeGapNotJustified" },//20
            { "data": "NegativeGapJustified" },//21

            { "data": "Ctr01" },//22
            { "data": "Ctr02" },//23
            { "data": "Ctr03" },//24

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//26
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-right none", "targets": 7 },
            { "width": "3%", "className": "text-right none", "targets": 8 },
            { "width": "3%", "className": "text-right none", "targets": 9 },

            { "width": "3%", "className": "text-right none", "targets": 10 },
            { "width": "3%", "className": "text-right none", "targets": 11 },
            { "width": "3%", "className": "text-right none", "targets": 12 },
            { "width": "3%", "className": "text-right none", "targets": 13 },
            { "width": "3%", "className": "text-right none", "targets": 14 },
            { "width": "3%", "className": "text-right none", "targets": 15 },

            { "width": "3%", "className": "text-right", "targets": 16 },
            { "width": "3%", "className": "text-right", "targets": 17 },
            { "width": "3%", "className": "text-right", "targets": 18 },

            { "width": "3%", "className": "text-right none", "targets": 19 },
            { "width": "3%", "className": "text-right none", "targets": 20 },
            { "width": "3%", "className": "text-right none", "targets": 21 },

            { "width": "3%", "className": "text-center", "targets": 22 },
            { "width": "3%", "className": "text-center", "targets": 23 },
            { "width": "3%", "className": "text-center", "targets": 24 },

            { "width": "3%", "className": "text-center", "targets": 25 },
            { "width": "3%", "className": "text-center", "targets": 26 },

            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 16, "render": function (data, type, row) { return DataTableDataWithButtonGet(DataTableFormatDoubleNullAlertGet(row['ReceiptTheo']), DataTableGetButton('CertFileUpdateAdd', '07' + 'P0' + data, 'fas fa-redo-alt', '9c9c9c')); } },
            { "targets": 17, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },

            { "targets": 22, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data) } },
            { "targets": 23, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data) } },
            { "targets": 24, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data) } },

            { "targets": 25, "render": function (data, type, row) { return DataTableGetButton('CertPdvReceiptSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 26, "render": function (data, type, row) { return DataTableButtonDeleteGet('CertPdvReceipt', data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            //var api = this.api(), data;
            //var intVal = function (i) {
            //    return typeof i === 'string' ?
            //        i.replace(/[\$,]/g, '') * 1 :
            //        typeof i === 'number' ?
            //            i : 0;
            //};

            //DoubleTotal1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //DoubleTotal2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //IntTotal1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //$(api.column(3).footer()).html(numFormat(DoubleTotal1));
            //$(api.column(4).footer()).html(numFormat(DoubleTotal2));
            //$(api.column(5).footer()).html(numShortFormat(IntTotal1));

            //if (DoubleTotal2 !== 0)
            //    $(api.column(4).footer()).html('<span  class="badge badge-danger">' + numFormat(DoubleTotal2) + '</span>');
            //else $(api.column(4).footer()).html('<span  class="badge badge-success">' + numFormat(DoubleTotal2) + '</span>');

            //if (IntTotal1 !== 0)
            //    $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numShortFormat(IntTotal1) + '</span>');
            //else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numShortFormat(IntTotal1) + '</span>');

        }
    });
}

function CertPdvReceiptGet(ActionBtnId, Icon, Id, TableSource) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    HideReport(PatternTableReportId);

    var Pattern = 'CertPdvReceipt';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertPdvReceiptGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: TableSource
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "PdvId" },//2            

            { "data": "ReceiptCheck" },//3
            { "data": "ReceiptVgt" },//4
            { "data": "ReceiptCmi" },//5
            { "data": "ReceiptCash" },//6

            { "data": "ReceiptCard" },//7
            { "data": "ReceiptTeleps" },//8
            { "data": "ReceiptTelepr" },//9

            { "data": "ReceiptCdpt" },//10
            { "data": "ReceiptCdps" },//11
            { "data": "ReceiptCdpr" },//12
            { "data": "ReceiptCdat" },//13
            { "data": "ReceiptCdas" },//14
            { "data": "ReceiptCdar" },//15

            { "data": "ReceiptTheo" },//16
            { "data": "ReceiptDecl" },//17
            { "data": "ReceiptVerse" },//18

            { "data": "PostiveGap" },//19
            { "data": "NegativeGapNotJustified" },//20
            { "data": "NegativeGapJustified" },//21

            { "data": "Ctr01" },//22
            { "data": "Ctr02" },//23
            { "data": "Ctr03" },//24

            { "mData": function vehicle(data, type, dataToSet) { return data.CertPdvReceiptId; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.PdvId; } },//26
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//28
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//28
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center none", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },
            { "width": "3%", "className": "text-center none", "targets": 12 },
            { "width": "3%", "className": "text-center none", "targets": 13 },
            { "width": "3%", "className": "text-center none", "targets": 14 },
            { "width": "3%", "className": "text-center", "targets": 15 },

            { "width": "3%", "className": "text-center", "targets": 16 },
            { "width": "3%", "className": "text-center", "targets": 17 },
            { "width": "3%", "className": "text-center", "targets": 18 },

            { "width": "3%", "className": "text-center", "targets": 19 },
            { "width": "3%", "className": "text-center", "targets": 20 },
            { "width": "3%", "className": "text-center", "targets": 21 },

            { "width": "3%", "className": "text-center none", "targets": 22 },
            { "width": "3%", "className": "text-center none", "targets": 23 },
            { "width": "3%", "className": "text-center none", "targets": 24 },

            { "width": "3%", "className": "text-center", "targets": 25 },
            { "width": "3%", "className": "text-center", "targets": 26 },
            { "width": "3%", "className": "text-center", "targets": 27 },
            { "width": "3%", "className": "text-center", "targets": 28 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 16, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 17, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 22, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data) } },
            { "targets": 23, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data) } },
            { "targets": 24, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data) } },

            { "targets": 25, "render": function (data, type, row) { return DataTableGetButton('CertPdvGapsSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 26, "render": function (data, type, row) { return DataTableGetButton('CertPdvTrxSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 27, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'P0' + data, 'fas fa-redo-alt', '9c9c9c'); } },
            { "targets": 28, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'P4' + data, 'fas fa-redo-alt', '9c9c9c'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numFormat(Total1));

            Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total2));

            Total3 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total3));

            Total4 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numFormat(Total4));

            Total5 = api.column(16).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(16).footer()).html(numFormat(Total5));





            Total6 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total6));

            Total7 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numFormat(Total7));

            Total8 = api.column(15).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(15).footer()).html(numFormat(Total8));

            Total9 = api.column(17).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(17).footer()).html(numFormat(Total9));

            Total10 = api.column(18).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(18).footer()).html(numFormat(Total10));
        }
    });
}

function CertPdvReceiptSearch(Id, TableSource) {
    var ActionBtnId = new String('CertPdvReceiptSearchBtnId' + Id);
    var Icon = 'fas fa-eye';

    CertPdvReceiptGet(ActionBtnId, Icon, Id, TableSource);
}

function CertPdvGapsGet(ActionBtnId, Icon, Id) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    ParamMessageReset();

    HideReport(PatternTableReportId);

    var Pattern = 'CertPdvGaps';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertPdvGapsGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "SiteName" },//1
            { "data": "StationName" },//2 
            { "data": "PdvName" },//3            

            { "data": "CertPdvReceiptId" },//4
            { "data": "TypeId" },//5
            { "data": "PaymentModeName" },//6

            { "data": "Amount" },//7
            { "data": "AmountPostive" },//8
            { "data": "AmountToDeduct" },//9
            { "data": "AmountNegativeJustified" },//10
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },


            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };



            Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total2));

            Total3 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total3));

            Total4 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numFormat(Total4));

            Total5 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(10).footer()).html(numFormat(Total5));

        }
    });
}

function CertPdvGapsSearch(Id) {
    var ActionBtnId = new String('CertPdvGapsSearchBtnId' + Id);
    var Icon = 'fas fa-eye';

    CertPdvGapsGet(ActionBtnId, Icon, Id);
}

function CertPdvVersGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertPdvVersTableReportId');

    var Pattern = 'CertPdvVers';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertPdvVersGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationNumber": StationNumber,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "SiteName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName + ' (' + data.StationCeNumber + ')'; } },//2

            { "data": "Receipt" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//4

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.BagContainerId; } },//6

        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center none", "targets": 6 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '78' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableBtnGet('CertPdvReceiptSearch', data, data + '\', \'CertPdvVers', '', 'dt-btn-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', 'dt-txt-cl'); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertVersDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "iDisplayLength": 10,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {

            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numFormat(Total1));

            //Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(6).footer()).html(numFormat(Total2));

            //Total3 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numFormat(Total3));
        }
    });
}


function CertPdvVersSearch(Id) {
    var ActionBtnId = new String('CertPdvVersSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var Icon = 'fas fa-eye';

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);

    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);

    if (new String(Id).length = 16) {
        SiteId = new String(Id).substr(12, 2);
        StationNumber = new String(Id).substr(14, 2);
    }



    CertPdvVersGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
}

function CertCtrDetailGet(Id) {
    var ActionBtnId = 'CertCtrDetailGet' + 'BtnId' + Id;
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateString = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var StationNumber = new String(Id).substr(10, 2);
    var PluginId = new String(Id).substr(12, 2);
    var DataId = new String(Id).substr(14, 2);
    var CtrFamilyId = new String(Id).substr(16, 1);
    var CtrId = new String(Id).substr(17, 2);

    var BagContainerId = '0';
    var DateStringStart = DateString;
    var DateStringEnd = DateString;

    if (PluginId == '01')//Lane
    {
        if (DataId == '06')//Certification
        {
            if (CtrFamilyId == '1')//Recyclage
            {
                if (CtrId == '01')//EOJ
                {
                    CertPostStationGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, '99', Icon);
                }
            }
            if (CtrFamilyId == '2')//Cohérence
            {
                if (CtrId == '00')//BOJ_SANS_EOJ
                {
                    CertCtrCohBojSansEojGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon)
                }
                if (CtrId == '01')//EOJ_SANS_RAC
                {
                    CertCtrCohEojSansRacGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
                }
                if (CtrId == '02' || CtrId == '03')//EOJ_DOUBLE - 2EOJ_MEME_BOJ
                {
                    CertCtrCohEojDoubleGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
                    CertNrSiteGet(ActionBtnId, Icon, SiteId, '0', DateStringStart, DateStringEnd);
                }
            }
            if (CtrFamilyId == '3')//Exhaustivté
            {
                if (CtrId == '00')//CTL_EXHAUSTIVITE_TRX
                {
                    CertCtrTrxStationGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, '99', Icon);
                }
            }
        }
        else {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    }
    else {
        if (PluginId == '02')//Pdv
        {

        }
        else {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    }
}

function CertCtrDetailUpdate(Id) {
    var ActionBtnId = 'CertCtrDetailUpdate' + 'BtnId' + Id;
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateString = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var StationNumber = new String(Id).substr(10, 2);
    var LaneName = '0';
    var PluginId = new String(Id).substr(12, 2);
    var DataId = new String(Id).substr(14, 2);
    var CtrFamilyId = new String(Id).substr(16, 1);
    var CtrId = new String(Id).substr(17, 2);

    var BagContainerId = '0';
    var DateStringStart = DateString;
    var DateStringEnd = DateString;
    var FileTypeId = '';
    var Source = '0';
    var TaskId = '00';
    var LSId = '0';

    if (PluginId == '01')//Lane
    {
        if (DataId == '06')//Certification
        {
            if (CtrFamilyId == '1')//Recyclage
            {
                if (CtrId == '01')//EOJ
                {

                }
            }
            if (CtrFamilyId == '2')//Cohérence
            {
                if (CtrId == '00')//BOJ_SANS_EOJ
                {
                    Source = '07';
                    FileTypeId = '66';
                    SiteId = '0';
                    BagContainerId = '0';
                    StationNumber = '0';
                    CertFileUpload(ActionBtnId, Icon, TaskId, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, LSId, BagContainerId, StationNumber, LaneName);
                }
                if (CtrId == '01')//EOJ_SANS_RAC
                {
                    Source = '07';
                    FileTypeId = '67';
                    SiteId = '0';
                    BagContainerId = '0';
                    StationNumber = '0';
                    CertFileUpload(ActionBtnId, Icon, TaskId, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, LSId, BagContainerId, StationNumber, LaneName);
                }
                if (CtrId == '02' || CtrId == '03')//EOJ_DOUBLE - 2EOJ_MEME_BOJ
                {
                    Source = '07';
                    FileTypeId = '68';
                    SiteId = '0';
                    BagContainerId = '0';
                    StationNumber = '0';
                    CertFileUpload(ActionBtnId, Icon, TaskId, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, LSId, BagContainerId, StationNumber, LaneName);
                }
            }
            if (CtrFamilyId == '3')//Exhaustivté
            {
                if (CtrId == '00')//CTL_EXHAUSTIVITE_TRX
                {
                    Source = '07';
                    FileTypeId = '63';
                    CertFileUpload(ActionBtnId, Icon, TaskId, Source, FileTypeId, DateStringStart, DateStringEnd, SiteId, LSId, BagContainerId, StationNumber, LaneName);
                }
            }
        }
        else {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    }
    else {
        if (PluginId == '02')//Pdv
        {

        }
        else {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    }
}

function CertDshHomeOpen() {

    //HideReport('HomeLineId2');
    //HideReport('HomeLineId3');
    //HideReport('HomeLineId4');
    //HideReport('HomeLineId5');
    ShowReport('HomeReportId');

    HideReport('ParamReportId');
    //HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
    HtmlDropDownListWithInputFill('CtrId', '0', '/Param/ParamCtrsGet', 'CtrId', 'CtrName', 'Tableau de bord');


    HideReport('CertDshDay' + 'TableReportId');

    document.getElementById('MenuBarId0').style.color = "blue";
    document.getElementById('MenuBarId1').style.color = "grey";
    //document.getElementById('MenuBarId2').style.color = "grey";
    //document.getElementById('MenuBarId3').style.color = "grey";
    //document.getElementById('MenuBarId4').style.color = "grey";  
}

function CertDshDayOpen() {
    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    //document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertDshDayThreadLaunch()");
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertDshDayDisplay()");


    HideReport('CertDshDay' + 'TableReportId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "blue";
    //document.getElementById('MenuBarId2').style.color = "grey";
    //document.getElementById('MenuBarId3').style.color = "grey";
    //document.getElementById('MenuBarId4').style.color = "grey";
}

function CertDshDayGet(ActionBtnId, DateStringStart, DateStringEnd, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport("CertDshDayTableReportId");
    ParamMessageReset();

    $('#CertDshDayTableId').DataTable().destroy();
    $("#CertDshDayTableId").DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertDshDayTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertDshDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValue" },//0  

            { "data": "Ctr01" },//1
            { "data": "Ctr02" },//2
            { "data": "Ctr03" },//3
            { "data": "Ctr04" },//4
            { "data": "Ctr05" },//5
            { "data": "Ctr06" },//6

            { "data": "CertValidateDayId" },//7 Validate
            { "data": "CertValidateDayId" },//8 Search

            { "data": "StationsNotHandledReceipt" },//9
            { "data": "StationsNotValidatedReceipt" },//10

            { "data": "StationsNotHandledNr" },//11
            { "data": "StationsNotValidatedNr" },//12

            { "data": "StationsNotHandledPost" },//13
            { "data": "StationsNotValidatedPost" },//14

            { "data": "StationsNotHandledTrafic" },//15
            { "data": "StationsNotValidatedTrafic" },//16

            { "data": "StationsNotHandledTrxLane" },//17
            { "data": "StationsNotValidatedTrxLane" },//18

            { "data": "StationsNotHandledVers" },//19
            { "data": "StationsNotValidatedVers" },//20

            { "data": "CertValidateDayId" },//21 Contact
        ],
        "columnDefs": [
            { "width": "7%", "className": "text-center", "targets": 0 },//Date

            { "width": "6%", "className": "text-right", "targets": 1 },//Ctr01
            { "width": "6%", "className": "text-right", "targets": 2 },//Ctr02
            { "width": "6%", "className": "text-right", "targets": 3 },//Ctr03
            { "width": "6%", "className": "text-right", "targets": 4 },//Ctr04
            { "width": "6%", "className": "text-right", "targets": 5 },//Ctr05
            { "width": "6%", "className": "text-right", "targets": 6 },//Ctr06

            { "width": "4%", "className": "text-center", "targets": 7 },//Validate 
            { "width": "4%", "className": "text-center none", "targets": 8 },//Search

            { "width": "0%", "className": "text-right none", "targets": 9 },//StationsNotHandledReceipt
            { "width": "0%", "className": "text-right none", "targets": 10 },//StationsNotValidatedReceipt

            { "width": "0%", "className": "text-right none", "targets": 11 },//
            { "width": "0%", "className": "text-right none", "targets": 12 },//

            { "width": "0%", "className": "text-right none", "targets": 13 },//
            { "width": "0%", "className": "text-right none", "targets": 14 },//

            { "width": "0%", "className": "text-right none", "targets": 15 },//
            { "width": "0%", "className": "text-right none", "targets": 16 },//

            { "width": "0%", "className": "text-right none", "targets": 17 },//
            { "width": "0%", "className": "text-right none", "targets": 18 },//

            { "width": "0%", "className": "text-right none", "targets": 19 },//
            { "width": "0%", "className": "text-right none", "targets": 20 },//

            { "width": "0%", "className": "text-center none", "targets": 21 },//Contact

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 1, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 2, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 5, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },
            { "targets": 6, "render": function (data, type, row) { return GetCtrYesOrNoFromDataTable(data); } },

            {
                "targets": 7, "render": function (data, type, row) {
                    return DataTableGetButtonValidateBlockSix(data, row['Ctr01'], row['Ctr02'], row['Ctr03'], row['Ctr04'], row['Ctr05'], row['Ctr06'], row['IsValid'], 'CertLane');
                }
            },
            //{ "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertDshSearch', data, 'fas fa-cube', '0048ff'); } },


            { "targets": 21, "render": function (data, type, row) { return DataTableGetContact(row, data); } }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {

        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    Total3 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(3).footer()).html(numFormat(Total1));
        //    $(api.column(5).footer()).html(numFormat(Total2));
        //    $(api.column(7).footer()).html(numFormat(Total3));
        //}
    });
}

function CertDshDayDisplay() {
    var ActionBtnId = 'ParamActionBtnId';
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        CertDshDayGet(ActionBtnId, DateStringStart, DateStringEnd, Icon);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertDshDayThreadLaunch() {
    var ActionBtnId = 'ParamActionBtnId';
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';
    var ConnectionId = NotiConnectionIdGet(GetElementValue('HubUrlId'));

    if (DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '' &&
        ConnectionId != null && ConnectionId != '') {

        $("#ParamActionBtnId").find('span').attr('class', 'fa fa-spinner fa-spin');

        var obj = {};
        obj.DateStringStart = DateStringStart;
        obj.DateStringEnd = DateStringEnd;
        obj.ConnectionId = ConnectionId;
        $.ajax({
            url: "/Cert/CertDshDayThreadLaunch",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: true
        });

    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertNrTrxLaneMpSearch(Id) {
    var ActionBtnId = new String('CertNrTrxLaneMpSearchBtnId' + Id);
    var Icon = 'fas fa-eye';

    ParamMessageReset();

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertNrTrxLaneMp';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertNrTrxLaneMpGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationCeNumber + ' - ' + data.StationCeName; } },//1            
            { "data": "" },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.MpId + ' - ' + data.MpNameCe; } },//3

            { "data": "TotalToll" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.MpId; } },//5

            { "data": "TotalCe" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.MpId; } },//7

            { "data": "GapAbsolute" },//8
            { "data": "GapAbsolute" },//9

            { "data": "Ctr01" },//10
            { "data": "Ctr02" },//11
            { "data": "Ctr03" },//12

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.MpId; } },//13
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.MpId; } },//14                   
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-left", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },

            { "width": "3%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-center none", "targets": 11 },
            { "width": "3%", "className": "text-center none", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },


            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '10' + 'C2' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    if (row['TotalToll'].toFixed(2) != 0) {
                        var evo = ((row['TotalCe'] - row['TotalToll']) / row['TotalToll']) * 10000;
                        if (evo.toFixed(2) > 6 || evo.toFixed(2) < -6) {
                            return '<span  class="badge badge-danger" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                        else {
                            return '<span class="badge badge-success" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                    }
                    else {
                        return '<span  class="badge badge-danger" >10 000 %%</span>';
                    }
                }
            },

            { "targets": 10, "render": function (data, type, row) { return GetGapFromDataTable(data); } },
            { "targets": 11, "render": function (data, type, row) { return CertCtrBitGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return CertCtrBitGet(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGetButton('CertNrTrxLaneLaneSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertNrTrxLaneMp', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total0));

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numFormat(Total1));

            Total2 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numFormat(Total1));
        }
    });
}

function CertNrTrxLaneLaneSearch(Id) {
    var ActionBtnId = new String('CertNrTrxLaneLaneSearchBtnId' + Id);
    var Icon = 'fas fa-eye';

    ParamMessageReset();

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertNrTrxLaneLane';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertNrTrxLaneLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' - ' + data.StationName; } },//1            
            { "data": "" },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.BillingId + ' - ' + data.MpNameCe; } },//3
            { "data": "LaneName" },//4

            { "data": "TotalZip" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.BillingId + data.LaneName; } },//6

            { "data": "TotalCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.BillingId + data.LaneName; } },//8

            { "data": "GapAbsolute" },//9
            { "data": "GapRelative" },//10

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.BillingId + data.LaneName; } },//11
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.BillingId + data.LaneName; } },//12                 
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-left", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '05' + '54' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + '74' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {
                    if (row['TotalZip'].toFixed(2) != 0) {
                        var evo = ((row['TotalCe'] - row['TotalZip']) / row['TotalZip']) * 10000;
                        if (evo.toFixed(2) > 6 || evo.toFixed(2) < -6) {
                            return '<span  class="badge badge-danger" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                        else {
                            return '<span class="badge badge-success" >' + numFormat(evo.toFixed(2)) + ' %%</span>';
                        }
                    }
                    else {
                        return '<span  class="badge badge-danger" >10 000 %%</span>';
                    }
                }
            },

            { "targets": 11, "render": function (data, type, row) { return DataTableButtonWithPatternGet('CertTrxLaneSearch', data, 'CertNrTrxLaneLane', 'fas fa-eye', '0048ff'); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertNrTrxLaneLane', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numFormat(Total0));

            Total1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numFormat(Total1));

            Total2 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numFormat(Total2));
        }
    });
}

function CertNrTrxLaneDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertNrTrxLaneDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "Year" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.StationsOkNumber + ' / ' + data.StationsTotalNumber; } },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2

            { "data": "TotalToll" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapAbsolute" },//8

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return GetGapHandledFromDataTable(data, row['Ctr01']); } },

            {
                "targets": 2, "render": function (data, type, row) {
                    return DataTableBtnGet('CertDayGapGet', data, data + '\', \'' + Pattern, '', 'dt-btn-cl', 'fas fa-info-circle btn-icon-cl cg-c-cl', '');
                }
            },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '10' + 'C2' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalToll'], 6, 10000); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertNrTrxLaneStationSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertNrTrxLaneDay', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": true,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(2).footer()).html(numFormat(Total1));

            //Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numFormat(Total2));

            //Total3 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(6).footer()).html(numFormat(Total3));

        }
    });
}

function CertNrTrxLaneStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    //HideReport("CertNrMpTableReportId");
    ParamMessageReset();

    var Pattern = 'CertNrTrxLaneStation';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertNrTrxLaneStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return data.SiteName + ' - ' + data.StationName + ' (' + data.StationCeNumber + ')'; } },//1
            { "data": "" },//2

            { "data": "TotalToll" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//4

            { "data": "TotalCe" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6

            { "data": "GapAbsolute" },//7
            { "data": "GapAbsolute" },//8

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//12
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//13                    
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 1, "render": function (data, type, row) { return DataTableDataWithButtonGet(CertStationOkNumberGet(row['StationsOkNumber']), data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },


            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '10' + 'C2' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertFileUpdateAdd', '07' + 'N1' + data, 'fas fa-redo-alt', '9c9c9c'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapAbsoluteGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalToll'], 0, 10000); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('CertNrTrxLaneMpSearch', data, 'fas fa-eye', '0048ff'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableBtnGet('DataTableRowDelete', data, data + '\', \'CertNrTrxLaneStation', '', 'dt-btn-cl', 'far fa-trash-alt btn-icon-cl gc-c1-cl', 'dt-text-cl'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total1));
        }
    });
}

function CertNrTrxLaneStationSearch(Id) {

    var ActionBtnId = new String('CertNrTrxLaneStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var StationNumber = '0';
    var BagContainerId = '0';
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsGap = false;
    CertNrTrxLaneStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertReportingTraficDayGet(ActionBtnId, Icon, Pattern, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertReportingTraficDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Pattern: Pattern,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TraficToll" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Gen
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 Upload
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 Calculate

            { "data": "TraficCe" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Upload img

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 IsValid
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableBooleanFalseAlertGet(row['IsSourceValid']) + ' ' + DataTableDateValueFromRowGet(row); } },

            //Trx lane
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 3, "render": function (data, type, row) {
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'C2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Reporting trafic
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '71';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;
                }
            },

            { "targets": 8, "render": function (data, type, row) { return DataTableDiffIntGet(row['TraficToll'], row['TraficCe']); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficCe'], row['TraficToll'], 2, 100); } },

            //Actions            
            {
                "targets": 10, "render": function (data, type, row) {
                    //return DataTableGetButton('CertImageLaneStationSearch', data, 'fas fa-eye btn-icon-cl gc-c1-cl', '0048ff');
                    return DataTableButtonGet('CertReportingTraficStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            { "targets": 11, "render": function (data, type, row) { return CertIsValidGet(data, '05', row['IsValid']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 6);
        }
    });
}

function CertReportingTraficStationDisplay() {
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = new Boolean($("#IsGapId").is(":checked"));

    if (DateStringStart != '' && DateStringEnd != '') {
        CertReportingTraficStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertReportingTraficStationSearch(Id) {

    var ActionBtnId = new String('CertReportingTraficStationSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var Icon = 'fas fa-eye';
    var IsGap = false;
    CertReportingTraficStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertReportingTraficStationGet(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertReportingTraficStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertReportingTraficDay' + 'TableReportId');
    //HideReport('CertReportingTraficStation' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertReportingTraficStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "StationName" },//1

            { "data": "TraficToll" },//2
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//3 UploadZip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 UploadTrxZip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 Calc

            { "data": "TraficCe" },//7
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 Upload img

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber; } },//11 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data + ' (' + row['StationIdCe'] + ')'; } },
            //Trx lane
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 3, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'C2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Reporting trafic
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn1 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '71';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = row['LSId'];
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    var Btn2 = DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);

                    return Btn1 + Btn2;

                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TraficToll'], row['TraficCe']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficCe'], row['TraficToll'], 6, 100); } },

            //Actions            
            {
                "targets": 11, "render": function (data, type, row) {
                    //return DataTableGetButton('CertImageLaneStationSearch', data, 'fas fa-eye btn-icon-cl gc-c1-cl', '0048ff');
                    return DataTableButtonGet('CertReportingTraficBillingSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 2);
            DataTableTotalIntGet(api, intVal, 7);
        }
    });
}


function CertReportingTraficBillingSearch(Id) {

    var ActionBtnId = new String('CertReportingTraficBillingSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var BillingId = '0';
    var Icon = 'fas fa-eye';
    var IsGap = false;
    CertReportingTraficBillingGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, BillingId, DateStringStart, DateStringEnd, IsGap);
}


function CertReportingTraficBillingGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, BillingId, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertReportingTraficBilling';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertReportingTraficDay' + 'TableReportId');
    ShowReport('CertReportingTraficStation' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertReportingTraficBillingGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                BillingId: BillingId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "StationName" },//1
            //{ "data": "BillingName" },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.BillingId + '-' + data.BillingName; } },//2

            { "data": "TraficToll" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.BillingId; } },//4 UploadZip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.BillingId; } },//5 UploadTrxZip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.BillingId; } },//6 Visualize
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.BillingId; } },//7 Update C2

            { "data": "TraficCe" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.BillingId; } },//9 Upload Ce Report Trx

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.BillingId; } },//10 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.BillingId; } },//11 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.BillingId; } },//12 UploadCeTrxInterface
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.BillingId; } },//13 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Trx lane
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '04';
                    var SourceId = '11';
                    var FileTypeId = 'C2';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Reporting trafic
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'N1';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableDiffIntGet(row['TraficToll'], row['TraficCe']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficCe'], row['TraficToll'], 6, 100); } },

            //Actions
            {
                "targets": 12, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'Y8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var RegionId = row['RegionId'];
                    var LSId = row['LSId'];
                    var AxleId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + RegionId + LSId + AxleId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    //return DataTableGetButton('CertImageLaneStationSearch', data, 'fas fa-eye btn-icon-cl gc-c1-cl', '0048ff');
                    return DataTableButtonGet('CertReportingTraficLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 8);
        }
    });
}



function CertReportingTraficLaneSearch(Id) {

    var ActionBtnId = new String('CertReportingTraficLaneSearchBtnId' + Id);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var RegionId = new String(Id).substr(8, 2);
    var LSId = new String(Id).substr(10, 2);
    var StationNumber = new String(Id).substr(12, 2);
    var BillingId = new String(Id).substr(12, 2);
    var LaneName = '0';
    var Icon = 'fas fa-eye';
    var IsGap = false;
    CertReportingTraficLaneGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, LaneName, BillingId, DateStringStart, DateStringEnd, IsGap);
}


function CertReportingTraficLaneGet(ActionBtnId, Icon, RegionId, LSId, StationNumber, LaneName, BillingId, DateStringStart, DateStringEnd, IsGap) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertReportingTraficLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertReportingTraficDay' + 'TableReportId');
    ShowReport('CertReportingTraficStation' + 'TableReportId');
    ShowReport('CertReportingTraficBilling' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertReportingTraficLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                LSId: LSId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                BillingId: BillingId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "StationName" },//1
            { "data": "BillingId" },//2
            { "data": "LaneName" },//3

            { "data": "TraficToll" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 UploadZip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 Visualize 
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 UploadTrxZip

            { "data": "TraficCe" },//8
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 Upload img

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.RegionId + data.LSId + data.StationNumber + data.LaneName + data.BillingId; } },//12 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Trx lane
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Reporting trafic
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = 'Y8';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 10, "render": function (data, type, row) { return DataTableDiffIntGet(row['TraficToll'], row['TraficCe']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TraficCe'], row['TraficToll'], 6, 100); } },

            //Actions            
            {
                "targets": 12, "render": function (data, type, row) {
                    return DataTableButtonGet('CertReportingTraficHourSearch', data, '\'' + data + '\'' + ', \'CertReportingTraficLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 8);
        }
    });
}


function CertReportingTraficHourSearch(Id, TableSource) {
    var ActionBtnId = new String('CertReportingTraficHourSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-cl gc-c1-cl');

    CertReportingTraficHourGet(ActionBtnId, Icon, Id, TableSource);
}




function CertReportingTraficHourGet(ActionBtnId, Icon, Id, TableSource) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');

    var PatternTable = 'CertReportingTraficHour';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    CertAllReportsHide();
    ShowReport('ParamReportId');
    ShowReport('CertReportingTraficDay' + 'TableReportId');
    ShowReport('CertReportingTraficStation' + 'TableReportId');
    ShowReport('CertReportingTraficBilling' + 'TableReportId');
    ShowReport('CertReportingTraficLane' + 'TableReportId');

    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertTrxLaneHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                Id: Id,
                TableSource: TableSource
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "StationName" },//1
            { "data": "BillingId" },//2
            { "data": "LaneName" },//3
            { "data": "Hour" },//4

            { "data": "TotalZip" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 UploadZip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 UploadTrxZip
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 Visualize

            { "data": "TotalCe" },//9
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 Upload img

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//12 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName + data.BillingId + GetDigits(data.Hour, 2); } },//13 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            //Trx lane
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '5A';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {
                    var TaskId = '03';
                    var SourceId = '05';
                    var FileTypeId = '--';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-eye btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '54';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Reporting trafic
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 10, "render": function (data, type, row) {
                    var TaskId = '00';
                    var SourceId = '07';
                    var FileTypeId = '74';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = row['BillingId'];
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 11, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalCe']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalCe'], row['TotalZip'], 6, 100); } },

            //Actions            
            {
                "targets": 13, "render": function (data, type, row) {
                    //return DataTableGetButton('CertImageLaneStationSearch', data, 'fas fa-eye btn-icon-cl gc-c1-cl', '0048ff');
                    //return DataTableButtonGet('CertReportingTraficHourSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                    return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertReportingTraficHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(1).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total2));
        }
    });
}



function CertRealHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(11, 2, 1);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');


}

function CertRealTrxOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(11, 0, 1);

    //ParamTitle
    ParamTitleSet('Temps réel - Transactions');

    //ShowReport
    ShowReport('ParamReportId');

    //ShowParent
    ShowParent('SiteId');
    ShowParent('BagContainerId');
    ShowParent('StationNumberId');
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertRealTrxAllDisplay()');

    DateValueDefaultSet('DateStartId', 0);
    DateValueDefaultSet('DateEndId', 0);

    //Display
    CertRealTrxAllDisplay();

    //Noti
    NotiConnectionIdUpdate('Temps réel - Transactions Voie');
}

function CertRealTrxAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';
    var TimeId = GetElementValue('TimeId');
    var IsMargin = true;

    //Display
    if (TimeId == '01') {//Day
        CertRealTrxDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertRealTrxStationDisplay(ActionBtnId, Icon, IsMargin);
        }
        else {
            if (TimeId == '00') {//Heure
                CertRealTrxHourDisplay(ActionBtnId, Icon, IsMargin);
            }
            else {
                ParamMessageErrorDisplay('Ce niveau n\'est pas authorisé');
            }
        }
    }
}

function CertRealTrxDayDisplay(ActionBtnId, Icon, IsMargin) {
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (DateStringStart != '' && DateStringEnd != '') {
        CertAllReportsHide();
        ShowReport('ParamReportId');
        ParamMessageReset();
        CertRealTrxDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertRealTrxDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertRealTrxDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertRealTrxDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalOpe" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Upload

            { "data": "TotalTrafic" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            //Trx ope
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Upload Trx real
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '80';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '04';
                    var SourceId = '11';//Counters
                    var FileTypeId = 'H1';//TrxLane

                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalOpe'], row['TotalTrafic']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalTrafic'], row['TotalOpe'], 1, 100); } },

            //Actions            
            {
                "targets": 7, "render": function (data, type, row) {
                    return DataTableButtonGet('CertRealTrxStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(1).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total2));
        }
    });
}

function CertRealTrxStationDisplay(ActionBtnId, Icon, IsMargin) {

    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = ElementBooleanGet('IsGapId');

    CertAllReportsHide();
    ParamMessageReset();
    ShowReport('ParamReportId');

    if (DateStringStart != '' && DateStringEnd != '') {

        CertRealTrxStationGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertRealTrxStationSearch(Id) {

    var ActionBtnId = new String('CertRealTrxStationSearchBtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsMargin = false;

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertRealTrxStationGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertRealTrxStationGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertRealTrxStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertRealTrxStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "RegionNameShort" },//1
            { "data": "StationName" },//2

            { "data": "TotalOpe" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "data": "TotalTrafic" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//7 Upload TrxLane
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//8 Upload TrxLane
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//9 Upload TrxBorne

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//10 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//11 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//12 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//13 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Trx ope
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Trx real
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '80';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '28';//Lane
                    var FileTypeId = 'L1';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 7, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';//Upload
                    var SourceId = '05';//Lane
                    var FileTypeId = '58';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },
            {
                "targets": 8, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';//Upload
                    var SourceId = '05';//Lane
                    var FileTypeId = '52';//TrxBorne
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 9, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalOpe'], row['TotalTrafic']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalTrafic'], row['TotalOpe'], 1, 100); } },

            //Actions            
            {
                "targets": 11, "render": function (data, type, row) {
                    return DataTableButtonGet('CertRealTrxLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    return DataTableButtonGet('CertRealTrxHourSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            }

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total0));

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(10).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}


function CertRealTrxHourDisplay(ActionBtnId, Icon, IsMargin) {
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = ElementBooleanGet('IsGapId');

    if (DateStringStart != '' && DateStringEnd != '') {
        DiscAllReportsHide();
        ShowReport('ParamReportId');
        CertRealTrxHourGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap)
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}


function CertRealTrxHourSearch(Id) {
    var ActionBtnId = new String('CertRealTrxHourSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsMargin = false;

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);
    var IsGap = false;

    CertRealTrxHourGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertRealTrxHourGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertRealTrxHour';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertRealTrxHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationName" },//2
            { "data": "Hour" },//3

            { "data": "TotalOpe" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 Upload

            { "data": "TotalTrafic" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + GetDigits(data.Hour, 2); } },//10 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + GetDigits(data.Hour, 2); } },//11 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Trx ope
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Upload Trx real
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '80';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 7, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '03';//Lane
                    var FileTypeId = '34';//TrxLane
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 8, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalOpe'], row['TotalTrafic']); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalTrafic'], row['TotalOpe'], 1, 100); } },

            //Actions                      
            {
                "targets": 10, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertRealTrxHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    return DataTableButtonGet('CertTrxBorneSearch', data, '\'' + data + '\'' + ', \'CertRealTrxHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total0));

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total1));

            $(api.column(8).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}

function CertRealTrxLaneDisplay(ActionBtnId, Icon, IsMargin) {
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');
    var Hour = '0';
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var IsGap = ElementBooleanGet('IsGapId');

    if (DateStringStart != '' && DateStringEnd != '') {
        DiscAllReportsHide();
        ShowReport('ParamReportId');
        CertRealTrxLaneGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, LaneName, Hour, DateStringStart, DateStringEnd, IsGap)
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}


function CertRealTrxLaneSearch(Id) {
    var ActionBtnId = new String('CertRealTrxLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsMargin = false;

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);
    var LaneName = '0';
    var IsGap = false;

    CertRealTrxLaneGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap);
}

function CertRealTrxLaneGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertRealTrxLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertRealTrxLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationName" },//2
            { "data": "LaneName" },//3

            { "data": "TotalZip" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 Upload

            { "data": "TotalLS" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//10 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Trx ope
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Upload Trx real
                    var TaskId = '00';
                    var SourceId = '05';
                    var FileTypeId = '58';

                    if (row['System'] == 'F') {
                        if (new String(row['LaneName']).substr(0, 1) == 'E') {
                            FileTypeId = '52';
                        }
                    }

                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 7, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';//Upload
                    var SourceId = '28';//LS
                    var FileTypeId = 'L1';//Trx
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];;
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 8, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalZip'], row['TotalLS']); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalLS'], row['TotalZip'], 1, 100); } },

            //Actions            
            {
                "targets": 10, "render": function (data, type, row) {
                    if (row['System'] == 'F') {
                        if (new String(row['LaneName']).substr(0, 1) == 'S') {
                            return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertRealTrxLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                        }
                        else {
                            return DataTableButtonGet('CertTrxBorneSearch', data, '\'' + data + '\'' + ', \'CertRealTrxLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                        }
                    }
                    else {
                        return DataTableButtonGet('CertTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertRealTrxLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                    }
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total0));

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}




function CertImageHomeOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(11, 2, 1);

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');
}

function CertRealImageOpen() {
    CertAllReportsHide();
    CertAllParametersHide();
    MenuBarNavHighlight(11, 1, 1);

    //ParamTitle
    ParamTitleSet('Temps réel - Images');

    //ShowReport
    ShowReport('ParamReportId');

    //ShowParent
    ShowParent('SiteId');
    ShowParent('BagContainerId');
    ShowParent('StationNumberId');
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');

    //Set OnChange
    ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    //Action
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'CertRealImageAllDisplay()');

    DateValueDefaultSet('DateStartId', 0);
    DateValueDefaultSet('DateEndId', 0);

    //Display
    CertRealImageAllDisplay();

    //Noti
    NotiConnectionIdUpdate('Temps réel - Images');
}

function CertRealImageAllDisplay() {
    //Define
    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';
    var TimeId = GetElementValue('TimeId');
    var IsMargin = true;

    //Display
    if (TimeId == '01') {//Day
        CertRealImageDayDisplay(ActionBtnId, Icon, IsMargin);
    }
    else {
        if (TimeId == '07') {//Station
            CertRealImageStationDisplay(ActionBtnId, Icon, IsMargin);
        }
        else {
            if (TimeId == '08') {//Lane
                CertRealImageLaneDisplay(ActionBtnId, Icon, IsMargin);
            }
            else {
                if (TimeId == '00') {//Heure
                    CertRealImageHourDisplay(ActionBtnId, Icon, IsMargin);
                }
                else {
                    ParamMessageErrorDisplay('Ce niveau n\'est pas authorisé');
                }
            }
        }
    }
}

function CertRealImageDayDisplay(ActionBtnId, Icon, IsMargin) {
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (DateStringStart != '' && DateStringEnd != '') {
        CertAllReportsHide();
        ShowReport('ParamReportId');
        ParamMessageReset();
        CertRealImageDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertRealImageDayGet(ActionBtnId, Icon, IsMargin, DateStringStart, DateStringEnd) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertRealImageDay';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertRealImageDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "" },//0

            { "data": "TotalLS" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//2 Upload

            { "data": "TotalImage" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//6 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            //Trx ope
            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 2, "render": function (data, type, row) { //Upload Trx real
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '80';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '19';//Images
                    var FileTypeId = 'J1';//Images

                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = '--';
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = '--';
                    var LaneName = '--';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-redo-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalLS'], row['TotalImage']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalImage'], row['TotalLS'], 1, 100); } },

            //Actions            
            {
                "targets": 7, "render": function (data, type, row) {
                    return DataTableButtonGet('CertRealImageStationSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(numShortFormat(Total0));

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total1));

            $(api.column(5).footer()).html(numShortFormat(Total1));
        }
    });
}

function CertRealImageStationDisplay(ActionBtnId, Icon, IsMargin) {

    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = ElementBooleanGet('IsGapId');

    CertAllReportsHide();
    ParamMessageReset();
    ShowReport('ParamReportId');

    if (DateStringStart != '' && DateStringEnd != '') {

        CertRealImageStationGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function CertRealImageStationSearch(Id) {

    var ActionBtnId = new String('CertRealImageStationSearchBtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsMargin = false;

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var IsGap = false;

    CertRealImageStationGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertRealImageStationGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertRealImageStation';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertRealImageStationGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "RegionNameShort" },//1
            { "data": "StationName" },//2

            { "data": "TotalLS" },//3
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//4 Upload

            { "data": "TotalImage" },//5
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//6 Upload TrxLane

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//9 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber; } },//10 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            //Trx ope
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 4, "render": function (data, type, row) { //Upload Trx real
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '80';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 6, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '19';//Images
                    var FileTypeId = 'J1';//Images
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 7, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalLS'], row['TotalImage']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalImage'], row['TotalLS'], 1, 100); } },

            //Actions            
            {
                "targets": 9, "render": function (data, type, row) {
                    return DataTableButtonGet('CertRealImageLaneSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            },
            {
                "targets": 10, "render": function (data, type, row) {
                    return DataTableButtonGet('CertRealImageHourSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '')
                }
            }

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total0));

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total1));

            $(api.column(7).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}


function CertRealImageHourDisplay(ActionBtnId, Icon, IsMargin) {
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsGap = ElementBooleanGet('IsGapId');

    if (DateStringStart != '' && DateStringEnd != '') {
        DiscAllReportsHide();
        ShowReport('ParamReportId');
        CertRealImageHourGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap)
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}


function CertRealImageHourSearch(Id) {
    var ActionBtnId = new String('CertRealImageHourSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsMargin = false;

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);
    var IsGap = false;

    CertRealImageHourGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap);
}

function CertRealImageHourGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertRealImageHour';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertRealImageHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationName" },//2
            { "data": "Hour" },//3

            { "data": "TotalLS" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 Upload

            { "data": "TotalImage" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 GapRelative  

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + GetDigits(data.Hour, 2); } },//10 Detail
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + GetDigits(data.Hour, 2); } },//11 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Trx ope
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Upload Trx real
                    var TaskId = '00';
                    var SourceId = '08';
                    var FileTypeId = '80';
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 7, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';
                    var SourceId = '19';//Images
                    var FileTypeId = 'J1';//Images
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = '---';
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 8, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalLS'], row['TotalImage']); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalImage'], row['TotalLS'], 1, 100); } },

            //Actions                      
            {
                "targets": 10, "render": function (data, type, row) {
                    return DataTableButtonGet('CertImageTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertRealImageHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    return DataTableButtonGet('CertImageTrxBorneSearch', data, '\'' + data + '\'' + ', \'CertRealImageHour\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total0));

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total1));

            $(api.column(8).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}

function CertRealImageLaneDisplay(ActionBtnId, Icon, IsMargin) {
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');
    var Hour = '0';
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var IsGap = ElementBooleanGet('IsGapId');

    if (DateStringStart != '' && DateStringEnd != '') {
        CertAllReportsHide();
        ShowReport('ParamReportId');
        CertRealImageLaneGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap)
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}


function CertRealImageLaneSearch(Id) {
    var ActionBtnId = new String('CertRealImageLaneSearch' + 'BtnId' + Id);
    var Icon = 'fas fa-eye btn-icon-cl gc-c1-cl';
    var IsMargin = false;

    var DateStringStart = new String(Id).substr(0, 8);
    var DateStringEnd = new String(Id).substr(0, 8);
    var SiteId = new String(Id).substr(8, 2);
    var BagContainerId = '0';
    var StationNumber = new String(Id).substr(10, 2);
    var LaneName = '0';
    var IsGap = false;

    CertRealImageLaneGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap);
}

function CertRealImageLaneGet(ActionBtnId, Icon, IsMargin, SiteId, BagContainerId, StationNumber, LaneName, DateStringStart, DateStringEnd, IsGap) {

    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'CertRealImageLane';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Cert/CertRealImageLaneGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber,
                LaneName: LaneName,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd,
                IsGap: IsGap
            }
        },
        "columns": [
            { "data": "" },//0
            { "data": "SiteName" },//1
            { "data": "StationName" },//2
            { "data": "LaneName" },//3

            { "data": "TotalLS" },//4
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//5 Upload

            { "data": "TotalImage" },//6
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//7 Upload

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//8 GapAbsolute
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year; } },//9 GapRelative  

            { "data": "IpAddress" },//10
            { "data": "ImagesNumber" },//11
            { "data": "IsNoneStop" },//12

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + GetDigits(data.Month, 2) + data.Year + data.SiteId + data.StationNumber + data.LaneName; } },//13 Detail
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            //Trx ope
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 5, "render": function (data, type, row) { //Upload Trx real
                    var TaskId = '00';//Upload
                    var SourceId = '28';//lS
                    var FileTypeId = 'L1';//Trx
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            //Trx lane
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            {
                "targets": 7, "render": function (data, type, row) {//Upload Trx Ce
                    var TaskId = '00';//Upload
                    var SourceId = '19';//Image
                    var FileTypeId = 'J1';//Trx
                    var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
                    var SiteId = row['SiteId'];
                    var LSId = '--';
                    var BagContainerId = '--';
                    var StationNumber = row['StationNumber'];
                    var LaneName = row['LaneName'];;
                    var PdvId = '--';
                    var BillingId = '--';
                    var CategoryId = '--';
                    var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;

                    var Pattern = 'CertTaskAdd';
                    var RowId = data + ParamId;
                    var argument = '\'' + RowId + '\', \'' + ParamId + '\'';
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'fas fa-upload btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';
                    return DataTableButtonGet(Pattern, RowId, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 8, "render": function (data, type, row) { return DataTableDiffIntGet(row['TotalLS'], row['TotalImage']); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGapThresholdGet(row['TotalImage'], row['TotalLS'], 1, 100); } },

            { "targets": 10, "render": function (data, type, row) { return data; } },
            { "targets": 11, "render": function (data, type, row) { return data; } },
            { "targets": 12, "render": function (data, type, row) { return data; } },

            //Actions            
            {
                "targets": 13, "render": function (data, type, row) {
                    if (row['System'] == 'F') {
                        if (new String(row['LaneName']).substr(0, 1) == 'S') {
                            return DataTableButtonGet('CertImageTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertRealImageLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                        }
                        else {
                            return DataTableButtonGet('CertImageTrxBorneSearch', data, '\'' + data + '\'' + ', \'CertRealImageLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                        }
                    }
                    else {
                        return DataTableButtonGet('CertImageTrxLaneSearch', data, '\'' + data + '\'' + ', \'CertRealImageLane\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '');
                    }
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 10,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total0));

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total1 - Total0));
        }
    });
}


function CertTrxFatGetBanks() {
    $.get("/Cert/CertTrxFatGetBanks", function (data) {
        $('#BankId').empty();
        $('#BankId').append("<option value='0'>" + "---" + "</option>");
        $.each(data, function (index, row) {
            $('#BankId').append("<option value='" + row.BankId + "'>" + row.BankName + "</option>")
        });
    });
}

function CertTrxFatGetFlows() {
    $('#FlowId').empty();
    $('#FlowId').append("<option value='0'>---</option>");
    $('#FlowId').append("<option value='ADM'>ADM</option>");
    $('#FlowId').append("<option value='CMI'>CMI</option>");
}

function CertTrxFatGet(ActionBtnId, BankId, Flow, DateStringStart, DateStringEnd) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('CertTrxFatAdmTableReportId');
    HideReport('CertTrxFatCmiTableReportId');
    ParamMessageReset();

    if (Flow == "ADM") {
        $('#CertTrxFatAdmTableId').DataTable().destroy();
        $('#CertTrxFatAdmTableId').DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "initComplete": function (settings, json) {
                $('#' + ActionBtnId).find('span').attr('class', 'fas fa-search');
                ShowReport('CertTrxFatAdmTableReportId');
            },
            "ajax": {
                "url": "/Cert/CertTrxFatAdmGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "BankId": BankId,
                    "DateStringStart": DateStringStart,
                    "DateStringEnd": DateStringEnd
                }
            },
            "columns": [
                { "data": "BankName" }, //0
                { "data": "ChannelName" }, //1
                { "data": "RefUnique" },//2
                { "mData": function vehicle(data, type, dataToSet) { return new Date(data.Year, data.Month - 1, data.Day).toLocaleDateString() } },//3
                { "data": "Receipt", "render": $.fn.dataTable.render.number(' ', ',', 2) }//4
            ],
            "columnDefs": [
                { "width": "10%", "className": "text-left", "targets": 0 }, //Bank
                { "width": "10%", "className": "text-left", "targets": 1 }, //Channel
                { "width": "20%", "className": "text-left", "targets": 2 }, //RefUnique
                { "width": "20%", "className": "text-center", "targets": 3 }, //Date
                { "width": "10%", "className": "text-right", "targets": 4 }//Montant               
            ],
            "responsive": true,
            "autoWidth": false,
            "iDisplayLength": 30,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "bFilter": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                var MontantGlobal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(4).footer()).html(numFormat(MontantGlobal));

            }
        });
    }
    if (Flow == "CMI") {
        $('#CertTrxFatCmiTableId').DataTable().destroy();
        $('#CertTrxFatCmiTableId').DataTable({
            "initComplete": function (settings, json) {
                $('#' + ActionBtnId).find('span').attr('class', 'fas fa-search');
                ShowControl('CertTrxFatCmiTableReportId');
            },
            "ajax": {
                "url": "/Cert/CertTrxFatCmiGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "BankId": BankId,
                    "DateStringStart": DateStringStart,
                    "DateStringEnd": DateStringEnd
                }
            },
            "columns": [
                { "data": "BankName" }, //0
                { "data": "ChannelName" }, //1
                { "data": "RefUnique" },//2                        
                { "data": "numero_cheque" }, //3
                { "data": "description" }, //4   
                { "mData": function vehicle(data, type, dataToSet) { return new Date(data.YearU, data.MonthU - 1, data.DayU).toLocaleDateString() } },//5
                { "data": "Receipt", "render": $.fn.dataTable.render.number(' ', ',', 2) }//6
            ],
            "columnDefs": [
                { "width": "10%", "className": "text-left", "targets": 0 }, //Bank
                { "width": "10%", "className": "text-left", "targets": 1 }, //ChannelName
                { "width": "10%", "className": "text-left", "targets": 2 }, //numero_cheque
                { "width": "10%", "className": "text-left", "targets": 3 }, //description
                { "width": "10%", "className": "text-left", "targets": 4 }, //RefUnique
                { "width": "20%", "className": "text-center", "targets": 5 }, //Date
                { "width": "10%", "className": "text-right", "targets": 6 }//Montant               
            ],
            "responsive": true,
            "autoWidth": false,
            "iDisplayLength": 30,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "bFilter": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                var MontantGlobal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(3).footer()).html(numFormat(MontantGlobal));

            }
        });
    }
    if (Flow == "0") {
        $('#CertTrxFatAdmTableId').DataTable().destroy();
        $('#CertTrxFatAdmTableId').DataTable({
            "initComplete": function (settings, json) {
                ShowReport("CertTrxFatAdmTableReportId");
                $('#CertTrxFatCmiTableId').DataTable().destroy();
                $('#CertTrxFatCmiTableId').DataTable({
                    "initComplete": function (settings, json) {
                        $('#' + ActionBtnId).find('span').attr('class', 'fas fa-search');
                        ShowReport('CertTrxFatCmiTableReportId');
                    },
                    "ajax": {
                        "url": "/Cert/CertTrxFatCmiGet",
                        "type": "GET",
                        "datatype": "json",
                        "data": {
                            "BankId": BankId,
                            "DateStringStart": DateStringStart,
                            "DateStringEnd": DateStringEnd
                        }
                    },
                    "columns": [
                        { "data": "BankName" }, //0
                        { "data": "ChannelName" }, //1
                        { "data": "RefUnique" },//2                        
                        { "data": "numero_cheque" }, //3
                        { "data": "description" }, //4                        
                        { "mData": function vehicle(data, type, dataToSet) { return new Date(data.YearU, data.MonthU - 1, data.DayU).toLocaleDateString() } },//5
                        { "data": "Receipt", "render": $.fn.dataTable.render.number(' ', ',', 2) }//6
                    ],
                    "columnDefs": [
                        { "width": "10%", "className": "text-left", "targets": 0 }, //Bank
                        { "width": "10%", "className": "text-left", "targets": 1 }, //ChannelName
                        { "width": "10%", "className": "text-left", "targets": 2 }, //numero_cheque
                        { "width": "10%", "className": "text-left", "targets": 3 }, //ChannelName
                        { "width": "10%", "className": "text-left", "targets": 4 }, //RefUnique
                        { "width": "20%", "className": "text-center", "targets": 5 }, //Date
                        { "width": "10%", "className": "text-right", "targets": 6 }//Montant               
                    ],
                    "responsive": true,
                    "autoWidth": false,
                    "iDisplayLength": 30,
                    "language": {
                        "lengthMenu": "Afficher _MENU_ lignes par page",
                        "zeroRecords": "Aucun résultat",
                        "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                        "infoEmpty": "---",
                        "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                        "search": "Filtrer ",
                        "oPaginate": {
                            "sNext": "Suivant",
                            "sPrevious": "Précédent"
                        }
                    },
                    "bFilter": false,
                    "footerCallback": function (row, data, start, end, display) {
                        var api = this.api(), data;
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };

                        var MontantGlobal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                        $(api.column(3).footer()).html(numFormat(MontantGlobal));

                    }
                });
            },
            "ajax": {
                "url": "/Cert/CertTrxFatAdmGet",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "BankId": BankId,
                    "DateStringStart": DateStringStart,
                    "DateStringEnd": DateStringEnd
                }
            },
            "columns": [
                { "data": "BankName" }, //0
                { "data": "ChannelName" }, //1
                { "data": "RefUnique" },//2
                { "mData": function vehicle(data, type, dataToSet) { return new Date(data.Year, data.Month - 1, data.Day).toLocaleDateString() } },//3
                { "data": "Receipt", "render": $.fn.dataTable.render.number(' ', ',', 2) }//4
            ],
            "columnDefs": [
                { "width": "10%", "className": "text-left", "targets": 0 }, //Bank
                { "width": "10%", "className": "text-left", "targets": 1 }, //ChannelName
                { "width": "20%", "className": "text-left", "targets": 2 }, //RefUnique
                { "width": "20%", "className": "text-center", "targets": 3 }, //Date
                { "width": "10%", "className": "text-right", "targets": 4 }//Montant               
            ],
            "responsive": true,
            "autoWidth": false,
            "iDisplayLength": 30,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "bFilter": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };
                var MontantGlobal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(3).footer()).html(numFormat(MontantGlobal));
            }
        });
    };
}

function CertTrxFatDisplay() {
    var ActionBtnId = 'ActionBtnId';
    var BankId = GetElementValue('BankId');
    var Flow = GetElementValue('FlowId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (BankId != null && BankId != '' &&
        Flow != null && Flow != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        CertTrxFatGet(ActionBtnId, BankId, Flow, DateStringStart, DateStringEnd);
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTrxFatBankDisplay() {

    var BankId = GetElementValue('BankId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (BankId != null && BankId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {

        $('#ActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('CertTrxFatBankTableReportId');
        HideReport('CertTrxFatAdmTableReportId');
        HideReport('CertTrxFatCmiTableReportId');
        ParamMessageReset();
        $('#CertTrxFatBankTableId').DataTable().destroy();
        $('#CertTrxFatBankTableId').DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "initComplete": function (settings, json) {
                $('#ActionBtnId').find('span').attr('class', 'fas fa-eye');
                ShowReport("CertTrxFatBankTableReportId");
                //var labels = GetColumnArray('CertFatDayTableId', 1);
                //var data1 = GetColumnArray('CertFatDayTableId', 3);
                //var data2 = GetColumnArray('CertFatDayTableId', 4);
                //var backgroundColor = GetBackgroundColor('CertFatDayTableId');

                //$('#ChartBarTitle').text('Histogramme : Reconciliation journalière [' + GetDateFormat(new Date(), 4) + ']');
                //DisplayChartBar(labels, data1, data2, "ADM", "CMI");

                //$('#ChartPieTitle').text('Anneau : Reconciliation journalière [' + GetDateFormat(new Date(), 4) + ']');
                //DisplayChartDoughnut(labels, backgroundColor, data1)

                //ShowReport("ChartAreaReport");

            },
            "ajax": {
                "url": "/Cert/CertTrxFatBankDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "BankId": BankId,
                    "DateStringStart": DateStringStart,
                    "DateStringEnd": DateStringEnd
                }
            },
            "columns": [
                { "data": "BankName" }, //0
                { "data": "CertTrxFatBankValidateId" },//1
                { "data": "RefUnique" },//2
                { "data": "DhmUnique" },//3
                { "data": "ReceiptAdm", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
                { "data": "ReceiptCmi", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
                { "data": "ReceiptGap" },//6  
                { "data": "CertTrxFatBankValidateId" },//7
                { "data": "CertTrxFatBankValidateId" },//8
                { "data": "CertTrxFatBankValidateId" },//9
                { "data": "CertTrxFatBankValidateId" },//10
                { "data": "DhmModification" },//11
                { "mData": function vehicle(data, type, dataToSet) { return data.FirstName + " " + data.LastName; } },//12            
                { "data": "IpNumber" },//13
                { "data": "PhoneNumber" }//14
            ],
            "columnDefs": [
                { "width": "5%", "className": "text-center", "targets": 0 }, //bank_name
                { "width": "5%", "className": "text-center", "targets": 1 }, //ID
                { "width": "10%", "className": "text-center", "targets": 2 }, //ref_unique
                { "width": "10%", "className": "text-center", "targets": 3 }, //DhmValue
                { "width": "10%", "className": "text-right", "targets": 4 },//receipt_adm_day  
                { "width": "10%", "className": "text-right", "targets": 5 },//receipt_cmi_day
                { "width": "10%", "className": "text-right", "targets": 6 },//receipt_day_gap
                { "width": "10%", "className": "text-center", "targets": 7 },//Validate
                { "width": "10%", "className": "text-center", "targets": 8 },//Validate
                { "width": "10%", "className": "text-center", "targets": 9 },//Validate
                { "width": "10%", "className": "text-center", "targets": 10 },//Search
                { "width": "0%", "className": "text-right none", "targets": 11 },//DhmModification
                { "width": "0%", "className": "text-right none", "targets": 12 },//FullName
                { "width": "0%", "className": "text-right none", "targets": 13 },//IpNumber
                { "width": "0%", "className": "text-right none", "targets": 14 },//PhoneNumber
                {
                    "targets": 3,
                    "render": function (value) {
                        if (value === null) return "";
                        var pattern = /Date\(([^)]+)\)/;//date format from server side
                        var results = pattern.exec(value);
                        var dt = new Date(parseFloat(results[1]));

                        return dt.toLocaleDateString() + " " + dt.toLocaleTimeString();
                    }
                },
                {
                    "targets": 6, "searchable": false, "orderable": false, "className": 'img_dt_s',
                    "render": function (data, type, row) {
                        if (data.toFixed(2) < 0) {
                            return '<span  class="badge badge-danger">' + data.toFixed(2) + '</span>';
                        }
                        if (data.toFixed(2) > 0) {
                            return '<span  class="badge badge-primary">' + data.toFixed(2) + '</span>';
                        }
                        else {
                            return '<span  class="badge badge-success">' + data.toFixed(2) + '</span>';
                        }
                    }
                },
                {
                    "targets": 7, "searchable": false,
                    "render": function (data, type, full, meta) {
                        return '<input id="CertTrxFatBankCheckboxId' + data + '" ' +
                            'type="checkbox" class="CertTrxFatBankCheckbox" value="0" ' +
                            'onclick="CertTrxFatBankValueUpdate(\'' + data + '\')" >';
                    }
                },
                {
                    "targets": 8, "searchable": false, "orderable": false, "className": "dt-body-center",
                    "render": function (data, type, full, meta) {
                        return '<input id="CertTrxFatBankValueId' + data + '" ' +
                            'type="number" ' +
                            'value="0" ' +
                            //'style=";" ' +                            
                            'style="font-size: 0.8rem; padding: .1rem .1rem;height: 98%;text-align:right;display:inline-flex" ' +
                            'class="form-control CertTrxFatBankValue col-sm-10" readonly> '
                    }
                },
                {
                    "targets": 9, "searchable": false, "orderable": false,
                    "render": function (data, type, row) {

                        if (($('<div/>').text(row['ReceiptGap'].toFixed(2)).html() !== "0.00") && ($('<div/>').text(row['ReceiptGap'].toFixed(2)).html() !== "-0.00"))
                            return '<button style="background-color: Transparent;border: none;"><span class="fas fa-exclamation-triangle" style="color:red"></span></button>';
                        else {
                            if ($('<div/>').text(row['IsValid']).html() == "true") {
                                return '<button id="CertTrxFatBankUnvalidateBtnId' + data + '"' +
                                    'style="background-color: Transparent;border: none;"' +
                                    'onclick = "CertTrxFatBankUnvalidate(\'' + data + '\')">' +
                                    '<span class="fas fa-unlock-alt" style="color:#28a745"></span></button > '
                            }
                            else {
                                return '<button id="CertTrxFatBankValidateBtnId' + data + '"' +
                                    'style="background-color: Transparent;border: none;"' +
                                    'onclick = "CertTrxFatBankValidate(\'' + data + '\')" > ' +
                                    '<span class="fas fa-clock" style="color:#a3a3a3"></span></button>'
                            }
                        }
                    }
                },
                {
                    "targets": 10, "searchable": false, "orderable": false,
                    "render": function (data, type, full, meta) {
                        return '<button id="CertTrxFatSearchBtnId' + data + '" style="background-color: Transparent;border: none;" ' +
                            'onclick="CertTrxFatSearch(\'' + data + '\')" >' +
                            '<span class="fas fa-search" style="color:#a3a3a3"></span></button>'
                    }
                },
                {
                    "targets": 11,
                    "render": function (value) {
                        if (value === null) return "";
                        var pattern = /Date\(([^)]+)\)/;//date format from server side
                        var results = pattern.exec(value);
                        var dt = new Date(parseFloat(results[1]));

                        return dt.toLocaleDateString() + " " + dt.toLocaleTimeString();
                    }
                }
            ],
            "responsive": true,
            "autoWidth": false,
            "iDisplayLength": 100,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "bFilter": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                ReceiptAdmDayTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                ReceiptCmiDayTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                ReceiptGapTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(4).footer()).html(numFormat(ReceiptAdmDayTotal));
                $(api.column(5).footer()).html(numFormat(ReceiptCmiDayTotal));
                $(api.column(6).footer()).html(numFormat(ReceiptGapTotal));

                if (ReceiptGapTotal !== 0)
                    $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numFormat(ReceiptGapTotal) + '</span>');
                else $(api.column(6).footer()).html('<span  class="badge badge-success">' + numFormat(ReceiptGapTotal) + '</span>');
            }
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function CertTrxFatSearch(CertTrxFatBankValidateId) {
    var ActionBtnId = new String('CertFatTrxSearchBtnId' + CertTrxFatBankValidateId);
    var BankId = new String(CertTrxFatBankValidateId).substr(8, 2);
    var Flow = '0';
    var DateStringStart = new String(CertTrxFatBankValidateId).substr(0, 8);
    var DateStringEnd = new String(CertTrxFatBankValidateId).substr(0, 8);
    CertTrxFatGet(ActionBtnId, BankId, Flow, DateStringStart, DateStringEnd);
}

function CertTrxFatBankValidate(CertTrxFatBankValidateId) {
    $('#CertTrxFatBankValidateBtnId' + CertTrxFatBankValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.CertTrxFatBankValidateId = CertTrxFatBankValidateId;
    $.ajax({
        url: "/Cert/CertTrxFatBankValidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertTrxFatBankValidateBtnId' + CertTrxFatBankValidateId).find('span').attr('class', 'fas fa-unlock-alt');
            $('#CertTrxFatBankValidateBtnId' + CertTrxFatBankValidateId).find('span').attr('style', 'color:#28a745');
            $('#CertTrxFatBankValidateBtnId' + CertTrxFatBankValidateId).attr('onclick', 'CertFatDayUnvalidate(\'' + CertTrxFatBankValidateId + '\')');
            $('#CertTrxFatBankValidateBtnId' + CertTrxFatBankValidateId).attr('id', 'CertFatDayUnvalidateBtnId' + CertTrxFatBankValidateId);
        }
    });
}


function CertTrxFatBankUnvalidate(CertTrxFatBankValidateId) {
    $('#CertTrxFatBankUnvalidateBtnId' + CertTrxFatBankValidateId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.CertTrxFatBankValidateId = CertTrxFatBankValidateId;
    $.ajax({
        url: "/Cert/CertTrxFatBankUnvalidate",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#CertTrxFatBankUnvalidateBtnId' + CertTrxFatBankValidateId).find('span').attr('class', 'fas fa-clock');
            $('#CertTrxFatBankUnvalidateBtnId' + CertTrxFatBankValidateId).find('span').attr('style', 'color:#a3a3a3');
            $('#CertTrxFatBankUnvalidateBtnId' + CertTrxFatBankValidateId).attr('onclick', 'CertTrxFatBankValidate(\'' + CertTrxFatBankValidateId + '\')');
            $('#CertTrxFatBankUnvalidateBtnId' + CertTrxFatBankValidateId).attr('id', 'CertTrxFatBankValidateBtnId' + CertTrxFatBankValidateId);
        },
        error: function (request, status, error) {
            alert('Veuiller contacter votre administrateur pour dévalider cette recette');
            $('#CertTrxFatBankUnvalidateBtnId' + CertTrxFatBankValidateId).find('span').attr('class', 'fas fa-unlock-alt');
        }
    });
}

function CertTrxFatBankValueUpdate(CertTrxFatBankValidateId) {


    $("#ReceiptEojTotal").val(0);
    var Gap = parseInt(0);

    var CertFatDayValidateIdList = GetColumnArray('CertFatDayTableId', 2);

    CertFatDayValidateIdList.forEach(function (CertFatDayValidateIdTmp) {
        $('#CertFatDayValueId' + CertFatDayValidateIdTmp).attr('style', 'visibility: hidden;');
    });

    $('#CertFatDayTableId').DataTable().$('input[type="checkbox"]').each(function () {

        if (this.checked) {
            Gap = Gap + parseInt($(this).closest('tr').find('td:eq(5)').text().replace(' ', '').replace(',', '.'));
        }

    });

    var Value = GetElementValue('CertFatDayValueId' + CertFatDaySelectValue);
    $('#CertFatDayValueId' + CertFatDayValidateId).val(Gap);
    $('#CertFatDayValueId' + CertFatDayValidateId).attr('style', 'visibility: visible;');

    if (Gap == 0) {
        //$("#ReceiptGap").closest('span').attr('class', 'label label-success');
    }
    else {
        //$("#ReceiptGap").closest('span').attr('class', 'label label-danger');

    }
}

function CertFatMonthDisplay() {

    var bank_name = new String($('#bank_name').val());
    var StartDateId = new String($('#StartDateId').val().replace("-", "").replace("-", ""));
    var EndDateId = new String($('#EndDateId').val().replace("-", "").replace("-", ""));

    if (bank_name != null && bank_name != '' && bank_name != '0' &&
        StartDateId != null && StartDateId != '' &&
        EndDateId != null && EndDateId != '') {

        $('#DisplayReconciliationBtn').find('span').attr('class', 'fa fa-spinner fa-spin');
        HideControl("FatRecoAutoMonthReport");
        ResetParamMsg();
        $('#FatRecoAutoMonthTable').DataTable().destroy();
        $('#FatRecoAutoMonthTable').DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "initComplete": function (settings, json) {
                $('#DisplayReconciliationBtn').find('span').attr('class', 'glyphicon glyphicon-eye-open');
                ShowControl("FatRecoAutoMonthReport");

                var labels = GetColumnArray('FatRecoAutoMonthTable', 1);
                var data1 = GetColumnArray('FatRecoAutoMonthTable', 2);
                var data2 = GetColumnArray('FatRecoAutoMonthTable', 3);
                var backgroundColor = GetBackgroundColor('FatRecoAutoMonthTable');

                $('#ChartBarTitle').text('Histogramme : Reconciliation mensuelle [' + GetDateFormat(new Date(), 4) + ']');
                DisplayChartBar(labels, data1, data2, "ADM", "CMI");

                $('#ChartPieTitle').text('Anneau : Reconciliation mensuelle [' + GetDateFormat(new Date(), 4) + ']');
                DisplayChartDoughnut(labels, backgroundColor, data1)

                ShowReport("ChartAreaReport");

            },
            "ajax": {
                "url": "/Cert/CertFatMonthDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    "bank_name": bank_name,
                    "StartDateId": StartDateId,
                    "EndDateId": EndDateId
                }
            },
            "columns": [
                { "data": "bank_name" }, //0
                //{ "data": "bank_name" }, //0
                { "mData": function vehicle(data, type, dataToSet) { return data.MonthK + "/" + data.YearK; } },//1
                { "data": "receipt_adm_month", "render": $.fn.dataTable.render.number(' ', ',', 2) },//2
                { "data": "receipt_cmi_month", "render": $.fn.dataTable.render.number(' ', ',', 2) },//3
                { "data": "receipt_month_gap", "render": $.fn.dataTable.render.number(' ', ',', 2) }//4              
            ],
            "columnDefs": [
                { "width": "10%", "className": "text-center", "targets": 0 }, //bank_name
                { "width": "20%", "className": "text-center", "targets": 1 }, //Month
                { "width": "10%", "className": "text-right", "targets": 2 },//receipt_adm_month  
                { "width": "10%", "className": "text-right", "targets": 3 },//receipt_cmi_month
                { "width": "10%", "className": "text-right", "targets": 4 },//receipt_month_gap
            ],
            //"responsive": true,
            "autoWidth": false,
            "iDisplayLength": 30,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "bFilter": false
            //"footerCallback": function (row, data, start, end, display) {
            //    var api = this.api(), data;
            //    var intVal = function (i) {
            //        return typeof i === 'string' ?
            //            i.replace(/[\$,]/g, '') * 1 :
            //            typeof i === 'number' ?
            //                i : 0;
            //    };

            //    ReceiptAdmMonthTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //    ReceiptCmiMonthTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //    ReceiptMonthGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            //    $(api.column(2).footer()).html(numFormat(ReceiptAdmMonthTotal));
            //    $(api.column(3).footer()).html(numFormat(ReceiptCmiMonthTotal));
            //    $(api.column(4).footer()).html(numFormat(ReceiptMonthGapTotal));

            //    if (ReceiptMonthGapTotal !== 0)
            //        $(api.column(4).footer()).html('<span  class="label label-danger">' + numFormat(ReceiptMonthGapTotal) + '</span>');
            //    else $(api.column(4).footer()).html('<span  class="label label-success">' + numFormat(ReceiptMonthGapTotal) + '</span>');
            //}
        });
    }
    else {
        $("#ParametersContainerId").attr("class", "alert alert-danger");
        $("#ParametersIconId").attr("class", "glyphicon glyphicon-alert");
        $("#ParametersTextId").html("Les champs Banque, Date début et date fin sont obligatoires");
    };
}

function CertProcessHomeOpen() {

    HideReport('HomeLineId2');
    HideReport('HomeLineId3');
    HideReport('HomeLineId4');
    HideReport('HomeLineId5');
    ShowReport('HomeReportId');

    HideReport('ParamReportId');

    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationId');
    HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
    HtmlDropDownListWithInputFill('CtrId', '0', '/Param/ParamCtrsGet', 'CtrId', 'CtrName', 'Process');

    HideReport('CertProcessTransfertDsh' + 'TableReportId');
    HideReport('CertProcessTransfert' + 'TableReportId');
    HideReport('CertProcessSyntax' + 'TableReportId');
    HideReport('CertProcessSemantic' + 'TableReportId');

    document.getElementById('MenuBarId0').style.color = "blue";
    document.getElementById('MenuBarId1').style.color = "grey";
    //document.getElementById('MenuBarId2').style.color = "grey";
    //document.getElementById('MenuBarId3').style.color = "grey";
    //document.getElementById('MenuBarId4').style.color = "grey";  
}

function CertProcessTransfertOpen() {

    HideReport('HomeReportId');

    ShowReport('ParamReportId');
    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertProcessTransfertDshDisplay()");
    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
    $('#ParamActionTextId').text('Afficher');

    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationId');
    HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
    HtmlDropDownListWithInputFill('CtrId', '0', '/Param/ParamCtrsGet', 'CtrId', 'CtrName', 'Process');

    HideReport('CertProcessTransfertDsh' + 'TableReportId');
    HideReport('CertProcessTransfert' + 'TableReportId');
    HideReport('CertProcessSyntax' + 'TableReportId');
    HideReport('CertProcessSemantic' + 'TableReportId');

    document.getElementById('MenuBarId0').style.color = "grey";
    document.getElementById('MenuBarId1').style.color = "blue";
    //document.getElementById('MenuBarId2').style.color = "grey";
    //document.getElementById('MenuBarId3').style.color = "grey";
    //document.getElementById('MenuBarId4').style.color = "grey";  
}


//function CertPostStationOpen() {
//    HideReport('HomeLineId5');
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');
//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertPostStationDisplay()");
//    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
//    $('#ParamActionTextId').text('Afficher');

//    HideReport('CertPostPeriod' + 'TableReportId');
//    HideReport('CertPostCex' + 'TableReportId');
//    HideReport('CertPostStation' + 'TableReportId');
//    HideReport('CertPost' + 'TableReportId');
//    HideReport('CertPostMsg' + 'TableReportId');
//    HideReport('CertPostZip' + 'TableReportId');
//    HideReport('CertPostLane' + 'TableReportId');
//    HideReport('CertTrxLane' + 'TableReportId');
//    HideReport('Bar' + 'ChartId');
//    HideReport('Pie' + 'ChartId');

//    document.getElementById('MenuBarId0').style.color = "grey";
//    document.getElementById('MenuBarId1').style.color = "grey";
//    document.getElementById('MenuBarId2').style.color = "blue";
//    document.getElementById('MenuBarId3').style.color = "grey";
//    document.getElementById('MenuBarId4').style.color = "grey";
//}

//function CertPostCexOpen() {
//    HideReport('HomeLineId5');
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');
//    HideReport('BagContainerIdParent');
//    HideReport('StationIdParent');
//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertPostCexDisplay()");
//    $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
//    $('#ParamActionTextId').text('Afficher');

//    HideReport('CertPostPeriod' + 'TableReportId');
//    HideReport('CertPostCex' + 'TableReportId');
//    HideReport('CertPostStation' + 'TableReportId');
//    HideReport('CertPost' + 'TableReportId');
//    HideReport('CertPostMsg' + 'TableReportId');
//    HideReport('CertPostZip' + 'TableReportId');
//    HideReport('CertPostLane' + 'TableReportId');
//    HideReport('CertTrxLane' + 'TableReportId');
//    HideReport('Bar' + 'ChartId');
//    HideReport('Pie' + 'ChartId');

//    document.getElementById('MenuBarId0').style.color = "grey";
//    document.getElementById('MenuBarId1').style.color = "grey";
//    document.getElementById('MenuBarId2').style.color = "grey";
//    document.getElementById('MenuBarId3').style.color = "blue";
//    document.getElementById('MenuBarId4').style.color = "grey";
//}

//function CertPostPeriodOpen() {
//    HideReport('HomeLineId5');
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');
//    HideReport('BagContainerIdParent');
//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "CertPostPeriodDisplay()");
//    ParamCtrsGet('Fin de poste');

//    HideReport('CertPostPeriod' + 'TableReportId');
//    HideReport('CertPostCex' + 'TableReportId');
//    HideReport('CertPostSite' + 'TableReportId');
//    HideReport('CertPostMp' + 'TableReportId');
//    HideReport('CertPost' + 'TableReportId');
//    HideReport('CertPostMsg' + 'TableReportId');
//    HideReport('CertPostZip' + 'TableReportId');
//    HideReport('CertPostLane' + 'TableReportId');
//    HideReport('CertTrxLane' + 'TableReportId');
//    HideReport('Bar' + 'ChartId');
//    HideReport('Pie' + 'ChartId');

//    document.getElementById('MenuBarId0').style.color = "grey";
//    document.getElementById('MenuBarId1').style.color = "grey";
//    document.getElementById('MenuBarId2').style.color = "grey";
//    document.getElementById('MenuBarId3').style.color = "grey";
//    document.getElementById('MenuBarId4').style.color = "blue";
//}


function CertProcessTransfertDshGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon) {

    HideReport('CertProcessTransfertDsh' + 'TableReportId');
    HideReport('CertProcessTransfert' + 'TableReportId');
    HideReport('CertProcessSyntax' + 'TableReportId');
    HideReport('CertProcessSemantic' + 'TableReportId');

    ParamMessageReset();

    $('#CertProcessTransfertDshTableId').DataTable().destroy();
    $('#CertProcessTransfertDshTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertProcessTransfertDshTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertProcessTransfertDshGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationId": StationId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        //{ "mData": function vehicle(data, type, dataToSet) { return data.StationsUploadedNumber + "/" + data.StationsNumber; } },//1  
        "columns": [
            { "data": "DhmValue" }, //0
            { "data": "StationsNumber" },//1            
            { "data": "CtrFlag01" },//2
            { "data": "CtrFlag02" },//3       
            { "data": "CtrFlag03" },//4
            { "data": "CtrFlag04" },//5
            { "data": "CertProcessTransferDshtId" },//6 Search List
            { "data": "CertProcessTransferDshtId" },//7 Search Syntax
            { "data": "CertProcessTransferDshtId" },//8 Search Semantic
            { "data": "StationsNotUploaded" },//9
            { "data": "StationsError" },//10
            { "data": "StationsErrorSyntax" },//11
            { "data": "StationsErrorSemantic" }//12
        ],
        "columnDefs": [
            { "width": "10%", "className": "text-center", "targets": 0 },//DhmValue
            { "width": "5%", "className": "text-center", "targets": 1 },//StationsNumber
            { "width": "5%", "className": "text-center", "targets": 2 },//CtrValue01
            { "width": "5%", "className": "text-center", "targets": 3 },//CtrValue02
            { "width": "5%", "className": "text-center", "targets": 4 },//CtrValue03
            { "width": "5%", "className": "text-center", "targets": 5 },//CtrValue04
            { "width": "5%", "className": "text-center", "targets": 6 },//Search Transfert List
            { "width": "5%", "className": "text-center", "targets": 7 },//Search Syntax
            { "width": "5%", "className": "text-center", "targets": 8 },//Search Semantic
            { "width": "0%", "className": "text-left none", "targets": 9 },//StationsNotUploaded
            { "width": "0%", "className": "text-left none", "targets": 10 },//StationsError
            { "width": "0%", "className": "text-left none", "targets": 11 },//StationsErrorSyntax
            { "width": "0%", "className": "text-left none", "targets": 12 },//StationsErrorSemantic

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableCtrGet(row['CtrFlag01'], row['CtrValue01']); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableCtrGet(row['CtrFlag02'], row['CtrValue02']); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableCtrGet(row['CtrFlag03'], row['CtrValue03']); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableCtrGet(row['CtrFlag04'], row['CtrValue04']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('CertProcessTransfertSearch', data, 'fas fa-bars', '0048ff'); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('CertProcessSyntaxSearch', data, 'fas fa-exclamation-circle', '0048ff'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('CertProcessSemanticSearch', data, 'fas fa-exclamation-circle', '0048ff'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    DoubleTotal1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(7).footer()).html(numFormat(DoubleTotal1));
        //}
    });
}

function CertProcessTransfertDshDisplay() {

    $("#ParamActionBtnId").find('span').attr('class', 'fa fa-spinner fa-spin');

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationId = GetElementValue('StationId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        BagContainerId != null && BagContainerId != '' &&
        StationId != null && StationId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {

        CertProcessTransfertDshGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon);
    }
    else {
        ParamMessageError();
    };
}

function CertProcessTransfertGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon) {

    HideReport("CertProcessTransfertTableReportId");
    //HideReport('BarChartReportId');
    //HideReport('PieChartReportId');

    //alert("in");
    //alert(SiteId);
    //alert(BagContainerId);
    //alert(StationId);
    //alert(StationNumber);
    //alert(DateStringStart);
    //alert(DateStringEnd);
    //alert(Icon);


    ParamMessageReset();

    $('#CertProcessTransfertTableId').DataTable().destroy();
    $('#CertProcessTransfertTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertProcessTransfertTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertProcessTransfertGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationId": StationId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" }, //0  
            { "data": "StationName" }, //1  
            { "data": "DhmValue" },//2
            { "data": "DhmUpload" },//3
            { "data": "FileStatusCtr" },//4
            { "data": "LinesNumber" },//5
            { "data": "UploadTypeName" },//6
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-left", "targets": 1 },//StationName
            { "width": "15%", "className": "text-center", "targets": 2 },//DhmValue
            { "width": "15%", "className": "text-center", "targets": 3 },//DhmUpload
            { "width": "10%", "className": "text-center", "targets": 4 },//FileStatusName
            { "width": "10%", "className": "text-right", "targets": 5 },//LinesNumber
            { "width": "10%", "className": "text-left", "targets": 6 },//UploadTypeName

            { "targets": 2, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            { "targets": 4, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    DoubleTotal1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(7).footer()).html(numFormat(DoubleTotal1));
        //}
    });
}

function CertProcessTransfertDisplay() {

    $("#ParamActionBtnId").find('span').attr('class', 'fa fa-spinner fa-spin');

    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationId = GetElementValue('StationId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        BagContainerId != null && BagContainerId != '' &&
        StationId != null && StationId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {

        CertProcessTransfertGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon);
    }
    else {
        ParamMessageError();
    };
}

function CertProcessTransfertSearch(CertProcessTransfertId) {

    var ActionBtnId = new String('CertProcessTransfertSearchBtnId' + CertProcessTransfertId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertProcessTransfertId).substr(0, 8);
    var DateStringEnd = new String(CertProcessTransfertId).substr(0, 8);
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationId = GetElementValue('StationId');
    var Icon = 'fas fa-bars';
    CertProcessTransfertGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon);
}

function CertProcessSyntaxGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon) {

    HideReport("CertProcessSyntaxTableReportId");
    ParamMessageReset();

    $('#CertProcessSyntaxTableId').DataTable().destroy();
    $('#CertProcessSyntaxTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertProcessSyntaxTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertProcessSyntaxGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationId": StationId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" }, //0  
            { "data": "StationName" }, //1  
            { "data": "DhmValue" },//2
            { "data": "DhmSyntax" },//3
            { "data": "LineNumber" },//4
            { "data": "Error" },//5
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-left", "targets": 1 },//StationName
            { "width": "15%", "className": "text-center", "targets": 2 },//DhmValue
            { "width": "15%", "className": "text-center", "targets": 3 },//DhmSyntax
            { "width": "10%", "className": "text-right", "targets": 4 },//LineNumber
            { "width": "10%", "className": "text-left", "targets": 5 },//Error

            { "targets": 2, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

            //{ "targets": 4, "render": function (data, type, row) { return GetGapBooleanFromDataTable(data); } }
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    DoubleTotal1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(7).footer()).html(numFormat(DoubleTotal1));
        //}
    });
}

function CertProcessSyntaxSearch(CertProcessTransfertId) {
    var ActionBtnId = new String('CertProcessSyntaxSearchBtnId' + CertProcessTransfertId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertProcessTransfertId).substr(0, 8);
    var DateStringEnd = new String(CertProcessTransfertId).substr(0, 8);
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationId = GetElementValue('StationId');
    var Icon = 'fas fa-exclamation-circle';
    CertProcessSyntaxGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon);
}

function CertProcessSemanticGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon) {

    HideReport("CertProcessSemanticTableReportId");
    ParamMessageReset();

    $('#CertProcessSemanticTableId').DataTable().destroy();
    $('#CertProcessSemanticTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertProcessSemanticTableReportId");
        },
        "ajax": {
            "url": "/Cert/CertProcessSemanticGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "BagContainerId": BagContainerId,
                "StationId": StationId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" }, //0  
            { "data": "StationName" }, //1  
            { "data": "DhmValue" },//2
            { "data": "LinesNumber" }//4
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-left", "targets": 1 },//StationName
            { "width": "15%", "className": "text-center", "targets": 2 },//DhmValue
            { "width": "10%", "className": "text-right", "targets": 3 },//LinesNumber

            { "targets": 2, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    DoubleTotal1 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(7).footer()).html(numFormat(DoubleTotal1));
        //}
    });
}

function CertProcessSemanticSearch(CertProcessTransfertId) {
    var ActionBtnId = new String('CertProcessSemanticSearchBtnId' + CertProcessTransfertId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var DateStringStart = new String(CertProcessTransfertId).substr(0, 8);
    var DateStringEnd = new String(CertProcessTransfertId).substr(0, 8);
    var SiteId = GetElementValue('SiteId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationId = GetElementValue('StationId');
    var Icon = 'fas fa-exclamation-circle';
    CertProcessSemanticGet(ActionBtnId, SiteId, BagContainerId, StationId, DateStringStart, DateStringEnd, Icon);
}

function ParamCertLanesSearch(StationId) {
    var ActionBtnId = new String('ParamCertLanesSearch' + 'BtnId' + StationId);
    var Icon = 'fas fa-eye';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    ParamMessageReset();

    var Pattern = 'ParamCertLanes';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Param/ParamCertLanesSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                StationId: StationId
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "LaneName" },//2
            { "data": "LaneTypeId" },//3
            { "data": "IpAddress" },//4
            { "data": "IsTest" },//5
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },//

            { "targets": 5, "render": function (data, type, row) { return DataTableInputCheckBoxElementGet('IsTest', row['StationId'], data, 'test()'); } },
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function ParamListGet() {
    $("#ParamId").empty();
    $.get("/Param/ParamListGet", function (data) {
        $.each(data, function (index, row) {
            $("#ParamId").append("<option value='" + row.ParamId + "'>" + row.ParamId + ' - ' + row.ParamName + "</option>")
        });
    });
    ParamResetDropDownList('ParamId');

    var ParamId = GetElementValue('ParamId');
    if (ParamId != null) {
        if (ParamId == '00') {
            HideReport('SiteId');
        }
    }
}

//function ParamListUpdate() {
//    var ParamId = GetElementValue('ParamId');
//    if (ParamId != null) {
//            ShowReport('SiteId' + 'Parent');
//    }
//}

function ParamListDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';

    var ParamId = GetElementValue('ParamId');

    var SiteId = GetElementValue('SiteId');
    var LSId = GetElementValue('LSId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');

    if (ParamId != null) {

        if (ParamId == '00')//Stations
        {
            ParamCertStationsDisplay(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber);
        }
        if (ParamId == '01')//Lanes
        {
            ParamCertLanesDisplay(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber);
        }
        if (ParamId == '02')//LS
        {
            ParamCertLSDisplay(ActionBtnId, Icon, SiteId, LSId);
        }
        if (ParamId == '03')//Pdv
        {
            ParamCertPdvsDisplay(ActionBtnId, Icon, '0', '0', '0');
        }
        if (ParamId == '04')//CamContext
        {
            var LaneName = GetElementValue('LaneNameId');
            var CamCategoryId = GetElementValue('CamCategoryId');
            var CamFeatureId = GetElementValue('CamFeatureId');
            CamFeaturesDisplay(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber, LaneName, CamCategoryId, CamFeatureId);
        }
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function ParamTasksGet() {

    $("#TaskId").empty();
    $.get("/Param/ParamTasksGet", function (data) {
        $.each(data, function (index, row) {
            $("#TaskId").append("<option value='" + row.TaskId + "'>" + row.TaskId + ' - ' + row.TaskName + "</option>")
        });
    });
    ParamResetDropDownList('TaskId');

    HideReport('SourceId' + 'Parent');
    HideReport('FileTypeId' + 'Parent');
    HideReport('LSId' + 'Parent');
    HideReport('BagContainerId' + 'Parent');
    HideReport('StationNumberId' + 'Parent');
    HideReport('LaneNameId' + 'Parent');
}

function ParamCertLanesDisplay(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    ParamMessageReset();

    var Pattern = 'ParamCertLanes';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Param/ParamCertLanesDisplay",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "LaneName" },//2
            { "data": "LaneTypeId" },//3
            { "data": "IpAddress" },//4

            { "data": "RowIdLane" },//5 IsCamContext
            { "data": "RowIdLane" },//6 IsCamIapi
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },

            { "targets": 5, "render": function (data, type, row) { return CertLaneIsCamContextGet(data, row['IsCamContext']); } },
            { "targets": 6, "render": function (data, type, row) { return CertLaneIsCamIapiGet(data, row['IsCamIapi']); } },
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}



function CertLaneIsTestSwitch(LaneId) {
    var obj = {};
    obj.LaneId = LaneId;

    $.ajax({
        url: "/Cert/CertLaneIsTestSwitch",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

        },
        error: function (request, status, error) {
            alert('Error!');
        }
    });
}


function CertLaneIsTestGet(LaneId, IsTest) {
    var Id = LaneId;
    var onchange = 'CertLaneIsTestSwitch(\'' + LaneId + '\')';
    var Pattern = 'CertLaneIsTestSwitch';
    var data = IsTest;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}



function CertLaneIsCamContextSwitch(RowIdLane) {
    var obj = {};
    obj.RowIdLane = RowIdLane;

    $.ajax({
        url: "/Cert/CertLaneIsCamContextSwitch",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

        },
        error: function (request, status, error) {
            alert('Error!');
        }
    });
}

function CertLaneIsCamContextGet(LaneId, IsCamContext) {
    var Id = LaneId;
    var onchange = 'CertLaneIsCamContextSwitch(' + LaneId + ')';
    var Pattern = 'CertLaneIsCamContextSwitch';
    var data = IsCamContext;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}



function CertLaneIsCamIapiSwitch(RowIdLane) {
    var obj = {};
    obj.RowIdLane = RowIdLane;

    $.ajax({
        url: "/Cert/CertLaneIsCamIapiSwitch",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

        },
        error: function (request, status, error) {
            alert('Error!');
        }
    });
}

function CertLaneIsCamIapiGet(LaneId, IsCamIapi) {
    var Id = LaneId;
    var onchange = 'CertLaneIsCamIapiSwitch(' + LaneId + ')';
    var Pattern = 'CertLaneIsCamIapiSwitch';
    var data = IsCamIapi;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}

function ParamCertStationsSearch(LSId) {
    var ActionBtnId = new String('ParamCertStationsSearch' + 'BtnId' + LSId);
    var Icon = 'fas fa-eye';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    ParamMessageReset();

    var Pattern = 'ParamCertStations';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Param/ParamCertStationsSearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                LSId: LSId
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "StationId" },//2
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "targets": 2, "render": function (data, type, row) { return DataTableGetButton('ParamCertLanesSearch', data, 'fas fa-eye', '0048ff'); } },

        ],
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function ParamCertStationsDisplay(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'ParamCertStations';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Param/ParamCertStationsGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "StationId" },//2
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "targets": 2, "render": function (data, type, row) { return DataTableGetButton('ParamCertLanesSearch', data, 'fas fa-eye', '0048ff'); } },

        ],
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function ParamCertLSDisplay(ActionBtnId, Icon, SiteId, LSId) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'ParamCertLS';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {


            $.get("/Cert/CertZipLenghtParamGet", function (data) {
                var elements = document.getElementsByClassName('ZipLenghtId');

                for (var i = 0; i < elements.length; ++i) {
                    var item = elements[i];
                    var SelectedValue = item.options[item.selectedIndex].value;
                    //var RowId = item.options[item.selectedIndex].id;
                    item.remove(item.selectedIndex);
                    $.each(data, function (index, row) {
                        var node = document.createElement("option");
                        //node.value = row.ZipLenghtId;
                        node.value = row.ZipLenght;
                        var textnode = document.createTextNode(row.ZipLenght);
                        node.appendChild(textnode);
                        item.appendChild(node);
                    });

                    for (var j = 0, len = item.options.length; j < len; j++) {
                        var opt = item.options[j];
                        if (opt.value == SelectedValue) {
                            item.options[j].selected = 'selected';
                            //item.options[j].id = RowId;
                            break;
                        }
                    }
                }

                $('#' + ActionBtnId).find('span').attr('class', Icon);
                ShowReport(PatternTableReportId);
            });





        },
        "ajax": {
            "url": "/Param/ParamCertLSDisplay",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                LSId: LSId
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "LSId" },//1
            { "data": "LSName" },//2

            { "data": "IpAddressP" },//3
            { "data": "IpAddressR" },//4
            { "data": "IpAddressOpe" },//5
            { "data": "IpAddressRed" },//6

            { "data": "IsVirtual" },//7
            { "data": "UserIdOpe" },//8
            { "data": "PasswordOpe" },//9

            { "data": "LSId" },//10

            { "data": "LSId" },//11 IsPrincipal
            { "data": "ZipLenght" },//12            
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-left", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "targets": 7, "render": function (data, type, row) { return DataTableInputCheckBoxElementGet('IsVirtual', row['LSId'], data, 'test()'); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableGetButton('ParamCertStationsSearch', data, 'fas fa-eye', '0048ff'); } },

            { "targets": 11, "render": function (data, type, row) { return CertLSIsPrincipalGet(data, row['IsPrincipal']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormInputDropDownElementGetNew('ZipLenghtId', row['LSId'], '', 'CertLSZipLenghtSave(\'' + row['LSId'] + '\')', data); } },
        ],
        "iDisplayLength": 200,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}



function CertLSZipLenghtSave(LSId) {
    var ZipLenght = GetElementValue('ZipLenghtId' + LSId);
    //var ZipLenght = 2;
    //Insert
    var obj = {};
    obj.LSId = LSId;
    obj.ZipLenght = ZipLenght;

    $.ajax({
        url: "/Cert/CertLSZipLenghtSave",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

        },
        error: function (request, status, error) {
            alert('Error!');
        }
    });
}




function CertLSIsPrincipalSwitch(LSId) {
    var obj = {};
    obj.LSId = LSId;

    $.ajax({
        url: "/Cert/CertLSIsPrincipalSwitch",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

        },
        error: function (request, status, error) {
            alert('Error!');
        }
    });
}


function CertLSIsPrincipalGet(LSId, IsPrincipal) {
    var Id = LSId;
    var onchange = 'CertLSIsPrincipalSwitch(\'' + LSId + '\')';
    var Pattern = 'CertLSIsPrincipalSwitch';
    var data = IsPrincipal;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}

function ParamCertPdvsDisplay(ActionBtnId, Icon, SiteId, BagContainerId, StationNumber) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    ParamMessageReset();

    var Pattern = 'ParamCertPdvs';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Param/ParamCertPdvsDisplay",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                StationNumber: StationNumber
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "StationName" },//1
            { "data": "PdvName" },//2
            { "data": "IpAddress" },//3
            { "data": "IsTest" },//4
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },

            { "targets": 4, "render": function (data, type, row) { return DataTableInputCheckBoxElementGet('IsTest', row['PdvId'], data, 'test()'); } },
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    MpReceiptOpeTotal = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptCeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpReceiptGapTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(2).footer()).html(numFormat(MpReceiptOpeTotal));
        //    $(api.column(3).footer()).html(numFormat(MpReceiptCeTotal));

        //    if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
        //        $(api.column(4).footer()).html('<span  class="badge badge-danger">' + MpReceiptGapTotal.toFixed(2) + '</span>');
        //    else $(api.column(4).footer()).html('<span  class="badge badge-success">0.00</span>');



        //    MpNumberOpeTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberCeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    MpNumberGapTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(5).footer()).html(MpNumberOpeTotal);
        //    $(api.column(6).footer()).html(MpNumberCeTotal);

        //    if (MpNumberGapTotal !== 0)
        //        $(api.column(7).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
        //    else $(api.column(7).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        //}
    });
}

function CertFileOpeUpload() {

    var ActionBtnId = 'ParamActionBtnId2';
    var Icon = 'fas fa-plus-circle';

    var TaskId = '00';
    var Source = '08';
    var FileTypeId = '80';

    //var DateString = TextParamValueGet(new String(ParamId).substr(6, 8));

    var SiteId = '0';
    var LSId = '0';
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = '0';
    var PdvId = '0';
    var BillingId = '0';
    var CategoryId = '0';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var HMPlanString = '2359';
    var IsEveryDay = false;
    var IsEveryHour = false;
    var IsPlanned = false;
    var IsCron = false;
    var AddDaysStart = 0;
    var AddDaysEnd = 0;

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    CertFileAdd(ActionBtnId,
        Icon,
        TaskId,
        Source,
        FileTypeId,
        SiteId,
        LSId,
        BagContainerId,
        StationNumber,
        LaneName,
        PdvId,
        DateStringStart,
        DateStringEnd,

        HMPlanString,
        IsEveryDay,
        IsEveryHour,
        IsPlanned,
        IsCron,
        BillingId,
        CategoryId,
        AddDaysStart,
        AddDaysEnd
    );

}

