function RepoDateFormatGet() {
    var TimeId = GetElementValue('TimeId');

    if (TimeId == '00')//Hour
    {
        ShowReport('DateStartId' + 'Parent');
        ShowReport('DateEndId' + 'Parent');
        HideReport('MonthStartId' + 'Parent');
        HideReport('MonthEndId' + 'Parent');
    }
    if (TimeId == '01' || TimeId == '06')//Day, Cumul
    {
        ShowReport('DateStartId' + 'Parent');
        ShowReport('DateEndId' + 'Parent');
        HideReport('MonthStartId' + 'Parent');
        HideReport('MonthEndId' + 'Parent');
    }
    if (TimeId == '02')//Month
    {
        HideReport('DateStartId' + 'Parent');
        HideReport('DateEndId' + 'Parent');
        ShowReport('MonthStartId' + 'Parent');
        ShowReport('MonthEndId' + 'Parent');
    }
}




function JsDateValueFromDateString(DateString) {
    return new String(DateString).substr(0, 2) + '/' + new String(DateString).substr(2, 2) + '/' + new String(DateString).substr(4, 4);
}

function JsSensLabelGet(Sens) {
    if (Sens == 'E') {
        return 'Entrées';
    }
    if (Sens == 'S') {
        return 'Sorties';
    }
}

function RepoTraficStationHourSerialGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, DateStringStart, DateStringEnd, itemData, CexNameShortTmp, StationNameTmp) {

    var imax = itemData.length - 1;
    var kmax = imax * 2;

    for (var i = 0; i <= imax; i++) {

        CexIdTmp = itemData[i].CexId;
        BagContainerIdTmp = itemData[i].BagContainerId;
        StationNumberTmp = itemData[i].StationNumber;
        SensTmp = itemData[i].Sens;
        CexNameShortTmp = itemData[i].CexNameShort;
        StationNameTmp = itemData[i].StationName;
        k = i * 2;

        if (
            (CexIdTmp == '01' && StationNumberTmp == '04') ||
            (CexIdTmp == '01' && StationNumberTmp == '02') ||
            (CexIdTmp == '01' && StationNumberTmp == '31') ||
            (CexIdTmp == '01' && StationNumberTmp == '05') ||
            (CexIdTmp == '01' && StationNumberTmp == '18') ||
            (CexIdTmp == '01' && StationNumberTmp == '43') ||
            (CexIdTmp == '01' && StationNumberTmp == '45') ||
            (CexIdTmp == '01' && StationNumberTmp == '47')
            //StationNumberTmp == '69' ||
            //StationNumberTmp == '66' ||
            //StationNumberTmp == '67' ||
            //StationNumberTmp == '20' ||
            //StationNumberTmp == '24' ||
            //StationNumberTmp == '61' ||
            //StationNumberTmp == '63' ||
            //StationNumberTmp == '35' ||
            //StationNumberTmp == '33' ||
            //StationNumberTmp == '34' ||
            //StationNumberTmp == '37' ||
            //StationNumberTmp == '38' ||
            //StationNumberTmp == '70' ||
            //StationNumberTmp == '71' ||
            //StationNumberTmp == '72' ||
            //StationNumberTmp == '73' ||
            //StationNumberTmp == '50' ||
            //StationNumberTmp == '55' ||
            //StationNumberTmp == '56' ||
            //StationNumberTmp == '57' ||
            //StationNumberTmp == '58' ||
            //StationNumberTmp == '78'
        ) {
            RepoTraficStationHourGet(ActionBtnId, Icon, itemData, imax, 0, DateStringStart, DateStringEnd);
        }
        else {
            if (
                (CexIdTmp == '01' && StationNumberTmp == '40') ||
                (CexIdTmp == '01' && StationNumberTmp == '03') ||
                (CexIdTmp == '01' && StationNumberTmp == '30') ||
                (CexIdTmp == '01' && StationNumberTmp == '06') ||
                (CexIdTmp == '01' && StationNumberTmp == '19') ||
                (CexIdTmp == '01' && StationNumberTmp == '42') ||
                (CexIdTmp == '01' && StationNumberTmp == '44')
                //StationNumberTmp == '68' ||
                //StationNumberTmp == '23' ||
                //StationNumberTmp == '62' ||
                //StationNumberTmp == '32' ||
                //StationNumberTmp == '77'
            ) {
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'E', DateStringStart, DateStringEnd, k, CexNameShortTmp, StationNameTmp);
            }
            else {
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'E', DateStringStart, DateStringEnd, k, CexNameShortTmp, StationNameTmp);
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'S', DateStringStart, DateStringEnd, k + 1, CexNameShortTmp, StationNameTmp);
            }
        }
    }
}















function RepoTraficCexOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(2, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficCexDisplay()");
    $('#ParamTitleId').text("Trafic par Centre d'Exploitation");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    document.getElementById('ParamActionBtnId3').setAttribute("onClick", "RepoPrint('RepoTraficCexHour')");

    $('#ParamActionTextId').text("Afficher");
    ShowReport('CexId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
    ShowReport('ParamActionContainerId3');
}

function RepoTraficSectionOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(3, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficCexDisplay()");
    $('#ParamTitleId').text("Trafic par Centre d'Exploitation");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId2');

    ShowReport('CexId' + 'Parent');

    ShowReport('TimeId' + 'Parent');
}

function RepoTraficAxleOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(4, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficAxleDisplay()");
    $('#ParamTitleId').text("Trafic par axe");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId2');

    ShowReport('AxleId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
}

function RepoTraficRegionOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(5, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficRegionDisplay()");
    $('#ParamTitleId').text("Trafic par région");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId3');

    ShowReport('RegionId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
}

function RepoTraficCompanyOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(6, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficCompanyDisplay()");
    $('#ParamTitleId').text("Choix des paramètres");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId3');

    ShowReport('TimeId' + 'Parent');

    //Export
    //if (document.getElementById('ExportExcelBtnId') != null) {
    //    document.getElementById('ExportExcelBtnId').setAttribute("onClick", "Export(\'RepoTraficCompany\', \'Excel\')");
    //}
    //if (document.getElementById('ExportPDFBtnId') != null) {
    //    document.getElementById('ExportPDFBtnId').setAttribute("onClick", "Export(\'RepoTraficCompany\', \'PDF\')");
    //} 

    //Export
    if (document.getElementById('ExportPDFBtnId') != null) {
        document.getElementById('ExportPDFBtnId').setAttribute("onClick", "ExportRepoCert(\'PDF\', \'Trafic\', \'Company\')");
    }
    if (document.getElementById('ExportExcelBtnId') != null) {
        document.getElementById('ExportExcelBtnId').setAttribute("onClick", "ExportRepoCert(\'Excel\', \'Trafic\', \'Company\')");
    }
}

function RepoTraficDshOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(7, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficDshDisplay()");
    $('#ParamTitleId').text("Trafic global");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId3');

    ShowReport('TimeId' + 'Parent');
}

//function RepoTraficPeriodOpen() {
//    RepoTraficAllReportsHide();
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');

//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficDivisionDisplay()");
//    $('#ParamTitleId').text("Trafic par période");
//    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
//    $('#ParamActionTextId').text("Afficher");

//    HideReport('CexId' + 'Parent');
//    HideReport('BagContainerId' + 'Parent');
//    HideReport('StationNumberId' + 'Parent');
//    HideReport('SensId' + 'Parent');
//    ShowReport('DateStartId' + 'Parent');
//    ShowReport('DateEndId' + 'Parent');

//    HideReport('ParamActionContainerId1');
//}

//function RepoTraficDivisionOpen() {
//    RepoTraficAllReportsHide();
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');

//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficPeriodDisplay()");
//    $('#ParamTitleId').text("Trafic par période");
//    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
//    $('#ParamActionTextId').text("Afficher");

//    HideReport('CexId' + 'Parent');
//    HideReport('BagContainerId' + 'Parent');
//    HideReport('StationNumberId' + 'Parent');
//    HideReport('SensId' + 'Parent');
//    ShowReport('DateStartId' + 'Parent');
//    ShowReport('DateEndId' + 'Parent');

//    HideReport('ParamActionContainerId1');
//}

//function RepoTraficSheetOpen() {
//    RepoTraficAllReportsHide();
//    HideReport('HomeReportId');

//    HideReport('ParamReportId');
//}




function RepoTraficAllReportsHide() {
    var HeaderIndex = '0';
    var TimeIndex = '0';
    var LevelIndex = '0';

    HideReport('HomeReportId');
    HideReport('ParamReportId');
    HideReport('ExportReportId');
    HideReport('CertReportId');
    //HideReport('CoverReportId');

    HeaderIndex = '1';
    TimeIndex = '0';
    PageIndex = '';
    PageRowIndex = '0';

    for (var PatternIndex = 0; PatternIndex <= 59; PatternIndex++) {
        HideReport('Grid' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_GridReportId');
    }

    HeaderIndex = '1';
    TimeIndex = '0';
    PageIndex = '';
    PageRowIndex = '1';
    for (var PatternIndex = 0; PatternIndex <= 59; PatternIndex++) {
        HideReport('Grid' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_GridReportId');
    }

    HideReport('Grid0000_GridReportId')

    HideReport('Grid12_' + 'GridReportId');
    HideReport('Grid13_' + 'GridReportId');
    HideReport('Grid14_' + 'GridReportId');

    //HideReport('Grid200_GridReportId');
    //HideReport('Grid201_GridReportId');

    HideReport('Grid300_GridReportId');
    HideReport('Grid301_GridReportId');

    HideReport('Grid400_GridReportId');
    HideReport('Grid401_GridReportId');

    HideReport('Grid500_GridReportId');
    HideReport('Grid501_GridReportId');

    HideReport('Page60_PageReportId');
    HideReport('Page61_PageReportId');

    //Region
    HeaderIndex = '5';
    TimeIndex = '0';
    LevelIndex = '';
    for (var PatternIndex = 0; PatternIndex <= 6; PatternIndex++) {
        HideReport('Page' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_PageReportId');
    }

    HideReport('Page51_PageReportId');

    HideReport('RepoTraficStationDay' + 'TableReportId');
    HideReport('RepoTraficStationDayDivision' + 'TableReportId');
    HideReport('RepoTraficStationMonth' + 'TableReportId');

    //Cex
    HeaderIndex = '2';
    TimeIndex = '0';
    LevelIndex = '';
    for (var PatternIndex = 0; PatternIndex <= 15; PatternIndex++) {
        HideReport('Page' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_PageReportId');
    }

    HideReport('Page21_PageReportId');

    //HideReport('RepoTraficCex' + 'Total' + 'Line' + 'ChartReportId');
    //HideReport('RepoTraficCex' + 'Mp' + 'Line' + 'ChartReportId');
    //HideReport('RepoTraficCex' + 'Cl' + 'Line' + 'ChartReportId');
    //HideReport('RepoTraficCex' + 'Total' + 'Bar' + 'ChartReportId');
    //HideReport('RepoTraficCex' + 'TableReportId');

    HideReport('RepoTraficSection' + 'TableReportId');

    HideReport('RepoTraficAxle' + 'TableReportId');

    HideReport('RepoTraficRegion' + 'TableReportId');

    HideReport('RepoTraficPeriod' + 'Total' + 'Line' + 'ChartReportId');
    HideReport('RepoTraficPeriod' + 'Mp' + 'Line' + 'ChartReportId');
    HideReport('RepoTraficPeriod' + 'Cl' + 'Line' + 'ChartReportId');
    HideReport('RepoTraficPeriod' + 'TableReportId');



    HideReport('CertFilePlan' + 'TableReportId');



}

function RepoTraficAllParametersHide() {

    HideReport('RegionId' + 'Parent');
    HideReport('AxleId' + 'Parent');
    HideReport('SectionId' + 'Parent');
    HideReport('CexId' + 'Parent');
    HideReport('BagContainerId' + 'Parent');
    HideReport('StationNumberId' + 'Parent');
    HideReport('SensId' + 'Parent');
    HideReport('IsPrincipalId' + 'Parent');


    HideReport('DateStartId' + 'Parent');
    HideReport('DateEndId' + 'Parent');
    HideReport('MonthStartId' + 'Parent');
    HideReport('MonthEndId' + 'Parent');
    HideReport('TimeId' + 'Parent');

    HideReport('ParamActionContainerId1');
    HideReport('ParamActionContainerId2');
    HideReport('ParamActionContainerId3');

    HideReport('TaskKillBtnId');
    HideReport('CertReportSendBtnId');
    HideReport('CertReportViewBtnId');
}

//function RepoTraficHomeOpen() {
//    //LeftMenuHide();
//    RepoTraficAllReportsHide();
//    RepoTraficAllParametersHide();
//    MenuBarHighlight(0, 7);

//    //ShowReport('HomeReportId');
//    ParamTimesGet();
//    HtmlDropDownListFill('CexId', '0', '/Param/ParamCexGet', 'CexId', 'CexNameShort');
//    HtmlDropDownListFill('RegionId', '0', '/Param/ParamRegionsGet', 'RegionId', 'RegionNameShort');
//    HtmlDropDownListFill('AxleId', '0', '/Param/ParamAxlesGet', 'AxleId', 'AxleName');
//    //HtmlDropDownListFill('AxleIdTmp', '0', '/Param/ParamAxlesTmpGet', 'AxleId', 'AxleName');

//    ParamResetDropDownList('BagContainerId');
//    ParamResetDropDownList('StationNumberId');



//    //Cover
//    document.getElementById('Grid0000_GridCol0Id').setAttribute('Class', 'col');
//    ShowReport('Grid0000_GridCol0Id');
//    document.getElementById('Grid0000_GridCol1Id').setAttribute('Class', 'col-16');
//    document.getElementById('Grid0000_GridCol1Id').style.height = '3080px';
//    ShowReport('Grid0000_GridCol1Id');
//    document.getElementById('Grid0000_GridCol2Id').setAttribute('Class', 'col');
//    ShowReport('Grid0000_GridCol2Id');
//    //ShowReport('CoverReportId');
//}

function RepoNrAllReportsHide() {
    HideReport('HomeReportId');
    HideReport('ParamReportId');
    HideReport('ExportReportId');
    HideReport('CertReportId');

    //Cover
    HideReport('Grid0000_' + 'GridReportId');

    //Site
    //HideReport('Grid10_' + 'GridReportId');
    HeaderIndex = '1';
    TimeIndex = '0';
    for (var PatternIndex = 0; PatternIndex <= 7; PatternIndex++) {
        HideReport('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId');
    };





    HideReport('Grid11_' + 'GridReportId');

    //HeaderIndex = '1';
    //TimeIndex = '0';
    //LevelIndex = '0';
    //for (var PatternIndex = 0; PatternIndex <= 7; PatternIndex++) {
    //    HideReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');
    //};  

    //HeaderIndex = '1';
    //TimeIndex = '0';
    //LevelIndex = '1';
    //for (var PatternIndex = 0; PatternIndex <= 7; PatternIndex++) {
    //    HideReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');
    //};

    //Cex
    HideReport('Page200_PageReportId');
    HideReport('Page201_PageReportId');
    HideReport('Page202_PageReportId');

    //Region
    HideReport('Page30_PageReportId');
    HideReport('Page30bis_PageReportId');

    //Company
    HideReport('Page40_' + 'PageReportId');

    HideReport('Grid40_' + 'GridReportId');
    HideReport('Grid400_' + 'GridReportId');
    HideReport('Grid401_' + 'GridReportId');
    HideReport('Grid402_' + 'GridReportId');
    //HideReport('Grid403_' + 'GridReportId');
    //HideReport('Grid404_' + 'GridReportId');

    HideReport('Grid41_' + 'GridReportId');
    HideReport('Grid42_' + 'GridReportId');
    HideReport('Grid43_' + 'GridReportId');

    HideReport('Grid410_' + 'GridReportId');
    HideReport('Grid411_' + 'GridReportId');

    HideReport('Grid420_' + 'GridReportId');

    //Cumul
    HideReport('Grid400_' + 'GridReportId');

    //Axle
    HideReport('Grid500_' + 'GridReportId');
    HideReport('Grid501_' + 'GridReportId');

    HideReport('Grid52_' + 'GridReportId');

    HideReport('Grid53_' + 'GridReportId');
    HideReport('Grid54_' + 'GridReportId');
    HideReport('Grid55_' + 'GridReportId');
}

function RepoNrAllParametersHide() {

    HideReport('AxleId' + 'Parent');
    HideReport('RegionId' + 'Parent');
    HideReport('CexId' + 'Parent');
    HideReport('SiteId' + 'Parent');
    HideReport('BagContainerId' + 'Parent');

    HideReport('DateStartId' + 'Parent');
    HideReport('DateEndId' + 'Parent');
    HideReport('MonthStartId' + 'Parent');
    HideReport('MonthEndId' + 'Parent');
    HideReport('TimeId' + 'Parent');

    HideReport('ParamActionBtnId1');
    HideReport('ParamActionBtnId2');
}



function RepoNrHomeOpen() {
    LeftMenuHide();
    RepoNrAllReportsHide();
    RepoNrAllParametersHide();
    MenuBarHighlight(0, 7);

    ShowReport('HomeReportId');
    ParamTimesGet();
    HtmlDropDownListFill('CexId', '0', '/Param/ParamCexGet', 'CexId', 'CexNameShort');
    HtmlDropDownListFill('RegionId', '0', '/Param/ParamRegionsGet', 'RegionId', 'RegionNameShort');
    HtmlDropDownListFill('AxleId', '0', '/Param/ParamAxlesGet', 'AxleId', 'AxleName');
    ParamResetDropDownList('BagContainerId');

    //Cover
    document.getElementById('Grid0000_GridCol0Id').setAttribute('Class', 'col');
    ShowReport('Grid0000_GridCol0Id');
    document.getElementById('Grid0000_GridCol1Id').setAttribute('Class', 'col-16');
    document.getElementById('Grid0000_GridCol1Id').style.height = '3080px';
    ShowReport('Grid0000_GridCol1Id');
    document.getElementById('Grid0000_GridCol2Id').setAttribute('Class', 'col');
}

function RepoNrSiteOpen() {
    RepoNrAllReportsHide();
    RepoNrAllParametersHide();
    MenuBarHighlight(1, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrSiteDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrSite')");
    $('#ParamTitleId').text("Recette par gare");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    //Report
    if (document.getElementById('CertReportViewBtnId') != null && document.getElementById('CertReportSendBtnId') != null) {
        document.getElementById('CertReportViewBtnId').setAttribute("onClick", "CertReportStationView(\'ReceiptStation\')");
        document.getElementById('CertReportSendBtnId').setAttribute("onClick", "CertReportStationSend(\'ReceiptStation\')");
    }

    ShowReport('CexId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    ShowReport('ParamActionContainerId1');
}

function RepoNrCexOpen() {
    RepoNrAllReportsHide();
    RepoNrAllParametersHide();
    MenuBarHighlight(2, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrCexDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrCex')");
    $('#ParamTitleId').text("Recette par Centre d'Exploitation");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('CexId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
    ShowReport('ParamActionContainerId1');
}

function RepoNrRegionOpen() {
    RepoNrAllReportsHide();
    RepoNrAllParametersHide();
    MenuBarHighlight(3, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrRegionDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrRegion')");
    $('#ParamTitleId').text("Recette par Centre d'Exploitation");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    var Pattern = 'RepoNrCex';

    HideReport(Pattern + 'Day' + 'CardHeaderId');

    ShowReport('RegionId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
    ShowReport('ParamActionContainerId1');
}

function RepoNrCompanyOpen() {

    RepoNrAllReportsHide();
    RepoNrAllParametersHide();
    MenuBarHighlight(4, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrCompanyDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrCompany')");
    $('#ParamTitleId').text("Recette globale");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('TimeId' + 'Parent');
    ShowReport('ParamActionContainerId1');

    //Export
    if (document.getElementById('ExportPDFBtnId') != null) {
        document.getElementById('ExportPDFBtnId').setAttribute("onClick", "ExportRepoCert(\'PDF\', \'Nr\', \'Company\')");
    }
    if (document.getElementById('ExportExcelBtnId') != null) {
        document.getElementById('ExportExcelBtnId').setAttribute("onClick", "ExportRepoCert(\'Excel\', \'Nr\', \'Company\')");
    }
}

function RepoNrAxleOpen() {
    RepoNrAllReportsHide();
    RepoNrAllParametersHide();
    MenuBarHighlight(5, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrAxleDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrAxle')");
    $('#ParamTitleId').text("Chiffre d\'affaire par axe autoroutier");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('AxleId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
}

function RepoNrSectionOpen() {
    RepoNrAllReportsHide();
    RepoNrAllParametersHide();
    MenuBarHighlight(6, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrAxleDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrAxle')");
    $('#ParamTitleId').text("Chiffre d\'affaire par axe autoroutier");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('SectionId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
}

function RepoNrDshOpen() {
    RepoNrAllReportsHide();
    RepoNrAllParametersHide();
    MenuBarHighlight(7, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrDshDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrDsh')");
    $('#ParamTitleId').text("Reporting Chiffre d\'affaire");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('TimeId' + 'Parent');
}

function RepoPdvAllReportsHide() {
    HideReport('HomeReportId');
    HideReport('ParamReportId');
    HideReport('CertReportId');

    //Cover
    HideReport('Grid0000_' + 'GridReportId');

    //Site
    //HideReport('Grid10_' + 'GridReportId');
    HeaderIndex = '1';
    TimeIndex = '0';
    for (var PatternIndex = 0; PatternIndex <= 7; PatternIndex++) {
        HideReport('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId');
    };





    HideReport('Grid11_' + 'GridReportId');

    //HeaderIndex = '1';
    //TimeIndex = '0';
    //LevelIndex = '0';
    //for (var PatternIndex = 0; PatternIndex <= 7; PatternIndex++) {
    //    HideReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');
    //};  

    //HeaderIndex = '1';
    //TimeIndex = '0';
    //LevelIndex = '1';
    //for (var PatternIndex = 0; PatternIndex <= 7; PatternIndex++) {
    //    HideReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');
    //};

    //Cex
    HideReport('Page20_PageReportId');
    HideReport('Page20Bis_PageReportId');

    //Region
    HideReport('Page30_PageReportId');

    //Company
    HideReport('Page40_' + 'PageReportId');

    HideReport('Grid40_' + 'GridReportId');
    HideReport('Grid41_' + 'GridReportId');
    HideReport('Grid42_' + 'GridReportId');
    HideReport('Grid43_' + 'GridReportId');

    HideReport('Grid410_' + 'GridReportId');
    HideReport('Grid411_' + 'GridReportId');

    HideReport('Grid420_' + 'GridReportId');

    //Cumul
    HideReport('Grid400_' + 'GridReportId');

    //Axle
    HideReport('Grid500_' + 'GridReportId');
    HideReport('Grid501_' + 'GridReportId');

    HideReport('Grid52_' + 'GridReportId');

    HideReport('Grid53_' + 'GridReportId');
    HideReport('Grid54_' + 'GridReportId');
    HideReport('Grid55_' + 'GridReportId');
}

function RepoPdvAllParametersHide() {

    HideReport('AxleId' + 'Parent');
    HideReport('RegionId' + 'Parent');
    HideReport('CexId' + 'Parent');
    HideReport('SiteId' + 'Parent');
    HideReport('BagContainerId' + 'Parent');

    HideReport('DateStartId' + 'Parent');
    HideReport('DateEndId' + 'Parent');
    HideReport('MonthStartId' + 'Parent');
    HideReport('MonthEndId' + 'Parent');
    HideReport('TimeId' + 'Parent');

    HideReport('ParamActionBtnId1');
    HideReport('ParamActionBtnId2');
}



function RepoPdvHomeOpen() {
    RepoPdvAllReportsHide();
    RepoPdvAllParametersHide();
    MenuBarHighlight(0, 7);

    ShowReport('HomeReportId');
    ParamTimesGet();
    HtmlDropDownListFill('CexId', '0', '/Param/ParamCexGet', 'CexId', 'CexNameShort');
    HtmlDropDownListFill('RegionId', '0', '/Param/ParamRegionsGet', 'RegionId', 'RegionNameShort');
    HtmlDropDownListFill('AxleId', '0', '/Param/ParamAxlesGet', 'AxleId', 'AxleName');
    ParamResetDropDownList('BagContainerId');

    //Cover
    document.getElementById('Grid0000_GridCol0Id').setAttribute('Class', 'col');
    ShowReport('Grid0000_GridCol0Id');
    document.getElementById('Grid0000_GridCol1Id').setAttribute('Class', 'col-16');
    document.getElementById('Grid0000_GridCol1Id').style.height = '3080px';
    ShowReport('Grid0000_GridCol1Id');
    document.getElementById('Grid0000_GridCol2Id').setAttribute('Class', 'col');
}

function RepoPdvStationOpen() {
    RepoPdvAllReportsHide();
    RepoPdvAllParametersHide();
    MenuBarHighlight(1, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrSiteDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrSite')");
    $('#ParamTitleId').text("Recette par gare");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    //Report
    if (document.getElementById('CertReportViewBtnId') != null && document.getElementById('CertReportSendBtnId') != null) {
        document.getElementById('CertReportViewBtnId').setAttribute("onClick", "CertReportStationView(\'ReceiptStation\')");
        document.getElementById('CertReportSendBtnId').setAttribute("onClick", "CertReportStationSend(\'ReceiptStation\')");
    }

    ShowReport('CexId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('TimeId' + 'Parent');

    ShowReport('ParamActionContainerId1');
}

function RepoPdvCexOpen() {
    RepoPdvAllReportsHide();
    RepoPdvAllParametersHide();
    MenuBarHighlight(2, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrCexDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrCex')");
    $('#ParamTitleId').text("Recette par Centre d'Exploitation");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('CexId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
    ShowReport('ParamActionContainerId1');
}

function RepoPdvRegionOpen() {
    RepoPdvAllReportsHide();
    RepoPdvAllParametersHide();
    MenuBarHighlight(3, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrRegionDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrRegion')");
    $('#ParamTitleId').text("Recette par Centre d'Exploitation");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    var Pattern = 'RepoNrCex';

    HideReport(Pattern + 'Day' + 'CardHeaderId');

    ShowReport('RegionId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
    ShowReport('ParamActionContainerId1');
}

function RepoPdvCompanyOpen() {
    RepoPdvAllReportsHide();
    RepoPdvAllParametersHide();
    MenuBarHighlight(4, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrCompanyDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrCompany')");
    $('#ParamTitleId').text("Recette globale");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('TimeId' + 'Parent');
    ShowReport('ParamActionContainerId1');
}

function RepoPdvAxleOpen() {
    RepoPdvAllReportsHide();
    RepoPdvAllParametersHide();
    MenuBarHighlight(5, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrAxleDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrAxle')");
    $('#ParamTitleId').text("Chiffre d\'affaire par axe autoroutier");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('AxleId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
}

function RepoPdvSectionOpen() {
    RepoPdvAllReportsHide();
    RepoPdvAllParametersHide();
    MenuBarHighlight(6, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrAxleDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrAxle')");
    $('#ParamTitleId').text("Chiffre d\'affaire par axe autoroutier");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('SectionId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
}

function RepoPdvDshOpen() {
    RepoPdvAllReportsHide();
    RepoPdvAllParametersHide();
    MenuBarHighlight(7, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoNrDshDisplay()");
    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoUpdate('NrDsh')");
    $('#ParamTitleId').text("Reporting Chiffre d\'affaire");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('TimeId' + 'Parent');
}

function RepoWorkAllReportsHide() {
    HideReport('HomeReportId');
    HideReport('ParamReportId');
}

function RepoWorkAllParametersHide() {

    HideReport('DateStartId' + 'Parent');
    HideReport('DateEndId' + 'Parent');

    HideReport('ParamActionBtnId1');
    HideReport('ParamActionBtnId2');
}

function RepoWorkHomeOpen() {
    RepoWorkAllReportsHide();
    RepoWorkAllParametersHide();
    MenuBarHighlight(0, 1);

    ShowReport('HomeReportId');
}

function RepoWorkPersonOpen() {
    RepoWorkAllReportsHide();
    RepoWorkAllParametersHide();
    MenuBarHighlight(1, 1);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoWorkDisplay()");
    $('#ParamTitleId').text("Indicateurs de performance");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");
}

function RepoTotalChartBarTwoDisplay(Title, Pattern, PatternTableId, DataName, PatternIndex, labelsIndex, data0Index, data1Index) {
    var Title = Title;
    var PatternChart = Pattern + 'TotalBar' + PatternIndex;
    var labels = GetColumnArray(PatternTableId, labelsIndex);

    var label1 = DataName + ' 2020';
    var label2 = DataName + ' 2019';

    var color1 = 'rgba(7,98,250,1)';
    var color2 = 'rgba(7,98,250,0.2)';

    var data1 = GetColumnArray(PatternTableId, data0Index);
    var data2 = GetColumnArray(PatternTableId, data1Index);

    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
    DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, color1, label2, data2, color2);
}

function RepoTraficOdChartBarOneDisplay(Title, Pattern, PatternTableId, DataName, PatternIndex, labelsIndex, data0Index) {
    var Title = Title;
    var PatternChart = Pattern + 'Bar' + PatternIndex;
    var labels = GetColumnArray(PatternTableId, labelsIndex);

    var label1 = DataName;
    var backgroundColor1 = 'rgba(7,98,250,1)';
    var data1 = GetColumnArray(PatternTableId, data0Index);

    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
    ChartBarOneDisplay(PatternChart, labels, Title, label1, data1, backgroundColor1);
}

function RepoNrMpChartPieFiveDisplay(Pattern, DataTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4) {

    var Portion = DataTableCellValueGet(DataTableId, RowIndex, PortionIndex);
    var PatternChart = Pattern + 'MpPie' + RowIndex;
    var Title = 'Le ' + DateValue + ' : Répartition par MP - ' + Portion;

    var data1 = DataTableRowsFiveGet(DataTableId, RowIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);
    var label0 = 'Espèce';
    var label1 = 'Jawaz';
    var label2 = 'Carte Abon';
    var label3 = 'Carte Pétro';
    var label4 = 'Autres';
    var labels = FormatArrayFiveGet(label0, label1, label2, label3, label4);

    var color0 = 'rgba(255,231,34,1)';
    var color1 = 'rgba(255,135,7,1)';
    var color2 = 'rgba(169,26,255,1)';
    var color3 = 'rgba(0,118,255,1)';
    var color4 = 'rgba(74,130,55,1)';
    var backgroundColor = FormatArrayFiveGet(color0, color1, color2, color3, color4);

    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
    document.getElementById(PatternChart + 'ChartReportId').style.width = '105%';
    ChartPieDisplay(Title, labels, PatternChart, backgroundColor, data1);
}

function RepoNrMpChartPieSixDisplay(Pattern, DataTableId, DateValue, GridIndex, ColumnIndex, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4, MpIndex5) {

    var Portion = DataTableCellValueGet(DataTableId, RowIndex, PortionIndex);
    var PatternChart = Pattern + 'MpPie' + GridIndex + ColumnIndex + RowIndex;
    var Title = 'Le ' + DateValue + ' : Répartition par MP - ' + Portion;

    var data1 = DataTableRowsSixGet(DataTableId, RowIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4, MpIndex5);
    var label0 = 'Espèce';
    var label1 = 'Jawaz';
    var label2 = 'Carte Abon';
    var label3 = 'Carte Pétro';
    var label4 = 'Carte Fréque.';
    var label5 = 'Autres';
    var labels = FormatArraySixGet(label0, label1, label2, label3, label4, label5);

    var color0 = 'rgba(255,231,34,1)';
    var color1 = 'rgba(255,135,7,1)';
    var color2 = 'rgba(169,26,255,1)';
    var color3 = 'rgba(0,118,255,1)';
    var color4 = 'rgba(2,33,55,1)';
    var color5 = 'rgba(74,130,55,1)';
    var backgroundColor = FormatArraySixGet(color0, color1, color2, color3, color4, color5);

    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
    document.getElementById(PatternChart + 'ChartReportId').style.width = '105%';
    ChartPieDisplay(Title, labels, PatternChart, backgroundColor, data1);
}

function RepoNrClChartPieDisplay(Pattern, DataTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2) {

    var Portion = DataTableCellValueGet(DataTableId, RowIndex, PortionIndex);
    var Title = 'Le ' + DateValue + ' : Répartition par catégorie - ' + Portion;
    var PatternChart = Pattern + 'ClPie' + RowIndex;
    var data1 = DataTableRowThreeValuesGet(DataTableId, RowIndex, ClIndex0, ClIndex1, CmIndex2);
    var label0 = 'VL';
    var label1 = 'PL1';
    var label2 = 'PL2';
    var labels = FormatArrayThreeGet(label0, label1, label2);
    var color0 = 'rgba(7,162,224,1)';
    var color1 = 'rgba(55,186,137,1)';
    var color2 = 'rgba(186,189,52,1)';
    var backgroundColor = FormatArrayThreeGet(color0, color1, color2);

    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
    ChartPieDisplay(Title, labels, PatternChart, backgroundColor, data1);
}

function RepoNrMpChartBarHSixDisplay(Title, Pattern, DataTableId, PatternIndex, labelsIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4, MpIndex5) {

    var PatternChart = Pattern + 'MpTotalBarH' + PatternIndex;

    var labels = DataTableColumnValuesGet(DataTableId, labelsIndex);
    var label0 = 'Espèce';
    var label1 = 'Jawaz';
    var label2 = 'Carte Abon';
    var label3 = 'Carte Pétro.';
    var label4 = 'Carte Fréqu.';
    var label5 = 'Autres';

    var color0 = 'rgba(255,231,34,1)';
    var color1 = 'rgba(255,135,7,1)';
    var color2 = 'rgba(169,26,255,1)';
    var color3 = 'rgba(0,118,255,1)';
    var color4 = 'rgba(49,255,104,1)';
    var color5 = 'rgba(74,130,55,1)';

    var data0 = DataTableColumnValuesGet(DataTableId, MpIndex0);
    var data1 = DataTableColumnValuesGet(DataTableId, MpIndex1);
    var data2 = DataTableColumnValuesGet(DataTableId, MpIndex2);
    var data3 = DataTableColumnValuesGet(DataTableId, MpIndex3);
    var data4 = DataTableColumnValuesGet(DataTableId, MpIndex4);
    var data5 = DataTableColumnValuesGet(DataTableId, MpIndex5);

    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
    document.getElementById(PatternChart + 'ChartReportId').style.width = '102%';

    ChartBarHorizontalFiveDisplay(Title, labels, PatternChart,
        label0, label1, label2, label3, label4, label5,
        color0, color1, color2, color3, color4, color5,
        data0, data1, data2, data3, data4, data5);
}


function RepoClChartBarHDisplay(Title, Pattern, DataTableId, PatternIndex, labelsIndex, ClIndex0, ClIndex1, ClIndex2) {

    var PatternChart = Pattern + 'ClTotalBarH' + PatternIndex;

    var labels = DataTableColumnValuesGet(DataTableId, labelsIndex);
    var label0 = 'VL';
    var label1 = 'PL1';
    var label2 = 'PL2';

    var color0 = 'rgba(7,162,224,1)';
    var color1 = 'rgba(55,186,137,1)';
    var color2 = 'rgba(186,189,52,1)';

    var data0 = DataTableColumnValuesGet(DataTableId, ClIndex0);
    var data1 = DataTableColumnValuesGet(DataTableId, ClIndex1);
    var data2 = DataTableColumnValuesGet(DataTableId, ClIndex2);

    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
    document.getElementById(PatternChart + 'ChartReportId').style.width = '102%';

    ChartBarHorizontalThreeDisplay(Title, labels, PatternChart,
        label0, label1, label2,
        color0, color1, color2,
        data0, data1, data2);
}

function RepoWorkEmergencyGet(ActionBtnId, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoWorkEmergency';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);

            //Variables
            //var DateValue = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '1';
            var TimeIndex = '0';
            var LevelIndex = '';
            var PatternIndex = '';
            var DataName = 'Chiffre d\'affaires';

            //Page
            //document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId').style.height = '3170px';
            document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageCardId').style.border = 'transparent';
            ShowReport('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId');

            //Grid
            LevelIndex = '0';
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').style.display = 'none';
            //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
            ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

            //Table
            document.getElementById(Pattern + 'TableCardHeaderId').style.display = 'none';

            $('#' + Pattern + 'TableCardHeaderId h5').text(Title);

            var PatternChart = Pattern + 'Pie';
            var Title = 'Activités par degré d\'urgence';

            var labels = DataTableColumnValuesGet(PatternTableId, 0)
            var data1 = DataTableColumnValuesGet(PatternTableId, 1)

            var color0 = 'rgba(237,2,6,1)';
            var color1 = 'rgba(237,151,36,1)';
            var color2 = 'rgba(7,122,237,1)';
            var color3 = 'rgba(215,208,203,1)';
            var backgroundColor = FormatArrayFourGet(color0, color1, color2, color3);

            document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //document.getElementById(PatternChart + 'ChartReportId').style.width = '105%';
            ChartPieDisplay(Title, labels, PatternChart, backgroundColor, data1);
        },
        "ajax": {
            "url": "/Repo/RepoWorkEmergencyGet",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            { "data": "EmergencyName" },//0
            { "data": "EmergencyCount" },//1  
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //$(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

        //Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //$(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

        //Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //$(api.column(6).footer()).html(GetGapDoubleFromDataTable(Total2));

        //var Evo = ((Total0 - Total1) / Total1) * 100;

        //if (Evo < 0)
        //    $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
        //else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        //}
    });
}

function RepoWorkStatusGet(ActionBtnId, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoWorkStatus';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);

            //Variables
            //var DateValue = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '1';
            var TimeIndex = '0';
            var LevelIndex = '';
            var PatternIndex = '';
            var DataName = 'Chiffre d\'affaires';

            //Page
            //document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId').style.height = '3170px';
            document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageCardId').style.border = 'transparent';
            ShowReport('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId');

            //Table
            LevelIndex = '1';
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', '');
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').style.display = 'none';
            //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
            document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
            ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');


            $('#' + Pattern + 'TableCardHeaderId h5').text(Title);
            document.getElementById(Pattern + 'TableCardHeaderId').style.display = 'none';
            document.getElementById(Pattern + 'TableCardBodyId').style.border = 'transparent';
            var PatternChart = Pattern + 'Pie';
            var Title = 'Activités par status';

            var labels = DataTableColumnValuesGet(PatternTableId, 0);
            var data1 = DataTableColumnValuesGet(PatternTableId, 1);
            var backgroundColor = DataTableColumnValuesGet(PatternTableId, 2);
            document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            ChartPieDisplay(Title, labels, PatternChart, backgroundColor, data1);

            //Bar
            var labelsIndex = 0;
            var Title = Title;
            var PatternChart = Pattern + 'Bar';
            var labels = GetColumnArray(PatternTableId, 0);

            var data0 = DataTableCellValueGet(PatternTableId, 0, 1);
            var data1 = DataTableCellValueGet(PatternTableId, 1, 1);
            var data2 = DataTableCellValueGet(PatternTableId, 2, 1);
            var data3 = DataTableCellValueGet(PatternTableId, 3, 1);

            var label0 = DataTableCellValueGet(PatternTableId, 0, 0);
            var label1 = DataTableCellValueGet(PatternTableId, 1, 0);
            var label2 = DataTableCellValueGet(PatternTableId, 2, 0);
            var label3 = DataTableCellValueGet(PatternTableId, 3, 0);

            var backgroundColor0 = DataTableCellValueGet(PatternTableId, 0, 2);
            var backgroundColor1 = DataTableCellValueGet(PatternTableId, 1, 2);
            var backgroundColor2 = DataTableCellValueGet(PatternTableId, 2, 2);
            var backgroundColor3 = DataTableCellValueGet(PatternTableId, 3, 2);

            document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            DisplayChartBarFour(
                Title, PatternChart, labels,
                label0, label1, label2, label3,
                data0, data1, data2, data3,
                backgroundColor0, backgroundColor1, backgroundColor2, backgroundColor3);
        },
        "ajax": {
            "url": "/Repo/RepoWorkStatusGet",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            { "data": "UpdateStatusName" },//0
            { "data": "StatusCount" },//1  
            { "data": "RgbValue" },//2
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left none", "targets": 2 },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //$(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

        //Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //$(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

        //Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //$(api.column(6).footer()).html(GetGapDoubleFromDataTable(Total2));

        //var Evo = ((Total0 - Total1) / Total1) * 100;

        //if (Evo < 0)
        //    $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
        //else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        //}
    });
}

function RepoWorkDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';

    //var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    //var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    RepoNrAllReportsHide();
    ShowReport('ParamReportId');
    RepoWorkEmergencyGet(ActionBtnId, Icon);
    RepoWorkStatusGet(ActionBtnId, Icon);
}

function RepoTraficStationDayGetOld(ActionBtnId, Icon, CexId, BagContainerId, StationNumber, Sens, IsPrincipal, DateStringStart, DateStringEnd) {
    var Pattern = 'RepoTraficStationDay';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    ParamMessageReset();


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            //$('.dataTables_scrollBody thead tr').addClass('hidden');
        },
        "ajax": {
            "url": "/Repo/RepoTraficStationDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "CexId": CexId,
                "BagContainerId": BagContainerId,
                "StationNumber": StationNumber,
                "Sens": Sens,
                "IsPrincipal": IsPrincipal,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "CexNameShort" }, //0
            { "data": "CexNameShort" }, //1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName + ' - ' + data.Sens; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//3

            { "data": "TraficOpeC1" },//4
            { "data": "TraficOpeC2" },//5
            { "data": "TraficOpeC3" },//6
            { "data": "TraficOpe" },//7

            { "data": "TraficOpeC1Old" },//8
            { "data": "TraficOpeC2Old" },//9
            { "data": "TraficOpeC3Old" },//10
            { "data": "TraficOpeOld" },//11

            { "data": "TraficOpeC1EvoR" },//12
            { "data": "TraficOpeC2EvoR" },//13
            { "data": "TraficOpeC3EvoR" },//14
            { "data": "TraficOpeEvoR" },//15
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },

            { "targets": 7, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapInfoFromDataTable(row['TraficGap'])); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapInfoFromDataTable(row['TraficGapOld'])); } },

            {
                "targets": 12, "render": function (data, type, row) {
                    if (row['TraficOpeC1Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC1'] - row['TraficOpeC1Old']) / row['TraficOpeC1Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    if (row['TraficOpeC2Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC2'] - row['TraficOpeC2Old']) / row['TraficOpeC2Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 14, "render": function (data, type, row) {
                    if (row['TraficOpeC3Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC3'] - row['TraficOpeC3Old']) / row['TraficOpeC3Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            { "targets": 15, "render": function (data, type, row) { return DataTableEvoGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    TraficOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    TraficCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    TraficGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(3).footer()).html(numShortFormat(TraficOpeTotal));
        //    $(api.column(4).footer()).html(numShortFormat(TraficCeTotal));
        //    $(api.column(5).footer()).html(numShortFormat(TraficGapTotal));

        //    if (TraficGapTotal !== 0)
        //        $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numShortFormat(TraficGapTotal) + '</span>');
        //    else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numShortFormat(TraficGapTotal) + '</span>');
        //}
    });
}

function RepoTraficStationMonthGet(ActionBtnId, CexId, BagContainerId, StationNumber, MonthStringStart, MonthStringEnd, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoTraficStationMonth' + 'TableReportId');
    //HideReport('RepoTraficStationTotal' + 'ChartReportId');
    //HideReport('RepoTraficStationMp' + 'ChartReportId');
    ParamMessageReset();

    var PatternTableId = 'RepoTraficStationMonth' + 'TableId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            ShowReport('RepoTraficStationMonth' + 'TableReportId');

            //if (StationNumber != '0') {

            //    var Title = 'Evolution du trafic par gare';
            //    var PatternChart = 'RepoTraficStationTotal';
            //    var labels = GetColumnArray(PatternTableId, 3);
            //    var label1 = 'Trafic par gare';
            //    var data1 = GetColumnArray(PatternTableId, 4);
            //    ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false);

            //    var Title = 'Evolution du trafic par moyen de paiement';
            //    var PatternChart = 'RepoTraficStationMp';
            //    var labels = GetColumnArray(PatternTableId, 3);
            //    var data1 = GetColumnArray(PatternTableId, 26);
            //    var data2 = GetColumnArray(PatternTableId, 27);
            //    var data3 = GetColumnArray(PatternTableId, 28);
            //    var data4 = GetColumnArray(PatternTableId, 29);
            //    ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

            //    var Title = 'Evolution du trafic par catégorie';
            //    var PatternChart = 'RepoTraficStationCl';
            //    var labels = GetColumnArray(PatternTableId, 3);
            //    var data1 = GetColumnArray(PatternTableId, 30);
            //    var data2 = GetColumnArray(PatternTableId, 31);
            //    var data3 = GetColumnArray(PatternTableId, 32);
            //    ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);
            //}
        },
        "ajax": {
            "url": "/Repo/RepoTraficStationMonthGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "CexId": CexId,
                "BagContainerId": BagContainerId,
                "StationNumber": StationNumber,
                "MonthStringStart": MonthStringStart,
                "MonthStringEnd": MonthStringEnd
            }
        },
        "columns": [
            { "data": "CexName" }, //0
            { "data": "StationName" }, //1
            { "data": "Sens" }, //2
            { "mData": function vehicle(data, type, dataToSet) { return data.Month + '/' + data.Year; } },//3
            { "data": "TraficOpe", "render": $.fn.dataTable.render.number(' ', '', 0) },//4
            { "data": "TraficCe", "render": $.fn.dataTable.render.number(' ', '', 0) },//5
            { "data": "Ctr01" },//6

            { "data": "TlpC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//7
            { "data": "TlpC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//8
            { "data": "TlpC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//9
            { "data": "Tlp", "render": $.fn.dataTable.render.number(' ', '', 0) },//10

            { "data": "CardC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//11
            { "data": "CardC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//12
            { "data": "CardC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//13
            { "data": "Card", "render": $.fn.dataTable.render.number(' ', '', 0) },//14

            { "data": "CbC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//15
            { "data": "CbC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//16
            { "data": "CbC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//17
            { "data": "Cb", "render": $.fn.dataTable.render.number(' ', '', 0) },//18

            { "data": "OtherC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//19        
            { "data": "OtherC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//20          
            { "data": "OtherC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//21
            { "data": "Other", "render": $.fn.dataTable.render.number(' ', '', 0) },//22

            { "data": "TraficC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//23
            { "data": "TraficC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//24
            { "data": "TraficC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//25

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Tlp }; } },//26
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Card }; } },//27
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Cb }; } },//28
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Other }; } },//29

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//30
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//31
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//32
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-left", "targets": 1 }, //Gare
            { "width": "5%", "className": "text-left", "targets": 2 }, //Sens
            { "width": "20%", "className": "text-center", "targets": 3 },//Mois
            { "width": "15%", "className": "text-right", "targets": 4 },//TraficOpe
            { "width": "15%", "className": "text-right", "targets": 5 },//TraficCe
            { "width": "15%", "className": "text-center", "targets": 6 },//Ctr01

            { "width": "0%", "className": "text-right none", "targets": 7 },//
            { "width": "0%", "className": "text-right none", "targets": 8 },//
            { "width": "0%", "className": "text-right none", "targets": 9 },//
            { "width": "0%", "className": "text-right none", "targets": 10 },//

            { "width": "0%", "className": "text-right none", "targets": 11 },//
            { "width": "0%", "className": "text-right none", "targets": 12 },//
            { "width": "0%", "className": "text-right none", "targets": 13 },//
            { "width": "0%", "className": "text-right none", "targets": 14 },//

            { "width": "0%", "className": "text-right none", "targets": 15 },//
            { "width": "0%", "className": "text-right none", "targets": 16 },//
            { "width": "0%", "className": "text-right none", "targets": 17 },//
            { "width": "0%", "className": "text-right none", "targets": 18 },// 

            { "width": "0%", "className": "text-right none", "targets": 19 },//
            { "width": "0%", "className": "text-right none", "targets": 20 },//
            { "width": "0%", "className": "text-right none", "targets": 21 },//
            { "width": "0%", "className": "text-right none", "targets": 22 },// 

            { "width": "0%", "className": "text-right none", "targets": 23 },//
            { "width": "0%", "className": "text-right none", "targets": 24 },//
            { "width": "0%", "className": "text-right none", "targets": 25 },//

            { "width": "0%", "className": "text-right none", "targets": 26 },//
            { "width": "0%", "className": "text-right none", "targets": 27 },//
            { "width": "0%", "className": "text-right none", "targets": 28 },//
            { "width": "0%", "className": "text-right none", "targets": 29 },//

            { "width": "0%", "className": "text-right none", "targets": 30 },//
            { "width": "0%", "className": "text-right none", "targets": 31 },//
            { "width": "0%", "className": "text-right none", "targets": 32 },//

            //{ "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 6, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    TraficOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    TraficCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    TraficGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(3).footer()).html(numShortFormat(TraficOpeTotal));
        //    $(api.column(4).footer()).html(numShortFormat(TraficCeTotal));
        //    $(api.column(5).footer()).html(numShortFormat(TraficGapTotal));

        //    if (TraficGapTotal !== 0)
        //        $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numShortFormat(TraficGapTotal) + '</span>');
        //    else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numShortFormat(TraficGapTotal) + '</span>');
        //}
    });


}

function RepoTraficAxleDayGet(ActionBtnId, Icon, AxleId, DateStringStart, DateStringEnd) {
    var Pattern = 'RepoTraficAxleDay';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    ParamMessageReset();


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            if (DateStringStart - DateStringEnd == 0) {

                //----
                var DateValue = JsDateValueFromDateString(DateStringStart);
                $('#' + Pattern + 'CardHeaderId h5').text('Trafic journalier par axe du ' + DateValue);

                document.getElementById('Grid400_GridCol0Id').setAttribute('Class', '');
                //HideReport(Pattern + 'TotalLineChartReportId');
                ShowReport('Grid400_GridCol0Id');
                document.getElementById('Grid400_GridCol1Id').setAttribute('Class', 'col');
                //document.getElementById('Grid400_GridCol1Id').style.height = '740px';
                ShowReport('Grid400_GridCol1Id');
                document.getElementById('Grid400_GridCol2Id').setAttribute('Class', '');
                ShowReport('Grid400_GridCol3Id');

                document.getElementById('Grid400_' + 'GridReportId').style.height = '800px';

                ShowReport('Grid400_' + 'GridReportId');


                //----
                document.getElementById('Grid401_GridCol0Id').setAttribute('Class', 'col');
                ShowReport('Grid401_GridCol0Id');
                document.getElementById('Grid401_GridCol1Id').setAttribute('Class', 'col-8');
                ShowReport('Grid401_GridCol1Id');
                document.getElementById('Grid401_GridCol2Id').setAttribute('Class', 'col');

                document.getElementById('Grid401_' + 'GridReportId').style.height = '2450px';

                var Day = new String(DateStringStart).substr(0, 2) + '/' + new String(DateStringStart).substr(2, 2) + '/' + new String(DateStringStart).substr(4, 4);
                var Title = 'Trafic journalier par axe du ' + Day;
                var PatternChart = Pattern + 'Total' + 'Bar';
                var labels = GetColumnArray(PatternTableId, 0);

                var label1 = 'Trafic journalier 2020';
                var data1 = GetColumnArray(PatternTableId, 5);
                var backgroundColor1 = 'rgba(7,98,250,1)';

                var label2 = 'Trafic journalier 2019';
                var data2 = GetColumnArray(PatternTableId, 9);
                var backgroundColor2 = 'rgba(7,98,250,0.2)';

                DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

                ShowReport('Grid401_' + 'GridReportId');
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficAxleDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "AxleId": AxleId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "AxleName" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//3

            { "data": "TraficOpeC1" },//2
            { "data": "TraficOpeC2" },//3
            { "data": "TraficOpeC3" },//4
            { "data": "TraficOpe" },//5

            { "data": "TraficOpeC1Old" },//6
            { "data": "TraficOpeC2Old" },//7
            { "data": "TraficOpeC3Old" },//8
            { "data": "TraficOpeOld" },//9

            { "data": "TraficOpeC1EvoR" },//10
            { "data": "TraficOpeC2EvoR" },//11
            { "data": "TraficOpeC3EvoR" },//12
            { "data": "TraficOpeEvoR" },//13
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },

            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },

            { "targets": 5, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapIntFromDataTable(row['TraficGap'])); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapInfoFromDataTable(row['TraficGapOld'])); } },

            {
                "targets": 10, "render": function (data, type, row) {
                    if (row['TraficOpeC1Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC1'] - row['TraficOpeC1Old']) / row['TraficOpeC1Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    if (row['TraficOpeC2Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC2'] - row['TraficOpeC2Old']) / row['TraficOpeC2Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    if (row['TraficOpeC3Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC3'] - row['TraficOpeC3Old']) / row['TraficOpeC3Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            { "targets": 13, "render": function (data, type, row) { return DataTableEvoGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(numShortFormat(Total0));

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total1));

            Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total2));

            Total3 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total3));



            Total4 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total4));

            Total5 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total5));

            Total6 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total6));

            Total7 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numShortFormat(Total7));



            var Evo0 = ((Total0 - Total4) / Total4) * 100;
            if (Evo0 < 0)
                $(api.column(10).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo0) + ' %</span>');
            else $(api.column(10).footer()).html('<span  class="badge badge-success">' + numFormat(Evo0) + ' %</span>');


            var Evo1 = ((Total1 - Total5) / Total5) * 100;
            if (Evo1 < 0)
                $(api.column(11).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo1) + ' %</span>');
            else $(api.column(11).footer()).html('<span  class="badge badge-success">' + numFormat(Evo1) + ' %</span>');

            var Evo2 = ((Total2 - Total6) / Total6) * 100;
            if (Evo2 < 0)
                $(api.column(12).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo2) + ' %</span>');
            else $(api.column(12).footer()).html('<span  class="badge badge-success">' + numFormat(Evo2) + ' %</span>');

            var Evo3 = ((Total3 - Total7) / Total7) * 100;
            if (Evo3 < 0)
                $(api.column(13).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo3) + ' %</span>');
            else $(api.column(13).footer()).html('<span  class="badge badge-success">' + numFormat(Evo3) + ' %</span>');
        }
    });
}

function RepoTraficRegionHourGet(ActionBtnId, Icon, itemData, imax, i, DateStringStart, DateStringEnd, Sens) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var RegionId = itemData[i].RegionId;
    var RegionNameShort = itemData[i].RegionNameShort;



    var PatternIndex = 0;

    if (Sens == 'E') {
        PatternIndex = i * 2;
    }
    else {
        PatternIndex = (i * 2) + 1;
    }

    var Pattern = 'RepoTraficRegionHour';
    var PatternS = Pattern + PatternIndex;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);



    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (DateStringStart - DateStringEnd == 0) {

                //Variables
                var DateValue = JsDateValueFromDateString(DateStringEnd);
                var HeaderIndex = '5';
                var TimeIndex = '0';
                var LevelIndex = '';
                var DataName = 'Trafic';
                var TimeName = 'horaire';
                var Portion = 'par région';
                var Unity = '';


                var Title = DataName + ' ' + TimeName + ' ' + Portion + ' du ' + DateValue + ' ' + Unity + ' (' + RegionNameShort + ')' + ' - ' + JsSensLabelGet(Sens);

                //Page
                document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId').style.height = '3170px';
                document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageCardId').style.border = 'transparent';
                ShowReport('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageReportId');

                //Grid50i0
                LevelIndex = '0';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').style.height = '1534px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').style.overflowY = 'auto';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol2Id').setAttribute('Class', '');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridReportId');

                $('#' + PatternS + 'TableCardHeaderId h5').text(Title);
                ShowReport(PatternTableReportId);

                var PatternChart = Pattern + 'Line' + PatternIndex;
                var labels = GetColumnArray(PatternTableId, 0);
                var data1 = GetColumnArray(PatternTableId, 1);
                var data2 = GetColumnArray(PatternTableId, 3);

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic horaire 2020', data1, 'Trafic horaire 2019', data2, false);


                ////Grid50i1
                LevelIndex = 1;
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').style.height = '1534px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').style.overflowY = 'auto';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol2Id').setAttribute('Class', '');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCardId').style.border = 'transparent';

                ShowReport('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridReportId');

                var Title = 'Trafic horaire par moyen de paiement (' + RegionNameShort + ') du ' + DateValue;
                PatternChart = Pattern + 'MpLine' + PatternIndex;
                var labels = GetColumnArray(PatternTableId, 0);
                var data1 = GetColumnArray(PatternTableId, 9);
                var data2 = GetColumnArray(PatternTableId, 13);
                var data3 = GetColumnArray(PatternTableId, 17);
                var data4 = GetColumnArray(PatternTableId, 21);
                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);


                var Title = 'Trafic horaire par classe (' + RegionNameShort + ') du ' + DateValue;
                var PatternChart = Pattern + 'ClLine' + PatternIndex;
                var labels = GetColumnArray(PatternTableId, 0);
                var data1 = GetColumnArray(PatternTableId, 22);
                var data2 = GetColumnArray(PatternTableId, 23);
                var data3 = GetColumnArray(PatternTableId, 24);
                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)


                if (Sens == 'E') {
                    Sens = 'S';
                    RepoTraficRegionHourGet(ActionBtnId, Icon, itemData, imax, i, DateStringStart, DateStringEnd, Sens);
                }
                else {
                    i++;
                    if (i <= imax) {
                        Sens = 'E';
                        RepoTraficRegionHourGet(ActionBtnId, Icon, itemData, imax, i, DateStringStart, DateStringEnd, Sens);
                    }
                }
            }

        },
        "ajax": {
            "url": "/Repo/RepoTraficRegionHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "RegionId": RegionId,
                "Sens": Sens,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            //{ "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//0
            {
                "mData": function vehicle(data, type, dataToSet) {
                    return GetDigits(data.Hour, 2) + ':' + GetDigits(data.Minute, 2);
                }
            },//0
            { "data": "TraficOpe" },//1
            { "data": "TraficGap" },//2

            { "data": "TraficOpeOld" },//3
            { "data": "TraficGapOld" },//4

            { "data": "TraficOpeEvoR" },//5

            { "data": "TlpC1" },//6
            { "data": "TlpC2" },//7
            { "data": "TlpC3" },//8
            { "data": "Tlp" },//9

            { "data": "CardC1" },//10
            { "data": "CardC2" },//11
            { "data": "CardC3" },//12
            { "data": "Card" },//13

            { "data": "CbC1" },//14
            { "data": "CbC2" },//15
            { "data": "CbC3" },//16
            { "data": "Cb" },//17

            { "data": "OtherC1" },//18
            { "data": "OtherC2" },//19      
            { "data": "OtherC3" },//20
            { "data": "Other" },//21

            { "data": "TraficOpeC1" },//22
            { "data": "TraficOpeC2" },//23
            { "data": "TraficOpeC3" },//24

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Tlp }; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Card }; } },//26
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Cb }; } },//27
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Other }; } },//28

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//29
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//30
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//31           
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "0%", "className": "text-right none", "targets": 6 },
            { "width": "0%", "className": "text-right none", "targets": 7 },
            { "width": "0%", "className": "text-right none", "targets": 8 },
            { "width": "0%", "className": "text-right none", "targets": 9 },

            { "width": "0%", "className": "text-right none", "targets": 10 },
            { "width": "0%", "className": "text-right none", "targets": 11 },
            { "width": "0%", "className": "text-right none", "targets": 12 },
            { "width": "0%", "className": "text-right none", "targets": 13 },

            { "width": "0%", "className": "text-right none", "targets": 14 },
            { "width": "0%", "className": "text-right none", "targets": 15 },
            { "width": "0%", "className": "text-right none", "targets": 16 },
            { "width": "0%", "className": "text-right none", "targets": 17 },

            { "width": "0%", "className": "text-right none", "targets": 18 },
            { "width": "0%", "className": "text-right none", "targets": 19 },
            { "width": "0%", "className": "text-right none", "targets": 20 },
            { "width": "0%", "className": "text-right none", "targets": 21 },

            { "width": "0%", "className": "text-right none", "targets": 22 },
            { "width": "0%", "className": "text-right none", "targets": 23 },
            { "width": "0%", "className": "text-right none", "targets": 24 },

            { "width": "0%", "className": "text-right none", "targets": 25 },
            { "width": "0%", "className": "text-right none", "targets": 26 },
            { "width": "0%", "className": "text-right none", "targets": 27 },
            { "width": "0%", "className": "text-right none", "targets": 28 },

            { "width": "0%", "className": "text-right none", "targets": 29 },
            { "width": "0%", "className": "text-right none", "targets": 30 },
            { "width": "0%", "className": "text-right none", "targets": 31 },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 2, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            {
                "targets": 5, "render": function (data, type, row) {
                    if (row['TraficOpeOld'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpe'] - row['TraficOpeOld']) / row['TraficOpeOld']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(numShortFormat(Total0));

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total2));

            //Total3 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numShortFormat(Total3));



            //Total4 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total4));

            //Total5 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(6).footer()).html(numShortFormat(Total5));

            //Total6 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numShortFormat(Total6));

            //Total7 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numShortFormat(Total7));



            var Evo0 = ((Total0 - Total1) / Total1) * 100;
            if (Evo0 < 0)
                $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo0) + ' %</span>');
            else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numFormat(Evo0) + ' %</span>');

            //var Evo1 = ((Total1 - Total5) / Total5) * 100;
            //if (Evo1 < 0)
            //    $(api.column(10).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo1) + ' %</span>');
            //else $(api.column(10).footer()).html('<span  class="badge badge-success">' + numFormat(Evo1) + ' %</span>');


            //var Evo2 = ((Total2 - Total6) / Total6) * 100;
            //if (Evo2 < 0)
            //    $(api.column(11).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo2) + ' %</span>');
            //else $(api.column(11).footer()).html('<span  class="badge badge-success">' + numFormat(Evo2) + ' %</span>');

            //var Evo3 = ((Total3 - Total7) / Total7) * 100;
            //if (Evo3 < 0)
            //    $(api.column(12).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo3) + ' %</span>');
            //else $(api.column(12).footer()).html('<span  class="badge badge-success">' + numFormat(Evo3) + ' %</span>');


        }
    });
}

function JsDateValueFromDateString(DateString) {
    return new String(DateString).substr(0, 2) + '/' + new String(DateString).substr(2, 2) + '/' + new String(DateString).substr(4, 4);
}

function JsSensLabelGet(Sens) {
    if (Sens == 'E') {
        return 'Entrées';
    }
    if (Sens == 'S') {
        return 'Sorties';
    }
}

function RepoTraficRegionHourAllGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.RegionId = RegionId;

    $.ajax({
        url: "/Repo/RepoRegionsAllGet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: true,
        success: function (data) {


            ParamMessageReset();
            HideReport('CertReportId');

            jQuery.each(data, function (index, itemData) {
                var imax = itemData.length - 1;
                var i = 0;
                var Sens = 'E';
                RepoTraficRegionHourGet(ActionBtnId, Icon, itemData, imax, i, DateStringStart, DateStringEnd, Sens);
            });


        }
    })
}


function RepoTraficStationHourSerialGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, DateStringStart, DateStringEnd, itemData, CexNameShortTmp, StationNameTmp) {

    var imax = itemData.length - 1;
    var kmax = imax * 2;

    for (var i = 0; i <= imax; i++) {

        CexIdTmp = itemData[i].CexId;
        BagContainerIdTmp = itemData[i].BagContainerId;
        StationNumberTmp = itemData[i].StationNumber;
        SensTmp = itemData[i].Sens;
        CexNameShortTmp = itemData[i].CexNameShort;
        StationNameTmp = itemData[i].StationName;
        k = i * 2;

        if (
            (CexIdTmp == '01' && StationNumberTmp == '04') ||
            (CexIdTmp == '01' && StationNumberTmp == '02') ||
            (CexIdTmp == '01' && StationNumberTmp == '31') ||
            (CexIdTmp == '01' && StationNumberTmp == '05') ||
            (CexIdTmp == '01' && StationNumberTmp == '18') ||
            (CexIdTmp == '01' && StationNumberTmp == '43') ||
            (CexIdTmp == '01' && StationNumberTmp == '45') ||
            (CexIdTmp == '01' && StationNumberTmp == '47')
            //StationNumberTmp == '69' ||
            //StationNumberTmp == '66' ||
            //StationNumberTmp == '67' ||
            //StationNumberTmp == '20' ||
            //StationNumberTmp == '24' ||
            //StationNumberTmp == '61' ||
            //StationNumberTmp == '63' ||
            //StationNumberTmp == '35' ||
            //StationNumberTmp == '33' ||
            //StationNumberTmp == '34' ||
            //StationNumberTmp == '37' ||
            //StationNumberTmp == '38' ||
            //StationNumberTmp == '70' ||
            //StationNumberTmp == '71' ||
            //StationNumberTmp == '72' ||
            //StationNumberTmp == '73' ||
            //StationNumberTmp == '50' ||
            //StationNumberTmp == '55' ||
            //StationNumberTmp == '56' ||
            //StationNumberTmp == '57' ||
            //StationNumberTmp == '58' ||
            //StationNumberTmp == '78'
        ) {
            RepoTraficStationHourGet(ActionBtnId, Icon, itemData, imax, 0, DateStringStart, DateStringEnd);
        }
        else {
            if (
                (CexIdTmp == '01' && StationNumberTmp == '40') ||
                (CexIdTmp == '01' && StationNumberTmp == '03') ||
                (CexIdTmp == '01' && StationNumberTmp == '30') ||
                (CexIdTmp == '01' && StationNumberTmp == '06') ||
                (CexIdTmp == '01' && StationNumberTmp == '19') ||
                (CexIdTmp == '01' && StationNumberTmp == '42') ||
                (CexIdTmp == '01' && StationNumberTmp == '44')
                //StationNumberTmp == '68' ||
                //StationNumberTmp == '23' ||
                //StationNumberTmp == '62' ||
                //StationNumberTmp == '32' ||
                //StationNumberTmp == '77'
            ) {
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'E', DateStringStart, DateStringEnd, k, CexNameShortTmp, StationNameTmp);
            }
            else {
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'E', DateStringStart, DateStringEnd, k, CexNameShortTmp, StationNameTmp);
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'S', DateStringStart, DateStringEnd, k + 1, CexNameShortTmp, StationNameTmp);
            }
        }
    }
}

function RepoTraficRegionDayGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd) {
    var Pattern = 'RepoTraficRegionDay';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    ParamMessageReset();


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            if (DateStringStart - DateStringEnd == 0) {

                //----
                var DateValue = JsDateValueFromDateString(DateStringStart);
                $('#' + Pattern + 'CardHeaderId h5').text('Trafic journalier par région du ' + DateValue);

                document.getElementById('Grid500_GridCol0Id').setAttribute('Class', '');
                //HideReport(Pattern + 'TotalLineChartReportId');
                ShowReport('Grid500_GridCol0Id');
                document.getElementById('Grid500_GridCol1Id').setAttribute('Class', 'col');
                //document.getElementById('Grid500_GridCol1Id').style.height = '740px';
                ShowReport('Grid500_GridCol1Id');
                document.getElementById('Grid500_GridCol2Id').setAttribute('Class', '');
                ShowReport('Grid500_GridCol3Id');

                document.getElementById('Grid500_' + 'GridReportId').style.height = '600px';

                ShowReport('Grid500_' + 'GridReportId');


                //----
                document.getElementById('Grid501_GridCol0Id').setAttribute('Class', 'col');
                ShowReport('Grid501_GridCol0Id');
                document.getElementById('Grid501_GridCol1Id').setAttribute('Class', 'col-8');
                //document.getElementById('Grid501_GridCol1Id').style.height = '2450px';
                ShowReport('Grid501_GridCol1Id');
                document.getElementById('Grid501_GridCol2Id').setAttribute('Class', 'col');

                document.getElementById('Grid501_' + 'GridReportId').style.height = '2480px';

                var Day = new String(DateStringStart).substr(0, 2) + '/' + new String(DateStringStart).substr(2, 2) + '/' + new String(DateStringStart).substr(4, 4);
                var Title = 'Trafic journalier par région du ' + Day;
                var PatternChart = Pattern + 'Total' + 'Bar';
                var labels = GetColumnArray(PatternTableId, 0);

                var label1 = 'Trafic journalier 2020';
                var data1 = GetColumnArray(PatternTableId, 5);
                var backgroundColor1 = 'rgba(7,98,250,1)';

                var label2 = 'Trafic journalier 2019';
                var data2 = GetColumnArray(PatternTableId, 9);
                var backgroundColor2 = 'rgba(7,98,250,0.2)';

                DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

                ShowReport('Grid501_' + 'GridReportId');
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficRegionDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "RegionId": RegionId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "RegionNameShort" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//3

            { "data": "TraficOpeC1" },//2
            { "data": "TraficOpeC2" },//3
            { "data": "TraficOpeC3" },//4
            { "data": "TraficOpe" },//5

            { "data": "TraficOpeC1Old" },//6
            { "data": "TraficOpeC2Old" },//7
            { "data": "TraficOpeC3Old" },//8
            { "data": "TraficOpeOld" },//9

            { "data": "TraficOpeC1EvoR" },//10
            { "data": "TraficOpeC2EvoR" },//11
            { "data": "TraficOpeC3EvoR" },//12
            { "data": "TraficOpeEvoR" },//13
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },

            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },

            { "targets": 5, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapIntFromDataTable(row['TraficGap'])); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapInfoFromDataTable(row['TraficGapOld'])); } },

            {
                "targets": 10, "render": function (data, type, row) {
                    if (row['TraficOpeC1Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC1'] - row['TraficOpeC1Old']) / row['TraficOpeC1Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    if (row['TraficOpeC2Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC2'] - row['TraficOpeC2Old']) / row['TraficOpeC2Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    if (row['TraficOpeC3Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC3'] - row['TraficOpeC3Old']) / row['TraficOpeC3Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            { "targets": 13, "render": function (data, type, row) { return DataTableEvoGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(numShortFormat(Total0));

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total1));

            Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total2));

            Total3 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total3));



            Total4 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total4));

            Total5 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total5));

            Total6 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total6));

            Total7 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numShortFormat(Total7));

            var Evo0 = ((Total0 - Total4) / Total4) * 100;
            if (Evo0 < 0)
                $(api.column(10).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo0) + ' %</span>');
            else $(api.column(10).footer()).html('<span  class="badge badge-success">' + numFormat(Evo0) + ' %</span>');


            var Evo1 = ((Total1 - Total5) / Total5) * 100;
            if (Evo1 < 0)
                $(api.column(11).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo1) + ' %</span>');
            else $(api.column(11).footer()).html('<span  class="badge badge-success">' + numFormat(Evo1) + ' %</span>');

            var Evo2 = ((Total2 - Total6) / Total6) * 100;
            if (Evo2 < 0)
                $(api.column(12).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo2) + ' %</span>');
            else $(api.column(12).footer()).html('<span  class="badge badge-success">' + numFormat(Evo2) + ' %</span>');

            var Evo3 = ((Total3 - Total7) / Total7) * 100;
            if (Evo3 < 0)
                $(api.column(13).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo3) + ' %</span>');
            else $(api.column(13).footer()).html('<span  class="badge badge-success">' + numFormat(Evo3) + ' %</span>');
        }
    });
}

function RepoTraficRegionGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon) {
    var Pattern = 'RepoTraficCex';
    var PatternLine0 = Pattern + 'Total' + 'Line';
    var PatternLine1 = Pattern + 'Mp' + 'Line';
    var PatternBar0 = Pattern + 'Total' + 'Bar';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    HideReport(PatternLine0 + 'ChartReportId');
    HideReport(PatternLine1 + 'ChartReportId');
    HideReport(PatternBar0 + 'ChartReportId');
    ParamMessageReset();

    var d1 = new String(DateStringStart);
    var d2 = new String(DateStringEnd);


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            if (SiteId == '0') {
                if (DateStringStart - DateStringEnd == 0) {
                    var labels = GetColumnArray(PatternTableId, 0);
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var data2 = GetColumnArray(PatternTableId, 3);
                    ChartJsBarOneDisplay(PatternBar0, labels, data1, "Trafic par CEX");

                    //var Title = 'Evolution du trafic par Centre d\'Exploitation';
                    //var PatternChart = PatternBar0;
                    //var labels = GetColumnArray(PatternTableId, 0);
                    //var label1 = 'Trafic par Centre d\'Exploitation';
                    //var data1 = GetColumnArray(PatternTableId, 2);
                    //ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false)
                }
            }
            else {
                if (DateStringStart - DateStringEnd == 0) {

                }
                else {
                    //var labels = GetColumnArray(PatternTableId, 1);
                    //var label1 = 'Trafic par Centre d\'Exploitation';
                    //var data1 = GetColumnArray(PatternTableId, 2);
                    //ChartJsLineOneDisplay(PatternLine0, labels, label1, data1);

                    var Title = 'Evolution du trafic par Centre d\'Exploitation';
                    var PatternChart = PatternLine0;
                    var labels = GetColumnArray(PatternTableId, 1);
                    var label1 = 'Trafic par Centre d\'Exploitation';
                    var data1 = GetColumnArray(PatternTableId, 2);
                    ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false)


                    //var labels = GetColumnArray(PatternTableId, 1);
                    //var data1 = GetColumnArray(PatternTableId, 24);
                    //var data2 = GetColumnArray(PatternTableId, 25);
                    //var data3 = GetColumnArray(PatternTableId, 26);
                    //var data4 = GetColumnArray(PatternTableId, 27);
                    //ChartJsLineFourDisplay(PatternLine1, labels, data1, data2, data3, data4);

                    var Title = 'Evolution du trafic par moyen de paiement';
                    var PatternChart = PatternLine1;
                    var labels = GetColumnArray(PatternTableId, 1);
                    var data1 = GetColumnArray(PatternTableId, 24);
                    var data2 = GetColumnArray(PatternTableId, 25);
                    var data3 = GetColumnArray(PatternTableId, 26);
                    var data4 = GetColumnArray(PatternTableId, 27);
                    ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                    var Title = 'Evolution du trafic par catégorie';
                    var PatternChart = 'RepoTraficCexCl';
                    var labels = GetColumnArray(PatternTableId, 1);
                    var data1 = GetColumnArray(PatternTableId, 28);
                    var data2 = GetColumnArray(PatternTableId, 29);
                    var data3 = GetColumnArray(PatternTableId, 30);
                    ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)
                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//1
            //{
            //    "mData": function vehicle(data, type, dataToSet) {
            //        if (data.DhmValue === null) return "";
            //        var pattern = /Date\(([^)]+)\)/;//date format from server side
            //        var results = pattern.exec(data.DhmValue);
            //        var dt = new Date(parseFloat(results[1]));

            //        //return dt.toLocaleDateString() + ' ' + dt.toLocaleTimeString();
            //        return dt.toLocaleDateString() + " " + dt.toLocaleTimeString(undefined, {
            //            hour: '2-digit',
            //            minute: '2-digit'
            //        });                                                         
            //    }
            //},//1
            { "data": "TraficOpe", "render": $.fn.dataTable.render.number(' ', '', 0) },//2
            { "data": "TraficCe", "render": $.fn.dataTable.render.number(' ', '', 0) },//3
            { "data": "Ctr01" },//4

            { "data": "TlpC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//5
            { "data": "TlpC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//6
            { "data": "TlpC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//7
            { "data": "Tlp", "render": $.fn.dataTable.render.number(' ', '', 0) },//8

            { "data": "CardC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//9
            { "data": "CardC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//10
            { "data": "CardC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//11
            { "data": "Card", "render": $.fn.dataTable.render.number(' ', '', 0) },//12

            { "data": "CbC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//13
            { "data": "CbC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//14
            { "data": "CbC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//15
            { "data": "Cb", "render": $.fn.dataTable.render.number(' ', '', 0) },//16

            { "data": "OtherC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//17       
            { "data": "OtherC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//18         
            { "data": "OtherC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//19
            { "data": "Other", "render": $.fn.dataTable.render.number(' ', '', 0) },//20

            { "data": "TraficC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//21
            { "data": "TraficC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//22
            { "data": "TraficC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//23

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Tlp }; } },//24
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Card }; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Cb }; } },//26
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Other }; } },//27

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//28
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//29
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//30
            //{ "data": "TraficOpe" },//28
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-center", "targets": 1 },//Date
            { "width": "15%", "className": "text-right", "targets": 2 },//TraficOpe
            { "width": "15%", "className": "text-right", "targets": 3 },//TraficCe
            { "width": "15%", "className": "text-center", "targets": 4 },//Ctr01

            { "width": "0%", "className": "text-right none", "targets": 5 },//
            { "width": "0%", "className": "text-right none", "targets": 6 },//
            { "width": "0%", "className": "text-right none", "targets": 7 },//
            { "width": "0%", "className": "text-right none", "targets": 8 },//

            { "width": "0%", "className": "text-right none", "targets": 9 },//
            { "width": "0%", "className": "text-right none", "targets": 10 },//
            { "width": "0%", "className": "text-right none", "targets": 11 },//
            { "width": "0%", "className": "text-right none", "targets": 12 },//

            { "width": "0%", "className": "text-right none", "targets": 13 },//
            { "width": "0%", "className": "text-right none", "targets": 14 },//
            { "width": "0%", "className": "text-right none", "targets": 15 },//
            { "width": "0%", "className": "text-right none", "targets": 16 },// 

            { "width": "0%", "className": "text-right none", "targets": 17 },//
            { "width": "0%", "className": "text-right none", "targets": 18 },//
            { "width": "0%", "className": "text-right none", "targets": 19 },//
            { "width": "0%", "className": "text-right none", "targets": 20 },// 

            { "width": "0%", "className": "text-right none", "targets": 21 },//
            { "width": "0%", "className": "text-right none", "targets": 22 },//
            { "width": "0%", "className": "text-right none", "targets": 23 },//

            { "width": "0%", "className": "text-right none", "targets": 24 },//
            { "width": "0%", "className": "text-right none", "targets": 25 },//
            { "width": "0%", "className": "text-right none", "targets": 26 },//
            { "width": "0%", "className": "text-right none", "targets": 27 },//

            { "width": "0%", "className": "text-right none", "targets": 28 },//
            { "width": "0%", "className": "text-right none", "targets": 29 },//
            { "width": "0%", "className": "text-right none", "targets": 30 },//

            //{ "width": "0%", "className": "text-right none", "targets": 28 },//
            //{ "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(2).footer()).html(numShortFormat(Total1));
            $(api.column(3).footer()).html(numShortFormat(Total2));
        }
    });


}

function RepoTraficRegionDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';

    var RegionId = GetElementValue('RegionId');
    var TimeId = GetElementValue('TimeId');

    if (TimeId != '0') {

        if (TimeId == '00')//Hour
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {

                var DateValue = JsDateValueFromDateString(DateStringStart);
                $('#CoverTitleId h1').text('Trafic horaire par région');
                $('#CoverDateId h3').text('Le ' + DateValue);
                ShowReport('Grid0000_' + 'GridReportId');

                RepoTraficRegionHourAllGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates de début et de fin sont obligatoires");
            }
        }
        if (TimeId == '01')//Day
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {
                RepoTraficRegionDayGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates de début et de fin sont obligatoires");
            }
        }
        //if (TimeId == '02')//Month
        //{
        //    var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
        //    var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

        //    if (MonthStringStart != '' && MonthStringEnd != '') {
        //        RepoNrCexMonthGet(ActionBtnId, Icon, CexId, MonthStringStart, MonthStringEnd);
        //    }
        //    else {
        //        $("#ParamMessageTextId").html("Les mois sont obligatoires");
        //    }
        //}
        //if (TimeId == '06')//Cumul
        //{
        //    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
        //    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');


        //    if (DateStringStart != '' && DateStringEnd != '') {
        //        RepoNrCexCumulGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
        //    }
        //    else {
        //        $("#ParamMessageTextId").html("Les dates sont obligatoires");
        //    }
        //}
    }
    else {
        $("#ParamMessageTextId").html("La période est obligatoire");
    };
}

function RepoTraficCompanyHourGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    var Pattern = 'RepoTraficCompanyHour';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);




            if (DateStringStart - DateStringEnd == 0) {

                //Variables
                var DateValue = JsDateValueFromDateString(DateStringEnd);
                var HeaderIndex = '6';
                var TimeIndex = '0';
                var LevelIndex = '';
                var PatternIndex = '';
                var DataName = 'Trafic';
                var TimeName = 'horaire';
                var Portion = 'global';
                var Unity = '';

                var Title = DataName + ' ' + TimeName + ' ' + Portion + ' du ' + DateValue + ' ' + Unity;

                //Page
                document.getElementById('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageReportId').style.height = '3170px';
                document.getElementById('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageCardId').style.border = 'transparent';
                ShowReport('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageReportId');

                //Grid60
                LevelIndex = 0;
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').style.height = '1534px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').style.overflowY = 'auto';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', '');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                $('#' + Pattern + 'TableCardHeaderId h5').text(Title);
                ShowReport(Pattern + 'TableReportId');

                PatternChart = Pattern + 'Line' + PatternIndex;
                var labels = GetColumnArray(PatternTableId, 0);
                var data1 = GetColumnArray(PatternTableId, 1);
                var data2 = GetColumnArray(PatternTableId, 3);

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic horaire 2020', data1, 'Trafic horaire 2019', data2, false);

                //Grid61
                //LevelIndex = 1;
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').style.height = '1534px';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').style.overflowY = 'auto';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', '');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';

                //var Title = 'Trafic horaire global par MP de la gare ' + StationName + ' du ' + DateValue;
                //PatternChart = Pattern + 'MpLine' + PatternIndex;
                //var labels = GetColumnArray(PatternTableId, 3);
                //var data1 = GetColumnArray(PatternTableId, 12);
                //var data2 = GetColumnArray(PatternTableId, 16);
                //var data3 = GetColumnArray(PatternTableId, 20);
                //var data4 = GetColumnArray(PatternTableId, 24);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                //var Title = 'Trafic horaire global par classe de la gare ' + StationName + ' du ' + DateValue;
                //var PatternChart = Pattern + 'ClLine' + PatternIndex;
                //var labels = GetColumnArray(PatternTableId, 3);
                //var data1 = GetColumnArray(PatternTableId, 25);
                //var data2 = GetColumnArray(PatternTableId, 26);
                //var data3 = GetColumnArray(PatternTableId, 27);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)

            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficCompanyHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            //{ "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//0
            {
                "mData": function vehicle(data, type, dataToSet) {
                    return GetDigits(data.Hour, 2) + ':' + GetDigits(data.Minute, 2);
                }
            },//0
            { "data": "TraficOpe" },//1
            { "data": "TraficGap" },//2

            { "data": "TraficOpeOld" },//3
            { "data": "TraficGapOld" },//4

            { "data": "TraficOpeEvoR" },//5

            { "data": "TlpC1" },//6
            { "data": "TlpC2" },//7
            { "data": "TlpC3" },//8
            { "data": "Tlp" },//9

            { "data": "CardC1" },//10
            { "data": "CardC2" },//11
            { "data": "CardC3" },//12
            { "data": "Card" },//13

            { "data": "CbC1" },//14
            { "data": "CbC2" },//15
            { "data": "CbC3" },//16
            { "data": "Cb" },//17

            { "data": "OtherC1" },//18
            { "data": "OtherC2" },//19      
            { "data": "OtherC3" },//20
            { "data": "Other" },//21

            { "data": "TraficOpeC1" },//22
            { "data": "TraficOpeC2" },//23
            { "data": "TraficOpeC3" },//24

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Tlp }; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Card }; } },//26
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Cb }; } },//27
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Other }; } },//28

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//29
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//30
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//31           
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "0%", "className": "text-right none", "targets": 6 },
            { "width": "0%", "className": "text-right none", "targets": 7 },
            { "width": "0%", "className": "text-right none", "targets": 8 },
            { "width": "0%", "className": "text-right none", "targets": 9 },

            { "width": "0%", "className": "text-right none", "targets": 10 },
            { "width": "0%", "className": "text-right none", "targets": 11 },
            { "width": "0%", "className": "text-right none", "targets": 12 },
            { "width": "0%", "className": "text-right none", "targets": 13 },

            { "width": "0%", "className": "text-right none", "targets": 14 },
            { "width": "0%", "className": "text-right none", "targets": 15 },
            { "width": "0%", "className": "text-right none", "targets": 16 },
            { "width": "0%", "className": "text-right none", "targets": 17 },

            { "width": "0%", "className": "text-right none", "targets": 18 },
            { "width": "0%", "className": "text-right none", "targets": 19 },
            { "width": "0%", "className": "text-right none", "targets": 20 },
            { "width": "0%", "className": "text-right none", "targets": 21 },

            { "width": "0%", "className": "text-right none", "targets": 22 },
            { "width": "0%", "className": "text-right none", "targets": 23 },
            { "width": "0%", "className": "text-right none", "targets": 24 },

            { "width": "0%", "className": "text-right none", "targets": 25 },
            { "width": "0%", "className": "text-right none", "targets": 26 },
            { "width": "0%", "className": "text-right none", "targets": 27 },
            { "width": "0%", "className": "text-right none", "targets": 28 },

            { "width": "0%", "className": "text-right none", "targets": 29 },
            { "width": "0%", "className": "text-right none", "targets": 30 },
            { "width": "0%", "className": "text-right none", "targets": 31 },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 2, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            {
                "targets": 5, "render": function (data, type, row) {
                    if (row['TraficOpeOld'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpe'] - row['TraficOpeOld']) / row['TraficOpeOld']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(numShortFormat(Total0));

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total2));

            //Total3 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numShortFormat(Total3));



            //Total4 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total4));

            //Total5 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(6).footer()).html(numShortFormat(Total5));

            //Total6 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numShortFormat(Total6));

            //Total7 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numShortFormat(Total7));



            var Evo0 = ((Total0 - Total1) / Total1) * 100;
            if (Evo0 < 0)
                $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo0) + ' %</span>');
            else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numFormat(Evo0) + ' %</span>');

            //var Evo1 = ((Total1 - Total5) / Total5) * 100;
            //if (Evo1 < 0)
            //    $(api.column(10).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo1) + ' %</span>');
            //else $(api.column(10).footer()).html('<span  class="badge badge-success">' + numFormat(Evo1) + ' %</span>');


            //var Evo2 = ((Total2 - Total6) / Total6) * 100;
            //if (Evo2 < 0)
            //    $(api.column(11).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo2) + ' %</span>');
            //else $(api.column(11).footer()).html('<span  class="badge badge-success">' + numFormat(Evo2) + ' %</span>');

            //var Evo3 = ((Total3 - Total7) / Total7) * 100;
            //if (Evo3 < 0)
            //    $(api.column(12).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo3) + ' %</span>');
            //else $(api.column(12).footer()).html('<span  class="badge badge-success">' + numFormat(Evo3) + ' %</span>');


        }
    });
}

function RepoTraficCompanyDayClGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    var Pattern = 'RepoTraficCompanyDayCl';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    ParamMessageReset();


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            //Variables
            var DateValueStart = JsDateValueFromDateString(DateStringStart);
            var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '6';
            var TimeIndex = '1';
            var PageIndex = '';
            var PageRowIndex = '';
            var PatternIndex = '';

            var Title = 'Trafic journalier global du ' + DateValueStart + ' au ' + DateValueEnd;
            $('#' + Pattern + 'TableCardHeaderId h5').text(Title);


            PageRowIndex = '2';
            TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex, 'col', 'col-12', 'col', '1130px', 'transparent');

            ShowReport('Page' + HeaderIndex + TimeIndex + '_PageReportId');

            //----
            //document.getElementById('Grid600_GridCol0Id').setAttribute('Class', '');
            //ShowReport('Grid600_GridCol0Id');
            //document.getElementById('Grid600_GridCol1Id').setAttribute('Class', 'col');
            ////document.getElementById('Grid600_GridCol1Id').style.height = '1480px';
            //ShowReport('Grid600_GridCol1Id');
            //document.getElementById('Grid600_GridCol2Id').setAttribute('Class', '');
            //ShowReport('Grid600_GridCol3Id');

            //document.getElementById('Grid600_' + 'GridReportId').style.height = '1480px';

            //ShowReport('Grid600_' + 'GridReportId');


            //----
            //document.getElementById('Grid601_GridCol0Id').setAttribute('Class', 'col');
            //ShowReport('Grid601_GridCol0Id');
            //document.getElementById('Grid601_GridCol1Id').setAttribute('Class', 'col-8');
            //document.getElementById('Grid601_GridCol1Id').style.height = '1530px';
            //ShowReport('Grid601_GridCol1Id');
            //document.getElementById('Grid601_GridCol2Id').setAttribute('Class', 'col');

            //document.getElementById('Grid601_' + 'GridReportId').style.height = '1710px';

            //var Title = 'Evolution du trafic global';

            //var PatternChart = Pattern + 'TotalLine';
            //var labels = GetColumnArray(PatternTableId, 0);
            //var label1 = 'Trafic journalier 2020';
            //var data1 = GetColumnArray(PatternTableId, 4);
            //var label2 = 'Trafic journalier 2019';
            //var data2 = GetColumnArray(PatternTableId, 8);
            //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, label1, data1, label2, data2, false)


            //ShowReport('Grid601_' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoTraficCompanyDayClGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValue" },//0

            { "data": "TraficCeC1" },//1
            { "data": "TraficCeC2" },//2
            { "data": "TraficCeC3" },//3
            { "data": "TraficCe" },//4

            { "data": "TraficCeC1Old" },//5
            { "data": "TraficCeC2Old" },//6
            { "data": "TraficCeC3Old" },//7
            { "data": "TraficCeOld" },//8

            { "data": "" },//9
            { "data": "" },//10
            { "data": "" },//11
            { "data": "" },//12
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntAlertGet(data, row['TraficCeC1Gap']); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntAlertGet(data, row['TraficCeC2Gap']); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntAlertGet(data, row['TraficCeC3Gap']); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntAlertGet(data, row['TraficCeGap']); } },

            //{ "targets": 5, "render": function (data, type, row) { return DataTableFormatIntAlertGet(data, row['TraficCeC1GapOld']); } },
            //{ "targets": 6, "render": function (data, type, row) { return DataTableFormatIntAlertGet(data, row['TraficCeC2GapOld']); } },
            //{ "targets": 7, "render": function (data, type, row) { return DataTableFormatIntAlertGet(data, row['TraficCeC3GapOld']); } },
            //{ "targets": 8, "render": function (data, type, row) { return DataTableFormatIntAlertGet(data, row['TraficGapOld']); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['TraficCeC1'], row['TraficCeC1Old']) } },
            { "targets": 10, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['TraficCeC1'], row['TraficCeC1Old']) } },
            { "targets": 11, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['TraficCeC1'], row['TraficCeC1Old']) } },
            { "targets": 12, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['TraficCeC1'], row['TraficCeC1Old']) } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": false,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(numShortFormat(Total0));

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(numShortFormat(Total1));

            Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total2));

            Total3 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total3));



            Total4 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total4));

            Total5 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total5));

            Total6 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total6));

            Total7 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total7));



            var Evo0 = ((Total0 - Total4) / Total4) * 100;
            if (Evo0 < 0)
                $(api.column(9).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo0) + ' %</span>');
            else $(api.column(9).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo0) + ' %</span>');

            var Evo1 = ((Total1 - Total5) / Total5) * 100;
            if (Evo1 < 0)
                $(api.column(10).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo1) + ' %</span>');
            else $(api.column(10).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo1) + ' %</span>');


            var Evo2 = ((Total2 - Total6) / Total6) * 100;
            if (Evo2 < 0)
                $(api.column(11).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo2) + ' %</span>');
            else $(api.column(11).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo2) + ' %</span>');

            var Evo3 = ((Total3 - Total7) / Total7) * 100;
            if (Evo3 < 0)
                $(api.column(12).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo3) + ' %</span>');
            else $(api.column(12).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo3) + ' %</span>');


        }
    });
}

function RepoTraficCompanyDayMpGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    var Pattern = 'RepoTraficCompanyDay';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    ParamMessageReset();


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            //Variables
            var DateValueStart = JsDateValueFromDateString(DateStringStart);
            var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '6';
            var TimeIndex = '1';
            var PageIndex = '';
            var PageRowIndex = '';
            var PatternIndex = '';

            //var LevelIndex = '';
            //var DataName = 'Trafic';
            //var TimeName = 'horaire';
            //var Portion = 'par gare';
            //var Unity = '';

            var Title = 'Trafic journalier global du ' + DateValueStart + ' au ' + DateValueEnd;
            $('#' + Pattern + 'TableCardHeaderId h5').text(Title);


            PageRowIndex = '0';
            TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex, 'col', 'col-12', 'col', '1130px', 'transparent');

            ShowReport('Page' + HeaderIndex + TimeIndex + '_PageReportId');

            //----
            //document.getElementById('Grid600_GridCol0Id').setAttribute('Class', '');
            //ShowReport('Grid600_GridCol0Id');
            //document.getElementById('Grid600_GridCol1Id').setAttribute('Class', 'col');
            ////document.getElementById('Grid600_GridCol1Id').style.height = '1480px';
            //ShowReport('Grid600_GridCol1Id');
            //document.getElementById('Grid600_GridCol2Id').setAttribute('Class', '');
            //ShowReport('Grid600_GridCol3Id');

            //document.getElementById('Grid600_' + 'GridReportId').style.height = '1480px';

            //ShowReport('Grid600_' + 'GridReportId');


            //----
            //document.getElementById('Grid601_GridCol0Id').setAttribute('Class', 'col');
            //ShowReport('Grid601_GridCol0Id');
            //document.getElementById('Grid601_GridCol1Id').setAttribute('Class', 'col-8');
            //document.getElementById('Grid601_GridCol1Id').style.height = '1530px';
            //ShowReport('Grid601_GridCol1Id');
            //document.getElementById('Grid601_GridCol2Id').setAttribute('Class', 'col');

            //document.getElementById('Grid601_' + 'GridReportId').style.height = '1710px';

            //var Title = 'Evolution du trafic global';

            //var PatternChart = Pattern + 'TotalLine';
            //var labels = GetColumnArray(PatternTableId, 0);
            //var label1 = 'Trafic journalier 2020';
            //var data1 = GetColumnArray(PatternTableId, 4);
            //var label2 = 'Trafic journalier 2019';
            //var data2 = GetColumnArray(PatternTableId, 8);
            //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, label1, data1, label2, data2, false)


            //ShowReport('Grid601_' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoTraficCompanyDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//3

            { "data": "TraficCeC1" },//1
            { "data": "TraficCeC2" },//2
            { "data": "TraficCeC3" },//3
            { "data": "TraficCe" },//4

            { "data": "TraficCeC1Old" },//5
            { "data": "TraficCeC2Old" },//6
            { "data": "TraficCeC3Old" },//7
            { "data": "TraficCeOld" },//8

            { "data": "TraficCeC1EvoR" },//9
            { "data": "TraficCeC2EvoR" },//10
            { "data": "TraficCeC3EvoR" },//11
            { "data": "TraficCeEvoR" },//12
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficGap']); } },
            //{ "targets": 4, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapIntFromDataTable(row['TraficGap'])); } },
            //{ "targets": 8, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapInfoFromDataTable(row['TraficGapOld'])); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficGapOld']); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    if (row['TraficCeC1Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficCeC1'] - row['TraficCeC1Old']) / row['TraficCeC1Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 10, "render": function (data, type, row) {
                    if (row['TraficCeC2Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficCeC2'] - row['TraficCeC2Old']) / row['TraficCeC2Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    if (row['TraficCeC3Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficCeC3'] - row['TraficCeC3Old']) / row['TraficCeC3Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            { "targets": 12, "render": function (data, type, row) { return DataTableEvoGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": false,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(numShortFormat(Total0));

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(numShortFormat(Total1));

            Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total2));

            Total3 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total3));



            Total4 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total4));

            Total5 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total5));

            Total6 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total6));

            Total7 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total7));



            var Evo0 = ((Total0 - Total4) / Total4) * 100;
            if (Evo0 < 0)
                $(api.column(9).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo0) + ' %</span>');
            else $(api.column(9).footer()).html('<span  class="badge badge-success">' + numFormat(Evo0) + ' %</span>');

            var Evo1 = ((Total1 - Total5) / Total5) * 100;
            if (Evo1 < 0)
                $(api.column(10).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo1) + ' %</span>');
            else $(api.column(10).footer()).html('<span  class="badge badge-success">' + numFormat(Evo1) + ' %</span>');


            var Evo2 = ((Total2 - Total6) / Total6) * 100;
            if (Evo2 < 0)
                $(api.column(11).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo2) + ' %</span>');
            else $(api.column(11).footer()).html('<span  class="badge badge-success">' + numFormat(Evo2) + ' %</span>');

            var Evo3 = ((Total3 - Total7) / Total7) * 100;
            if (Evo3 < 0)
                $(api.column(12).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo3) + ' %</span>');
            else $(api.column(12).footer()).html('<span  class="badge badge-success">' + numFormat(Evo3) + ' %</span>');


        }
    });
}

function RepoTraficCompanyDayGetOld(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    var Pattern = 'RepoTraficCompanyDay';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    ParamMessageReset();


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            //Variables
            var DateValueStart = JsDateValueFromDateString(DateStringStart);
            var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '6';
            var TimeIndex = '1';
            var PageIndex = '';
            var PageRowIndex = '';
            var PatternIndex = '';

            //var LevelIndex = '';
            //var DataName = 'Trafic';
            //var TimeName = 'horaire';
            //var Portion = 'par gare';
            //var Unity = '';

            var Title = 'Trafic journalier global du ' + DateValueStart + ' au ' + DateValueEnd;
            $('#' + Pattern + 'TableCardHeaderId h5').text(Title);


            PageRowIndex = '0';
            TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex, 'col', 'col-12', 'col', '1130px', 'transparent');

            ShowReport('Page' + HeaderIndex + TimeIndex + '_PageReportId');

            //----
            //document.getElementById('Grid600_GridCol0Id').setAttribute('Class', '');
            //ShowReport('Grid600_GridCol0Id');
            //document.getElementById('Grid600_GridCol1Id').setAttribute('Class', 'col');
            ////document.getElementById('Grid600_GridCol1Id').style.height = '1480px';
            //ShowReport('Grid600_GridCol1Id');
            //document.getElementById('Grid600_GridCol2Id').setAttribute('Class', '');
            //ShowReport('Grid600_GridCol3Id');

            //document.getElementById('Grid600_' + 'GridReportId').style.height = '1480px';

            //ShowReport('Grid600_' + 'GridReportId');


            //----
            //document.getElementById('Grid601_GridCol0Id').setAttribute('Class', 'col');
            //ShowReport('Grid601_GridCol0Id');
            //document.getElementById('Grid601_GridCol1Id').setAttribute('Class', 'col-8');
            //document.getElementById('Grid601_GridCol1Id').style.height = '1530px';
            //ShowReport('Grid601_GridCol1Id');
            //document.getElementById('Grid601_GridCol2Id').setAttribute('Class', 'col');

            //document.getElementById('Grid601_' + 'GridReportId').style.height = '1710px';

            //var Title = 'Evolution du trafic global';

            //var PatternChart = Pattern + 'TotalLine';
            //var labels = GetColumnArray(PatternTableId, 0);
            //var label1 = 'Trafic journalier 2020';
            //var data1 = GetColumnArray(PatternTableId, 4);
            //var label2 = 'Trafic journalier 2019';
            //var data2 = GetColumnArray(PatternTableId, 8);
            //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, label1, data1, label2, data2, false)


            //ShowReport('Grid601_' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoTraficCompanyDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//3

            { "data": "TraficCeC1" },//1
            { "data": "TraficCeC2" },//2
            { "data": "TraficCeC3" },//3
            { "data": "TraficCe" },//4

            { "data": "TraficCeC1Old" },//5
            { "data": "TraficCeC2Old" },//6
            { "data": "TraficCeC3Old" },//7
            { "data": "TraficCeOld" },//8

            { "data": "TraficCeC1EvoR" },//9
            { "data": "TraficCeC2EvoR" },//10
            { "data": "TraficCeC3EvoR" },//11
            { "data": "TraficCeEvoR" },//12
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficGap']); } },
            //{ "targets": 4, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapIntFromDataTable(row['TraficGap'])); } },
            //{ "targets": 8, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapInfoFromDataTable(row['TraficGapOld'])); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficGapOld']); } },
            {
                "targets": 9, "render": function (data, type, row) {
                    if (row['TraficCeC1Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficCeC1'] - row['TraficCeC1Old']) / row['TraficCeC1Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 10, "render": function (data, type, row) {
                    if (row['TraficCeC2Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficCeC2'] - row['TraficCeC2Old']) / row['TraficCeC2Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    if (row['TraficCeC3Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficCeC3'] - row['TraficCeC3Old']) / row['TraficCeC3Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },
            { "targets": 12, "render": function (data, type, row) { return DataTableEvoGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": false,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(numShortFormat(Total0));

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(numShortFormat(Total1));

            Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total2));

            Total3 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total3));



            Total4 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(numShortFormat(Total4));

            Total5 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total5));

            Total6 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total6));

            Total7 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total7));



            var Evo0 = ((Total0 - Total4) / Total4) * 100;
            if (Evo0 < 0)
                $(api.column(9).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo0) + ' %</span>');
            else $(api.column(9).footer()).html('<span  class="badge badge-success">' + numFormat(Evo0) + ' %</span>');

            var Evo1 = ((Total1 - Total5) / Total5) * 100;
            if (Evo1 < 0)
                $(api.column(10).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo1) + ' %</span>');
            else $(api.column(10).footer()).html('<span  class="badge badge-success">' + numFormat(Evo1) + ' %</span>');


            var Evo2 = ((Total2 - Total6) / Total6) * 100;
            if (Evo2 < 0)
                $(api.column(11).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo2) + ' %</span>');
            else $(api.column(11).footer()).html('<span  class="badge badge-success">' + numFormat(Evo2) + ' %</span>');

            var Evo3 = ((Total3 - Total7) / Total7) * 100;
            if (Evo3 < 0)
                $(api.column(12).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo3) + ' %</span>');
            else $(api.column(12).footer()).html('<span  class="badge badge-success">' + numFormat(Evo3) + ' %</span>');


        }
    });
}

function RepoTraficStationDivisionGet(ActionBtnId, Icon, CexId, BagContainerId, StationNumber, DateStringStart, DateStringEnd) {
    var Pattern = 'RepoTraficStationDayDivision';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    ParamMessageReset();


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');
        },
        "ajax": {
            "url": "/Repo/RepoTraficStationDayDivisionGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "CexId": CexId,
                "BagContainerId": BagContainerId,
                "StationNumber": StationNumber,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DivisionName" }, //0
            { "data": "AxleId" }, //1
            { "mData": function vehicle(data, type, dataToSet) { return data.StationName + ' - ' + data.Sens; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//3

            { "data": "TraficOpeC1" },//4
            { "data": "TraficOpeC2" },//5
            { "data": "TraficOpeC3" },//6
            { "data": "TraficOpe" },//7

            { "data": "TraficOpeC1Old" },//8
            { "data": "TraficOpeC2Old" },//9
            { "data": "TraficOpeC3Old" },//10
            { "data": "TraficOpeOld" },//11

            { "data": "EcvoTraficOpeC1" },//12
            { "data": "EcvoTraficOpeC2" },//13
            { "data": "EcvoTraficOpeC3" },//14
            { "data": "EcvoTraficOpe" },//15
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },

            { "targets": 7, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapInfoFromDataTable(row['TraficGap'])); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableDataWithButtonGet(data, GetGapInfoFromDataTable(row['TraficGapOld'])); } },
            {
                "targets": 12, "render": function (data, type, row) {
                    if (row['TraficOpeC1Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC1'] - row['TraficOpeC1Old']) / row['TraficOpeC1Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return 0;
                    }
                }
            },
            {
                "targets": 13, "render": function (data, type, row) {
                    if (row['TraficOpeC2Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC2'] - row['TraficOpeC2Old']) / row['TraficOpeC2Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return 0;
                    }
                }
            },
            {
                "targets": 14, "render": function (data, type, row) {
                    if (row['TraficOpeC3Old'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpeC3'] - row['TraficOpeC3Old']) / row['TraficOpeC3Old']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return 0;
                    }
                }
            },
            { "targets": 15, "render": function (data, type, row) { return DataTableFormatRateGet(data.toFixed(2)); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    TraficOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    TraficCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    TraficGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(3).footer()).html(numShortFormat(TraficOpeTotal));
        //    $(api.column(4).footer()).html(numShortFormat(TraficCeTotal));
        //    $(api.column(5).footer()).html(numShortFormat(TraficGapTotal));

        //    if (TraficGapTotal !== 0)
        //        $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numShortFormat(TraficGapTotal) + '</span>');
        //    else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numShortFormat(TraficGapTotal) + '</span>');
        //}
    });
}

function RepoTraficDivisionDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var CexId = GetElementValue('CexId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var Sens = GetElementValue('SensId');

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var TimeId = GetElementValue('TimeId');

    var Icon = 'fas fa-eye';

    if (DateStringStart != '' &&
        DateStringEnd != '' &&
        TimeId != '0') {

        RepoTraficAllReportsHide();
        ShowReport('ParamReportId');

        RepoTraficStationDayGet(ActionBtnId, CexId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);

    }
    else {
        ParamMessageErrorDisplay()
    };
}

function RepoTraficCexAllReportsHide() {
    var HeaderIndex = '0';
    var TimeIndex = '0';
    var LevelIndex = '0';

    HideReport('HomeReportId');
    HideReport('ParamReportId');
    HideReport('ExportReportId');
    HideReport('CertReportId');
    //HideReport('CoverReportId');

    HeaderIndex = '1';
    TimeIndex = '0';
    PageIndex = '';
    PageRowIndex = '0';

    for (var PatternIndex = 0; PatternIndex <= 59; PatternIndex++) {
        HideReport('Grid' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_GridReportId');
    }

    HeaderIndex = '1';
    TimeIndex = '0';
    PageIndex = '';
    PageRowIndex = '1';
    for (var PatternIndex = 0; PatternIndex <= 59; PatternIndex++) {
        HideReport('Grid' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_GridReportId');
    }

    HideReport('Grid0000_GridReportId')

    HideReport('Grid12_' + 'GridReportId');
    HideReport('Grid13_' + 'GridReportId');
    HideReport('Grid14_' + 'GridReportId');

    //HideReport('Grid200_GridReportId');
    //HideReport('Grid201_GridReportId');

    HideReport('Grid300_GridReportId');
    HideReport('Grid301_GridReportId');

    HideReport('Grid400_GridReportId');
    HideReport('Grid401_GridReportId');

    HideReport('Grid500_GridReportId');
    HideReport('Grid501_GridReportId');

    HideReport('Page60_PageReportId');
    HideReport('Page61_PageReportId');

    //Cex
    HeaderIndex = '2';
    TimeIndex = '0';
    LevelIndex = '';
    for (var PatternIndex = 0; PatternIndex <= 15; PatternIndex++) {
        HideReport('Page' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_PageReportId');
    }

    HideReport('Page21_PageReportId');
}

function RepoTraficCexAllParametersHide() {

    HideReport('RegionId' + 'Parent');
    HideReport('AxleId' + 'Parent');
    HideReport('SectionId' + 'Parent');
    HideReport('CexId' + 'Parent');
    HideReport('BagContainerId' + 'Parent');
    HideReport('StationNumberId' + 'Parent');
    HideReport('SensId' + 'Parent');
    HideReport('IsPrincipalId' + 'Parent');


    HideReport('DateStartId' + 'Parent');
    HideReport('DateEndId' + 'Parent');
    HideReport('TimeId' + 'Parent');

    HideReport('ParamActionContainerId1');
    HideReport('ParamActionContainerId2');
    HideReport('ParamActionContainerId3');

    HideReport('TaskKillBtnId');
    HideReport('CertReportSendBtnId');
    HideReport('CertReportViewBtnId');
}

function RepoTraficCexHomeOpen() {
    LeftMenuHide();
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(0, 1);

    ShowReport('HomeReportId');
    ParamTimesGet();
    HtmlDropDownListFill('CexId', '0', '/Param/ParamCexGet', 'CexId', 'CexNameShort');
    HtmlDropDownListFill('RegionId', '0', '/Param/ParamRegionsGet', 'RegionId', 'RegionNameShort');
    HtmlDropDownListFill('AxleId', '0', '/Param/ParamAxlesGet', 'AxleId', 'AxleName');
    //HtmlDropDownListFill('AxleIdTmp', '0', '/Param/ParamAxlesTmpGet', 'AxleId', 'AxleName');  

    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationNumberId');

    //Cover
    document.getElementById('Grid0000_GridCol0Id').setAttribute('Class', 'col');
    ShowReport('Grid0000_GridCol0Id');
    document.getElementById('Grid0000_GridCol1Id').setAttribute('Class', 'col-16');
    document.getElementById('Grid0000_GridCol1Id').style.height = '3080px';
    ShowReport('Grid0000_GridCol1Id');
    document.getElementById('Grid0000_GridCol2Id').setAttribute('Class', 'col');
    ShowReport('Grid0000_GridCol2Id');
    //ShowReport('CoverReportId');
}


function RepoTraficCexOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(1, 1);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficCexDisplay()");
    $('#ParamTitleId').text("Trafic par Centre d'Exploitation");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    document.getElementById('ParamActionBtnId3').setAttribute("onClick", "RepoPrint('RepoTraficCexHour')");

    $('#ParamActionTextId').text("Afficher");
    ShowReport('CexId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
    ShowReport('ParamActionContainerId3');

    //Export
    if (document.getElementById('ExportPDFBtnId') != null) {
        document.getElementById('ExportPDFBtnId').setAttribute("onClick", "ExportRepoCert(\'PDF\', \'Trafic\', \'Cex\')");
    }
    if (document.getElementById('ExportExcelBtnId') != null) {
        document.getElementById('ExportExcelBtnId').setAttribute("onClick", "ExportRepoCert(\'Excel\', \'Trafic\', \'Cex\')");
    }
}

function RepoTraficCexHourGet(ActionBtnId, Icon, itemData, imax, i, DateStringStart, DateStringEnd, Sens) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var CexId = itemData[i].CexId;
    var CexNameShort = itemData[i].CexNameShort;



    var PatternIndex = 0;

    if (Sens == 'E') {
        PatternIndex = i * 2;
    }
    else {
        PatternIndex = (i * 2) + 1;
    }

    var Pattern = 'RepoTraficCexHour';
    var PatternS = Pattern + PatternIndex;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);



    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (DateStringStart - DateStringEnd == 0) {

                //Variables
                var DateValue = JsDateValueFromDateString(DateStringEnd);
                var HeaderIndex = '2';
                var TimeIndex = '0';
                var LevelIndex = '';
                var DataName = 'Trafic';
                var TimeName = 'horaire';
                var Portion = 'par Centre d\'Exploitation';
                var Unity = '';

                var Title = DataName + ' ' + TimeName + ' ' + Portion + ' du ' + DateValue + ' ' + Unity + ' (' + CexNameShort + ')' + ' - ' + JsSensLabelGet(Sens);

                //Page
                document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId').style.height = '3170px';
                document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageCardId').style.border = 'transparent';
                ShowReport('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageReportId');

                //Grid50i0
                LevelIndex = '0';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').style.height = '1534px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').style.overflowY = 'auto';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol2Id').setAttribute('Class', '');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridReportId');

                $('#' + PatternS + 'TableCardHeaderId h5').text(Title);
                ShowReport(PatternTableReportId);

                var PatternChart = Pattern + 'Line' + PatternIndex;
                var labels = GetColumnArray(PatternTableId, 0);
                var data1 = GetColumnArray(PatternTableId, 1);
                var data2 = GetColumnArray(PatternTableId, 3);

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic horaire 2020', data1, 'Trafic horaire 2019', data2, false);


                ////Grid50i1
                LevelIndex = 1;
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').style.height = '1534px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol1Id').style.overflowY = 'auto';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCol2Id').setAttribute('Class', '');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridCardId').style.border = 'transparent';

                ShowReport('Grid' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_GridReportId');

                var Title = 'Trafic horaire par moyen de paiement (' + CexNameShort + ') du ' + DateValue;
                PatternChart = Pattern + 'MpLine' + PatternIndex;
                var labels = GetColumnArray(PatternTableId, 0);
                var data1 = GetColumnArray(PatternTableId, 9);
                var data2 = GetColumnArray(PatternTableId, 13);
                var data3 = GetColumnArray(PatternTableId, 17);
                var data4 = GetColumnArray(PatternTableId, 21);
                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);


                var Title = 'Trafic horaire par classe (' + CexNameShort + ') du ' + DateValue;
                var PatternChart = Pattern + 'ClLine' + PatternIndex;
                var labels = GetColumnArray(PatternTableId, 0);
                var data1 = GetColumnArray(PatternTableId, 22);
                var data2 = GetColumnArray(PatternTableId, 23);
                var data3 = GetColumnArray(PatternTableId, 24);
                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)


                if (Sens == 'E') {
                    Sens = 'S';
                    RepoTraficCexHourGet(ActionBtnId, Icon, itemData, imax, i, DateStringStart, DateStringEnd, Sens);
                }
                else {
                    i++;
                    if (i <= imax) {
                        Sens = 'E';
                        RepoTraficCexHourGet(ActionBtnId, Icon, itemData, imax, i, DateStringStart, DateStringEnd, Sens);
                    }
                }
            }

        },
        "ajax": {
            "url": "/Repo/RepoTraficCexHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "CexId": CexId,
                "Sens": Sens,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            //{ "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//0
            {
                "mData": function vehicle(data, type, dataToSet) {
                    return GetDigits(data.Hour, 2) + ':' + GetDigits(data.Minute, 2);
                }
            },//0
            { "data": "TraficOpe" },//1
            { "data": "TraficGap" },//2

            { "data": "TraficOpeOld" },//3
            { "data": "TraficGapOld" },//4

            { "data": "TraficOpeEvoR" },//5

            { "data": "TlpC1" },//6
            { "data": "TlpC2" },//7
            { "data": "TlpC3" },//8
            { "data": "Tlp" },//9

            { "data": "CardC1" },//10
            { "data": "CardC2" },//11
            { "data": "CardC3" },//12
            { "data": "Card" },//13

            { "data": "CbC1" },//14
            { "data": "CbC2" },//15
            { "data": "CbC3" },//16
            { "data": "Cb" },//17

            { "data": "OtherC1" },//18
            { "data": "OtherC2" },//19      
            { "data": "OtherC3" },//20
            { "data": "Other" },//21

            { "data": "TraficOpeC1" },//22
            { "data": "TraficOpeC2" },//23
            { "data": "TraficOpeC3" },//24

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Tlp }; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Card }; } },//26
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Cb }; } },//27
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Other }; } },//28

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//29
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//30
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//31           
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "0%", "className": "text-right none", "targets": 6 },
            { "width": "0%", "className": "text-right none", "targets": 7 },
            { "width": "0%", "className": "text-right none", "targets": 8 },
            { "width": "0%", "className": "text-right none", "targets": 9 },

            { "width": "0%", "className": "text-right none", "targets": 10 },
            { "width": "0%", "className": "text-right none", "targets": 11 },
            { "width": "0%", "className": "text-right none", "targets": 12 },
            { "width": "0%", "className": "text-right none", "targets": 13 },

            { "width": "0%", "className": "text-right none", "targets": 14 },
            { "width": "0%", "className": "text-right none", "targets": 15 },
            { "width": "0%", "className": "text-right none", "targets": 16 },
            { "width": "0%", "className": "text-right none", "targets": 17 },

            { "width": "0%", "className": "text-right none", "targets": 18 },
            { "width": "0%", "className": "text-right none", "targets": 19 },
            { "width": "0%", "className": "text-right none", "targets": 20 },
            { "width": "0%", "className": "text-right none", "targets": 21 },

            { "width": "0%", "className": "text-right none", "targets": 22 },
            { "width": "0%", "className": "text-right none", "targets": 23 },
            { "width": "0%", "className": "text-right none", "targets": 24 },

            { "width": "0%", "className": "text-right none", "targets": 25 },
            { "width": "0%", "className": "text-right none", "targets": 26 },
            { "width": "0%", "className": "text-right none", "targets": 27 },
            { "width": "0%", "className": "text-right none", "targets": 28 },

            { "width": "0%", "className": "text-right none", "targets": 29 },
            { "width": "0%", "className": "text-right none", "targets": 30 },
            { "width": "0%", "className": "text-right none", "targets": 31 },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 2, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            {
                "targets": 5, "render": function (data, type, row) {
                    if (row['TraficOpeOld'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpe'] - row['TraficOpeOld']) / row['TraficOpeOld']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '<span  class="badge badge-success" >100.00 %</span>';
                    }
                }
            },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(numShortFormat(Total0));

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total2));

            //Total3 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numShortFormat(Total3));



            //Total4 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total4));

            //Total5 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(6).footer()).html(numShortFormat(Total5));

            //Total6 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numShortFormat(Total6));

            //Total7 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numShortFormat(Total7));



            var Evo0 = ((Total0 - Total1) / Total1) * 100;
            if (Evo0 < 0)
                $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo0) + ' %</span>');
            else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numFormat(Evo0) + ' %</span>');

            //var Evo1 = ((Total1 - Total5) / Total5) * 100;
            //if (Evo1 < 0)
            //    $(api.column(10).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo1) + ' %</span>');
            //else $(api.column(10).footer()).html('<span  class="badge badge-success">' + numFormat(Evo1) + ' %</span>');


            //var Evo2 = ((Total2 - Total6) / Total6) * 100;
            //if (Evo2 < 0)
            //    $(api.column(11).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo2) + ' %</span>');
            //else $(api.column(11).footer()).html('<span  class="badge badge-success">' + numFormat(Evo2) + ' %</span>');

            //var Evo3 = ((Total3 - Total7) / Total7) * 100;
            //if (Evo3 < 0)
            //    $(api.column(12).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo3) + ' %</span>');
            //else $(api.column(12).footer()).html('<span  class="badge badge-success">' + numFormat(Evo3) + ' %</span>');


        }
    });
}

function JsDateValueFromDateString(DateString) {
    return new String(DateString).substr(0, 2) + '/' + new String(DateString).substr(2, 2) + '/' + new String(DateString).substr(4, 4);
}

function JsSensLabelGet(Sens) {
    if (Sens == 'E') {
        return 'Entrées';
    }
    if (Sens == 'S') {
        return 'Sorties';
    }
}

function RepoTraficCexHourAllGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};

    obj.CexId = CexId;

    $.ajax({
        url: "/Repo/RepoCexAllGet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: true,
        success: function (data) {
            ParamMessageReset();
            HideReport('CertReportId');

            jQuery.each(data, function (index, itemData) {
                var imax = itemData.length - 1;
                var i = 0;
                var Sens = 'S';
                RepoTraficCexHourGet(ActionBtnId, Icon, itemData, imax, i, DateStringStart, DateStringEnd, Sens);
            });


        }
    })
}


function RepoTraficStationHourSerialGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, DateStringStart, DateStringEnd, itemData, CexNameShortTmp, StationNameTmp) {

    var imax = itemData.length - 1;
    var kmax = imax * 2;

    for (var i = 0; i <= imax; i++) {

        CexIdTmp = itemData[i].CexId;
        BagContainerIdTmp = itemData[i].BagContainerId;
        StationNumberTmp = itemData[i].StationNumber;
        SensTmp = itemData[i].Sens;
        CexNameShortTmp = itemData[i].CexNameShort;
        StationNameTmp = itemData[i].StationName;
        k = i * 2;

        if (
            (CexIdTmp == '01' && StationNumberTmp == '04') ||
            (CexIdTmp == '01' && StationNumberTmp == '02') ||
            (CexIdTmp == '01' && StationNumberTmp == '31') ||
            (CexIdTmp == '01' && StationNumberTmp == '05') ||
            (CexIdTmp == '01' && StationNumberTmp == '18') ||
            (CexIdTmp == '01' && StationNumberTmp == '43') ||
            (CexIdTmp == '01' && StationNumberTmp == '45') ||
            (CexIdTmp == '01' && StationNumberTmp == '47')
            //StationNumberTmp == '69' ||
            //StationNumberTmp == '66' ||
            //StationNumberTmp == '67' ||
            //StationNumberTmp == '20' ||
            //StationNumberTmp == '24' ||
            //StationNumberTmp == '61' ||
            //StationNumberTmp == '63' ||
            //StationNumberTmp == '35' ||
            //StationNumberTmp == '33' ||
            //StationNumberTmp == '34' ||
            //StationNumberTmp == '37' ||
            //StationNumberTmp == '38' ||
            //StationNumberTmp == '70' ||
            //StationNumberTmp == '71' ||
            //StationNumberTmp == '72' ||
            //StationNumberTmp == '73' ||
            //StationNumberTmp == '50' ||
            //StationNumberTmp == '55' ||
            //StationNumberTmp == '56' ||
            //StationNumberTmp == '57' ||
            //StationNumberTmp == '58' ||
            //StationNumberTmp == '78'
        ) {
            RepoTraficStationHourGet(ActionBtnId, Icon, itemData, imax, 0, DateStringStart, DateStringEnd);
        }
        else {
            if (
                (CexIdTmp == '01' && StationNumberTmp == '40') ||
                (CexIdTmp == '01' && StationNumberTmp == '03') ||
                (CexIdTmp == '01' && StationNumberTmp == '30') ||
                (CexIdTmp == '01' && StationNumberTmp == '06') ||
                (CexIdTmp == '01' && StationNumberTmp == '19') ||
                (CexIdTmp == '01' && StationNumberTmp == '42') ||
                (CexIdTmp == '01' && StationNumberTmp == '44')
                //StationNumberTmp == '68' ||
                //StationNumberTmp == '23' ||
                //StationNumberTmp == '62' ||
                //StationNumberTmp == '32' ||
                //StationNumberTmp == '77'
            ) {
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'E', DateStringStart, DateStringEnd, k, CexNameShortTmp, StationNameTmp);
            }
            else {
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'E', DateStringStart, DateStringEnd, k, CexNameShortTmp, StationNameTmp);
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'S', DateStringStart, DateStringEnd, k + 1, CexNameShortTmp, StationNameTmp);
            }
        }
    }
}

function RepoTraficCexDayClGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd) {
    ShowReport('ExportReportId');

    var Pattern = 'RepoTraficCexDayCl';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    ParamMessageReset();


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            //Variables
            var DateValueStart = JsDateValueFromDateString(DateStringStart);
            var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '2';
            var TimeIndex = '1';
            var PageIndex = '';
            var PageRowIndex = '';
            var PatternIndex = '';

            var Title = 'Trafic journalier global du ' + DateValueStart + ' au ' + DateValueEnd;
            $('#' + Pattern + 'TableCardHeaderId h5').text(Title);

            PageRowIndex = '0';
            TplGridModelColSet(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex, 'col', 'col-12', 'col', 'transparent');

            ShowReport('Page' + HeaderIndex + TimeIndex + '_PageReportId');

            ////----
            //document.getElementById('Grid200_GridCol0Id').setAttribute('Class', '');
            ////HideReport(Pattern + 'TotalLineChartReportId');
            //ShowReport('Grid200_GridCol0Id');
            //document.getElementById('Grid200_GridCol1Id').setAttribute('Class', 'col-12');
            ////document.getElementById('Grid200_GridCol1Id').style.height = '740px';
            //ShowReport('Grid200_GridCol1Id');
            //document.getElementById('Grid200_GridCol2Id').setAttribute('Class', '');
            //ShowReport('Grid200_GridCol3Id');

            //document.getElementById('Grid200_' + 'GridReportId').style.height = '600px';

            //ShowReport('Grid200_' + 'GridReportId');


            //----
            //document.getElementById('Grid201_GridCol0Id').setAttribute('Class', 'col');
            //ShowReport('Grid201_GridCol0Id');
            //document.getElementById('Grid201_GridCol1Id').setAttribute('Class', 'col');
            //document.getElementById('Grid201_GridCol1Id').style.height = '2470px';
            //ShowReport('Grid201_GridCol1Id');
            //document.getElementById('Grid201_GridCol2Id').setAttribute('Class', 'col');




            //var Day = new String(DateStringStart).substr(0, 2) + '/' + new String(DateStringStart).substr(2, 2) + '/' + new String(DateStringStart).substr(4, 4);
            //var Title = 'Trafic journalier par Centre d\'Exploitation du ' + Day;
            //var PatternChart = Pattern + 'Total' + 'Bar';
            //var labels = GetColumnArray(PatternTableId, 0);

            //var label1 = 'Trafic journalier 2020';
            //var data1 = GetColumnArray(PatternTableId, 5);
            //var backgroundColor1 = 'rgba(7,98,250,1)';

            //var label2 = 'Trafic journalier 2019';
            //var data2 = GetColumnArray(PatternTableId, 9);
            //var backgroundColor2 = 'rgba(7,98,250,0.2)';

            //DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);


        },
        "ajax": {
            "url": "/Repo/RepoTraficCexDayClGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "CexId": CexId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "CexNameShort" }, //0
            { "data": "DateValue" },//1

            { "data": "TraficCeC1" },//2
            { "data": "TraficCeC2" },//3
            { "data": "TraficCeC3" },//4
            { "data": "TraficCe" },//5

            { "data": "TraficCeC1Old" },//6
            { "data": "TraficCeC2Old" },//7
            { "data": "TraficCeC3Old" },//8
            { "data": "TraficCeOld" },//9

            { "data": "" },//10
            { "data": "" },//11
            { "data": "" },//12
            { "data": "" },//13
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },

            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },

            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficCeC1Gap']); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficCeC2Gap']); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficCeC3Gap']); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficCeGap']); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficCeC1OldGap']); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficCeC2OldGap']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficCeC3OldGap']); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['TraficCeOldGap']); } },

            { "targets": 10, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['TraficCeC1'], row['TraficCeC1Old']) } },
            { "targets": 11, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['TraficCeC2'], row['TraficCeC2Old']) } },
            { "targets": 12, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['TraficCeC3'], row['TraficCeC3Old']) } },
            { "targets": 13, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['TraficCe'], row['TraficCeOld']) } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 200,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": true,
        "ordering": false,
        "fixedHeader": {
            "header": true,
            "footer": false,
            "headerOffset": 10
        },
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(2).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numShortFormat(Total2));

            //Total3 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total3));



            //Total4 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(6).footer()).html(numShortFormat(Total4));

            //Total5 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(numShortFormat(Total5));

            //Total6 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(numShortFormat(Total6));

            //Total7 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(9).footer()).html(numShortFormat(Total7));



            //var Evo0 = ((Total0 - Total4) / Total4) * 100;
            //if (Evo0 < 0)
            //    $(api.column(10).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo0) + ' %</span>');
            //else $(api.column(10).footer()).html('<span  class="badge badge-success">' + numFormat(Evo0) + ' %</span>');


            //var Evo1 = ((Total1 - Total5) / Total5) * 100;
            //if (Evo1 < 0)
            //    $(api.column(11).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo1) + ' %</span>');
            //else $(api.column(11).footer()).html('<span  class="badge badge-success">' + numFormat(Evo1) + ' %</span>');

            //var Evo2 = ((Total2 - Total6) / Total6) * 100;
            //if (Evo2 < 0)
            //    $(api.column(12).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo2) + ' %</span>');
            //else $(api.column(12).footer()).html('<span  class="badge badge-success">' + numFormat(Evo2) + ' %</span>');

            //var Evo3 = ((Total3 - Total7) / Total7) * 100;
            //if (Evo3 < 0)
            //    $(api.column(13).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo3) + ' %</span>');
            //else $(api.column(13).footer()).html('<span  class="badge badge-success">' + numFormat(Evo3) + ' %</span>');
        }
    });
}

function RepoTraficCexGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon) {
    var Pattern = 'RepoTraficCex';
    var PatternLine0 = Pattern + 'Total' + 'Line';
    var PatternLine1 = Pattern + 'Mp' + 'Line';
    var PatternBar0 = Pattern + 'Total' + 'Bar';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    HideReport(PatternLine0 + 'ChartReportId');
    HideReport(PatternLine1 + 'ChartReportId');
    HideReport(PatternBar0 + 'ChartReportId');
    ParamMessageReset();

    var d1 = new String(DateStringStart);
    var d2 = new String(DateStringEnd);


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            if (SiteId == '0') {
                if (DateStringStart - DateStringEnd == 0) {
                    var labels = GetColumnArray(PatternTableId, 0);
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var data2 = GetColumnArray(PatternTableId, 3);
                    ChartJsBarOneDisplay(PatternBar0, labels, data1, "Trafic par CEX");

                    //var Title = 'Evolution du trafic par Centre d\'Exploitation';
                    //var PatternChart = PatternBar0;
                    //var labels = GetColumnArray(PatternTableId, 0);
                    //var label1 = 'Trafic par Centre d\'Exploitation';
                    //var data1 = GetColumnArray(PatternTableId, 2);
                    //ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false)
                }
            }
            else {
                if (DateStringStart - DateStringEnd == 0) {

                }
                else {
                    //var labels = GetColumnArray(PatternTableId, 1);
                    //var label1 = 'Trafic par Centre d\'Exploitation';
                    //var data1 = GetColumnArray(PatternTableId, 2);
                    //ChartJsLineOneDisplay(PatternLine0, labels, label1, data1);

                    var Title = 'Evolution du trafic par Centre d\'Exploitation';
                    var PatternChart = PatternLine0;
                    var labels = GetColumnArray(PatternTableId, 1);
                    var label1 = 'Trafic par Centre d\'Exploitation';
                    var data1 = GetColumnArray(PatternTableId, 2);
                    ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false)


                    //var labels = GetColumnArray(PatternTableId, 1);
                    //var data1 = GetColumnArray(PatternTableId, 24);
                    //var data2 = GetColumnArray(PatternTableId, 25);
                    //var data3 = GetColumnArray(PatternTableId, 26);
                    //var data4 = GetColumnArray(PatternTableId, 27);
                    //ChartJsLineFourDisplay(PatternLine1, labels, data1, data2, data3, data4);

                    var Title = 'Evolution du trafic par moyen de paiement';
                    var PatternChart = PatternLine1;
                    var labels = GetColumnArray(PatternTableId, 1);
                    var data1 = GetColumnArray(PatternTableId, 24);
                    var data2 = GetColumnArray(PatternTableId, 25);
                    var data3 = GetColumnArray(PatternTableId, 26);
                    var data4 = GetColumnArray(PatternTableId, 27);
                    ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                    var Title = 'Evolution du trafic par catégorie';
                    var PatternChart = 'RepoTraficCexCl';
                    var labels = GetColumnArray(PatternTableId, 1);
                    var data1 = GetColumnArray(PatternTableId, 28);
                    var data2 = GetColumnArray(PatternTableId, 29);
                    var data3 = GetColumnArray(PatternTableId, 30);
                    ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)
                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//1
            //{
            //    "mData": function vehicle(data, type, dataToSet) {
            //        if (data.DhmValue === null) return "";
            //        var pattern = /Date\(([^)]+)\)/;//date format from server side
            //        var results = pattern.exec(data.DhmValue);
            //        var dt = new Date(parseFloat(results[1]));

            //        //return dt.toLocaleDateString() + ' ' + dt.toLocaleTimeString();
            //        return dt.toLocaleDateString() + " " + dt.toLocaleTimeString(undefined, {
            //            hour: '2-digit',
            //            minute: '2-digit'
            //        });                                                         
            //    }
            //},//1
            { "data": "TraficOpe", "render": $.fn.dataTable.render.number(' ', '', 0) },//2
            { "data": "TraficCe", "render": $.fn.dataTable.render.number(' ', '', 0) },//3
            { "data": "Ctr01" },//4

            { "data": "TlpC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//5
            { "data": "TlpC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//6
            { "data": "TlpC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//7
            { "data": "Tlp", "render": $.fn.dataTable.render.number(' ', '', 0) },//8

            { "data": "CardC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//9
            { "data": "CardC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//10
            { "data": "CardC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//11
            { "data": "Card", "render": $.fn.dataTable.render.number(' ', '', 0) },//12

            { "data": "CbC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//13
            { "data": "CbC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//14
            { "data": "CbC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//15
            { "data": "Cb", "render": $.fn.dataTable.render.number(' ', '', 0) },//16

            { "data": "OtherC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//17       
            { "data": "OtherC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//18         
            { "data": "OtherC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//19
            { "data": "Other", "render": $.fn.dataTable.render.number(' ', '', 0) },//20

            { "data": "TraficC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//21
            { "data": "TraficC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//22
            { "data": "TraficC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//23

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Tlp }; } },//24
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Card }; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Cb }; } },//26
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Other }; } },//27

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//28
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//29
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//30
            //{ "data": "TraficOpe" },//28
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-center", "targets": 1 },//Date
            { "width": "15%", "className": "text-right", "targets": 2 },//TraficOpe
            { "width": "15%", "className": "text-right", "targets": 3 },//TraficCe
            { "width": "15%", "className": "text-center", "targets": 4 },//Ctr01

            { "width": "0%", "className": "text-right none", "targets": 5 },//
            { "width": "0%", "className": "text-right none", "targets": 6 },//
            { "width": "0%", "className": "text-right none", "targets": 7 },//
            { "width": "0%", "className": "text-right none", "targets": 8 },//

            { "width": "0%", "className": "text-right none", "targets": 9 },//
            { "width": "0%", "className": "text-right none", "targets": 10 },//
            { "width": "0%", "className": "text-right none", "targets": 11 },//
            { "width": "0%", "className": "text-right none", "targets": 12 },//

            { "width": "0%", "className": "text-right none", "targets": 13 },//
            { "width": "0%", "className": "text-right none", "targets": 14 },//
            { "width": "0%", "className": "text-right none", "targets": 15 },//
            { "width": "0%", "className": "text-right none", "targets": 16 },// 

            { "width": "0%", "className": "text-right none", "targets": 17 },//
            { "width": "0%", "className": "text-right none", "targets": 18 },//
            { "width": "0%", "className": "text-right none", "targets": 19 },//
            { "width": "0%", "className": "text-right none", "targets": 20 },// 

            { "width": "0%", "className": "text-right none", "targets": 21 },//
            { "width": "0%", "className": "text-right none", "targets": 22 },//
            { "width": "0%", "className": "text-right none", "targets": 23 },//

            { "width": "0%", "className": "text-right none", "targets": 24 },//
            { "width": "0%", "className": "text-right none", "targets": 25 },//
            { "width": "0%", "className": "text-right none", "targets": 26 },//
            { "width": "0%", "className": "text-right none", "targets": 27 },//

            { "width": "0%", "className": "text-right none", "targets": 28 },//
            { "width": "0%", "className": "text-right none", "targets": 29 },//
            { "width": "0%", "className": "text-right none", "targets": 30 },//

            //{ "width": "0%", "className": "text-right none", "targets": 28 },//
            //{ "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(2).footer()).html(numShortFormat(Total1));
            $(api.column(3).footer()).html(numShortFormat(Total2));
        }
    });


}

function RepoTraficCexDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';


    var TimeId = GetElementValue('TimeId');

    if (TimeId != '0') {
        //RepoTraficAllReportsHide();
        //ShowReport('ParamReportId');
        if (TimeId == '00')//Heure
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
            var CexId = GetElementValue('CexId');

            if (DateStringStart != '' && DateStringEnd != '') {

                var DateValue = JsDateValueFromDateString(DateStringStart);
                $('#CoverTitleId h1').text('Trafic horaire par Centre d\'Exploitation');
                $('#CoverDateId h3').text('Le ' + DateValue);
                ShowReport('Grid0000_' + 'GridReportId');

                RepoTraficCexHourAllGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd)
            }
            else {
                $("#ParamMessageTextId").html("Les dates de début et de fin sont obligatoires");
            }
        }
        if (TimeId == '01')//Day
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
            var CexId = GetElementValue('CexId');

            if (DateStringStart != '' && DateStringEnd != '') {
                RepoTraficCexDayClGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates de début et de fin sont obligatoires");
            }
        }
        //if (TimeId == '02')//Month
        //{
        //    var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
        //    var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

        //    if (MonthStringStart != '' && MonthStringEnd != '') {
        //        RepoNrCexMonthGet(ActionBtnId, Icon, CexId, MonthStringStart, MonthStringEnd);
        //    }
        //    else {
        //        $("#ParamMessageTextId").html("Les mois sont obligatoires");
        //    }
        //}
        //if (TimeId == '06')//Cumul
        //{
        //    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
        //    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');


        //    if (DateStringStart != '' && DateStringEnd != '') {
        //        RepoNrCexCumulGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
        //    }
        //    else {
        //        $("#ParamMessageTextId").html("Les dates sont obligatoires");
        //    }
        //}
    }
    else {
        $("#ParamMessageTextId").html("La période est obligatoire");
    };
}

function RepoTraficSectionGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon) {
    var Pattern = 'RepoTraficCex';
    var PatternLine0 = Pattern + 'Total' + 'Line';
    var PatternLine1 = Pattern + 'Mp' + 'Line';
    var PatternBar0 = Pattern + 'Total' + 'Bar';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    HideReport(PatternLine0 + 'ChartReportId');
    HideReport(PatternLine1 + 'ChartReportId');
    HideReport(PatternBar0 + 'ChartReportId');
    ParamMessageReset();

    var d1 = new String(DateStringStart);
    var d2 = new String(DateStringEnd);


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            if (SiteId == '0') {
                if (DateStringStart - DateStringEnd == 0) {
                    var labels = GetColumnArray(PatternTableId, 0);
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var data2 = GetColumnArray(PatternTableId, 3);
                    ChartJsBarOneDisplay(PatternBar0, labels, data1, "Trafic par CEX");

                    //var Title = 'Evolution du trafic par Centre d\'Exploitation';
                    //var PatternChart = PatternBar0;
                    //var labels = GetColumnArray(PatternTableId, 0);
                    //var label1 = 'Trafic par Centre d\'Exploitation';
                    //var data1 = GetColumnArray(PatternTableId, 2);
                    //ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false)
                }
            }
            else {
                if (DateStringStart - DateStringEnd == 0) {

                }
                else {
                    //var labels = GetColumnArray(PatternTableId, 1);
                    //var label1 = 'Trafic par Centre d\'Exploitation';
                    //var data1 = GetColumnArray(PatternTableId, 2);
                    //ChartJsLineOneDisplay(PatternLine0, labels, label1, data1);

                    var Title = 'Evolution du trafic par Centre d\'Exploitation';
                    var PatternChart = PatternLine0;
                    var labels = GetColumnArray(PatternTableId, 1);
                    var label1 = 'Trafic par Centre d\'Exploitation';
                    var data1 = GetColumnArray(PatternTableId, 2);
                    ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false)


                    //var labels = GetColumnArray(PatternTableId, 1);
                    //var data1 = GetColumnArray(PatternTableId, 24);
                    //var data2 = GetColumnArray(PatternTableId, 25);
                    //var data3 = GetColumnArray(PatternTableId, 26);
                    //var data4 = GetColumnArray(PatternTableId, 27);
                    //ChartJsLineFourDisplay(PatternLine1, labels, data1, data2, data3, data4);

                    var Title = 'Evolution du trafic par moyen de paiement';
                    var PatternChart = PatternLine1;
                    var labels = GetColumnArray(PatternTableId, 1);
                    var data1 = GetColumnArray(PatternTableId, 24);
                    var data2 = GetColumnArray(PatternTableId, 25);
                    var data3 = GetColumnArray(PatternTableId, 26);
                    var data4 = GetColumnArray(PatternTableId, 27);
                    ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                    var Title = 'Evolution du trafic par catégorie';
                    var PatternChart = 'RepoTraficCexCl';
                    var labels = GetColumnArray(PatternTableId, 1);
                    var data1 = GetColumnArray(PatternTableId, 28);
                    var data2 = GetColumnArray(PatternTableId, 29);
                    var data3 = GetColumnArray(PatternTableId, 30);
                    ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)
                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//1
            //{
            //    "mData": function vehicle(data, type, dataToSet) {
            //        if (data.DhmValue === null) return "";
            //        var pattern = /Date\(([^)]+)\)/;//date format from server side
            //        var results = pattern.exec(data.DhmValue);
            //        var dt = new Date(parseFloat(results[1]));

            //        //return dt.toLocaleDateString() + ' ' + dt.toLocaleTimeString();
            //        return dt.toLocaleDateString() + " " + dt.toLocaleTimeString(undefined, {
            //            hour: '2-digit',
            //            minute: '2-digit'
            //        });                                                         
            //    }
            //},//1
            { "data": "TraficOpe", "render": $.fn.dataTable.render.number(' ', '', 0) },//2
            { "data": "TraficCe", "render": $.fn.dataTable.render.number(' ', '', 0) },//3
            { "data": "Ctr01" },//4

            { "data": "TlpC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//5
            { "data": "TlpC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//6
            { "data": "TlpC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//7
            { "data": "Tlp", "render": $.fn.dataTable.render.number(' ', '', 0) },//8

            { "data": "CardC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//9
            { "data": "CardC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//10
            { "data": "CardC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//11
            { "data": "Card", "render": $.fn.dataTable.render.number(' ', '', 0) },//12

            { "data": "CbC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//13
            { "data": "CbC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//14
            { "data": "CbC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//15
            { "data": "Cb", "render": $.fn.dataTable.render.number(' ', '', 0) },//16

            { "data": "OtherC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//17       
            { "data": "OtherC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//18         
            { "data": "OtherC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//19
            { "data": "Other", "render": $.fn.dataTable.render.number(' ', '', 0) },//20

            { "data": "TraficC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//21
            { "data": "TraficC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//22
            { "data": "TraficC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//23

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Tlp }; } },//24
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Card }; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Cb }; } },//26
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Other }; } },//27

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//28
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//29
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//30
            //{ "data": "TraficOpe" },//28
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-center", "targets": 1 },//Date
            { "width": "15%", "className": "text-right", "targets": 2 },//TraficOpe
            { "width": "15%", "className": "text-right", "targets": 3 },//TraficCe
            { "width": "15%", "className": "text-center", "targets": 4 },//Ctr01

            { "width": "0%", "className": "text-right none", "targets": 5 },//
            { "width": "0%", "className": "text-right none", "targets": 6 },//
            { "width": "0%", "className": "text-right none", "targets": 7 },//
            { "width": "0%", "className": "text-right none", "targets": 8 },//

            { "width": "0%", "className": "text-right none", "targets": 9 },//
            { "width": "0%", "className": "text-right none", "targets": 10 },//
            { "width": "0%", "className": "text-right none", "targets": 11 },//
            { "width": "0%", "className": "text-right none", "targets": 12 },//

            { "width": "0%", "className": "text-right none", "targets": 13 },//
            { "width": "0%", "className": "text-right none", "targets": 14 },//
            { "width": "0%", "className": "text-right none", "targets": 15 },//
            { "width": "0%", "className": "text-right none", "targets": 16 },// 

            { "width": "0%", "className": "text-right none", "targets": 17 },//
            { "width": "0%", "className": "text-right none", "targets": 18 },//
            { "width": "0%", "className": "text-right none", "targets": 19 },//
            { "width": "0%", "className": "text-right none", "targets": 20 },// 

            { "width": "0%", "className": "text-right none", "targets": 21 },//
            { "width": "0%", "className": "text-right none", "targets": 22 },//
            { "width": "0%", "className": "text-right none", "targets": 23 },//

            { "width": "0%", "className": "text-right none", "targets": 24 },//
            { "width": "0%", "className": "text-right none", "targets": 25 },//
            { "width": "0%", "className": "text-right none", "targets": 26 },//
            { "width": "0%", "className": "text-right none", "targets": 27 },//

            { "width": "0%", "className": "text-right none", "targets": 28 },//
            { "width": "0%", "className": "text-right none", "targets": 29 },//
            { "width": "0%", "className": "text-right none", "targets": 30 },//

            //{ "width": "0%", "className": "text-right none", "targets": 28 },//
            //{ "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(2).footer()).html(numShortFormat(Total1));
            $(api.column(3).footer()).html(numShortFormat(Total2));
        }
    });


}

function RepoTraficAxleGet(ActionBtnId, SiteId, DateStringStart, DateStringEnd, Icon) {
    var Pattern = 'RepoTraficCex';
    var PatternLine0 = Pattern + 'Total' + 'Line';
    var PatternLine1 = Pattern + 'Mp' + 'Line';
    var PatternBar0 = Pattern + 'Total' + 'Bar';
    var PatternTableId = Pattern + 'TableId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(Pattern + 'TableReportId');
    HideReport(PatternLine0 + 'ChartReportId');
    HideReport(PatternLine1 + 'ChartReportId');
    HideReport(PatternBar0 + 'ChartReportId');
    ParamMessageReset();

    var d1 = new String(DateStringStart);
    var d2 = new String(DateStringEnd);


    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            if (SiteId == '0') {
                if (DateStringStart - DateStringEnd == 0) {
                    var labels = GetColumnArray(PatternTableId, 0);
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var data2 = GetColumnArray(PatternTableId, 3);
                    ChartJsBarOneDisplay(PatternBar0, labels, data1, "Trafic par CEX");

                    //var Title = 'Evolution du trafic par Centre d\'Exploitation';
                    //var PatternChart = PatternBar0;
                    //var labels = GetColumnArray(PatternTableId, 0);
                    //var label1 = 'Trafic par Centre d\'Exploitation';
                    //var data1 = GetColumnArray(PatternTableId, 2);
                    //ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false)
                }
            }
            else {
                if (DateStringStart - DateStringEnd == 0) {

                }
                else {
                    //var labels = GetColumnArray(PatternTableId, 1);
                    //var label1 = 'Trafic par Centre d\'Exploitation';
                    //var data1 = GetColumnArray(PatternTableId, 2);
                    //ChartJsLineOneDisplay(PatternLine0, labels, label1, data1);

                    var Title = 'Evolution du trafic par Centre d\'Exploitation';
                    var PatternChart = PatternLine0;
                    var labels = GetColumnArray(PatternTableId, 1);
                    var label1 = 'Trafic par Centre d\'Exploitation';
                    var data1 = GetColumnArray(PatternTableId, 2);
                    ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false)


                    //var labels = GetColumnArray(PatternTableId, 1);
                    //var data1 = GetColumnArray(PatternTableId, 24);
                    //var data2 = GetColumnArray(PatternTableId, 25);
                    //var data3 = GetColumnArray(PatternTableId, 26);
                    //var data4 = GetColumnArray(PatternTableId, 27);
                    //ChartJsLineFourDisplay(PatternLine1, labels, data1, data2, data3, data4);

                    var Title = 'Evolution du trafic par moyen de paiement';
                    var PatternChart = PatternLine1;
                    var labels = GetColumnArray(PatternTableId, 1);
                    var data1 = GetColumnArray(PatternTableId, 24);
                    var data2 = GetColumnArray(PatternTableId, 25);
                    var data3 = GetColumnArray(PatternTableId, 26);
                    var data4 = GetColumnArray(PatternTableId, 27);
                    ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                    var Title = 'Evolution du trafic par catégorie';
                    var PatternChart = 'RepoTraficCexCl';
                    var labels = GetColumnArray(PatternTableId, 1);
                    var data1 = GetColumnArray(PatternTableId, 28);
                    var data2 = GetColumnArray(PatternTableId, 29);
                    var data3 = GetColumnArray(PatternTableId, 30);
                    ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)
                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficCexGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "SiteName" }, //0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//1
            //{
            //    "mData": function vehicle(data, type, dataToSet) {
            //        if (data.DhmValue === null) return "";
            //        var pattern = /Date\(([^)]+)\)/;//date format from server side
            //        var results = pattern.exec(data.DhmValue);
            //        var dt = new Date(parseFloat(results[1]));

            //        //return dt.toLocaleDateString() + ' ' + dt.toLocaleTimeString();
            //        return dt.toLocaleDateString() + " " + dt.toLocaleTimeString(undefined, {
            //            hour: '2-digit',
            //            minute: '2-digit'
            //        });                                                         
            //    }
            //},//1
            { "data": "TraficOpe", "render": $.fn.dataTable.render.number(' ', '', 0) },//2
            { "data": "TraficCe", "render": $.fn.dataTable.render.number(' ', '', 0) },//3
            { "data": "Ctr01" },//4

            { "data": "TlpC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//5
            { "data": "TlpC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//6
            { "data": "TlpC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//7
            { "data": "Tlp", "render": $.fn.dataTable.render.number(' ', '', 0) },//8

            { "data": "CardC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//9
            { "data": "CardC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//10
            { "data": "CardC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//11
            { "data": "Card", "render": $.fn.dataTable.render.number(' ', '', 0) },//12

            { "data": "CbC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//13
            { "data": "CbC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//14
            { "data": "CbC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//15
            { "data": "Cb", "render": $.fn.dataTable.render.number(' ', '', 0) },//16

            { "data": "OtherC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//17       
            { "data": "OtherC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//18         
            { "data": "OtherC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//19
            { "data": "Other", "render": $.fn.dataTable.render.number(' ', '', 0) },//20

            { "data": "TraficC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//21
            { "data": "TraficC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//22
            { "data": "TraficC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//23

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Tlp }; } },//24
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Card }; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Cb }; } },//26
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Other }; } },//27

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//28
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//29
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//30
            //{ "data": "TraficOpe" },//28
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName
            { "width": "20%", "className": "text-center", "targets": 1 },//Date
            { "width": "15%", "className": "text-right", "targets": 2 },//TraficOpe
            { "width": "15%", "className": "text-right", "targets": 3 },//TraficCe
            { "width": "15%", "className": "text-center", "targets": 4 },//Ctr01

            { "width": "0%", "className": "text-right none", "targets": 5 },//
            { "width": "0%", "className": "text-right none", "targets": 6 },//
            { "width": "0%", "className": "text-right none", "targets": 7 },//
            { "width": "0%", "className": "text-right none", "targets": 8 },//

            { "width": "0%", "className": "text-right none", "targets": 9 },//
            { "width": "0%", "className": "text-right none", "targets": 10 },//
            { "width": "0%", "className": "text-right none", "targets": 11 },//
            { "width": "0%", "className": "text-right none", "targets": 12 },//

            { "width": "0%", "className": "text-right none", "targets": 13 },//
            { "width": "0%", "className": "text-right none", "targets": 14 },//
            { "width": "0%", "className": "text-right none", "targets": 15 },//
            { "width": "0%", "className": "text-right none", "targets": 16 },// 

            { "width": "0%", "className": "text-right none", "targets": 17 },//
            { "width": "0%", "className": "text-right none", "targets": 18 },//
            { "width": "0%", "className": "text-right none", "targets": 19 },//
            { "width": "0%", "className": "text-right none", "targets": 20 },// 

            { "width": "0%", "className": "text-right none", "targets": 21 },//
            { "width": "0%", "className": "text-right none", "targets": 22 },//
            { "width": "0%", "className": "text-right none", "targets": 23 },//

            { "width": "0%", "className": "text-right none", "targets": 24 },//
            { "width": "0%", "className": "text-right none", "targets": 25 },//
            { "width": "0%", "className": "text-right none", "targets": 26 },//
            { "width": "0%", "className": "text-right none", "targets": 27 },//

            { "width": "0%", "className": "text-right none", "targets": 28 },//
            { "width": "0%", "className": "text-right none", "targets": 29 },//
            { "width": "0%", "className": "text-right none", "targets": 30 },//

            //{ "width": "0%", "className": "text-right none", "targets": 28 },//
            //{ "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(2).footer()).html(numShortFormat(Total1));
            $(api.column(3).footer()).html(numShortFormat(Total2));
        }
    });


}

function RepoTraficAxleDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';

    var AxleId = GetElementValue('AxleId');
    var TimeId = GetElementValue('TimeId');

    if (TimeId != '0') {
        //RepoTraficAllReportsHide();
        //ShowReport('ParamReportId');

        if (TimeId == '01')//Day
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {
                RepoTraficAxleDayGet(ActionBtnId, Icon, AxleId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates de début et de fin sont obligatoires");
            }
        }
        //if (TimeId == '02')//Month
        //{
        //    var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
        //    var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

        //    if (MonthStringStart != '' && MonthStringEnd != '') {
        //        RepoNrCexMonthGet(ActionBtnId, Icon, CexId, MonthStringStart, MonthStringEnd);
        //    }
        //    else {
        //        $("#ParamMessageTextId").html("Les mois sont obligatoires");
        //    }
        //}
        //if (TimeId == '06')//Cumul
        //{
        //    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
        //    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');


        //    if (DateStringStart != '' && DateStringEnd != '') {
        //        RepoNrCexCumulGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
        //    }
        //    else {
        //        $("#ParamMessageTextId").html("Les dates sont obligatoires");
        //    }
        //}
    }
    else {
        $("#ParamMessageTextId").html("La période est obligatoire");
    };
}

function RepoTraficCompanyDisplay() {
    ShowReport('ExportReportId');
    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';

    var TimeId = GetElementValue('TimeId');

    if (TimeId != '0') {

        if (TimeId == '00')//Hour
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {
                RepoTraficCompanyHourGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates de début et de fin sont obligatoires");
            }
        }
        if (TimeId == '01')//Day
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {
                //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
                RepoTraficCompanyDayClGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
                //RepoTraficCompanyDayMpGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates de début et de fin sont obligatoires");
            }
        }
        //if (TimeId == '02')//Month
        //{
        //    var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
        //    var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

        //    if (MonthStringStart != '' && MonthStringEnd != '') {
        //        RepoNrCexMonthGet(ActionBtnId, Icon, CexId, MonthStringStart, MonthStringEnd);
        //    }
        //    else {
        //        $("#ParamMessageTextId").html("Les mois sont obligatoires");
        //    }
        //}
        //if (TimeId == '06')//Cumul
        //{
        //    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
        //    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');


        //    if (DateStringStart != '' && DateStringEnd != '') {
        //        RepoNrCexCumulGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
        //    }
        //    else {
        //        $("#ParamMessageTextId").html("Les dates sont obligatoires");
        //    }
        //}
    }
    else {
        $("#ParamMessageTextId").html("La période est obligatoire");
    };
}

function RepoTraficPeriodGet(ActionBtnId, DateStringStart, DateStringEnd, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoTraficPeriod' + 'TableReportId');
    HideReport('RepoTraficPeriodTotal' + 'ChartReportId');
    HideReport('RepoTraficPeriodMp' + 'ChartReportId');
    ParamMessageReset();

    var Pattern = 'RepoTraficPeriod';
    var PatternTableId = Pattern + 'TableId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(Pattern + 'TableReportId');

            if (DateStringStart == DateStringEnd) {
                var labels = GetColumnArray(PatternTableId, 0);
                var data1 = GetColumnArray(PatternTableId, 1);
                ChartJsBarOneDisplay('RepoTraficPeriodTotal', labels, data1, label)
                //DisplayChartDoughnut(labels, backgroundColor, data1);
            }
            else {
                //var labels = GetColumnArray(PatternTableId, 0);
                //var label1 = 'Trafic par période';
                //var data1 = GetColumnArray(PatternTableId, 1);
                //ChartJsLineOneDisplay('RepoTraficPeriodTotal', labels, label1, data1)

                var Title = 'Evolution du trafic par période';
                var PatternChart = 'RepoTraficPeriodTotal';
                var labels = GetColumnArray(PatternTableId, 0);
                var label1 = 'Trafic par période';
                var data1 = GetColumnArray(PatternTableId, 1);
                ChartJsLineOneDisplay(Title, PatternChart, labels, label1, data1, false)




                //var labels = GetColumnArray(PatternTableId, 0);
                //var data1 = GetColumnArray(PatternTableId, 23);
                //var data2 = GetColumnArray(PatternTableId, 24);
                //var data3 = GetColumnArray(PatternTableId, 25);
                //var data4 = GetColumnArray(PatternTableId, 26);
                //ChartJsLineFourDisplay('RepoTraficPeriodMp', labels, data1, data2, data3, data4);

                var Title = 'Evolution du trafic par moyen de paiement';
                var PatternChart = 'RepoTraficPeriodMp';
                var labels = GetColumnArray(PatternTableId, 0);
                var data1 = GetColumnArray(PatternTableId, 23);
                var data2 = GetColumnArray(PatternTableId, 24);
                var data3 = GetColumnArray(PatternTableId, 25);
                var data4 = GetColumnArray(PatternTableId, 26);
                ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                var Title = 'Evolution du trafic par catégorie';
                var PatternChart = 'RepoTraficPeriodCl';
                var labels = GetColumnArray(PatternTableId, 1);
                var data1 = GetColumnArray(PatternTableId, 27);
                var data2 = GetColumnArray(PatternTableId, 28);
                var data3 = GetColumnArray(PatternTableId, 29);
                ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficPeriodGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year); } },//0
            { "data": "TraficOpe", "render": $.fn.dataTable.render.number(' ', '', 0) },//1
            { "data": "TraficCe", "render": $.fn.dataTable.render.number(' ', '', 0) },//2
            { "data": "Ctr01" },//3

            { "data": "TlpC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//4
            { "data": "TlpC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//5
            { "data": "TlpC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//6
            { "data": "Tlp", "render": $.fn.dataTable.render.number(' ', '', 0) },//7

            { "data": "CardC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//8
            { "data": "CardC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//9
            { "data": "CardC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//10
            { "data": "Card", "render": $.fn.dataTable.render.number(' ', '', 0) },//11

            { "data": "CbC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//12
            { "data": "CbC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//13
            { "data": "CbC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//14
            { "data": "Cb", "render": $.fn.dataTable.render.number(' ', '', 0) },//15

            { "data": "OtherC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//16     
            { "data": "OtherC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//17         
            { "data": "OtherC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//18
            { "data": "Other", "render": $.fn.dataTable.render.number(' ', '', 0) },//19

            { "data": "TraficC1", "render": $.fn.dataTable.render.number(' ', '', 0) },//20
            { "data": "TraficC2", "render": $.fn.dataTable.render.number(' ', '', 0) },//21
            { "data": "TraficC3", "render": $.fn.dataTable.render.number(' ', '', 0) },//22

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Tlp }; } },//23
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Card }; } },//24
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Cb }; } },//25
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day), y: data.Other }; } },//26

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//27
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//28
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//29
        ],
        "columnDefs": [
            { "width": "20%", "className": "text-center", "targets": 0 },//Date
            { "width": "15%", "className": "text-right", "targets": 1 },//TraficOpe
            { "width": "15%", "className": "text-right", "targets": 2 },//TraficCe
            { "width": "15%", "className": "text-center", "targets": 3 },//Ctr01

            { "width": "0%", "className": "text-right none", "targets": 4 },//
            { "width": "0%", "className": "text-right none", "targets": 5 },//
            { "width": "0%", "className": "text-right none", "targets": 6 },//
            { "width": "0%", "className": "text-right none", "targets": 7 },//

            { "width": "0%", "className": "text-right none", "targets": 8 },//
            { "width": "0%", "className": "text-right none", "targets": 9 },//
            { "width": "0%", "className": "text-right none", "targets": 10 },//
            { "width": "0%", "className": "text-right none", "targets": 11 },//

            { "width": "0%", "className": "text-right none", "targets": 12 },//
            { "width": "0%", "className": "text-right none", "targets": 13 },//
            { "width": "0%", "className": "text-right none", "targets": 14 },//
            { "width": "0%", "className": "text-right none", "targets": 15 },// 

            { "width": "0%", "className": "text-right none", "targets": 16 },//
            { "width": "0%", "className": "text-right none", "targets": 17 },//
            { "width": "0%", "className": "text-right none", "targets": 18 },//
            { "width": "0%", "className": "text-right none", "targets": 19 },// 

            { "width": "0%", "className": "text-right none", "targets": 20 },//
            { "width": "0%", "className": "text-right none", "targets": 21 },//
            { "width": "0%", "className": "text-right none", "targets": 22 },//

            { "width": "0%", "className": "text-right none", "targets": 23 },//
            { "width": "0%", "className": "text-right none", "targets": 24 },//
            { "width": "0%", "className": "text-right none", "targets": 25 },//
            { "width": "0%", "className": "text-right none", "targets": 26 },//

            { "width": "0%", "className": "text-right none", "targets": 27 },//
            { "width": "0%", "className": "text-right none", "targets": 28 },//
            { "width": "0%", "className": "text-right none", "targets": 29 },//

            //{ "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        //"footerCallback": function (row, data, start, end, display) {
        //    var api = this.api(), data;
        //    var intVal = function (i) {
        //        return typeof i === 'string' ?
        //            i.replace(/[\$,]/g, '') * 1 :
        //            typeof i === 'number' ?
        //                i : 0;
        //    };

        //    TraficOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    TraficCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
        //    TraficGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

        //    $(api.column(3).footer()).html(numShortFormat(TraficOpeTotal));
        //    $(api.column(4).footer()).html(numShortFormat(TraficCeTotal));
        //    $(api.column(5).footer()).html(numShortFormat(TraficGapTotal));

        //    if (TraficGapTotal !== 0)
        //        $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numShortFormat(TraficGapTotal) + '</span>');
        //    else $(api.column(5).footer()).html('<span  class="badge badge-success">' + numShortFormat(TraficGapTotal) + '</span>');
        //}
    });


}

function RepoTraficPeriodDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var Icon = 'fas fa-eye';

    if (SiteId != null && SiteId != '' &&
        DateStringStart != null && DateStringStart != '' &&
        DateStringEnd != null && DateStringEnd != '') {
        RepoTraficPeriodGet(ActionBtnId, DateStringStart, DateStringEnd, Icon);
    }
    else {
        ParamMessageErrorDisplay()
    };
}

function RepoTraficDshDisplay() {
    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';


    var CexId = '0';
    var AxleId = '0';
    var RegionId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var IsPrincipal = true;


    var TimeId = GetElementValue('TimeId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (DateStringStart != '' && DateStringEnd != '' && TimeId != '0') {
        RepoTraficAllReportsHide();
        ShowReport('ParamReportId');

        if (TimeId == '00')//Hour
        {
            if (DateStringStart - DateStringEnd == 0) {

                var DateValue = JsDateValueFromDateString(DateStringStart);
                $('#CoverTitleId h1').text('Trafic horaire global & trafic horaire par région');
                $('#CoverDateId h3').text('Le ' + DateValue);
                ShowReport('Grid0000_' + 'GridReportId');


                RepoTraficCompanyHourGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
                RepoTraficRegionHourAllGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("La durée ne doit pas dépasser un jour");
            }
        }
        if (TimeId == '01')//Day
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            var DateValue = JsDateValueFromDateString(DateStringStart);
            $('#CoverTitleId h1').text('Trafic journalier');
            $('#CoverDateId h3').text('Le ' + DateValue);
            ShowReport('Grid0000_' + 'GridReportId');

            RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
            RepoTraficRegionDayGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd);
            RepoTraficAxleDayGet(ActionBtnId, Icon, AxleId, DateStringStart, DateStringEnd);
            RepoTraficCexDayGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
            RepoTraficStationDayGet(ActionBtnId, Icon, CexId, BagContainerId, StationNumber, '0', IsPrincipal, DateStringStart, DateStringEnd);

            //RepoTraficStationDivisionGet(ActionBtnId, Icon, CexId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);
        }
        if (TimeId == '02')//Month
        {
            //RepoTraficStationMonthGet(ActionBtnId, CexId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
        }
    }
    else {
        $("#ParamMessageTextId").html("Les champs période, date de début et date de fin sont obligatoires");
    };
}

function RepoNrMpGet(ActionBtnId, SiteId, BagContainerId, DateStartString, DateEndString, Icon) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport("CertNrMpTableReportId");
    HideReport('BarChartReportId');
    HideReport('PieChartReportId');
    ParamMessageReset();
    $('#CertNrMpTableId').DataTable().destroy();
    $('#CertNrMpTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {

            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport("CertNrMpTableReportId");

            var labels = GetColumnArray('CertNrMpTableId', 2);
            var data1 = GetColumnArray('CertNrMpTableId', 3);
            var data2 = GetColumnArray('CertNrMpTableId', 4);
            var backgroundColor = GetBackgroundColor('CertNrMpTableId');
            DisplayChartBar(labels, data1, data2, "OPE", "CE");
            DisplayChartDoughnut(labels, backgroundColor, data1)
        },
        "ajax": {
            "url": "/Cert/CertNrMpDisplay",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                BagContainerId: BagContainerId,
                DateStartString: DateStartString,
                DateEndString: DateEndString
            }
        },
        "columns": [
            { "data": "BagContainerId" },//0
            { "mData": function vehicle(data, type, dataToSet) { return new Date(data.YearK, data.MonthK - 1, data.DayK).toLocaleDateString() } },
            { "data": "MpName", "render": $.fn.dataTable.render.number(' ', ',', 2) },//2
            { "data": "ReceiptOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//3
            { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
            { "data": "ReceiptGap" },//5
            { "data": "NumberOpe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//6
            { "data": "NumberCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//7              
            { "data": "NumberGap" },//8
            { "data": "MpRecoId" },//0
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//StationName
            { "width": "15%", "className": "text-center", "targets": 1 },//DhmValueFrom
            { "width": "10%", "className": "text-left", "targets": 2 },//MpName
            { "width": "10%", "className": "text-right", "targets": 3 },//ReceiptOpe
            { "width": "10%", "className": "text-right", "targets": 4 },//ReceiptCe
            { "width": "10%", "className": "text-right", "targets": 5 },//ReceiptGap
            { "width": "10%", "className": "text-right", "targets": 6 },//NumberOpe
            { "width": "10%", "className": "text-right", "targets": 7 },//NumberCe
            { "width": "10%", "className": "text-right", "targets": 8 },//NumberGap
            { "width": "5%", "className": "text-center", "targets": 9 },//Search
            {
                "targets": 5, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if (($('<div/>').text(data.toFixed(2)).html() !== "0.00") && ($('<div/>').text(data.toFixed(2)).html() !== "-0.00"))
                        return '<span  class="badge badge-danger">' + data.toFixed(2) + '</span>';
                    else return '<span  class="badge badge-success">0.00</span>';
                }
            },
            {
                "targets": 8, "searchable": false, "orderable": false, "className": 'img_dt_s',
                "render": function (data, type, row) {
                    if ($('<div/>').text(data).html() !== "0")
                        return '<span  class="badge badge-danger">' + data + '</span>';
                    else return '<span  class="badge badge-success" >' + data + '</span>';
                }
            },
            {
                "targets": 9, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="CertNrMpPostSearchBtnId' + data + '" ' +
                        'style="background-color: Transparent;border: none" ' +
                        'onclick="CertNrMpPostSearch(\'' + data + '\')" >' +
                        '<span class="fas fa-flag-checkered" style="color:#0048ff" ></span></button>'
                }
            }
        ],
        "autoWidth": false,
        "iDisplayLength": 20,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            MpReceiptOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpReceiptGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(3).footer()).html(numFormat(MpReceiptOpeTotal));
            $(api.column(4).footer()).html(numFormat(MpReceiptCeTotal));

            if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
                $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numFormat(MpReceiptGapTotal) + '</span>');
            else $(api.column(5).footer()).html('<span  class="badge badge-success">0.00</span>');



            MpNumberOpeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpNumberCeTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            MpNumberGapTotal = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

            $(api.column(6).footer()).html(MpNumberOpeTotal);
            $(api.column(7).footer()).html(MpNumberCeTotal);

            if (MpNumberGapTotal !== 0)
                $(api.column(8).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
            else $(api.column(8).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

        }
    });
}

function RepoNrMpDisplay() {

    var SiteId = new String($('#SiteId').val());
    var BagContainerId = new String($('#BagContainerId').val());
    var DateStartString = new String($('#DateStartId').val().replace("-", "").replace("-", ""));
    var DateEndString = new String($('#DateEndId').val().replace("-", "").replace("-", ""));

    if (SiteId != null && SiteId != '' && SiteId != "0" &&
        BagContainerId != null && BagContainerId != "" &&
        DateStartString != null && DateStartString != "" &&
        DateEndString != null && DateEndString != "") {
        $('#ParamActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport("CertNrMpTableReportId");
        ParamMessageReset();
        $('#CertNrMpTableId').DataTable().destroy();
        $('#CertNrMpTableId').DataTable({
            "dom": 'Bfrtip',
            "buttons": [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "initComplete": function (settings, json) {
                $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
                ShowReport("CertNrMpTableReportId");

                var labels = GetColumnArray('CertNrMpTableId', 2);
                var data1 = GetColumnArray('CertNrMpTableId', 3);
                var data2 = GetColumnArray('CertNrMpTableId', 4);
                var backgroundColor = GetBackgroundColor('CertNrMpTableId');
                DisplayChartBar(labels, data1, data2, "OPE", "CE");
                DisplayChartDoughnut(labels, backgroundColor, data1)
            },
            "ajax": {
                "url": "/Cert/CertNrMpDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    SiteId: SiteId,
                    BagContainerId: BagContainerId,
                    DateStartString: DateStartString,
                    DateEndString: DateEndString
                }
            },
            "columns": [
                { "data": "BagContainerId" },//0
                //{ "data": "BagContainerName" },//0
                { "mData": function vehicle(data, type, dataToSet) { return new Date(data.YearK, data.MonthK - 1, data.DayK).toLocaleDateString() } },
                { "data": "MpName", "render": $.fn.dataTable.render.number(' ', ',', 2) },//2
                { "data": "ReceiptOpe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//3
                { "data": "ReceiptCe", "render": $.fn.dataTable.render.number(' ', ',', 2) },//4
                { "data": "ReceiptGap" },//5
                { "data": "NumberOpe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//6
                { "data": "NumberCe", "render": $.fn.dataTable.render.number(' ', ',', 0) },//7              
                { "data": "NumberGap" },//8
                { "data": "MpRecoId" }//9
            ],
            "columnDefs": [
                { "width": "5%", "className": "text-left", "targets": 0 },//StationName
                { "width": "15%", "className": "text-center", "targets": 1 },//DhmValueFrom
                { "width": "10%", "className": "text-left", "targets": 2 },//MpName
                { "width": "10%", "className": "text-right", "targets": 3 },//ReceiptOpe
                { "width": "10%", "className": "text-right", "targets": 4 },//ReceiptCe
                { "width": "10%", "className": "text-right", "targets": 5 },//ReceiptGap
                { "width": "10%", "className": "text-right", "targets": 6 },//NumberOpe
                { "width": "10%", "className": "text-right", "targets": 7 },//NumberCe
                { "width": "10%", "className": "text-right", "targets": 8 },//NumberGap
                { "width": "5%", "className": "text-center", "targets": 9 },//Search

                //{
                //    "targets": 8, "searchable": false, "orderable": false, "className": 'img_dt_s',
                //    "render": function (data, type, row) {
                //        alert(row["ReceiptOpe"]);
                //    }
                //},

                {
                    "targets": 5, "searchable": false, "orderable": false, "className": 'img_dt_s',
                    "render": function (data, type, row) {
                        if (($('<div/>').text(data.toFixed(2)).html() !== "0.00") && ($('<div/>').text(data.toFixed(2)).html() !== "-0.00"))
                            return '<span  class="badge badge-danger">' + data.toFixed(2) + '</span>';
                        else return '<span  class="badge badge-success">0.00</span>';
                    }
                },
                {
                    "targets": 8, "searchable": false, "orderable": false, "className": 'img_dt_s',
                    "render": function (data, type, row) {
                        if ($('<div/>').text(data).html() !== "0")
                            return '<span  class="badge badge-danger">' + data + '</span>';
                        else return '<span  class="badge badge-success" >' + data + '</span>';
                    }
                },
                {
                    "targets": 9, "searchable": false, "orderable": false,
                    "render": function (data, type, full, meta) {
                        return '<button id="CertNrMpPostSearchBtnId' + data + '" ' +
                            'style="background-color: Transparent;border: none" ' +
                            'onclick="CertNrMpPostSearch(\'' + data + '\')" >' +
                            '<span class="fas fa-flag-checkered" style="color:#0048ff" ></span></button>'
                    }
                }
            ],
            "autoWidth": false,
            "iDisplayLength": 20,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Aucun résultat",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "processing": false,
            "responsive": true,
            "bFilter": false,
            "autoWidth": false,
            "searching": false,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false,
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                            i : 0;
                };

                MpReceiptOpeTotal = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                MpReceiptCeTotal = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                MpReceiptGapTotal = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(3).footer()).html(numFormat(MpReceiptOpeTotal));
                $(api.column(4).footer()).html(numFormat(MpReceiptCeTotal));

                if ((MpReceiptGapTotal.toFixed(2) !== '0.00') && (MpReceiptGapTotal.toFixed(2) !== '-0.00'))
                    $(api.column(5).footer()).html('<span  class="badge badge-danger">' + numFormat(MpReceiptGapTotal) + '</span>');
                else $(api.column(5).footer()).html('<span  class="badge badge-success">0.00</span>');



                MpNumberOpeTotal = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                MpNumberCeTotal = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                MpNumberGapTotal = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);

                $(api.column(6).footer()).html(MpNumberOpeTotal);
                $(api.column(7).footer()).html(MpNumberCeTotal);

                if (MpNumberGapTotal !== 0)
                    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + MpNumberGapTotal + '</span>');
                else $(api.column(8).footer()).html('<span  class="badge badge-success">' + MpNumberGapTotal + '</span>');

            }
        });
    }
    else {
        $('#ParamMessageContainerId').attr("class", "alert alert-danger");
        $('#ParamMessageIconId').attr("class", "fas fa-exclamation-triangle");
        $('#ParamMessageTextId').html("Le CEX et le jour sont obligatoires");
    };
}

function RepoNrSiteDayGet(ActionBtnId, Icon, CexId, BagContainerId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    //HideReport("CertNrSiteTableReportId");
    //HideReport("CertNrMpTableReportId");
    //HideReport('CertReportId');

    var Pattern = 'RepoNrSiteDay';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
            //ShowReport('CertReportId');



            ShowReport('Grid10_' + 'GridReportId');
            ShowReport('Grid11_' + 'GridReportId');

            if (BagContainerId != '0') {

                var Title = 'Evolution de la recette totale';

                var PatternChart = Pattern + 'TotalLine';
                var labels = GetColumnArray(PatternTableId, 2);
                var data1 = GetColumnArray(PatternTableId, 3);
                var data2 = GetColumnArray(PatternTableId, 5);
                ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Recette journalière 2020', data1, 'Recette journalière 2019', data2, false)

                //var Title = 'Evolution du trafic horaire par moyen de paiement';
                //var PatternChart = 'RepoTraficStationHourMpLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 25);
                //var data2 = GetColumnArray(PatternTableId, 26);
                //var data3 = GetColumnArray(PatternTableId, 27);
                //var data4 = GetColumnArray(PatternTableId, 28);
                //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                //var Title = 'Evolution du trafic horaire par catégorie';
                //var PatternChart = 'RepoTraficStationHourClLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 29);
                //var data2 = GetColumnArray(PatternTableId, 30);
                //var data3 = GetColumnArray(PatternTableId, 31);
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)
            }
            else {
                if (DateStringStart - DateStringEnd == 0) {

                    //Grid10
                    document.getElementById('Grid10_GridCol0Id').setAttribute('Class', '');
                    HideReport('Grid10_GridCol0Id');

                    document.getElementById('Grid10_GridCol1Id').setAttribute('Class', 'col');
                    //document.getElementById('Grid10_GridCol1Id').style.height = '1100px';
                    //document.getElementById('Grid10_GridCol1Id').style.overflowY = 'auto';

                    document.getElementById('Grid10_GridCol2Id').setAttribute('Class', '');
                    HideReport('Grid10_GridCol2Id');

                    ShowReport('Grid10_' + 'GridReportId');


                    var Day = new String(DateStringStart).substr(0, 2) + '/' + new String(DateStringStart).substr(2, 2) + '/' + new String(DateStringStart).substr(4, 4);
                    var Title = 'Chiffre d\'affaire journalier par site du ' + Day + ' en DH';
                    var Pattern = 'RepoNrSite' + 'Day' + 'Total' + 'Bar';
                    var labels = GetColumnArray(PatternTableId, 1);

                    var label1 = '2020';
                    var data1 = GetColumnArray(PatternTableId, 3);
                    var backgroundColor1 = 'rgba(7,98,250,1)';

                    var label2 = '2019';
                    var data2 = GetColumnArray(PatternTableId, 5);
                    var backgroundColor2 = 'rgba(7,98,250,0.2)';

                    //DisplayChartBarTwo(Pattern, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);



                    //Grid11
                    //document.getElementById('Grid11_GridCol0Id').setAttribute('Class', 'col');

                    //document.getElementById('Grid11_GridCol1Id').setAttribute('Class', '');
                    //HideReport('Grid11_GridCol1Id');

                    //document.getElementById('Grid11_GridCol2Id').setAttribute('Class', '');
                    //HideReport('Grid11_GridCol2Id');

                    //ShowReport('Grid11_' + 'GridReportId');





                    //var Title = 'Répartition du trafic par gare';
                    //var PatternChart = 'RepoTraficStation' + 'Day' + 'Total' + 'Pie';
                    //var labels = GetColumnArray(PatternTableId, 1);
                    //var data1 = GetColumnArray(PatternTableId, 3);
                    //var backgroundColor = GetBackgroundColor(PatternTableId);
                    //var type = 'doughnut'
                    //DisplayChartPieOne(PatternChart, labels, backgroundColor, data1, type);

                    //ShowReport(Pattern + 'TableReportId');

                    //ShowReport('Grid13_' + 'GridReportId');
                }
            }



        },
        "ajax": {
            "url": "/Repo/RepoNrSiteDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                CexId: CexId,
                BagContainerId: BagContainerId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "CexNameShort" },//0
            { "data": "BagContainerName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year, 2); } },//2

            { "data": "ReceiptCe" },//3
            { "data": "ReceiptGap" },//4         

            { "data": "ReceiptMp01" },//5
            { "data": "ReceiptMp40_41" },//6
            { "data": "ReceiptMp16" },//7
            { "data": "ReceiptMp12" },//8
            { "data": "ReceiptMp15" },//9
            { "data": "ReceiptMpOther" },//10

            { "data": "ReceiptCeC1" },//11
            { "data": "ReceiptCeC2" },//12
            { "data": "ReceiptCeC3" },//13

            { "data": "ReceiptCeOld" },//14
            { "data": "ReceiptGapOld" },//15

            { "data": "ReceiptCeEvoA" },//16
            { "data": "ReceiptCeEvoR" },//17
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right none", "targets": 5 },
            { "width": "3%", "className": "text-right none", "targets": 6 },
            { "width": "3%", "className": "text-right none", "targets": 7 },
            { "width": "3%", "className": "text-right none", "targets": 8 },
            { "width": "3%", "className": "text-right none", "targets": 9 },
            { "width": "3%", "className": "text-right none", "targets": 10 },

            { "width": "3%", "className": "text-right none", "targets": 11 },
            { "width": "3%", "className": "text-right none", "targets": 12 },
            { "width": "3%", "className": "text-right none", "targets": 13 },

            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-left", "targets": 15 },

            { "width": "3%", "className": "text-right", "targets": 16 },
            { "width": "3%", "className": "text-right", "targets": 17 },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 14, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 15, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 16, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 17, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            //Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(GetGapDoubleFromDataTable(Total2));

            //var Evo = ((Total0 - Total1) / Total1) * 100;

            //if (Evo < 0)
            //    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');

        }
    });
}

function RepoNrSiteDayGetNew(ActionBtnId, Icon, CexId, BagContainerId, DateStringStart, DateStringEnd, itemData, imax, i) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    //HideReport("CertNrSiteTableReportId");
    //HideReport("CertNrMpTableReportId");
    //HideReport('CertReportId');

    var PatternIndex = i;

    var Pattern = 'RepoNrSiteDay';
    var PatternS = Pattern + PatternIndex;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);

            //Variables
            var DateValue = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '1';
            var TimeIndex = '0';

            var LevelIndex = '';

            var DataName = 'Chiffre d\'affaires';
            var TimeName = 'journalier';
            var Portion = 'par site';
            var Unity = 'en DH';

            //Page
            document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId').style.height = '3161px';
            document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageCardId').style.border = 'transparent';
            ShowReport('Page' + HeaderIndex + TimeIndex + PatternIndex + '_PageReportId');


            if (DateStringStart - DateStringEnd == 0) {

                var CexNameShort = itemData[i].CexNameShort;
                var Title = DataName + ' ' + TimeName + ' ' + Portion + ' du ' + DateValue + ' ' + Unity + ' (' + CexNameShort + ')';

                //Table
                LevelIndex = '0';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-10');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                $('#' + PatternS + 'TableCardHeaderId h5').text(Title);
                //HideReport(PatternS + 'TotalLineChartReportId');
                ShowReport(PatternTableReportId);

                //TotalBar
                LevelIndex = '1';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-12');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                var labelsIndex = 1;
                var data0Index = 3;
                var data1Index = 14;
                RepoTotalChartBarTwoDisplay(Title, Pattern, PatternTableId, DataName, PatternIndex, labelsIndex, data0Index, data1Index);

                //MpBarH
                LevelIndex = '2';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                labelsIndex = 0;
                Title = 'Répartion CA journalier par MP du ' + DateValue + ' ' + ' (' + CexNameShort + ')';
                RepoNrMpChartBarHSixDisplay(Title, Pattern, PatternTableId, PatternIndex, labelsIndex, 5, 6, 7, 8, 9, 10);

                Title = 'Répartion CA journalier par catégorie du ' + DateValue + ' ' + ' (' + CexNameShort + ')';
                RepoClChartBarHDisplay(Title, Pattern, PatternTableId, PatternIndex, labelsIndex, 11, 12, 13);

                //var PortionIndex = 1;
                //var GridIndex = i;
                //for (var RowIndex = 0; RowIndex < 17; RowIndex++) {

                //    var ColumnIndex = '0';
                //    document.getElementById(Pattern + 'MpPie' + GridIndex + ColumnIndex + RowIndex + 'ChartReportId').style.height = '740px';


                //    if (CexId == '03') {                        
                //        RepoNrMpChartPieSixDisplay(Pattern, PatternTableId, DateValue, GridIndex, ColumnIndex, RowIndex, PortionIndex, 5, 6, 7, 8, 9, 10);
                //    }
                //    else {
                //        RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, GridIndex, ColumnIndex, RowIndex, PortionIndex, 5, 6, 7, 8, 10);
                //    };

                //    ColumnIndex = '1';
                //    document.getElementById(Pattern + 'ClPie' + GridIndex + ColumnIndex + RowIndex + 'ChartReportId').style.height = '740px';
                //    RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, GridIndex, ColumnIndex, RowIndex, PortionIndex, 11, 12, 13);
                //}



                i++;
                if (i <= imax) {
                    CexId = itemData[i].CexId;
                    RepoNrSiteDayGetNew(ActionBtnId, Icon, CexId, BagContainerId, DateStringStart, DateStringEnd, itemData, imax, i);
                }

            }
        },
        "ajax": {
            "url": "/Repo/RepoNrSiteDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                CexId: CexId,
                BagContainerId: BagContainerId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            //{ "data": "CexNameShort" },//0
            { "mData": function vehicle(data, type, dataToSet) { return new String(data.BagContainerName).substr(0, 2); } },//2

            { "data": "BagContainerName" },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year, 2); } },//2

            { "data": "ReceiptCe" },//3
            { "data": "ReceiptGap" },//4         

            { "data": "ReceiptMp01" },//5
            { "data": "ReceiptMp40_41" },//6
            { "data": "ReceiptMp16" },//7
            { "data": "ReceiptMp12" },//8
            { "data": "ReceiptMp15" },//9
            { "data": "ReceiptMpOther" },//10

            { "data": "ReceiptCeC1" },//11
            { "data": "ReceiptCeC2" },//12
            { "data": "ReceiptCeC3" },//13

            { "data": "ReceiptCeOld" },//14
            { "data": "ReceiptGapOld" },//15

            { "data": "ReceiptCeEvoA" },//16
            { "data": "ReceiptCeEvoR" },//17
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right none", "targets": 5 },
            { "width": "3%", "className": "text-right none", "targets": 6 },
            { "width": "3%", "className": "text-right none", "targets": 7 },
            { "width": "3%", "className": "text-right none", "targets": 8 },
            { "width": "3%", "className": "text-right none", "targets": 9 },
            { "width": "3%", "className": "text-right none", "targets": 10 },

            { "width": "3%", "className": "text-right none", "targets": 11 },
            { "width": "3%", "className": "text-right none", "targets": 12 },
            { "width": "3%", "className": "text-right none", "targets": 13 },

            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-left", "targets": 15 },

            { "width": "3%", "className": "text-right", "targets": 16 },
            { "width": "3%", "className": "text-right", "targets": 17 },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 14, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 15, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 16, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 17, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            //Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(GetGapDoubleFromDataTable(Total2));

            //var Evo = ((Total0 - Total1) / Total1) * 100;

            //if (Evo < 0)
            //    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');

        }
    });
}


function RepoNrSiteDayPerCexGet(ActionBtnId, Icon, RegionId, CexId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');


    var obj = {};
    obj.RegionId = RegionId;
    obj.CexId = CexId;

    $.ajax({
        url: "/Repo/RepoCexAllGet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: true,
        success: function (data) {
            jQuery.each(data, function (index, itemData) {
                var imax = itemData.length - 1;
                var i = 0;
                var CexIdTmp = itemData[0].CexId;
                var BagContainerIdTmp = '0';
                //RepoTraficStationHourGet(ActionBtnId, Icon, itemData, imax, i, DateStringStart, DateStringEnd, StationSens);
                RepoNrSiteDayGetNew(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, DateStringStart, DateStringEnd, itemData, imax, i);
                //RepoNrSiteDayGet(ActionBtnId, Icon, CexId, BagContainerId, DateStringStart, DateStringEnd)
            });
        }
    })
}

function RepoNrSiteDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var CexId = GetElementValue('CexId');
    var BagContainerId = GetElementValue('BagContainerId');
    //var StationNumber = GetElementValue('StationNumberId'); 
    //var Sens = GetElementValue('SensId'); 

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var TimeId = GetElementValue('TimeId');

    var Icon = 'fas fa-eye';



    if (TimeId != '0' && TimeId != '00') {

        RepoNrAllReportsHide();
        ShowReport('ParamReportId');

        if (TimeId == '01')//Day
        {
            if (DateStringStart != '' && DateStringEnd != '') {
                //RepoNrSiteDayGet(ActionBtnId, Icon, CexId, BagContainerId, DateStringStart, DateStringEnd);
                RepoNrSiteDayPerCexGet(ActionBtnId, Icon, '0', CexId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("La durée ne doit pas dépasser un jour");
            };
        }
        if (TimeId == '02')//Month
        {
            var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
            var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

            if (MonthStringStart != '' && MonthStringEnd != '') {
                RepoTraficStationMonthGet(ActionBtnId, SiteId, BagContainerId, StationNumber, DateStringStart, DateStringEnd, Icon);
            }
            else {
                $("#ParamMessageTextId").html("Les champe mois sont obligatoires");
            }
        }
    }
    else {
        $("#ParamMessageTextId").html("Le champ période est obligatoire");
    };
}

function RepoNrCexDayGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrCexDay';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);

            //Variables
            var DateValue = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '2';
            var TimeIndex = '0';
            var PageIndex = '0';
            var PageRowIndex = '0';
            var GridColumnIndex = '0';
            var LevelIndex = '';
            var PatternIndex = '';
            var DataName = 'Chiffre d\'affaires';
            var TimeName = 'journalier';
            var Portion = 'par Centre d\'Exploitation';
            var Unity = 'en DH';




            //document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + 'Bis_PageReportId').style.height = '3170px';
            //document.getElementById('Page' + HeaderIndex + TimeIndex + PatternIndex + 'Bis_PageCardId').style.border = 'transparent';
            //ShowReport('Page' + HeaderIndex + TimeIndex + PatternIndex + 'Bis_PageReportId');

            if (DateStringStart - DateStringEnd == 0) {


                //Title
                var Title = DataName + ' ' + TimeName + ' ' + Portion + ' du ' + DateValue + ' ' + Unity;
                $('#' + Pattern + 'TableCardHeaderId h5').text(Title);
                HideReport(Pattern + 'TotalLineChartReportId');
                ShowReport(PatternTableReportId);

                //Page
                PageIndex = '0';
                TplPageModelGet(HeaderIndex, TimeIndex, PageIndex, '3170px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '0', 'col', 'col-8', 'col', '740px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '1', 'col', 'col-8', 'col', '740px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '2', 'col-6', 'col-6', 'col', '740px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '3', 'col-6', 'col-6', 'col', '740px', 'transparent');

                PageIndex = '1';
                TplPageModelGet(HeaderIndex, TimeIndex, PageIndex, '3170px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '0', 'col-6', 'col-6', 'col', '740px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '1', 'col-6', 'col-6', 'col', '740px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '2', 'col-6', 'col-6', 'col', '740px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '3', 'col-6', 'col-6', 'col', '740px', 'transparent');

                PageIndex = '2';
                TplPageModelGet(HeaderIndex, TimeIndex, PageIndex, '3170px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '0', 'col-6', 'col-6', 'col', '740px', 'transparent');
                TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, '1', 'col-6', 'col-6', 'col', '740px', 'transparent');

                //TotalBar               
                var labelsIndex = 0;
                var data0Index = 2;
                var data1Index = 12;
                RepoTotalChartBarTwoDisplay(Title, Pattern, PatternTableId, DataName, PatternIndex, labelsIndex, data0Index, data1Index);


                //MpPie 1/3
                LevelIndex = '2';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                //ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                //var labelsIndex = 0;
                //var data0Index = 2;
                //var data1Index = 12;
                //labelsIndex = 0;
                //Title = 'Répartion CA journalier par MP du ' + DateValue + ' ' + ' (' + CexNameShort + ')';  

                var RowIndex = 0;
                var PortionIndex = 0;
                var MpIndex0 = 4;
                var MpIndex1 = 5;
                var MpIndex2 = 6;
                var MpIndex3 = 7;
                var MpIndex4 = 8;

                RowIndex = 0;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);
                RowIndex = 1;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);
                RowIndex = 2;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);



                ////MpPie 2/3
                LevelIndex = '3';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                //ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                RowIndex = 3;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);
                RowIndex = 4;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);
                RowIndex = 5;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);

                ////MpPie 3/3
                LevelIndex = '4';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                //ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                RowIndex = 6;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);
                RowIndex = 7;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);

                //RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, 6, 4, 5, 6, 7, 8);
                //RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, 7, 4, 5, 6, 7, 8);

                ////ClPie 1/3
                LevelIndex = '5';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                //ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');


                var ClIndex0 = 9;
                var ClIndex1 = 10;
                var CmIndex2 = 11;

                RowIndex = 0;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);
                RowIndex = 1;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);
                RowIndex = 2;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);

                ////ClPie 2/3
                LevelIndex = '6';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                //ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                RowIndex = 3;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);
                RowIndex = 4;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);
                RowIndex = 5;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);

                ////ClPie 3/3
                LevelIndex = '7';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                //ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                RowIndex = 6;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);
                RowIndex = 7;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);
            }
        },
        "ajax": {
            "url": "/Repo/RepoNrCexDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                CexId: CexId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "CexNameShort" },//0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year, 2); } },//2

            { "data": "ReceiptCe" },//2
            { "data": "ReceiptGap" },//3       

            { "data": "ReceiptMp01" },//4
            { "data": "ReceiptMp40_41" },//5
            { "data": "ReceiptMp16" },//6
            { "data": "ReceiptMp12" },//7
            { "data": "ReceiptMpOther" },//8

            { "data": "ReceiptCeC1" },//9
            { "data": "ReceiptCeC2" },//10
            { "data": "ReceiptCeC3" },//11

            { "data": "ReceiptCeOld" },//12
            { "data": "ReceiptGapOld" },//13

            { "data": "ReceiptCeEvoA" },//14
            { "data": "ReceiptCeEvoR" },//15
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right none", "targets": 4 },
            { "width": "3%", "className": "text-right none", "targets": 5 },
            { "width": "3%", "className": "text-right none", "targets": 6 },
            { "width": "3%", "className": "text-right none", "targets": 7 },
            { "width": "3%", "className": "text-right none", "targets": 8 },

            { "width": "3%", "className": "text-right none", "targets": 9 },
            { "width": "3%", "className": "text-right none", "targets": 10 },
            { "width": "3%", "className": "text-right none", "targets": 11 },

            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-left", "targets": 13 },

            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 14, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            //Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            //Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(6).footer()).html(GetGapDoubleFromDataTable(Total2));

            //var Evo = ((Total0 - Total1) / Total1) * 100;

            //if (Evo < 0)
            //    $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrCexMonthGet(ActionBtnId, Icon, CexId, MonthStringStart, MonthStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrCexMonth';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);


            if (CexId != '0') {

                //var Title = 'Evolution de la recette totale';

                //var PatternChart = Pattern + 'TotalLine';
                //var labels = GetColumnArray(PatternTableId, 1);
                //var data1 = GetColumnArray(PatternTableId, 2);
                //var data2 = GetColumnArray(PatternTableId, 4);
                //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Recette journalière 2020', data1, 'Recette journalière 2019', data2, false)


                //var Title = 'Evolution du trafic horaire par moyen de paiement';
                //var PatternChart = 'RepoTraficStationHourMpLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 25);
                //var data2 = GetColumnArray(PatternTableId, 26);
                //var data3 = GetColumnArray(PatternTableId, 27);
                //var data4 = GetColumnArray(PatternTableId, 28);
                //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                //var Title = 'Evolution du trafic horaire par catégorie';
                //var PatternChart = 'RepoTraficStationHourClLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 29);
                //var data2 = GetColumnArray(PatternTableId, 30);
                //var data3 = GetColumnArray(PatternTableId, 31);
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)

                //ShowReport('Grid32_' + 'GridReportId');
            }
            else {
                if (MonthStringStart - MonthStringEnd == 0) {

                    //Table
                    //Grid21
                    document.getElementById('Grid21_GridCol0Id').setAttribute('Class', 'col');
                    ShowReport('Grid21_GridCol0Id');
                    document.getElementById('Grid21_GridCol1Id').setAttribute('Class', 'col-8');
                    ShowReport('Grid21_GridCol1Id');
                    document.getElementById('Grid21_GridCol2Id').setAttribute('Class', 'col');
                    ShowReport('Grid21_GridCol2Id');

                    ShowReport('Grid21_' + 'GridReportId');



                    //ChartBar
                    //Grid22
                    document.getElementById('Grid22_GridCol0Id').setAttribute('Class', 'col');
                    ShowReport('Grid22_GridCol0Id');
                    document.getElementById('Grid22_GridCol1Id').setAttribute('Class', 'col-8');
                    ShowReport('Grid22_GridCol1Id');
                    document.getElementById('Grid22_GridCol2Id').setAttribute('Class', 'col');
                    ShowReport('Grid22_GridCol2Id');


                    var Month = new String(MonthStringStart).substr(0, 2) + '/' + new String(MonthStringStart).substr(2, 4);
                    var Title = 'Chiffre d\'affaire mensuel par région';
                    var PatternChart = Pattern + 'Total' + 'Bar';
                    var labels = GetColumnArray(PatternTableId, 0);

                    var label1 = 'CA 2020';
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var backgroundColor1 = 'rgba(7,98,250,1)';

                    var label2 = 'CA 2019';
                    var data2 = GetColumnArray(PatternTableId, 4);
                    var backgroundColor2 = 'rgba(7,98,250,0.2)';

                    DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

                    ShowReport('Grid22_' + 'GridReportId');


                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoNrCexMonthGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                CexId: CexId,
                MonthStringStart: MonthStringStart,
                MonthStringEnd: MonthStringEnd
            }
        },
        "columns": [
            { "data": "CexNameShort" },//0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Month, 2) + '/' + data.Year; } },//2

            { "data": "ReceiptCe" },//2
            { "data": "ReceiptGap" },//3       

            { "data": "ReceiptCeOld" },//4
            { "data": "ReceiptGapOld" },//5

            { "data": "ReceiptCeEvoA" },//6
            { "data": "ReceiptCeEvoR" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(GetGapDoubleFromDataTable(Total2));

            var Evo = ((Total0 - Total1) / Total1) * 100;

            if (Evo < 0)
                $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrCexCumulGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrCexCumul';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            //Table
            document.getElementById('Grid220_GridCol0Id').setAttribute('Class', 'col');
            ShowReport('Grid220_GridCol0Id');
            document.getElementById('Grid220_GridCol1Id').setAttribute('Class', 'col-10');
            ShowReport('Grid220_GridCol1Id');
            document.getElementById('Grid220_GridCol2Id').setAttribute('Class', 'col');
            ShowReport('Grid220_GridCol2Id');

            ShowReport(PatternTableReportId);

            ShowReport('Grid220_' + 'GridReportId');

            //ChartBar
            ShowReport('Grid221_' + 'GridReportId');

            document.getElementById('Grid221_GridCol0Id').setAttribute('Class', 'col');
            HideReport('Grid221_GridCol0Id');
            document.getElementById('Grid221_GridCol1Id').setAttribute('Class', 'col-8');
            ShowReport('Grid221_GridCol1Id');
            document.getElementById('Grid221_GridCol2Id').setAttribute('Class', 'col');
            HideReport('Grid221_GridCol2Id');

            var Title = 'Chiffre d\'affaire cumulé par Centre d\'Exploitation';
            var PatternChart = Pattern + 'Total' + 'Bar';
            var labels = GetColumnArray(PatternTableId, 0);

            var label1 = 'CA 2020';
            var data1 = GetColumnArray(PatternTableId, 3);
            var backgroundColor1 = 'rgba(7,98,250,1)';

            var label2 = 'CA 2019';
            var data2 = GetColumnArray(PatternTableId, 5);
            var backgroundColor2 = 'rgba(7,98,250,0.2)';
            DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

            ShowReport('Grid221_' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoNrCexCumulGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                CexId: CexId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "CexNameShort" },//0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.DayFrom, 2) + '/' + GetDigits(data.MonthFrom, 2) + '/' + GetDigits(data.YearFrom, 2); } },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.DayTo, 2) + '/' + GetDigits(data.MonthTo, 2) + '/' + GetDigits(data.YearTo, 2); } },//2

            { "data": "ReceiptCe" },//3
            { "data": "ReceiptGap" },//4  

            { "data": "ReceiptCeOld" },//5
            { "data": "ReceiptGapOld" },//6

            { "data": "ReceiptCeEvoA" },//7
            { "data": "ReceiptCeEvoR" },//8
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(GetGapDoubleFromDataTable(Total2));

            var Evo = ((Total0 - Total1) / Total1) * 100;

            if (Evo < 0)
                $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrCexDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var CexId = GetElementValue('CexId');

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var TimeId = GetElementValue('TimeId');

    var Icon = 'fas fa-eye';

    if (TimeId != '0') {
        RepoNrAllReportsHide();
        ShowReport('ParamReportId');

        if (TimeId == '01')//Day
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {
                RepoNrCexDayGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates sont obligatoires");
            }
        }
        if (TimeId == '02')//Month
        {
            var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
            var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

            if (MonthStringStart != '' && MonthStringEnd != '') {
                RepoNrCexMonthGet(ActionBtnId, Icon, CexId, MonthStringStart, MonthStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les mois sont obligatoires");
            }
        }
        if (TimeId == '06')//Cumul
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');


            if (DateStringStart != '' && DateStringEnd != '') {
                RepoNrCexCumulGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates sont obligatoires");
            }
        }
    }
    else {
        $("#ParamMessageTextId").html("La période est obligatoire");
    };
}

function RepoNrRegionDayGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrRegionDay';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);

            //Variables
            var DateValue = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '3';
            var TimeIndex = '0';
            var LevelIndex = '';
            var PatternIndex = '';
            var DataName = 'Chiffre d\'affaires';
            var TimeName = 'journalier';
            var Portion = 'par région';
            var Unity = 'en DH';

            //Page
            document.getElementById('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageReportId').style.height = '3170px';
            document.getElementById('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageCardId').style.border = 'transparent';
            ShowReport('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageReportId');



            if (DateStringStart - DateStringEnd == 0) {

                var Title = DataName + ' ' + TimeName + ' ' + Portion + ' du ' + DateValue + ' ' + Unity;

                //Table
                LevelIndex = '0';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-8');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                $('#' + Pattern + 'TableCardHeaderId h5').text(Title);
                HideReport(Pattern + 'TotalLineChartReportId');
                ShowReport(PatternTableReportId);

                //TotalBar
                LevelIndex = '1';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-8');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');
                RepoTotalChartBarTwoDisplay(Title, Pattern, PatternTableId, DataName, PatternIndex, 0, 2, 12);

                //MpPie
                LevelIndex = '2';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');

                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');


                LevelIndex = '3';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');

                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                var RowIndex = 0;
                var PortionIndex = 0;
                var MpIndex0 = 4;
                var MpIndex1 = 5;
                var MpIndex2 = 6;
                var MpIndex3 = 7;
                var MpIndex4 = 8;

                RowIndex = 0;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);
                RowIndex = 1;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);
                RowIndex = 2;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);





                //Page30bis
                HeaderIndex = '3';
                TimeIndex = '0';
                LevelIndex = '';
                PatternIndex = '';
                document.getElementById('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + 'bis_PageReportId').style.height = '3170px';
                document.getElementById('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + 'bis_PageCardId').style.border = 'transparent';
                ShowReport('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_bisPageReportId');

                //ClPie
                LevelIndex = '4';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                LevelIndex = '5';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '740px';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardBodyId').style.padding = '0.25rem';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                var ClIndex0 = 9;
                var ClIndex1 = 10;
                var CmIndex2 = 11;

                RowIndex = 0;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);
                RowIndex = 1;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);
                RowIndex = 2;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);

            }
        },
        "ajax": {
            "url": "/Repo/RepoNrRegionDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "RegionNameShort" },//0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year, 2); } },//2

            { "data": "ReceiptCe" },//2
            { "data": "ReceiptGap" },//3       

            { "data": "ReceiptMp01" },//4
            { "data": "ReceiptMp40_41" },//5
            { "data": "ReceiptMp16" },//6
            { "data": "ReceiptMp12" },//7
            { "data": "ReceiptMpOther" },//8

            { "data": "ReceiptCeC1" },//9
            { "data": "ReceiptCeC2" },//10
            { "data": "ReceiptCeC3" },//11

            { "data": "ReceiptCeOld" },//12
            { "data": "ReceiptGapOld" },//13

            { "data": "ReceiptCeEvoA" },//14
            { "data": "ReceiptCeEvoR" },//15
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },


            { "width": "3%", "className": "text-right none", "targets": 4 },
            { "width": "3%", "className": "text-right none", "targets": 5 },
            { "width": "3%", "className": "text-right none", "targets": 6 },
            { "width": "3%", "className": "text-right none", "targets": 7 },
            { "width": "3%", "className": "text-right none", "targets": 8 },

            { "width": "3%", "className": "text-right none", "targets": 9 },
            { "width": "3%", "className": "text-right none", "targets": 10 },
            { "width": "3%", "className": "text-right none", "targets": 11 },

            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-left", "targets": 13 },

            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },


            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 14, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            //Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            //Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(6).footer()).html(GetGapDoubleFromDataTable(Total2));

            //var Evo = ((Total0 - Total1) / Total1) * 100;

            //if (Evo < 0)
            //    $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrRegionMonthGet(ActionBtnId, Icon, RegionId, MonthStringStart, MonthStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrRegionMonth';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);


            if (RegionId != '0') {

                var Title = 'Evolution de la recette totale';

                var PatternChart = Pattern + 'TotalLine';
                var labels = GetColumnArray(PatternTableId, 1);
                var data1 = GetColumnArray(PatternTableId, 2);
                var data2 = GetColumnArray(PatternTableId, 4);
                ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Recette journalière 2020', data1, 'Recette journalière 2019', data2, false)


                //var Title = 'Evolution du trafic horaire par moyen de paiement';
                //var PatternChart = 'RepoTraficStationHourMpLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 25);
                //var data2 = GetColumnArray(PatternTableId, 26);
                //var data3 = GetColumnArray(PatternTableId, 27);
                //var data4 = GetColumnArray(PatternTableId, 28);
                //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                //var Title = 'Evolution du trafic horaire par catégorie';
                //var PatternChart = 'RepoTraficStationHourClLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 29);
                //var data2 = GetColumnArray(PatternTableId, 30);
                //var data3 = GetColumnArray(PatternTableId, 31);
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)

                ShowReport('Grid32_' + 'GridReportId');
            }
            else {
                if (MonthStringStart - MonthStringStart == 0) {

                    //Table
                    //Grid32
                    document.getElementById('Grid32_GridCol0Id').setAttribute('Class', 'col');
                    ShowReport('Grid32_GridCol0Id');
                    document.getElementById('Grid32_GridCol1Id').setAttribute('Class', 'col-8');
                    ShowReport('Grid32_GridCol1Id');
                    document.getElementById('Grid32_GridCol2Id').setAttribute('Class', 'col');
                    ShowReport('Grid32_GridCol2Id');

                    ShowReport('Grid32_' + 'GridReportId');



                    //ChartBar
                    //Grid33
                    document.getElementById('Grid33_GridCol0Id').setAttribute('Class', 'col');
                    ShowReport('Grid33_GridCol0Id');
                    document.getElementById('Grid33_GridCol1Id').setAttribute('Class', 'col-8');
                    ShowReport('Grid33_GridCol1Id');
                    document.getElementById('Grid33_GridCol2Id').setAttribute('Class', 'col');
                    ShowReport('Grid33_GridCol2Id');


                    //var Month = new String(MonthStringStart).substr(0, 2) + '/' + new String(MonthStringStart).substr(2, 4);
                    var Title = 'Chiffre d\'affaire mensuel par région';
                    var PatternChart = Pattern + 'Total' + 'Bar';
                    var labels = GetColumnArray(PatternTableId, 0);

                    var label1 = 'CA 2020';
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var backgroundColor1 = 'rgba(7,98,250,1)';

                    var label2 = 'CA 2019';
                    var data2 = GetColumnArray(PatternTableId, 4);
                    var backgroundColor2 = 'rgba(7,98,250,0.2)';

                    DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

                    ShowReport('Grid33_' + 'GridReportId');


                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoNrRegionMonthGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                MonthStringStart: MonthStringStart,
                MonthStringEnd: MonthStringEnd
            }
        },
        "columns": [
            { "data": "RegionNameShort" },//0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Month, 2) + '/' + data.Year; } },//2

            { "data": "ReceiptCe" },//2
            { "data": "ReceiptGap" },//3       

            { "data": "ReceiptCeOld" },//4
            { "data": "ReceiptGapOld" },//5

            { "data": "ReceiptCeEvoA" },//6
            { "data": "ReceiptCeEvoR" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(GetGapDoubleFromDataTable(Total2));

            var Evo = ((Total0 - Total1) / Total1) * 100;

            if (Evo < 0)
                $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrRegionCumulGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrRegionCumul';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            //Table
            document.getElementById('Grid320_GridCol0Id').setAttribute('Class', 'col');
            ShowReport('Grid320_GridCol0Id');
            document.getElementById('Grid320_GridCol1Id').setAttribute('Class', 'col-10');
            ShowReport('Grid320_GridCol1Id');
            document.getElementById('Grid320_GridCol2Id').setAttribute('Class', 'col');
            ShowReport('Grid320_GridCol2Id');

            ShowReport(PatternTableReportId);

            ShowReport('Grid320_' + 'GridReportId');

            //ChartBar
            ShowReport('Grid321_' + 'GridReportId');

            document.getElementById('Grid321_GridCol0Id').setAttribute('Class', 'col');
            ShowReport('Grid321_GridCol0Id');
            document.getElementById('Grid321_GridCol1Id').setAttribute('Class', 'col-8');
            ShowReport('Grid321_GridCol1Id');
            document.getElementById('Grid321_GridCol2Id').setAttribute('Class', 'col');
            ShowReport('Grid321_GridCol2Id');

            var Title = 'Chiffre d\'affaire cumulé par région';
            var PatternChart = Pattern + 'Total' + 'Bar';
            var labels = GetColumnArray(PatternTableId, 0);

            var label1 = 'CA 2020';
            var data1 = GetColumnArray(PatternTableId, 3);
            var backgroundColor1 = 'rgba(7,98,250,1)';

            var label2 = 'CA 2019';
            var data2 = GetColumnArray(PatternTableId, 5);
            var backgroundColor2 = 'rgba(7,98,250,0.2)';
            DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

            ShowReport('Grid321_' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoNrRegionCumulGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "RegionNameShort" },//0

            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.DayFrom, 2) + '/' + GetDigits(data.MonthFrom, 2) + '/' + GetDigits(data.YearFrom, 2); } },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.DayTo, 2) + '/' + GetDigits(data.MonthTo, 2) + '/' + GetDigits(data.YearTo, 2); } },//2

            { "data": "ReceiptCe" },//3
            { "data": "ReceiptGap" },//4      

            { "data": "ReceiptCeOld" },//5
            { "data": "ReceiptGapOld" },//6

            { "data": "ReceiptCeEvoA" },//7
            { "data": "ReceiptCeEvoR" },//8
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(GetGapDoubleFromDataTable(Total2));

            var Evo = ((Total0 - Total1) / Total1) * 100;

            if (Evo < 0)
                $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrRegionDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var RegionId = GetElementValue('RegionId');

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var TimeId = GetElementValue('TimeId');

    var Icon = 'fas fa-eye';

    if (TimeId != '0') {
        RepoNrAllReportsHide();
        ShowReport('ParamReportId');

        if (TimeId == '01')//Day
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');


            if (DateStringStart != '' && DateStringEnd != '') {
                RepoNrRegionDayGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates sont obligatoires");
            }
        }
        if (TimeId == '02')//Month
        {
            var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
            var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

            if (MonthStringStart != '' && MonthStringEnd != '') {
                RepoNrRegionMonthGet(ActionBtnId, Icon, RegionId, MonthStringStart, MonthStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les mois sont obligatoires");
            }
        }
        if (TimeId == '06')//Cumul
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {
                RepoNrRegionCumulGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates sont obligatoires");
            }
        }
    }
    else {
        $("#ParamMessageTextId").html("La période est obligatoire");
    };
}

function RepoNrCompanyDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrCompanyDay';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            //Variables
            var DateValue = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '4';
            var TimeIndex = '0';
            var PageIndex = '';
            var PageRowIndex = '';

            var LevelIndex = '';
            var PatternIndex = '';


            var DataName = 'Chiffre d\'affaires';
            var TimeName = 'journalier';
            var Portion = 'par région';
            var Unity = 'en DH';

            //Page
            HeaderIndex = '4';
            TimeIndex = '0';
            document.getElementById('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageReportId').style.height = '3170px';
            document.getElementById('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageCardId').style.border = 'transparent';
            ShowReport('Page' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_PageReportId');



            var Title = DataName + ' ' + TimeName + ' ' + Portion + ' du ' + DateValue + ' ' + Unity;

            //Table
            PageRowIndex = '0';
            LevelIndex = '0';
            PatternIndex = '';

            TplGridModelGet(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex, 'col', 'col-12', 'col', '1480px', 'transparent');

            //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
            //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-8');
            //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
            //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
            //document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId').style.height = '1480px';

            ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');
            ShowReport(PatternTableReportId);
            $('#' + Pattern + 'TableCardHeaderId h5').text('Chiffre d\'affaire journalier global au ' + DateValue);

            if (DateStringStart - DateStringEnd == 0) {
                //TotalBar
                LevelIndex = '1';
                PatternIndex = '';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-8');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                var Title = 'Evolution de la recette globale au ' + DateValue;
                var PatternChart = Pattern + 'TotalLine';
                var labels = GetColumnArray(PatternTableId, 0);
                var label1 = 'Recette journalière 2020'; var data1 = GetColumnArray(PatternTableId, 1);
                var label2 = 'Recette journalière 2019'; var data2 = GetColumnArray(PatternTableId, 11);
                ChartJsLineTwoOldDisplay(Title, PatternChart, labels, label1, data1, label2, data2, false)

                //MpPie + ClPie
                LevelIndex = '2';
                PatternIndex = '';
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol0Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol1Id').setAttribute('Class', 'col-6');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCol2Id').setAttribute('Class', 'col');
                document.getElementById('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridCardId').style.border = 'transparent';
                ShowReport('Grid' + HeaderIndex + TimeIndex + LevelIndex + PatternIndex + '_GridReportId');

                var RowIndex = 0;
                var PortionIndex = 0;
                var MpIndex0 = 3;
                var MpIndex1 = 4;
                var MpIndex2 = 5;
                var MpIndex3 = 6;
                var MpIndex4 = 7;

                RowIndex = 0;
                RepoNrMpChartPieFiveDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, MpIndex0, MpIndex1, MpIndex2, MpIndex3, MpIndex4);
                RowIndex = 1;

                var ClIndex0 = 8;
                var ClIndex1 = 9;
                var CmIndex2 = 10;

                RowIndex = 0;
                RepoNrClChartPieDisplay(Pattern, PatternTableId, DateValue, RowIndex, PortionIndex, ClIndex0, ClIndex1, CmIndex2);
            }
        },
        "ajax": {
            "url": "/Repo/RepoNrCompanyDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            //{ "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year, 2) } },//0

            { "data": "DateValue" },//1
            { "data": "ReceiptCe" },//1
            { "data": "ReceiptGap" },//2    

            { "data": "ReceiptCeMp01" },//3
            { "data": "ReceiptCeMp40_41" },//4
            { "data": "ReceiptCeMp16" },//5
            { "data": "ReceiptCeMp12" },//6
            { "data": "ReceiptCeMpOther" },//7

            { "data": "ReceiptCeC1" },//8
            { "data": "ReceiptCeC2" },//9
            { "data": "ReceiptCeC3" },//10

            { "data": "ReceiptCeOld" },//11
            { "data": "ReceiptOldGap" },//12

            { "data": "ReceiptCe" },//13
            { "data": "ReceiptCe" },//14
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right none", "targets": 3 },
            { "width": "3%", "className": "text-right none", "targets": 4 },
            { "width": "3%", "className": "text-right none", "targets": 5 },
            { "width": "3%", "className": "text-right none", "targets": 6 },
            { "width": "3%", "className": "text-right none", "targets": 7 },

            { "width": "3%", "className": "text-right none", "targets": 8 },
            { "width": "3%", "className": "text-right none", "targets": 9 },
            { "width": "3%", "className": "text-right none", "targets": 10 },

            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-left", "targets": 12 },

            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 2, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            //{ "targets": 14, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(1).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(GetGapDoubleFromDataTable(Total2));

            //var Evo = ((Total0 - Total1) / Total1) * 100;

            //if (Evo < 0)
            //    $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(6).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrCompanyDayClGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    ShowReport('ExportReportId');

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrCompanyDayCl';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            //Variables
            var DateValue = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '4';
            var TimeIndex = '0';

            var PageRowIndex = '';

            var LevelIndex = '';



            var DataName = 'Chiffre d\'affaires';
            var TimeName = 'journalier';
            var Portion = 'par région';
            var Unity = 'en DH';

            //Page
            var PageIndex = '';
            var PatternIndex = '';

            //TplPageModelGet(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex, height, border);
            //document.getElementById('Page' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_PageReportId').style.height = '3170px';
            //document.getElementById('Page' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_PageCardId').style.border = 'transparent';


            var Title = DataName + ' ' + TimeName + ' ' + Portion + ' du ' + DateValue + ' ' + Unity;

            //Table
            PageRowIndex = '3';
            PatternIndex = '';

            TplGridModelColSet(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex, 'col', 'col-12', 'col', 'transparent');

            ShowPage(HeaderIndex, TimeIndex);
            ShowGrid(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex);
            ShowReport(PatternTableReportId);
            $('#' + Pattern + 'TableCardHeaderId h5').text('CA journalier global par catégorie au ' + DateValue);
        },
        "ajax": {
            "url": "/Repo/RepoNrCompanyDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "DateValue" },//0

            { "data": "ReceiptCeC1" },//1
            { "data": "ReceiptCeC2" },//2
            { "data": "ReceiptCeC3" },//3
            { "data": "ReceiptCe" },//4

            { "data": "ReceiptCeC1Old" },//5
            { "data": "ReceiptCeC2Old" },//6
            { "data": "ReceiptCeC3Old" },//7
            { "data": "ReceiptCeOld" },//8

            { "data": "" },//9
            { "data": "" },//10
            { "data": "" },//11
            { "data": "" },//12
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeC1Gap']); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeC2Gap']); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeC3Gap']); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptGap']); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeC1OldGap']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeC2OldGap']); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeC3OldGap']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptOldGap']); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['ReceiptCeC1'], row['ReceiptCeC1Old']) } },
            {
                "targets": 10, "render": function (data, type, row) {
                    return DataTableEvoRalativeGet(row['ReceiptCeC2'], row['ReceiptCeC2Old'])
                }
            },
            {
                "targets": 11, "render": function (data, type, row) {
                    return DataTableEvoRalativeGet(row['ReceiptCeC3'], row['ReceiptCeC3Old'])
                }
            },
            {
                "targets": 12, "render": function (data, type, row) {
                    return DataTableEvoRalativeGet(row['ReceiptCe'], row['ReceiptCeOld'])
                }
            },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": false,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(DataTableFormatDoubleNullAlertGet(Total2));

            Total3 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total3));



            Total4 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(DataTableFormatDoubleNullAlertGet(Total4));

            Total5 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(DataTableFormatDoubleNullAlertGet(Total5));

            Total6 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(DataTableFormatDoubleNullAlertGet(Total6));

            Total7 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(DataTableFormatDoubleNullAlertGet(Total7));




            var Evo = ((Total0 - Total4) / Total4) * 100;
            if (Evo < 0)
                $(api.column(9).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(9).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo) + ' %</span>');

            var Evo = ((Total1 - Total5) / Total5) * 100;
            if (Evo < 0)
                $(api.column(10).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(10).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo) + ' %</span>');

            var Evo = ((Total2 - Total6) / Total6) * 100;
            if (Evo < 0)
                $(api.column(11).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(11).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo) + ' %</span>');

            var Evo = ((Total3 - Total7) / Total7) * 100;
            if (Evo < 0)
                $(api.column(12).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(12).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}


//function DataTableEvoRalativeGet(Value, ValueOld)
//{
//    if (ValueOld.toFixed(2) != 0) {
//        var evo = ((Value - ValueOld) / ValueOld) * 100;
//        return DataTableFormatRateGet(evo.toFixed(2));
//    }
//    else {
//        return '<span  class="badge badge-success" >100.00 %</span>';
//    }
//}

function RepoNrCompanyDayMpGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {

    ShowReport('ExportReportId');

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrCompanyDayMp';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            //Variables
            var DateValue = JsDateValueFromDateString(DateStringEnd);
            var HeaderIndex = '4';
            var TimeIndex = '0';

            var PageRowIndex = '';

            var LevelIndex = '';



            var DataName = 'Chiffre d\'affaires';
            var TimeName = 'journalier';
            var Portion = 'par région';
            var Unity = 'en DH';

            //Page
            var PageIndex = '';
            var PatternIndex = '';

            //TplPageModelGet(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex, height, border);
            //document.getElementById('Page' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_PageReportId').style.height = '3170px';
            //document.getElementById('Page' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_PageCardId').style.border = 'transparent';


            var Title = DataName + ' ' + TimeName + ' ' + Portion + ' du ' + DateValue + ' ' + Unity;

            //Table
            PageRowIndex = '4';
            PatternIndex = '';

            TplGridModelColSet(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex, 'col', 'col-12', 'col', 'transparent');

            ShowPage(HeaderIndex, TimeIndex);
            ShowGrid(HeaderIndex, TimeIndex, PageIndex, PageRowIndex, PatternIndex);
            ShowReport(PatternTableReportId);
            $('#' + Pattern + 'TableCardHeaderId h5').text('CA journalier global par moyen de paiement au ' + DateValue);
        },
        "ajax": {
            "url": "/Repo/RepoNrCompanyDayMpGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "DateValue" },//0

            { "data": "ReceiptCeMp01" },//1
            { "data": "ReceiptCeMp40_41" },//2
            { "data": "ReceiptCeMp16" },//3
            { "data": "ReceiptCeMp12" },//4
            { "data": "ReceiptCeMpOther" },//5
            { "data": "ReceiptCe" },//6

            { "data": "" },//7
            { "data": "" },//8
            { "data": "" },//9
            { "data": "" },//10
            { "data": "" },//11
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeMp01Gap']); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeMp40_41Gap']); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeMp16Gap']); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeMp12Gap']); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeMpOtherGap']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleAlertGet(data, row['ReceiptCeGap']); } },

            { "targets": 7, "render": function (data, type, row) { return DataTablePercentageGet(row['ReceiptCeMp01'], row['ReceiptCe']); } },
            { "targets": 8, "render": function (data, type, row) { return DataTablePercentageGet(row['ReceiptCeMp40_41'], row['ReceiptCe']); } },
            { "targets": 9, "render": function (data, type, row) { return DataTablePercentageGet(row['ReceiptCeMp16'], row['ReceiptCe']); } },
            { "targets": 10, "render": function (data, type, row) { return DataTablePercentageGet(row['ReceiptCeMp12'], row['ReceiptCe']); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableEvoRalativeGet(row['ReceiptCeMpOther'], row['ReceiptCe']); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": false,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(DataTableFormatDoubleNullAlertGet(Total2));

            Total3 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total3));

            Total4 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(DataTableFormatDoubleNullAlertGet(Total4));

            Total5 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(DataTableFormatDoubleNullAlertGet(Total5));



            //Total6 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(7).footer()).html(DataTableFormatDoubleNullAlertGet(Total6));

            //Total7 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(8).footer()).html(DataTableFormatDoubleNullAlertGet(Total7));

            //Total8 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(9).footer()).html(DataTableFormatDoubleNullAlertGet(Total8));

            //Total9 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(10).footer()).html(DataTableFormatDoubleNullAlertGet(Total9));

            //Total10 = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(11).footer()).html(DataTableFormatDoubleNullAlertGet(Total10));

            //Total11 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(12).footer()).html(DataTableFormatDoubleNullAlertGet(Total11));


            //var Evo = ((Total0 - Total4) / Total4) * 100;
            //if (Evo < 0)
            //    $(api.column(9).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(9).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo) + ' %</span>');

            //var Evo = ((Total1 - Total5) / Total5) * 100;
            //if (Evo < 0)
            //    $(api.column(10).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(10).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo) + ' %</span>');

            //var Evo = ((Total2 - Total6) / Total6) * 100;
            //if (Evo < 0)
            //    $(api.column(11).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(11).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo) + ' %</span>');

            //var Evo = ((Total3 - Total7) / Total7) * 100;
            //if (Evo < 0)
            //    $(api.column(12).footer()).html('<span  class="badge-alert badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(12).footer()).html('<span  class="badge-alert badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrCompanyMonthGet(ActionBtnId, Icon, MonthStringStart, MonthStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrCompanyMonth';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            document.getElementById('Grid410_GridCol0Id').setAttribute('Class', 'col');
            ShowReport('Grid410_GridCol0Id');
            document.getElementById('Grid410_GridCol1Id').setAttribute('Class', 'col-8');
            ShowReport('Grid410_GridCol1Id');
            document.getElementById('Grid410_GridCol2Id').setAttribute('Class', 'col');
            ShowReport('Grid410_GridCol2Id');

            ShowReport(PatternTableReportId);
            ShowReport('Grid410_' + 'GridReportId');

            //ChartBar
            document.getElementById('Grid411_GridCol0Id').setAttribute('Class', 'col');
            ShowReport('Grid411_GridCol0Id');
            document.getElementById('Grid411_GridCol1Id').setAttribute('Class', 'col-8');
            ShowReport('Grid411_GridCol1Id');
            document.getElementById('Grid411_GridCol2Id').setAttribute('Class', 'col');
            ShowReport('Grid411_GridCol2Id');

            var Title = 'Chiffre d\'affaire mensuel global';
            var PatternChart = Pattern + 'Total' + 'Bar';
            var labels = GetColumnArray(PatternTableId, 0);

            var label1 = 'CA 2020';
            var data1 = GetColumnArray(PatternTableId, 1);
            var backgroundColor1 = 'rgba(7,98,250,1)';

            var label2 = 'CA 2019';
            var data2 = GetColumnArray(PatternTableId, 3);
            var backgroundColor2 = 'rgba(7,98,250,0.2)';

            DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

            ShowReport('Grid411_' + 'GridReportId');

        },
        "ajax": {
            "url": "/Repo/RepoNrCompanyMonthGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                MonthStringStart: MonthStringStart,
                MonthStringEnd: MonthStringEnd
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Month, 2) + '/' + data.Year; } },//0

            { "data": "ReceiptCe" },//1
            { "data": "ReceiptGap" },//2    

            { "data": "ReceiptCeOld" },//3
            { "data": "ReceiptGapOld" },//4

            { "data": "ReceiptCeEvoA" },//5
            { "data": "ReceiptCeEvoR" },//6
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 2, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(1).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(GetGapDoubleFromDataTable(Total2));

            var Evo = ((Total0 - Total1) / Total1) * 100;

            if (Evo < 0)
                $(api.column(6).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(6).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrCompanyCumulGet(ActionBtnId, Icon, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrCompanyCumul';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            ShowReport(PatternTableReportId);

            //Grid420
            document.getElementById('Grid420_GridCol0Id').setAttribute('Class', 'col');
            ShowReport('Grid420_GridCol0Id');
            document.getElementById('Grid420_GridCol1Id').setAttribute('Class', 'col-8');
            ShowReport('Grid420_GridCol1Id');
            document.getElementById('Grid420_GridCol2Id').setAttribute('Class', 'col');
            ShowReport('Grid420_GridCol2Id');

            ShowReport('Grid420_' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoNrCompanyCumulGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.DayFrom, 2) + '/' + GetDigits(data.MonthFrom, 2) + '/' + GetDigits(data.YearFrom, 2); } },//0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.DayTo, 2) + '/' + GetDigits(data.MonthTo, 2) + '/' + GetDigits(data.YearTo, 2); } },//1

            { "data": "ReceiptCe" },//2
            { "data": "ReceiptGap" },//3

            { "data": "ReceiptCeOld" },//4
            { "data": "ReceiptGapOld" },//5

            { "data": "ReceiptCeEvoA" },//6
            { "data": "ReceiptCeEvoR" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(GetGapDoubleFromDataTable(Total2));

            var Evo = ((Total0 - Total1) / Total1) * 100;

            if (Evo < 0)
                $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrCompanyDisplay() {

    var ActionBtnId = 'ParamActionBtnId';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var TimeId = GetElementValue('TimeId');

    var Icon = 'fas fa-eye';

    if (TimeId != '0') {
        RepoNrAllReportsHide();
        ShowReport('ParamReportId');

        if (TimeId == '01')//Day
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {
                //RepoNrCompanyDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
                RepoNrCompanyDayClGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
                RepoNrCompanyDayMpGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates de début et de fin sont obligatoires");
            }
        }
        if (TimeId == '02')//Month
        {
            var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
            var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

            if (MonthStringStart != '' && MonthStringEnd != '') {
                RepoNrCompanyMonthGet(ActionBtnId, Icon, MonthStringStart, MonthStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les mois sont obligatoires");
            }
        }
        if (TimeId == '06')//Cumul
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {
                RepoNrCompanyCumulGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates sont obligatoires");
            }
        }
    }
    else {
        $("#ParamMessageTextId").html("La période est obligatoire");
    };
}

function RepoNrAxleDayGet(ActionBtnId, Icon, AxleId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrAxleDay';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);


            if (AxleId != '0') {

                var Title = 'Evolution de la recette totale';

                var PatternChart = Pattern + 'TotalLine';
                var labels = GetColumnArray(PatternTableId, 1);
                var data1 = GetColumnArray(PatternTableId, 2);
                var data2 = GetColumnArray(PatternTableId, 4);
                ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Recette journalière 2020', data1, 'Recette journalière 2019', data2, false)


                //var Title = 'Evolution du trafic horaire par moyen de paiement';
                //var PatternChart = 'RepoTraficStationHourMpLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 25);
                //var data2 = GetColumnArray(PatternTableId, 26);
                //var data3 = GetColumnArray(PatternTableId, 27);
                //var data4 = GetColumnArray(PatternTableId, 28);
                //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                //var Title = 'Evolution du trafic horaire par catégorie';
                //var PatternChart = 'RepoTraficStationHourClLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 29);
                //var data2 = GetColumnArray(PatternTableId, 30);
                //var data3 = GetColumnArray(PatternTableId, 31);
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)

                ShowReport('Grid30_' + 'GridReportId');
            }
            else {
                if (DateStringStart - DateStringEnd == 0) {

                    //-----
                    document.getElementById('Grid500_GridCol0Id').setAttribute('Class', 'col');
                    ShowReport('Grid500_GridCol0Id');
                    document.getElementById('Grid500_GridCol1Id').setAttribute('Class', 'col-8');
                    document.getElementById('Grid500_GridCol1Id').style.height = '740px';
                    ShowReport('Grid500_GridCol1Id');
                    document.getElementById('Grid500_GridCol2Id').setAttribute('Class', 'col');
                    ShowReport('Grid500_GridCol2Id');

                    ShowReport('Grid500_' + 'GridReportId');

                    //-----
                    document.getElementById('Grid501_GridCol0Id').setAttribute('Class', 'col');
                    ShowReport('Grid501_GridCol0Id');
                    document.getElementById('Grid501_GridCol1Id').setAttribute('Class', 'col-8');
                    document.getElementById('Grid501_GridCol1Id').style.height = '680px';
                    ShowReport('Grid501_GridCol1Id');
                    document.getElementById('Grid501_GridCol2Id').setAttribute('Class', 'col');
                    ShowReport('Grid501_GridCol2Id');

                    //document.getElementById('RepoNrAxleDayTotalBarChartId').style.height = '900px';

                    var Day = new String(DateStringStart).substr(0, 2) + '/' + new String(DateStringStart).substr(2, 2) + '/' + new String(DateStringStart).substr(4, 4);
                    var Title = 'Chiffre d\'affaire journalier par axe du ' + Day + ' (DH)';
                    var PatternChart = Pattern + 'Total' + 'Bar';
                    var labels = GetColumnArray(PatternTableId, 0);

                    var label1 = 'CA 2020';
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var backgroundColor1 = 'rgba(7,98,250,1)';

                    var label2 = 'CA 2019';
                    var data2 = GetColumnArray(PatternTableId, 4);
                    var backgroundColor2 = 'rgba(7,98,250,0.2)';

                    DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

                    ShowReport('Grid501_' + 'GridReportId');
                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoNrAxleDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                AxleId: AxleId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "AxleName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2) + '/' + GetDigits(data.Year, 2); } },//2

            { "data": "ReceiptCe" },//2
            { "data": "ReceiptGap" },//3       

            { "data": "ReceiptCeOld" },//4
            { "data": "ReceiptGapOld" },//5

            { "data": "ReceiptCeEvoA" },//6
            { "data": "ReceiptCeEvoR" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapDoubleFromDataTable(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(GetGapDoubleFromDataTable(Total2));

            var Evo = ((Total0 - Total1) / Total1) * 100;

            if (Evo < 0)
                $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrAxleMonthGet(ActionBtnId, Icon, AxleId, MonthStringStart, MonthStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrAxleMonth';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);


            if (AxleId != '0') {

                var Title = 'Evolution de la recette totale';

                var PatternChart = Pattern + 'TotalLine';
                var labels = GetColumnArray(PatternTableId, 1);
                var data1 = GetColumnArray(PatternTableId, 2);
                var data2 = GetColumnArray(PatternTableId, 4);
                ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Recette journalière 2020', data1, 'Recette journalière 2019', data2, false)


                //var Title = 'Evolution du trafic horaire par moyen de paiement';
                //var PatternChart = 'RepoTraficStationHourMpLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 25);
                //var data2 = GetColumnArray(PatternTableId, 26);
                //var data3 = GetColumnArray(PatternTableId, 27);
                //var data4 = GetColumnArray(PatternTableId, 28);
                //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                //var Title = 'Evolution du trafic horaire par catégorie';
                //var PatternChart = 'RepoTraficStationHourClLine';
                //var labels = GetColumnArray(PatternTableId, 2);
                //var data1 = GetColumnArray(PatternTableId, 29);
                //var data2 = GetColumnArray(PatternTableId, 30);
                //var data3 = GetColumnArray(PatternTableId, 31);
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false)

                ShowReport('Grid52_' + 'GridReportId');
            }
            else {
                if (MonthStringStart - MonthStringStart == 0) {

                    //Table
                    //Grid52
                    document.getElementById('Grid52_GridCol0Id').setAttribute('Class', '');
                    HideReport('Grid52_GridCol0Id');
                    document.getElementById('Grid52_GridCol1Id').setAttribute('Class', 'col-8');
                    ShowReport('Grid52_GridCol1Id');
                    document.getElementById('Grid52_GridCol2Id').setAttribute('Class', '');
                    HideReport('Grid52_GridCol2Id');

                    ShowReport('Grid52_' + 'GridReportId');



                    //ChartBar
                    //Grid53
                    document.getElementById('Grid53_GridCol0Id').setAttribute('Class', '');
                    HideReport('Grid53_GridCol0Id');
                    document.getElementById('Grid33_GridCol1Id').setAttribute('Class', 'col-8');
                    ShowReport('Grid53_GridCol1Id');
                    document.getElementById('Grid53_GridCol2Id').setAttribute('Class', '');
                    HideReport('Grid53_GridCol2Id');


                    var Month = new String(MonthStringStart).substr(0, 2) + '/' + new String(MonthStringStart).substr(2, 4);
                    var Title = 'Chiffre d\'affaire mensuel par axe autoroutier du ' + Month + ' en DH';
                    var PatternChart = Pattern + 'Total' + 'Bar';
                    var labels = GetColumnArray(PatternTableId, 0);

                    var label1 = 'CA 2020';
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var backgroundColor1 = 'rgba(7,98,250,1)';

                    var label2 = 'CA 2019';
                    var data2 = GetColumnArray(PatternTableId, 4);
                    var backgroundColor2 = 'rgba(7,98,250,0.2)';

                    DisplayChartBarTwo(PatternChart, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

                    ShowReport('Grid53_' + 'GridReportId');


                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoNrAxleMonthGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                AxleId: AxleId,
                MonthStringStart: MonthStringStart,
                MonthStringEnd: MonthStringEnd
            }
        },
        "columns": [
            { "data": "AxleName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Month, 2) + '/' + data.Year; } },//2

            { "data": "ReceiptCe" },//2
            { "data": "ReceiptGap" },//3       

            { "data": "ReceiptCeOld" },//4
            { "data": "ReceiptGapOld" },//5

            { "data": "ReceiptCeEvoA" },//6
            { "data": "ReceiptCeEvoR" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(GetGapDoubleFromDataTable(Total2));

            var Evo = ((Total0 - Total1) / Total1) * 100;

            if (Evo < 0)
                $(api.column(7).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(7).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrAxleCumulGet(ActionBtnId, Icon, AxleId, DateStringStart, DateStringEnd) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoNrAxleCumul';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    ParamMessageReset();

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        //"dom": 'Bfrtip',
        //"buttons": [
        //    'copy', 'csv', 'excel', 'pdf', 'print'
        //],
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);

            if (DateStringStart != '' && DateStringEnd != '') {
                var Day = new String(DateStringStart).substr(0, 2) + '/' + new String(DateStringStart).substr(2, 2) + '/' + new String(DateStringStart).substr(4, 4);
                var Title = 'Chiffre d\'affaire journalier par axe du ' + Day + ' en DH';
                var Pattern = Pattern + 'Total' + 'Bar';
                var labels = GetColumnArray(PatternTableId, 0);

                var label1 = 'CA 2020';
                var data1 = GetColumnArray(PatternTableId, 3);
                var backgroundColor1 = 'rgba(7,98,250,1)';

                var label2 = 'CA 2019';
                var data2 = GetColumnArray(PatternTableId, 5);
                var backgroundColor2 = 'rgba(7,98,250,0.2)';

                DisplayChartBarTwo(Pattern, labels, Title, label1, data1, backgroundColor1, label2, data2, backgroundColor2);

                //Grid54
                document.getElementById('Grid54_GridCol0Id').setAttribute('Class', '');
                HideReport('Grid54_GridCol0Id');
                document.getElementById('Grid54_GridCol1Id').setAttribute('Class', 'col-8');
                ShowReport('Grid54_GridCol1Id');
                document.getElementById('Grid54_GridCol2Id').setAttribute('Class', '');
                HideReport('Grid54_GridCol2Id');
                ShowReport('Grid54_' + 'GridReportId');

                //Grid55
                document.getElementById('Grid55_GridCol0Id').setAttribute('Class', 'col');
                HideReport('Grid55_GridCol0Id');
                document.getElementById('Grid55_GridCol1Id').setAttribute('Class', 'col-8');
                ShowReport('Grid55_GridCol1Id');
                document.getElementById('Grid55_GridCol2Id').setAttribute('Class', '');
                HideReport('Grid55_GridCol2Id');
                ShowReport('Grid55_' + 'GridReportId');
            }

            ShowReport('Grid54_' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoNrAxleCumulGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                AxleId: AxleId,
                DateStringStart: DateStringStart,
                DateStringEnd: DateStringEnd
            }
        },
        "columns": [
            { "data": "AxleName" },//0
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.DayFrom, 2) + '/' + GetDigits(data.MonthFrom, 2) + '/' + GetDigits(data.YearFrom, 2); } },//1
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.DayTo, 2) + '/' + GetDigits(data.MonthTo, 2) + '/' + GetDigits(data.YearTo, 2); } },//2

            { "data": "ReceiptCe" },//3
            { "data": "ReceiptGap" },//4     

            { "data": "ReceiptCeOld" },//5
            { "data": "ReceiptGapOld" },//6

            { "data": "ReceiptCeEvoA" },//7
            { "data": "ReceiptCeEvoR" },//8
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-left", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return GetGapInfoFromDataTable(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableEvoADoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableEvoRGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(3).footer()).html(DataTableFormatDoubleNullAlertGet(Total0));

            Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(5).footer()).html(DataTableFormatDoubleNullAlertGet(Total1));

            Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(GetGapDoubleFromDataTable(Total2));

            var Evo = ((Total0 - Total1) / Total1) * 100;

            if (Evo < 0)
                $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoNrAxleDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var AxleId = GetElementValue('AxleId');

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var TimeId = GetElementValue('TimeId');

    var Icon = 'fas fa-eye';

    if (TimeId != '0') {
        RepoNrAllReportsHide();
        ShowReport('ParamReportId');

        if (TimeId == '01')//Day
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

            if (DateStringStart != '' && DateStringEnd != '') {
                RepoNrAxleDayGet(ActionBtnId, Icon, AxleId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates sont obligatoires");
            }
        }
        if (TimeId == '02')//Month
        {
            var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
            var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

            if (MonthStringStart != '' && MonthStringEnd != '') {
                RepoNrAxleMonthGet(ActionBtnId, Icon, AxleId, MonthStringStart, MonthStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les mois sont obligatoires");
            }
        }
        if (TimeId == '06')//Cumul
        {
            var DateStringStart = GetDateStringFromDatePicker('DateStartId');
            var DateStringEnd = GetDateStringFromDatePicker('DateEndId');


            if (DateStringStart != '' && DateStringEnd != '') {
                RepoNrAxleCumulGet(ActionBtnId, Icon, AxleId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates sont obligatoires");
            }
        }
    }
    else {
        $("#ParamMessageTextId").html("La période est obligatoire");
    };
}

function RepoNrDshDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var RegionId = '0';
    var AxleId = '0';
    var CexId = '0';
    var BagContainerId = '0';
    var StationNumber = '0';
    var Sens = '0';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var TimeId = GetElementValue('TimeId');

    var Icon = 'fas fa-eye';



    if (TimeId != '0' && DateStringStart != '' && DateStringEnd != '') {

        RepoNrAllReportsHide();
        ShowReport('ParamReportId');

        if (TimeId == '01')//Day
        {
            if (DateStringStart != '' && DateStringEnd != '') {

                var DateValue = JsDateValueFromDateString(DateStringStart);
                $('#CoverTitleId h1').text('Chiffre d\'affaire journalier');
                $('#CoverDateId h3').text('Le ' + DateValue);
                //ShowReport('Grid0000_' + 'GridReportId');

                //Cover
                document.getElementById('Grid0000_GridReportId').style.height = '3170px';

                RepoNrCompanyDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
                RepoNrRegionDayGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd);
                //RepoNrAxleDayGet(ActionBtnId, Icon, AxleId, DateStringStart, DateStringEnd);
                //RepoNrCexDayGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
                RepoNrSiteDayPerCexGet(ActionBtnId, Icon, RegionId, CexId, DateStringStart, DateStringEnd);
            }
            else {
                $("#ParamMessageTextId").html("Les dates de début et de fin sont obligatoires");
            };
        }
        if (TimeId == '02')//Month
        {
            var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
            var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

            if (MonthStringStart != '' && MonthStringEnd != '') {
                RepoNrCompanyMonthGet(ActionBtnId, Icon, DateStringStart, DateStringEnd);
                RepoNrRegionMonthGet(ActionBtnId, Icon, RegionId, DateStringStart, DateStringEnd);
                RepoNrAxleMonthGet(ActionBtnId, Icon, AxleId, DateStringStart, DateStringEnd);
                RepoNrCexMonthGet(ActionBtnId, Icon, CexId, DateStringStart, DateStringEnd);
                //RepoNrSiteMonthGet(ActionBtnId, Icon, CexId, BagContainerId, StationNumber, DateStringStart, DateStringEnd);                
            }
            else {
                $("#ParamMessageTextId").html("Les champe mois début et mois fin sont obligatoires");
            }
        }
    }
    else {
        $("#ParamMessageTextId").html("Le champ période est obligatoire");
    };
}

function CertFileOpeUpload() {

    var ActionBtnId = 'ParamActionBtnId2';
    var Icon = 'fas fa-plus-circle';

    var TaskId = '00';
    var Source = '08';
    var FileTypeId = '80';

    //var DateString = TextParamValueGet(new String(ParamId).substr(6, 8));

    var SiteId = '0';
    var LSId = '0';
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = '0';
    var PdvId = '0';
    var BillingId = '0';
    var CategoryId = '0';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var HMPlanString = '2359';
    var IsEveryDay = false;
    var IsEveryHour = false;
    var IsPlanned = false;
    var IsCron = false;
    var AddDaysStart = 0;
    var AddDaysEnd = 0;

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    CertFileAdd(ActionBtnId,
        Icon,
        TaskId,
        Source,
        FileTypeId,
        SiteId,
        LSId,
        BagContainerId,
        StationNumber,
        LaneName,
        PdvId,
        DateStringStart,
        DateStringEnd,

        HMPlanString,
        IsEveryDay,
        IsEveryHour,
        IsPlanned,
        IsCron,
        BillingId,
        CategoryId,
        AddDaysStart,
        AddDaysEnd
    );

}


//var TaskId = '00';
//var SourceId = '05';
//var FileTypeId = '58';
//var DateString = GetDigits(row['Day'], 2) + GetDigits(row['Month'], 2) + row['Year'];
//var SiteId = row['SiteId'];
//var LSId = '--';
//var BagContainerId = '--';
//var StationNumber = row['StationNumber'];
//var LaneName = '---';
//var PdvId = '--';
//var BillingId = '--';
//var CategoryId = '--';
//var ParamId = TaskId + SourceId + FileTypeId + DateString + SiteId + LSId + BagContainerId + StationNumber + LaneName + PdvId + BillingId + CategoryId;





//Open
function RepoSpcAffOpen() {


    //Hide all
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();
    MenuBarNavHighlight(1, 0, 2);

    //Set title
    ParamTitleSet('Affectation des caissiers');

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur')) {
                //ParamStationsFromLSGet();
                ParamCashiersGet();
                ParamBreaksGet();

                //Params
                ShowReport('ParamReportId');

                //Parents
                ShowParent('RegionId');
                ShowParent('CellId');
                ShowParent('ShiftId');
                ShowParent('DateId');

                ShowParent('RoleId');
                ShowParent('CashierRowId');
                ShowParent('StationNumberId');
                ShowParent('LaneNameId');
                ShowParent('CashierNumberKeyId');
                ShowParent('CashierNameKeyId');

                //disable
                //ElementDisable('RegionId');
                //ElementDisable('LSId');
                //ElementDisable('ShiftId');
                //ElementDisable('DateId');

                //Actions
                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcAffDisplay()');
                ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcAffAdd()');
                ParamActionBtnGet(2, 'Actualiser liste personnel', 'fas fa-redo-alt', "CertUpdate('RepoSpcAff')");

                RepoSpcAffDisplay();
            }
            else {
                if (data.includes('SpcReportSupervisor')) {

                    //Params
                    ShowReport('ParamReportId');

                    //Parents
                    ShowParent('RegionId');
                    ShowParent('CellId');
                    ShowParent('ShiftId');
                    ShowParent('DateId');
                    ShowParent('RoleId');
                    ShowParent('CashierRowId');
                    ShowParent('StationNumberId');
                    ShowParent('LaneNameId');
                    ShowParent('CashierNumberKeyId');
                    ShowParent('CashierNameKeyId');;

                    ElementOnChangeSet('CellId', 'ParamStationsFromCellGet()');
                    ElementOnClickSet('CellId', 'ParamCashiersFromCellGet()');
                    ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationCellGet()')

                    ElementDropDownListReset('CashierRowId');
                    ElementDropDownListReset('StationNumberId');
                    ElementDropDownListReset('LaneNameId');

                    ParamLSFromRegionSecXorGet();
                    //Actions
                    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcAffDisplay()');
                    ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcAffAdd()');
                    ParamActionBtnGet(2, 'Actualiser liste personnel', 'fas fa-redo-alt', "CertUpdate('RepoSpcAff')");

                    RepoSpcAffDisplay();
                }
                else {
                    if (data.includes('SpcReport')) {
                        //Get
                        if (RegionId != '0' &&
                            CellId != '0' &&
                            ShiftId != '0' &&
                            DateString != '') {



                            //Params
                            ShowReport('ParamReportId');

                            //parents
                            ShowParent('RegionId');
                            ShowParent('CellId');
                            ShowParent('ShiftId');
                            ShowParent('DateId');

                            ShowParent('RoleId');
                            ShowParent('CashierRowId');
                            ShowParent('StationNumberId');
                            ShowParent('LaneNameId');
                            ShowParent('CashierNumberKeyId');
                            ShowParent('CashierNameKeyId');

                            ElementOnChangeSet('CellId', 'ParamStationsFromCellGet()');
                            ElementOnClickSet('CellId', 'ParamCashiersFromCellGet()');
                            //ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationLSGet()')

                            //disable
                            ElementDisable('RegionId');
                            ElementDisable('CellId');
                            ElementDisable('ShiftId');
                            ElementDisable('DateId');

                            ParamStationsFromCellGet();
                            ParamCashiersFromCellGet();
                            ParamBreaksGet();

                            //Actions
                            ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcAffDisplay()');
                            ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcAffAdd()');
                            ParamActionBtnGet(2, 'Actualiser liste personnel', 'fas fa-redo-alt', "CertUpdate('RepoSpcAff')");

                            RepoSpcAffDisplay();
                        }
                        else {
                            alert('Tous les champs sont obligatoires');
                        };
                    }
                }
            }
        }
    });




    //Connection
    NotiConnectionIdUpdate('SPC-Affectation');
}



//Display
function RepoSpcAffDisplay() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdDisplayGet();
    var Icon = ParamActionIconDisplayGet();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    var RoleId = GetElementValue('RoleId');
    var CashierRowId = GetElementValue('CashierRowId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');

    //Get
    if (DateString != '') {
        RepoSpcAffGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString,
            RoleId, CashierRowId, StationNumber, LaneName);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function RepoSpcAffExport(RegionId, CellId, StationNumber, DateStringStart, DateStringEnd, FileType) {

    var PrintLink = '/Qualif/RepoSpcAffExport?' +
        'RegionId=' + RegionId +
        '&CellId=' + CellId +
        '&StationNumber=' + StationNumber +
        '&DateStringStart=' + DateStringStart +
        '&DateStringEnd=' + DateStringEnd +
        '&FileType=' + FileType;

    NavigateTo(PrintLink, true);
}

//Get
function RepoSpcAffGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString,
    RoleId, CashierRowId, StationNumber, LaneName) {
    //Spin
    ActionBtnMarginSpin(ActionBtnId);

    //Hide some reports
    RepoSpcAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    var Pattern = 'RepoSpcAff';
    var PatternTable = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTable).DataTable().destroy();;
    $('#' + PatternTable).DataTable({
        "dom": 'Bfrtip',
        "buttons": {
            buttons: [
                {
                    text: 'PDF',
                    action: function (e, dt, node, config) {
                        //alert('Activated!');
                        RepoSpcAffExport(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString,
                            RoleId, CashierRowId, StationNumber, LaneName, 'PDF');
                        //Export(\'RepoTraficStationDayAll\', \'Excel\')
                    }
                },
                {
                    text: 'Excel',
                    action: function (e, dt, node, config) {
                        //alert('Activated!');
                        RepoSpcAffExport(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString,
                            RoleId, CashierRowId, StationNumber, LaneName, 'Excel');
                        //Export(\'RepoTraficStationDayAll\', \'Excel\')
                    }
                }
            ]
        },
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/RepoSpc/RepoSpcAffGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                CellId: CellId,
                ShiftId: ShiftId,
                DateString: DateString,

                RoleId: RoleId,
                CashierRowId: CashierRowId,
                StationNumber: StationNumber,
                LaneName: LaneName
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "RegionNameShort" },//1
            { "data": "CellName" },//2
            { "data": "StationName" },//3
            { "data": "LaneName" },//4 
            { "data": "ShiftName" },//5

            { "data": "RoleName" },//6
            { "data": "CashierNumber" },//7
            { "data": "CashierName" },//8

            { "data": "SpcAffRowId" },//9
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },

            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return data; } },

            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return data; } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('RepoSpcAffDelete', data, 'far fa-trash-alt', 'fe1200'); } },

        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Affectation-Affichage');
}


//Add
function RepoSpcAffAdd() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdAddGet();
    var Icon = ParamActionIconAddGet();

    //Get input values
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    var RoleId = GetElementValue('RoleId');
    var CashierRowId = GetElementValue('CashierRowId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');

    if (RoleId != '0' && CashierRowId != '0' && StationNumber != '0' && ShiftId != '0' && CellId != '0' && DateString != '') {
        ParamMessageReset();
        RepoSpcAffInsert(ActionBtnId, Icon, CellId, ShiftId, DateString, RoleId, CashierRowId, StationNumber, LaneName);
    }
    else {
        ParamMessageErrorDisplay('Tous les champs sont obligatoires')
    }
}


//Insert
function RepoSpcAffInsert(ActionBtnId, Icon, CellId, ShiftId, DateString, RoleId, CashierRowId, StationNumber, LaneName) {
    //Spin
    ActionBtnSpin(ActionBtnId);

    //Insert
    var obj = {};
    obj.CellId = CellId;
    obj.ShiftId = ShiftId;
    obj.DateString = DateString;

    obj.RoleId = RoleId;
    obj.CashierRowId = CashierRowId;
    obj.StationNumber = StationNumber;
    obj.LaneName = LaneName;
    $.ajax({
        url: "/RepoSpc/RepoSpcAffInsert",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnIconSet(ActionBtnId, Icon);
            RepoSpcAffDisplay();
        }
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Affectation-Ajout');
}

function RepoSpcAffDelete(SpcAffRowId) {

    var ActionBtnId = 'RepoSpcAffDeleteBtnId' + SpcAffRowId;
    var IsMargin = false;
    ActionSpin(ActionBtnId, IsMargin);

    var Icon = 'fas fa-minus-circle btn-icon-cl gc-c1-cl';
    var obj = {};
    obj.SpcAffRowId = SpcAffRowId;
    $.ajax({
        url: "/RepoSpc/RepoSpcAffDelete",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
        }
    });

}


//Load
function RepoSpcFormLoad(Pattern, PatternForm, RowId) {

    //Sert FormIndex
    var FormIndex = 1;

    var DateString = new String(RowId).substr(0, 8);
    var LSId = new String(RowId).substr(10, 2);
    var ShiftId = new String(RowId).substr(12, 2);

    //Load
    var obj = {};
    obj.LSId = LSId;
    obj.ShiftId = ShiftId;
    obj.DateString = DateString;
    obj.IsValid = false;

    $.ajax({
        url: "/Repo/RepoSpcGet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: true,
        success: function (data) {
            jQuery.each(data, function (index, itemData) {


                //Get features
                var LSId = itemData[0].LSId;


                //Set drop down lists
                HtmlDropDownListNameOnlyXorFill('RoleId' + FormIndex, '01', '/Repo/ParamSpcRolesGet', 'RoleId', 'RoleName');

                ////Set OnChange

                ////Set inputs
                // document.getElementById('CommentId' + FormIndex).value = '';
                //document.getElementById('DescriptionId' + FormIndex).value = Description;
                //document.getElementById('LenghtId' + FormIndex).value = Lenght;
                //document.getElementById('IsNullableId' + FormIndex).checked = IsNullable;

                ////Hide some inputs
                HideReport('LSId' + FormIndex + 'Parent');
                HideReport('DateValueId' + FormIndex + 'Parent');
                HideReport('ShiftId' + FormIndex + 'Parent');

                ////Set modal action buttons
                ModalActionBtnEditGet(Pattern, '\'' + RowId + '\'', FormIndex);

                ////Set labels
                //$('#NameId' + FormIndex + 'Label').text("Colonne");

                ////Set styles
                //document.getElementById('DescriptionId' + FormIndex).style.height = '160px';
                //document.getElementById('DescriptionId' + FormIndex).style.fontWeight = 'bold';


                RepoSpcAffectHomeOpen();
            });
        }
    });

    //QualifPathLogsGet(RowId);
    //Connection
    NotiConnectionIdUpdate('SPC-Affectation-Modification');
}


//function RepoSpcAffectHomeOpen() {
//    RepoSpcFormAllReportsHide();
//    RepoSpcFormAllParametersHide();
//    MenuBarFormNavHighlight(0, 0, 3);

//    var FormIndex = 1;

//    document.getElementById('RepoSpcEditActionBtnId').setAttribute("onClick", "RepoSpcAffectAdd('" + FormIndex + "')");
//    $('#RepoSpcEditActionIconId').attr('class', 'fas fa-plus-circle btn-icon-m-cl gc-c1-cl');
//    $('#RepoSpcEditActionTextId').text("Ajouter");

//    //$('#ParamTitleId').text("Certification des transactions");
//    //ShowReport('ParamReportId');
//    //ShowReport('SiteId' + 'Parent');
//    //ShowReport('BagContainerId' + 'Parent');
//    //ShowReport('StationNumberId' + 'Parent');
//    //ShowReport('DateStartId' + 'Parent');
//    //ShowReport('DateEndId' + 'Parent');

//    ////Set OnChange
//    //ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
//    //ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
//    //ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

//    ////Actions
//    //ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertTrxLaneStationDisplay()');
//    //ParamActionBtnGet(1, 'Niveau Jour', 'fas fa-eye', 'CertDayDisplay(\'CertTrxLaneDay\')');

//    //$.ajax({
//    //    url: "/Cert/RoleNameGet",
//    //    method: "POST",
//    //    contentType: "application/json; charset=utf-8",
//    //    async: true,
//    //    success: function (data) {
//    //        if (data == 'Chef de gare') {
//    //            DateValueDefaultSet('DateStartId', 1);
//    //            DateValueDefaultSet('DateEndId', 1);
//    //            CertDayDisplay('CertTrxLaneDay');
//    //        }
//    //        if (data == 'Administrateur' || data == 'Fatourati') {
//    //            DateValueDefaultFirstDaySet('DateStartId');
//    //            DateValueDefaultSet('DateEndId', 1);
//    //            CertDayDisplay('CertTrxLaneDay');
//    //        }
//    //    }
//    //});

//    //Connection
//    NotiConnectionIdUpdate('SPC-Affectation');
//}


function RepoSpcLateHomeOpen() {
    RepoSpcFormAllReportsHide();
    RepoSpcFormAllParametersHide();
    MenuBarFormNavHighlight(0, 1, 3);

    var FormIndex = 1;

    document.getElementById('RepoSpcEditActionBtnId').setAttribute("onClick", "RepoSpcLateAdd('" + FormIndex + "')");
    $('#RepoSpcEditActionIconId').attr('class', 'fas fa-plus-circle btn-icon-m-cl gc-c1-cl');
    $('#RepoSpcEditActionTextId').text("Ajouter");

    //$('#ParamTitleId').text("Certification des transactions");
    //ShowReport('ParamReportId');
    //ShowReport('SiteId' + 'Parent');
    //ShowReport('BagContainerId' + 'Parent');
    //ShowReport('StationNumberId' + 'Parent');
    //ShowReport('DateStartId' + 'Parent');
    //ShowReport('DateEndId' + 'Parent');

    ////Set OnChange
    //ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    //ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    //ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    ////Actions
    //ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertTrxLaneStationDisplay()');
    //ParamActionBtnGet(1, 'Niveau Jour', 'fas fa-eye', 'CertDayDisplay(\'CertTrxLaneDay\')');

    //$.ajax({
    //    url: "/Cert/RoleNameGet",
    //    method: "POST",
    //    contentType: "application/json; charset=utf-8",
    //    async: true,
    //    success: function (data) {
    //        if (data == 'Chef de gare') {
    //            DateValueDefaultSet('DateStartId', 1);
    //            DateValueDefaultSet('DateEndId', 1);
    //            CertDayDisplay('CertTrxLaneDay');
    //        }
    //        if (data == 'Administrateur' || data == 'Fatourati') {
    //            DateValueDefaultFirstDaySet('DateStartId');
    //            DateValueDefaultSet('DateEndId', 1);
    //            CertDayDisplay('CertTrxLaneDay');
    //        }
    //    }
    //});

    //Connection
    NotiConnectionIdUpdate('SPC-Retard');
}


function RepoSpcPermutHomeOpen() {
    RepoSpcFormAllReportsHide();
    RepoSpcFormAllParametersHide();
    MenuBarFormNavHighlight(0, 2, 3);

    var FormIndex = 1;

    document.getElementById('RepoSpcEditActionBtnId').setAttribute("onClick", "RepoSpcLateAdd('" + FormIndex + "')");
    $('#RepoSpcEditActionIconId').attr('class', 'fas fa-plus-circle btn-icon-m-cl gc-c1-cl');
    $('#RepoSpcEditActionTextId').text("Ajouter");

    //$('#ParamTitleId').text("Certification des transactions");
    //ShowReport('ParamReportId');
    //ShowReport('SiteId' + 'Parent');
    //ShowReport('BagContainerId' + 'Parent');
    //ShowReport('StationNumberId' + 'Parent');
    //ShowReport('DateStartId' + 'Parent');
    //ShowReport('DateEndId' + 'Parent');

    ////Set OnChange
    //ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    //ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    //ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    ////Actions
    //ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertTrxLaneStationDisplay()');
    //ParamActionBtnGet(1, 'Niveau Jour', 'fas fa-eye', 'CertDayDisplay(\'CertTrxLaneDay\')');

    //$.ajax({
    //    url: "/Cert/RoleNameGet",
    //    method: "POST",
    //    contentType: "application/json; charset=utf-8",
    //    async: true,
    //    success: function (data) {
    //        if (data == 'Chef de gare') {
    //            DateValueDefaultSet('DateStartId', 1);
    //            DateValueDefaultSet('DateEndId', 1);
    //            CertDayDisplay('CertTrxLaneDay');
    //        }
    //        if (data == 'Administrateur' || data == 'Fatourati') {
    //            DateValueDefaultFirstDaySet('DateStartId');
    //            DateValueDefaultSet('DateEndId', 1);
    //            CertDayDisplay('CertTrxLaneDay');
    //        }
    //    }
    //});

    //Connection
    NotiConnectionIdUpdate('SPC-Permutation');
}


function RepoSpcAbsHomeOpen() {
    RepoSpcFormAllReportsHide();
    RepoSpcFormAllParametersHide();
    MenuBarFormNavHighlight(0, 3, 3);

    var FormIndex = 1;

    document.getElementById('RepoSpcEditActionBtnId').setAttribute("onClick", "RepoSpcLateAdd('" + FormIndex + "')");
    $('#RepoSpcEditActionIconId').attr('class', 'fas fa-plus-circle btn-icon-m-cl gc-c1-cl');
    $('#RepoSpcEditActionTextId').text("Ajouter");

    //$('#ParamTitleId').text("Certification des transactions");
    //ShowReport('ParamReportId');
    //ShowReport('SiteId' + 'Parent');
    //ShowReport('BagContainerId' + 'Parent');
    //ShowReport('StationNumberId' + 'Parent');
    //ShowReport('DateStartId' + 'Parent');
    //ShowReport('DateEndId' + 'Parent');

    ////Set OnChange
    //ElementOnChangeSet('SiteId', 'ParamGetBagContainer()');
    //ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    //ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    ////Actions
    //ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'CertTrxLaneStationDisplay()');
    //ParamActionBtnGet(1, 'Niveau Jour', 'fas fa-eye', 'CertDayDisplay(\'CertTrxLaneDay\')');

    //$.ajax({
    //    url: "/Cert/RoleNameGet",
    //    method: "POST",
    //    contentType: "application/json; charset=utf-8",
    //    async: true,
    //    success: function (data) {
    //        if (data == 'Chef de gare') {
    //            DateValueDefaultSet('DateStartId', 1);
    //            DateValueDefaultSet('DateEndId', 1);
    //            CertDayDisplay('CertTrxLaneDay');
    //        }
    //        if (data == 'Administrateur' || data == 'Fatourati') {
    //            DateValueDefaultFirstDaySet('DateStartId');
    //            DateValueDefaultSet('DateEndId', 1);
    //            CertDayDisplay('CertTrxLaneDay');
    //        }
    //    }
    //});

    //Connection
    NotiConnectionIdUpdate('SPC-Abscence');
}





//Event

function RepoSpcEventHomeOpen() {
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();
    MenuBarNavHighlight(2, 0, 0);

    //Connection
    NotiConnectionIdUpdate('SPC-Affectation');
}

//Open
function RepoSpcEventOpen() {

    //Hide all
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    MenuBarNavHighlight(0, 1, 2);

    //Set title
    ParamTitleSet('Liste des évènements');



    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur')) {

                //Params
                ShowReport('ParamReportId');
                ShowReport('RegionId' + 'Parent');
                ShowReport('CellId' + 'Parent');
                ShowReport('ShiftId' + 'Parent');
                ShowReport('DateId' + 'Parent');
                ShowReport('StationNumberId' + 'Parent');
                ShowReport('LaneNameId' + 'Parent');
                ShowReport('SeverityId' + 'Parent');
                ShowReport('EventId' + 'Parent');
                ShowParent('EventTypeId');

                ParamCellsFromRegionSecGet();
                ParamStationsFromCellGet();

                //Actions
                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcEventDisplay()');
                ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcEventAdd()');

                RepoSpcEventDisplay();
            }
            else {
                if (data.includes('SpcReportSupervisor')) {

                    //Params
                    ShowReport('ParamReportId');
                    ShowReport('RegionId' + 'Parent');
                    ShowReport('CellId' + 'Parent');
                    ShowReport('StationNumberId' + 'Parent');
                    ShowReport('LaneNameId' + 'Parent');
                    ShowReport('ShiftId' + 'Parent');
                    ShowReport('DateId' + 'Parent');
                    ShowReport('SeverityId' + 'Parent');
                    ShowReport('EventId' + 'Parent');
                    ShowParent('EventTypeId');

                    ElementDropDownListSet('StationNumberId', '0');
                    ElementDropDownListSet('LaneNameId', '0');
                    ElementDropDownListSet('ShiftId', '0');
                    ElementDropDownListSet('SeverityId', '0');
                    ElementDropDownListSet('EventTypeId', '0');

                    ElementOnChangeSet('CellId', 'ParamStationsFromCellGet()');
                    ElementOnClickSet('CellId', 'ParamStationsFromCellGet()');
                    ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationCellGet()');

                    ParamCellsFromRegionSecXorGet();

                    //Actions
                    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcEventDisplay()');

                    RepoSpcEventDisplay();
                }
                else {
                    if (data.includes('ManagerSupervisor')) {

                        //Params
                        ShowReport('ParamReportId');
                        ShowReport('RegionId' + 'Parent');
                        HideReport('CellId' + 'Parent');
                        ShowReport('StationNumberId' + 'Parent');
                        HideReport('LaneNameId' + 'Parent');
                        ShowReport('ShiftId' + 'Parent');
                        ShowReport('DateId' + 'Parent');
                        ShowReport('SeverityId' + 'Parent');
                        ShowReport('EventId' + 'Parent');
                        ShowParent('EventTypeId');

                        ParamStationsFromRegionSecXorGet()

                        ElementDropDownListReset('LSId');
                        ElementDropDownListReset('LaneNameId');

                        //Actions
                        ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcEventDisplay()');

                        RepoSpcEventDisplay();
                    }
                    else {
                        if (data.includes('SpcReport')) {
                            //Get
                            if (RegionId != '0' &&
                                LSId != '0' &&
                                ShiftId != '0' &&
                                DateString != '') {

                                //Params
                                ShowReport('ParamReportId');
                                ShowReport('RegionId' + 'Parent');
                                ShowReport('CellId' + 'Parent');
                                ShowReport('ShiftId' + 'Parent');
                                ShowReport('DateId' + 'Parent');
                                ShowReport('StationNumberId' + 'Parent');
                                ShowReport('LaneNameId' + 'Parent');
                                ShowReport('SeverityId' + 'Parent');
                                ShowReport('EventId' + 'Parent');
                                ShowParent('EventTypeId');



                                //disable
                                ElementDisable('RegionId');
                                ElementDisable('CellId');
                                ElementDisable('ShiftId');
                                ElementDisable('DateId');

                                //Actions
                                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcEventDisplay()');
                                ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcEventAdd()');

                                ParamStationsFromCellGet();

                                RepoSpcEventDisplay();
                            }
                            else {
                                alert('Certains champs sont obligatoires');
                            };
                        }
                        else {
                            if (data.includes('Manager')) {
                                //Get
                                if (RegionId != '0' &&
                                    DateString != '') {

                                    //Params
                                    ShowReport('ParamReportId');
                                    ShowReport('RegionId' + 'Parent');
                                    ShowReport('CellId' + 'Parent');
                                    ShowReport('ShiftId' + 'Parent');
                                    ShowReport('DateId' + 'Parent');
                                    ShowReport('StationNumberId' + 'Parent');
                                    ShowReport('LaneNameId' + 'Parent');
                                    ShowReport('SeverityId' + 'Parent');
                                    ShowReport('EventId' + 'Parent');
                                    ShowParent('EventTypeId');

                                    ElementOnChangeSet('CellId', 'ParamStationsFromCellGet()');
                                    ElementOnClickSet('CellId', 'ParamStationsFromCellGet()');
                                    ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationCellGet()');

                                    ParamCellsFromRegionSecXorGet();

                                    //Actions
                                    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcEventDisplay()');
                                    ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcEventAdd()');

                                    RepoSpcEventDisplay();
                                }
                                else {
                                    alert('Certains champs sont obligatoires');
                                };
                            }
                        }
                    }
                }
            }
        }
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Evènement');
}

function RepoSpcEventDisplay() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdDisplayGet();
    var Icon = ParamActionIconDisplayGet();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');
    var SeverityId = GetElementDropDownListValue('SeverityId');
    var EventTypeId = GetElementDropDownListValue('EventTypeId');

    //Get
    if (DateString != '') {
        ParamMessageReset();
        RepoSpcEventGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString, StationNumber, LaneName, SeverityId, EventTypeId);
    }
    else {
        ParamMessageErrorDisplay('La date est obligatoire')
    }
}


//Get
function RepoSpcEventGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString, StationNumber, LaneName, SeverityId, EventTypeId) {
    //Spin
    ActionBtnMarginSpin(ActionBtnId);

    //Hide some reports
    RepoSpcAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    var Pattern = 'RepoSpcEvent';
    var PatternTable = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTable).DataTable().destroy();;
    $('#' + PatternTable).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/RepoSpc/RepoSpcEventGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                CellId: CellId,
                ShiftId: ShiftId,
                DateString: DateString,

                StationNumber: StationNumber,
                LaneName: LaneName,
                SeverityId: SeverityId,
                EventTypeId: EventTypeId
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "RegionNameShort" },//1
            { "data": "CellName" },//2
            { "data": "ShiftName" },//3

            { "data": "StationName" },//4
            { "data": "LaneName" },//5
            { "data": "SeverityName" },//6
            { "data": "EventTypeName" },//7
            { "data": "Event" },//8

            { "data": "DhmCreation" },//9 
            { "data": "FullName" },//10

            { "data": "RepoSpcEventId" },//11 Edit
            { "data": "RepoSpcEventId" },//12 Delete

            { "data": "Event" },//13
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-left", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },
            { "width": "3%", "className": "text-left", "targets": 7 },
            { "width": "3%", "className": "text-left", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-left", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-left none", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            { "targets": 4, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return data; } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return DataTableStringGet(data, 50); } },

            { "targets": 9, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data) } },
            { "targets": 10, "render": function (data, type, row) { return data; } },

            { "targets": 11, "render": function (data, type, row) { return DataTableModalFormBtnEditGet(Pattern, data); } },
            {
                "targets": 12, "render": function (data, type, row) {
                    var Id = row['RepoSpcEventId'];
                    var argument = row['RepoSpcEventId'];
                    var text = '';
                    var BtnClass = 'dt-btn-cl gc-bc1-cl';
                    var SpanClass = 'far fa-trash-alt btn-icon-cl gc-c1-cl';
                    var TextClass = 'dt-text-cl';

                    return DataTableButtonGet('RepoSpcEventDelete', Id, argument, text, BtnClass, SpanClass, TextClass);
                }
            },

            { "targets": 13, "render": function (data, type, row) { return data; } },
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Evènements-Affichage');
}


//Add
function RepoSpcEventAdd() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdAddGet();
    var Icon = ParamActionIconAddGet();
    var IsMargin = true;

    //Get input values
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');
    var SeverityId = GetElementDropDownListValue('SeverityId');
    var EventTypeId = GetElementDropDownListValue('EventTypeId');
    var Event = GetElementValue('EventId');

    if (StationNumber != '0' &&
        SeverityId != '0' &&
        EventTypeId != '0'
    ) {
        ParamMessageReset();
        RepoSpcEventInsert(ActionBtnId, Icon, IsMargin, CellId, ShiftId, DateString, StationNumber, LaneName, SeverityId, EventTypeId, Event);
    }
    else {
        ParamMessageErrorDisplay('Certains champs sont obligatoire')
    }
}



//Insert
function RepoSpcEventInsert(ActionBtnId, Icon, IsMargin, CellId, ShiftId, DateString, StationNumber, LaneName, SeverityId, EventTypeId, Event) {
    //Spin
    ActionSpin(ActionBtnId, IsMargin);

    //Insert
    var obj = {};
    obj.CellId = CellId;
    obj.ShiftId = ShiftId;
    obj.DateString = DateString;

    obj.StationNumber = StationNumber;
    obj.LaneName = LaneName;
    obj.SeverityId = SeverityId;
    obj.EventTypeId = EventTypeId;
    obj.Event = Event;

    $.ajax({
        url: "/RepoSpc/RepoSpcEventInsert",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            RepoSpcEventDisplay();
            ElementInputSet('EventId', '');
        }
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Evènement-Ajout');
}

function RepoSpcGapOpen() {

    //Hide all
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();
    //MenuBarNavHighlight(0, 1, 2);

    //Set title
    ParamTitleSet('Liste des écarts');

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur')) {
                MenuBarNavHighlight(0, 1, 2);

                ParamStationsFromCellGet();
                ParamCashiersFromCellGet();


                //Set pattern
                var Pattern = 'RepoSpcGap';



                //Set title
                ParamTitleSet('Liste des écarts');

                //Params
                ShowReport('ParamReportId');
                ShowReport('RegionId' + 'Parent');
                ShowReport('CellId' + 'Parent');
                ShowReport('ShiftId' + 'Parent');
                ShowReport('DateId' + 'Parent');
                ShowReport('StationNumberId' + 'Parent');
                ShowReport('CashierRowId' + 'Parent');
                ShowReport('CashierNumberKeyId' + 'Parent');
                ShowReport('CashierNameKeyId' + 'Parent');
                ShowReport('GapTypeId' + 'Parent');
                ShowReport('GapId' + 'Parent');
                ShowReport('GapCommentId' + 'Parent');

                //disable
                //ElementDisable('RegionId');
                //ElementDisable('LSId');
                //ElementDisable('ShiftId');
                //ElementDisable('DateId');

                //ShowReport('ParamActionContainerId');

                //Actions
                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcGapDisplay()');
                ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcGapAdd()');


                RepoSpcGapDisplay();
            }
            else {
                if (data.includes('SpcReportSupervisor')) {

                    //Params
                    ShowReport('ParamReportId');
                    ShowReport('RegionId' + 'Parent');
                    ShowReport('CellId' + 'Parent');
                    ShowReport('ShiftId' + 'Parent');
                    ShowReport('DateId' + 'Parent');
                    ShowReport('StationNumberId' + 'Parent');
                    ShowReport('CashierRowId' + 'Parent');
                    ShowReport('CashierNumberKeyId' + 'Parent');
                    ShowReport('CashierNameKeyId' + 'Parent');
                    ShowReport('GapTypeId' + 'Parent');
                    ShowReport('GapId' + 'Parent');
                    ShowReport('GapCommentId' + 'Parent');

                    ParamCellsFromRegionSecXorGet();

                    ElementOnChangeSet('CellId', 'ParamStationsFromCellGet()');
                    ElementOnClickSet('CellId', 'ParamCashiersFromCellGet()');



                    ElementDropDownListSet('StationNumberId', '0');
                    ElementDropDownListSet('LaneNameId', '0');
                    ElementDropDownListSet('ShiftId', '0');
                    ElementDropDownListSet('SeverityId', '0');
                    ElementDropDownListSet('EventTypeId', '0');

                    ElementDropDownListReset('CashierRowId');

                    ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationCellGet()');


                    //Actions
                    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcGapDisplay()');

                    RepoSpcGapDisplay();
                }
                else {
                    if (data.includes('SpcReport')) {
                        //Get
                        if (RegionId != '0' &&
                            LSId != '0' &&
                            ShiftId != '0' &&
                            DateString != '') {

                            MenuBarNavHighlight(0, 1, 2);


                            ParamStationsFromCellGet();
                            ParamCashiersFromCellGet();

                            //Set pattern
                            var Pattern = 'RepoSpcGap';



                            //Set title
                            ParamTitleSet('Liste des écarts');

                            //Params
                            ShowReport('ParamReportId');
                            ShowReport('RegionId' + 'Parent');
                            ShowReport('CellId' + 'Parent');
                            ShowReport('ShiftId' + 'Parent');
                            ShowReport('DateId' + 'Parent');
                            ShowReport('StationNumberId' + 'Parent');
                            ShowReport('CashierRowId' + 'Parent');
                            ShowReport('CashierNumberKeyId' + 'Parent');
                            ShowReport('CashierNameKeyId' + 'Parent');
                            ShowReport('GapTypeId' + 'Parent');
                            ShowReport('GapId' + 'Parent');
                            ShowReport('GapCommentId' + 'Parent');

                            //disable
                            ElementDisable('RegionId');
                            ElementDisable('CellId');
                            ElementDisable('ShiftId');
                            ElementDisable('DateId');

                            //ShowReport('ParamActionContainerId');

                            //Actions
                            ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcGapDisplay()');
                            ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcGapAdd()');


                            RepoSpcGapDisplay();
                        }
                        else {
                            alert('Tous les champs sont obligatoires');
                        };
                    }
                }
            }
        }
    });



    //Connection
    NotiConnectionIdUpdate('SPC-Ecarts');
}

//Display
function RepoSpcGapDisplay() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdDisplayGet();
    var Icon = ParamActionIconDisplayGet();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');


    var StationNumber = GetElementValue('StationNumberId');
    var CashierRowId = GetElementValue('CashierRowId');
    var GapTypeId = GetElementValue('GapTypeId');

    //Get
    RepoSpcGapGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString, StationNumber, CashierRowId, GapTypeId);
}


//Get
function RepoSpcGapGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString, StationNumber, CashierRowId, GapTypeId) {
    //Spin
    ActionBtnMarginSpin(ActionBtnId);

    //Hide some reports
    RepoSpcAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    var Pattern = 'RepoSpcGap';
    var PatternTable = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTable).DataTable().destroy();;
    $('#' + PatternTable).DataTable({
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/RepoSpc/RepoSpcGapGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                CellId: CellId,
                ShiftId: ShiftId,
                DateString: DateString,

                StationNumber: StationNumber,
                CashierRowId: CashierRowId,
                GapTypeId: GapTypeId
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "RegionNameShort" },//1
            { "data": "CellName" },//2
            { "data": "StationNumber" },//3       
            { "data": "ShiftName" },//4

            { "data": "StationName" },//5
            { "data": "CashierNumber" },//6
            { "data": "GapTypeName" },//7
            { "data": "Gap" },//8
            { "data": "GapComment" },//9

            { "data": "DhmCreation" },//10
            { "data": "CreatedBy" },//11
            { "data": "DhmModification" },//12
            { "data": "ModifiedBy" },//13
            { "data": "DhmValidation" },//14
            { "data": "ValidatedBy" },//15

            { "data": "SpcAffGapId" },//16 Edit
            { "data": "SpcAffGapId" },//17 Validate
            { "data": "SpcAffGapId" },//18 Delete
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center none", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center none", "targets": 14 },
            { "width": "3%", "className": "text-center", "targets": 15 },

            { "width": "3%", "className": "text-center", "targets": 16 },
            { "width": "3%", "className": "text-center", "targets": 17 },
            { "width": "3%", "className": "text-center", "targets": 18 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            { "targets": 5, "render": function (data, type, row) { return data; } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return data; } },
            { "targets": 9, "render": function (data, type, row) { return data; } },

            { "targets": 10, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 11, "render": function (data, type, row) { return data; } },
            { "targets": 12, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 13, "render": function (data, type, row) { return data; } },
            { "targets": 14, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 15, "render": function (data, type, row) { return data; } },

            { "targets": 16, "render": function (data, type, row) { return DataTableModalFormBtnEditGet(Pattern, data); } },
            { "targets": 17, "render": function (data, type, row) { return RepoSpcGapIsValidGet(data, row['IsValid']); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableBtnDeleteGet(Pattern, data); } },
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Ecarts-Affichage');
}

function RepoSpcGapIsValidGet(Id, IsValid) {
    var Id = Id;
    var onchange = 'RepoSpcGapIsValidGet(' + Id + ')';
    var Pattern = 'RepoSpcGapIsValidId';
    var data = IsValid;
    return DataTableCheckBoxGet(Pattern, Id, data, onchange);
}

//Add
function RepoSpcGapAdd() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdAddGet();
    var Icon = ParamActionIconAddGet();

    //Get input values
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    var StationNumber = GetElementValue('StationNumberId');
    var CashierRowId = GetElementValue('CashierRowId');
    var GapTypeId = GetElementValue('GapTypeId');
    var Gap = GetElementValue('GapId');
    var GapComment = GetElementValue('GapCommentId');

    if (StationNumber != '0' && CashierRowId != '0' && GapTypeId != '0') {
        ParamMessageReset();
        RepoSpcGapInsert(ActionBtnId, Icon, CellId, ShiftId, DateString, StationNumber, CashierRowId, GapTypeId, Gap, GapComment);
    }
    else {
        ParamMessageErrorDisplay('Les champs gare, caissier, type écart, écart sont obligatoires')
    }
}


//Insert
function RepoSpcGapInsert(ActionBtnId, Icon, CellId, ShiftId, DateString, StationNumber, CashierRowId, GapTypeId, Gap, GapComment) {
    //Spin
    ActionBtnSpin(ActionBtnId);

    //Insert
    var obj = {};
    obj.CellId = CellId;
    obj.ShiftId = ShiftId;
    obj.DateString = DateString;

    obj.StationNumber = StationNumber;
    obj.CashierRowId = CashierRowId;
    obj.GapTypeId = GapTypeId;
    obj.Gap = Gap;
    obj.GapComment = GapComment;

    $.ajax({
        url: "/RepoSpc/RepoSpcGapInsert",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnIconSet(ActionBtnId, Icon);
            RepoSpcGapDisplay();
            ElementInputSet('GapCommentId', '');
        }
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Ecarts-Ajout');
}



//Break

//Open
function RepoSpcBreakOpen() {

    //Hide all
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();



    //Set title
    ParamTitleSet('Liste des pannes');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur')) {

                //Params
                ShowReport('ParamReportId');
                ShowReport('RegionId' + 'Parent');
                ShowReport('CellId' + 'Parent');
                ShowReport('ShiftId' + 'Parent');
                ShowReport('DateId' + 'Parent');

                ShowReport('StationNumberId' + 'Parent');
                ShowReport('LaneNameId' + 'Parent');
                ShowReport('ItemId' + 'Parent');
                ShowReport('SeverityId' + 'Parent');
                ShowReport('BreakId' + 'Parent');
                ShowReport('BreakDescriptionId' + 'Parent');

                //Actions
                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcBreakDisplay()');
                ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcBreakAdd()');

                RepoSpcBreakDisplay();
            }
            else {
                if (data.includes('SpcReportSupervisor')) {

                    //Params
                    ShowReport('ParamReportId');
                    ShowReport('RegionId' + 'Parent');
                    ShowReport('CellId' + 'Parent');
                    ShowReport('ShiftId' + 'Parent');
                    ShowReport('DateId' + 'Parent');

                    ShowReport('StationNumberId' + 'Parent');
                    ShowReport('LaneNameId' + 'Parent');
                    ShowReport('ItemId' + 'Parent');
                    ShowReport('SeverityId' + 'Parent');
                    ShowReport('BreakId' + 'Parent');
                    ShowReport('BreakDescriptionId' + 'Parent');

                    ElementDropDownListSet('StationNumberId', '0');
                    ElementDropDownListSet('LaneNameId', '0');
                    ElementDropDownListSet('ShiftId', '0');
                    ElementDropDownListSet('ItemId', '0');
                    ElementDropDownListSet('SeverityId', '0');
                    ElementDropDownListSet('BreakId', '0');

                    ElementInputSet('BreakDescriptionId', '');

                    ElementOnClickSet('CellId', 'ParamStationsFromCellGet()');
                    ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationCellGet()');

                    ParamCellsFromRegionSecXorGet();

                    //Actions
                    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcBreakDisplay()');

                    RepoSpcBreakDisplay();
                }
                else {
                    if (data.includes('ManagerSupervisor')) {

                        //Params
                        ShowReport('ParamReportId');
                        ShowReport('RegionId' + 'Parent');
                        HideReport('CellId' + 'Parent');
                        ShowReport('ShiftId' + 'Parent');
                        ShowReport('DateId' + 'Parent');

                        ShowReport('StationNumberId' + 'Parent');
                        HideReport('LaneNameId' + 'Parent');
                        ShowReport('ItemId' + 'Parent');
                        ShowReport('SeverityId' + 'Parent');
                        ShowReport('BreakId' + 'Parent');
                        ShowReport('BreakDescriptionId' + 'Parent');


                        ParamStationsFromRegionSecGet();
                        ElementDropDownListReset('CellId');
                        ElementDropDownListReset('LaneNameId');

                        //Actions
                        ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcBreakDisplay()');
                        ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcBreakAdd()');

                        RepoSpcBreakDisplay();
                    }
                    else {
                        if (data.includes('Manager')) {

                            //Params
                            ShowReport('ParamReportId');
                            ShowReport('RegionId' + 'Parent');
                            ShowReport('CellId' + 'Parent');
                            ShowReport('ShiftId' + 'Parent');
                            ShowReport('DateId' + 'Parent');

                            ShowReport('StationNumberId' + 'Parent');
                            ShowReport('LaneNameId' + 'Parent');
                            ShowReport('ItemId' + 'Parent');
                            ShowReport('SeverityId' + 'Parent');
                            ShowReport('BreakId' + 'Parent');
                            ShowReport('BreakDescriptionId' + 'Parent');

                            ElementOnChangeSet('CellId', 'ParamStationsFromCellGet()');
                            ElementOnClickSet('CellId', 'ParamStationsFromCellGet()');
                            ElementOnChangeSet('StationNumberId', 'ParamLanesFromStationLSGet()');

                            ParamCellsFromRegionSecXorGet();

                            //Actions
                            ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcBreakDisplay()');
                            ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcBreakAdd()');

                            RepoSpcBreakDisplay();
                        }
                        else {
                            if (data.includes('SpcReport')) {

                                //Get input values
                                var RegionId = GetElementValue('RegionId');
                                var CellId = GetElementValue('CellId');
                                var ShiftId = GetElementValue('ShiftId');
                                var DateString = GetDateStringFromDatePicker('DateId');

                                //Get
                                if (RegionId != '0' &&
                                    CellId != '0' &&
                                    ShiftId != '0' &&
                                    DateString != '') {


                                    //Params
                                    ShowReport('ParamReportId');
                                    ShowReport('RegionId' + 'Parent');
                                    ShowReport('CellId' + 'Parent');
                                    ShowReport('ShiftId' + 'Parent');
                                    ShowReport('DateId' + 'Parent');

                                    ShowReport('StationNumberId' + 'Parent');
                                    ShowReport('LaneNameId' + 'Parent');
                                    ShowReport('ItemId' + 'Parent');
                                    ShowReport('SeverityId' + 'Parent');
                                    ShowReport('BreakId' + 'Parent');
                                    ShowReport('BreakDescriptionId' + 'Parent');

                                    //disable
                                    ElementDisable('RegionId');
                                    ElementDisable('CellId');
                                    ElementDisable('ShiftId');
                                    ElementDisable('DateId');

                                    ParamStationsFromCellGet();

                                    //Actions
                                    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcBreakDisplay()');
                                    ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcBreakAdd()');

                                    RepoSpcBreakDisplay();
                                }
                                else {
                                    alert('Certains champs sont obligatoires');
                                };
                            }
                        }
                    }
                }
            }
        }
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Pannes');
}

//Display
function RepoSpcBreakDisplay() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdDisplayGet();
    var Icon = ParamActionIconDisplayGet();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');


    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');
    var ItemId = GetElementValue('ItemId');
    var SeverityId = GetElementValue('SeverityId');
    var BreakId = GetElementValue('BreakId');

    //Get   

    if (DateString != '') {
        ParamMessageReset();
        RepoSpcBreakGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString, StationNumber, LaneName, ItemId, SeverityId, BreakId);
    }
    else {
        ParamMessageErrorDisplay('La date est obligatoire')
    }
}

function RepoSpcBreakGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString, StationNumber, LaneName, ItemId, SeverityId, BreakId) {
    //Spin
    ActionBtnMarginSpin(ActionBtnId);

    //Hide some reports
    RepoSpcAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    var Pattern = 'RepoSpcBreak';
    var PatternTable = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTable).DataTable().destroy();;
    $('#' + PatternTable).DataTable({
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/RepoSpc/RepoSpcBreakGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                CellId: CellId,
                ShiftId: ShiftId,
                DateString: DateString,

                StationNumber: StationNumber,
                LaneName: LaneName,
                ItemId: ItemId,
                SeverityId: SeverityId,
                BreakId: BreakId
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "RegionNameShort" },//1
            { "data": "CellName" },//2
            { "data": "StationName" },//3
            { "data": "LaneName" },//4 LaneName

            { "data": "ShiftName" },//5
            { "data": "LaneName" },//6
            { "data": "ItemName" },//7
            { "data": "SeverityName" },//8
            { "data": "BreakName" },//9
            { "data": "BreakDescription" },//10
            { "data": "DhmCreation" },//11
            { "data": "FullName" },//12

            { "data": "SpcAffBreakId" },//13 Edit
            { "data": "SpcAffBreakId" },//14 Delete

            { "data": "BreakDescription" },//15
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },

            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center none", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-left", "targets": 10 },
            { "width": "3%", "className": "text-left", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "width": "3%", "className": "text-left none", "targets": 15 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },
            { "targets": 4, "render": function (data, type, row) { return data; } },

            { "targets": 5, "render": function (data, type, row) { return data; } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return data; } },
            { "targets": 9, "render": function (data, type, row) { return data; } },
            { "targets": 10, "render": function (data, type, row) { return DataTableStringGet(data, 50); } },
            { "targets": 11, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data) } },
            { "targets": 12, "render": function (data, type, row) { return data; } },

            { "targets": 13, "render": function (data, type, row) { return DataTableModalFormBtnEditGet(Pattern, data); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableBtnDeleteGet(Pattern, data); } },

            { "targets": 15, "render": function (data, type, row) { return data; } },
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Pannes-Affichage');
}


//Add
function RepoSpcBreakAdd() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdAddGet();
    var Icon = ParamActionIconAddGet();

    //Get input values
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = GetElementValue('LaneNameId');
    var ItemId = GetElementValue('ItemId');
    var SeverityId = GetElementValue('SeverityId');
    var BreakId = GetElementValue('BreakId');
    var BreakDescription = GetElementValue('BreakDescriptionId');

    if (StationNumber != '0' && ItemId != '0' && SeverityId != '0' && BreakId != '0') {
        ParamMessageReset();
        RepoSpcBreakInsert(ActionBtnId, Icon, CellId, ShiftId, DateString, StationNumber, LaneName, BreakId, SeverityId, BreakDescription);
    }
    else {
        ParamMessageErrorDisplay('Les champs date, poste, gare, gravité, panne sont obligatoires')
    }
}


//Insert
function RepoSpcBreakInsert(ActionBtnId, Icon, CellId, ShiftId, DateString, StationNumber, LaneName, BreakId, SeverityId, BreakDescription) {
    //Spin
    ActionBtnSpin(ActionBtnId);

    //Insert
    var obj = {};
    obj.CellId = CellId;
    obj.ShiftId = ShiftId;
    obj.DateString = DateString;

    obj.StationNumber = StationNumber;
    obj.LaneName = LaneName;
    obj.BreakId = BreakId;
    obj.SeverityId = SeverityId;
    obj.BreakDescription = BreakDescription;

    $.ajax({
        url: "/RepoSpc/RepoSpcBreakInsert",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnIconSet(ActionBtnId, Icon);
            RepoSpcBreakDisplay();
            ElementInputSet('BreakDescriptionId', '');
        }
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Pannes-Ajout');
}

//Delete

function RepoSpcEventDelete(RepoSpcEventId) {
    var ActionBtnId = 'RepoSpcEventDeleteBtnId' + RepoSpcEventId;
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Icon = 'fas fa-minus-circle btn-icon-cl gc-c1-cl';
    var obj = {};
    obj.RepoSpcEventId = RepoSpcEventId;
    $.ajax({
        url: "/RepoSpc/RepoSpcEventDelete",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    });
}

//Note
//Open
function RepoSpcNoteOpen() {

    //Hide all
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();
    MenuBarNavHighlight(0, 2, 2);

    //Set title
    ParamTitleSet('Liste des consignes');

    //Get input values
    //var RegionId = GetElementValue('RegionId');
    //var LSId = GetElementValue('LSId');
    //var ShiftId = GetElementValue('ShiftId');
    //var DateString = GetDateStringFromDatePicker('DateId');

    //Params
    ShowReport('ParamReportId');

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur')) {
                ShowReport('RegionId' + 'Parent');
                ShowReport('CellId' + 'Parent');
                ShowReport('DateId' + 'Parent');
                ShowReport('ShiftId' + 'Parent');
                ShowReport('NoteTypeId' + 'Parent');
                ShowReport('NoteId' + 'Parent');
                ShowReport('IsSharedId' + 'Parent');
                ShowParent('NoteDurationId');

                //disable
                ElementEnable('RegionId');
                ElementEnable('CellId');
                ElementEnable('ShiftId');
                ElementEnable('DateId');

                //Actions
                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcNoteDisplay()');
                ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcNoteAdd()');

                RepoSpcNoteDisplay();
            }
            else {
                if (data.includes('ManagerSupervisor')) {

                    ElementDropDownListReset('RegionId');
                    ElementDropDownListReset('CellId');
                    ElementDropDownListReset('ShiftId');
                    ElementDropDownListReset('NoteTypeId');

                    ShowReport('RegionId' + 'Parent');
                    ShowReport('DateId' + 'Parent');
                    ShowReport('ShiftId' + 'Parent');
                    ShowReport('NoteTypeId' + 'Parent');
                    ShowReport('NoteId' + 'Parent');
                    ShowReport('IsSharedId' + 'Parent');
                    ShowParent('NoteDurationId');

                    //Actions
                    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoManagerNoteDisplay()');
                    ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoManagerNoteAdd()');

                    RepoSpcNoteDisplay();
                }
                else {
                    if (data.includes('SpcReportSupervisor')) {
                        ShowReport('RegionId' + 'Parent');
                        ShowReport('CellId' + 'Parent');
                        ShowReport('DateId' + 'Parent');
                        ShowReport('ShiftId' + 'Parent');
                        ShowReport('NoteTypeId' + 'Parent');
                        ShowReport('NoteId' + 'Parent');
                        ShowReport('IsSharedId' + 'Parent');
                        ShowParent('NoteDurationId');

                        ElementInputSet('NoteId', '');

                        ParamCellsFromRegionSecXorGet();

                        //Actions
                        ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcNoteDisplay()');

                        RepoSpcNoteDisplay();
                    }
                    else {
                        if (data.includes('SpcReport')) {
                            //Get
                            ShowReport('RegionId' + 'Parent');
                            ShowReport('CellId' + 'Parent');
                            ShowReport('DateId' + 'Parent');
                            ShowReport('ShiftId' + 'Parent');
                            ShowReport('NoteTypeId' + 'Parent');
                            ShowReport('NoteId' + 'Parent');
                            ShowReport('IsSharedId' + 'Parent');
                            ShowParent('NoteDurationId');

                            //disable
                            ElementDisable('RegionId');
                            ElementDisable('CellId');
                            ElementEnable('ShiftId');
                            ElementEnable('DateId');

                            //Actions
                            ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcNoteDisplay()');
                            ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcNoteAdd()');

                            RepoSpcNoteDisplay();
                        }
                        else {
                            if (data.includes('Manager')) {
                                ShowReport('RegionId' + 'Parent');
                                ShowReport('DateId' + 'Parent');
                                ShowReport('ShiftId' + 'Parent');
                                ShowReport('NoteTypeId' + 'Parent');
                                ShowReport('NoteId' + 'Parent');
                                ShowReport('IsSharedId' + 'Parent');
                                ShowParent('NoteDurationId');

                                ElementDropDownListSet('CellId', '0');
                                //disable
                                ElementDisable('RegionId');

                                //Actions
                                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoManagerNoteDisplay()');
                                ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoManagerNoteAdd()');

                                RepoSpcNoteDisplay();
                            }
                        }
                    }
                }
            }
        }
    });


    //Connection
    NotiConnectionIdUpdate('Supervision-Consignes');
}

function RepoSpcNoteDisplay() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdDisplayGet();
    var Icon = ParamActionIconDisplayGet();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var CellId = GetElementValue('CellId');
    var DateString = GetDateStringFromDatePicker('DateId');
    var ShiftId = GetElementValue('ShiftId');

    var NoteTypeId = GetElementValue('NoteTypeId');
    var IsShared = ElementBooleanGet('IsSharedId');

    ShowReport('NoteTypeId' + 'Parent');
    ShowReport('NoteId' + 'Parent');
    ShowReport('IsSharedId' + 'Parent');

    //Get
    RepoSpcNoteGet(ActionBtnId, Icon, RegionId, CellId, DateString, ShiftId, NoteTypeId, IsShared);
}


//Get
function RepoSpcNoteGet(ActionBtnId, Icon, RegionId, CellId, DateString, ShiftId, NoteTypeId, IsShared) {
    //Spin
    ActionBtnMarginSpin(ActionBtnId);

    //Hide some reports
    RepoSpcAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    var Pattern = 'RepoSpcNote';
    var PatternTable = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTable).DataTable().destroy();;
    $('#' + PatternTable).DataTable({
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/RepoSpc/RepoSpcNoteGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                CellId: CellId,
                DateString: DateString,
                ShiftId: ShiftId,
                NoteTypeId: NoteTypeId,
                IsShared: IsShared
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "RegionNameShort" },//1
            { "data": "CellName" },//2
            { "data": "ShiftName" },//3

            { "data": "NoteTypeName" },//4
            { "data": "SpcNoteId" },//5
            { "data": "Note" },//6
            { "data": "NoteDuration" },//7

            { "data": "SpcNoteId" },//8 Edit
            { "data": "SpcNoteId" },//9 Notifier
            { "data": "SpcNoteId" },//10 Delete

            { "data": "Note" },//11
            { "data": "DhmCreation" },//12
            { "data": "FullName" },//13
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-left", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },
            { "width": "3%", "className": "text-left", "targets": 7 },

            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-left none", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            { "targets": 4, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return DataTableCheckBoxGet(Pattern, data, row['IsShared'], ''); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableStringGet(data, 50); } },
            { "targets": 7, "render": function (data, type, row) { return data; } },

            { "targets": 8, "render": function (data, type, row) { return DataTableModalFormBtnEditGet(Pattern, data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableModalFormBtnEditGet(Pattern, data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableBtnDeleteGet(Pattern, data); } },

            { "targets": 11, "render": function (data, type, row) { return data; } },
            { "targets": 12, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 13, "render": function (data, type, row) { return data; } },
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Consignes-Affichage');
}


function RepoManagerNoteDisplay() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdDisplayGet();
    var Icon = ParamActionIconDisplayGet();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var DateString = GetDateStringFromDatePicker('DateId');
    var ShiftId = GetElementValue('ShiftId');
    var NoteTypeId = GetElementValue('NoteTypeId');
    var IsShared = ElementBooleanGet('IsSharedId');

    ShowReport('NoteTypeId' + 'Parent');
    ShowReport('NoteId' + 'Parent');
    ShowReport('IsSharedId' + 'Parent');

    //Get
    RepoManagerNoteGet(ActionBtnId, Icon, RegionId, DateString, ShiftId, NoteTypeId, IsShared);
}


function RepoManagerNoteGet(ActionBtnId, Icon, RegionId, DateString, ShiftId, NoteTypeId, IsShared) {
    //Spin
    ActionBtnMarginSpin(ActionBtnId);

    //Hide some reports
    RepoSpcAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    var Pattern = 'RepoSpcNote';
    var PatternTable = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTable).DataTable().destroy();;
    $('#' + PatternTable).DataTable({
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/RepoSpc/RepoManagerNoteGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                DateString: DateString,
                ShiftId: ShiftId,
                NoteTypeId: NoteTypeId,
                IsShared: IsShared
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "RegionNameShort" },//1
            { "data": "LSName" },//2
            { "data": "ShiftName" },//3

            { "data": "NoteTypeName" },//4
            { "data": "SpcNoteId" },//5
            { "data": "Note" },//6

            { "data": "SpcNoteId" },//7 Edit
            { "data": "SpcNoteId" },//8 Notifier
            { "data": "SpcNoteId" },//9 Delete

            { "data": "Note" },//10
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-left", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-left", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-left none", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return data; } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            { "targets": 4, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return DataTableCheckBoxGet(Pattern, data, row['IsShared'], ''); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableStringGet(data, 50); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableModalFormBtnEditGet(Pattern, data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableModalFormBtnEditGet(Pattern, data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableBtnDeleteGet(Pattern, data); } },

            { "targets": 10, "render": function (data, type, row) { return data; } },
        ],
        "iDisplayLength": 100,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Consignes-Affichage');
}

function RepoSpcNoteAdd() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdAddGet();
    var Icon = ParamActionIconAddGet();

    //Get input values
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    var NoteTypeId = GetElementValue('NoteTypeId');
    var IsShared = ElementBooleanGet('IsSharedId');
    var Note = GetElementValue('NoteId');
    var NoteDuration = GetElementValue('NoteDurationId');

    if (NoteTypeId != '0' && Note != '' && NoteDuration != '') {
        ParamMessageReset();
        RepoSpcNoteInsert(ActionBtnId, Icon, CellId, ShiftId, DateString, NoteTypeId, IsShared, NoteDuration, Note);
    }
    else {
        ParamMessageErrorDisplay('Les champs type, consigne et durée consigne sont obligatoires')
    }
}


function RepoManagerNoteAdd() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdAddGet();
    var Icon = ParamActionIconAddGet();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');

    var NoteTypeId = GetElementValue('NoteTypeId');
    var IsShared = ElementBooleanGet('IsSharedId');
    var Note = GetElementValue('NoteId');

    if (NoteTypeId != '0' && Note != '') {
        ParamMessageReset();
        RepoManagerNoteInsert(ActionBtnId, Icon, RegionId, ShiftId, DateString, NoteTypeId, IsShared, Note);
    }
    else {
        ParamMessageErrorDisplay('Les champs type, note sont obligatoires')
    }
}

function RepoSpcNoteInsert(ActionBtnId, Icon, CellId, ShiftId, DateString, NoteTypeId, IsShared, NoteDuration, Note) {
    //Spin
    ActionBtnSpin(ActionBtnId);

    //Insert
    var obj = {};
    obj.CellId = CellId;
    obj.ShiftId = ShiftId;
    obj.DateString = DateString;

    obj.NoteTypeId = NoteTypeId;
    obj.IsShared = IsShared;
    obj.NoteDuration = NoteDuration;
    obj.Note = Note;

    $.ajax({
        url: "/RepoSpc/RepoSpcNoteInsert",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnIconSet(ActionBtnId, Icon);
            RepoSpcNoteDisplay();
            ElementInputSet('NoteId', '');
        }
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Consignes-Ajout');
}


function RepoManagerNoteInsert(ActionBtnId, Icon, RegionId, ShiftId, DateString, NoteTypeId, IsShared, Note) {
    //Spin
    ActionBtnSpin(ActionBtnId);

    //Insert
    var obj = {};
    obj.RegionId = RegionId;
    obj.ShiftId = ShiftId;
    obj.DateString = DateString;

    obj.NoteTypeId = NoteTypeId;
    obj.IsShared = IsShared;
    obj.Note = Note;

    $.ajax({
        url: "/RepoSpc/RepoManagerNoteInsert",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnIconSet(ActionBtnId, Icon);
            RepoManagerNoteDisplay();
            ElementInputSet('NoteId', '');
        }
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Consignes-Ajout');
}


function RepoSpcAllReportsHide() {
    HideReport('HomeReportId');
    HideReport('ParamReportId');

    HideReport('RepoManagerReport' + 'TableReportId');
    HideReport('RepoSpcReport' + 'TableReportId');
    HideReport('RepoSpcAff' + 'TableReportId');
    HideReport('RepoSpcEvent' + 'TableReportId');
    HideReport('RepoSpcGap' + 'TableReportId');
    HideReport('RepoSpcBreak' + 'TableReportId');
    HideReport('RepoSpcNote' + 'TableReportId');
    HideReport('RepoSpcPerf' + 'TableReportId');
    HideReport('CertFilePlan' + 'TableReportId');
}

function RepoSpcAllParametersHide() {

    HideReport('RegionId' + 'Parent');
    HideReport('LSId' + 'Parent');
    HideReport('CellId' + 'Parent');

    HideReport('DateId' + 'Parent');
    HideReport('ShiftId' + 'Parent');

    HideReport('DateStartId' + 'Parent');
    HideReport('DateEndId' + 'Parent');

    HideReport('IsValidId' + 'Parent');

    HideReport('RoleId' + 'Parent');
    HideReport('CashierRowId' + 'Parent');
    HideReport('StationNumberId' + 'Parent');
    HideReport('LaneNameId' + 'Parent');
    HideReport('EventId' + 'Parent');

    HideReport('GapTypeId' + 'Parent');
    HideReport('GapId' + 'Parent');
    HideReport('GapCommentId' + 'Parent');

    HideReport('ItemId' + 'Parent');
    HideReport('SeverityId' + 'Parent');
    HideReport('BreakId' + 'Parent');
    HideReport('BreakDescriptionId' + 'Parent');

    HideReport('NoteTypeId' + 'Parent');
    HideReport('IsSharedId' + 'Parent');
    HideReport('NoteId' + 'Parent');
    HideReport('CashierNumberKeyId' + 'Parent');
    HideReport('CashierNameKeyId' + 'Parent');

    HideParent('EventTypeId');
    HideParent('NoteDurationId');

    HideReport('ParamActionContainerId0');
    HideReport('ParamActionContainerId1');
    HideReport('ParamActionContainerId2');
}



function RepoSpcHomeOpen() {
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();
    MenuBarNavHighlight(0, 5, 3);

    //Set OnChange
    ElementOnChangeSet('StationNumberId', "ParamLanesAllFromStationCellGet()");
    ElementOnChangeSet('ItemId', 'ParamBreaksGet()');
    ElementOnChangeSet('CashierNumberKeyId', 'ParamCashiersFromCellGet()');
    ElementOnChangeSet('CashierNameKeyId', 'ParamCashiersFromCellGet()');

    //set drop down list    
    HtmlDropDownListNameOnlyFill('RoleId', '0', '/Param/ParamRolesGet', 'RoleId', 'RoleName');
    HtmlDropDownListNameOnlyFill('GapTypeId', '0', '/Param/ParamGapTypesGet', 'GapTypeId', 'GapTypeName');
    HtmlDropDownListNameOnlyFill('ItemId', '0', '/Param/ParamItemsGet', 'ItemId', 'ItemName');
    HtmlDropDownListNameOnlyFill('SeverityId', '0', '/Param/ParamSeveritiesGet', 'SeverityId', 'SeverityName');
    HtmlDropDownListNameOnlyFill('NoteTypeId', '0', '/Param/ParamNoteTypesGet', 'NoteTypeId', 'NoteTypeName');
    HtmlDropDownListNameOnlyFill('EventTypeId', '0', '/Param/ParamEventTypesGet', 'EventTypeId', 'EventTypeName');

    ParamShiftsGet();

    //Reste
    ElementDropDownListReset('CellId');
    ParamResetDropDownList('StationNumberId');
    ParamResetDropDownList('LaneNameId');
    ElementDropDownListReset('BreakId');
    DateValueDefaultSet('DateId', 0);
    ElementValueSet('NoteDurationId', 7);

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur')) {
                HtmlDropDownListNameOnlyWithInputFill('RegionId', '', '/Param/ParamRegionsSecGet', 'RegionId', 'RegionNameShort', 'CertRegions');
                ElementOnChangeSet('RegionId', 'ParamCellsFromRegionSecGet()');
                ElementOnChangeSet('CellId', 'ParamStationsFromCellGet()');
                ParamCellsFromRegionSecGet();
                ParamStationsFromCellGet();
            }
            else {
                if (data.includes('ManagerSupervisor')) {
                    //ElementDropDownListReset('RegionId');
                    HtmlDropDownListNameOnlyXorFill('RegionId', '', '/Param/ParamRegionsSecGet', 'RegionId', 'RegionNameShort');
                    ElementOnChangeSet('RegionId', 'ParamStationsFromRegionSecGet()');
                    ParamCellsFromRegionSecGet();
                    ParamStationsFromCellGet();
                }
                else {
                    if (data.includes('SpcReportSupervisor')) {
                        HtmlDropDownListNameOnlyXorFill('RegionId', '', '/Param/ParamRegionsSecGet', 'RegionId', 'RegionNameShort');
                        ElementOnChangeSet('RegionId', 'ParamCellsFromRegionSecXorGet()');
                    }
                    else {
                        if (data.includes('SpcReport')) {
                            HtmlDropDownListNameOnlyXorFill('RegionId', '', '/Param/ParamRegionsSecGet', 'RegionId', 'RegionNameShort', 'CertRegions');
                            ElementOnChangeSet('RegionId', 'ParamCellsFromRegionSecXorGet()');
                            ParamCellsFromRegionSecXorGet();
                            ParamStationsFromCellGet();
                        }
                        else {
                            if (data.includes('Manager')) {
                                HtmlDropDownListNameOnlyXorFill('RegionId', '', '/Param/ParamRegionsSecGet', 'RegionId', 'RegionNameShort', 'CertRegions');
                                ElementOnChangeSet('RegionId', 'ParamStationsFromRegionSecXorGet()');
                                ParamCellsFromRegionSecXorGet();
                                ParamStationsFromCellGet();
                            }
                        }
                    }
                }
            }
        }
    });

    //Connection
    NotiConnectionIdUpdate('SPC-Accueil');
}

function RepoSpcAffectHomeOpen() {
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();
    MenuBarNavHighlight(1, 3, 2);

    //Connection
    NotiConnectionIdUpdate('SPC-Affectation');
}



function RepoSpcEditOpen() {
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();
    MenuBarNavHighlight(0, 1, 1);

    //Title
    $('#ParamTitleId').text("Mise à jour du Compte-rendu SPC");

    //Params
    ShowReport('ParamReportId');
    ShowReport('LSId' + 'Parent');
    ShowReport('ShiftId' + 'Parent');
    ShowReport('DateId' + 'Parent');

    ShowReport('ParamActionContainerId');

    //Actions
    ParamActionBtnGet(0, 'Affcher', 'fas fa-eye', 'RepoSpcEditDisplay()');
    ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcEditAdd()');
}













function RepoSpcFormAllReportsHide() {
    //HideReport('ParamReportId');

    //HideReport('RepoSpc' + 'TableReportId');
    //HideReport('RepoSpcEdit' + 'TableReportId');
}

function RepoSpcFormAllParametersHide() {

    //HideReport('RegionId' + 'Parent');
    //HideReport('LSId' + 'Parent');

    //HideReport('DateId' + 'Parent');
    //HideReport('ShiftId' + 'Parent');

    //HideReport('DateStartId' + 'Parent');
    //HideReport('DateEndId' + 'Parent');

    //HideReport('IsValidId' + 'Parent');

    //HideReport('ParamActionContainerId');
    //HideReport('ParamActionContainerId1');
    //HideReport('ParamActionContainerId2');
}




function RepoSpcPerfOpen() {
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();
    MenuBarNavHighlight(0, 1, 1);

    ParamTitleSet('Performance');
    ShowReport('ParamReportId');

    //Actions
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcPerfDisplay()');
    RepoSpcPerfDisplay();

    //Connection
    NotiConnectionIdUpdate('Reporting SPC - Performance');
}

//Display
function RepoSpcPerfDisplay() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdDisplayGet();
    var Icon = ParamActionIconDisplayGet();
    var IsMargin = true;
    //
    RepoSpcAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();
    RepoSpcPerfGet(ActionBtnId, Icon, IsMargin);
}

function RepoSpcPerfGet(ActionBtnId, Icon, IsMargin) {

    //Spin
    ActionSpin(ActionBtnId, IsMargin);

    var PatternTable = 'RepoSpcPerf';
    var PatternTableId = PatternTable + 'TableId'
    var PatternTableReportId = PatternTable + 'TableReportId';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'excel'
        ],
        "initComplete": function (settings, json) {
            ActionBtnIconSet(ActionBtnId, Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/RepoSpc/RepoSpcPerfGet",
            "type": "GET",
            "datatype": "json"
            //"data": {
            //    DateStringStart: DateStringStart,
            //    DateStringEnd: DateStringEnd
            //}
        },
        "columns": [
            { "data": "CreatedBy" },//0
            { "data": "FullName" },//1

            { "data": "AffCount" },//2
            { "data": "EventCount" },//3
            { "data": "GapCount" },//4
            { "data": "BreakCount" },//5
            { "data": "NoteCount" },//6

            { "data": "CreatedBy" },//7
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "width": "3%", "className": "text-center", "targets": 7 },

            { "targets": 0, "render": function (data, type, row) { return '<img class="dt-img-cl" src="/Images/Profil/' + data + '.jpg" />'; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },

            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntNullAlertGet(data); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableButtonGet('RepoSpcPerfSearch', data, '\'' + data + '\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-eye btn-icon-cl gc-c1-cl', '') } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 31,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };


            //Total0 = api.column(1).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(1).footer()).html(numShortFormat(Total0));

            //Total1 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numShortFormat(Total2));
        }
    });
}


//Open
function RepoSpcReportOpen() {
    //Set pattern
    var Pattern = 'RepoSpcReport';

    //Hide all
    RepoSpcAllReportsHide();
    RepoSpcAllParametersHide();
    MenuBarNavHighlight(0, 0, 1);

    //Set title
    ParamTitleSet('Liste des Compte-rendu');

    //Params
    ShowReport('ParamReportId');
    ShowReport('RegionId' + 'Parent');

    ShowReport('ShiftId' + 'Parent');
    ShowReport('DateId' + 'Parent');
    ShowReport('IsValidId' + 'Parent');

    //disable
    ElementEnable('RegionId');
    ElementEnable('ShiftId');
    ElementEnable('DateId');

    //ShowReport('ParamActionContainerId');
    //
    //DropDownListSet('ShiftId', '01')
    DateValueDefaultSet('DateId', 0);

    //Get Shift
    const d = new Date();
    let hour = d.getHours();

    if (hour >= 0 && hour < 6) {
        DropDownListSet('ShiftId', '03');
    }
    else {
        if (hour >= 6 && hour < 14) {
            DropDownListSet('ShiftId', '01');
        }
        else {
            if (hour >= 14 && hour < 22) {
                DropDownListSet('ShiftId', '02');
            }
            else {
                if (hour >= 22 && hour <= 23) {
                    DropDownListSet('ShiftId', '03');
                }
            }
        }
    }

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur')) {
                ShowParent('CellId');
                ElementEnable('CellId');
                ParamCellsFromRegionSecGet();
                //Actions
                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcReportDisplay()');
                ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcReportAdd()');
            }
            else {
                if (data.includes('SpcReportSupervisor')) {
                    ShowParent('CellId');
                    ElementEnable('CellId');
                    ParamCellsFromRegionSecXorGet();
                    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcReportDisplay()');
                }
                else {
                    if (data.includes('SpcReport')) {
                        ShowParent('CellId');
                        ElementEnable('CellId');
                        ParamCellsFromRegionSecXorGet();
                        ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoSpcReportDisplay()');
                        ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoSpcReportAdd()');
                    }
                    else {
                        if (data.includes('ManagerSupervisor')) {
                            ParamCellsFromRegionSecXorGet();
                            ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoManagerReportDisplay()');
                        }
                        else {
                            if (data.includes('Manager')) {
                                ParamCellsFromRegionSecXorGet();
                                ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', 'RepoManagerReportDisplay()');
                                ParamActionBtnGet(1, 'Ajouter', 'fas fa-plus-circle', 'RepoManagerReportAdd()');
                            }
                        }
                    }
                }
            }
        }
    });

    //Display
    //RepoSpcReportDisplay();
}

//Add
function RepoSpcReportAdd() {

    //Set action button
    var ActionBtnId = ParamActionBtnIdAddGet();
    var Icon = ParamActionIconAddGet();

    //Get inputs
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');


    //Add
    if (CellId != '0' && ShiftId != '0' && DateString != '') {

        //Spin
        ActionBtnSpin(ActionBtnId);

        var obj = {};
        obj.CellId = CellId;
        obj.ShiftId = ShiftId;
        obj.DateString = DateString;


        RepoSpcAllReportsHide();
        ShowReport('ParamReportId');
        ParamMessageReset();

        $.ajax({
            url: "/RepoSpc/RepoSpcReportAdd",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
                RepoSpcReportDisplay();
            }
        });
    }
    else {
        ParamMessageErrorDisplay('Les champs LS, Schift et date sont obligatoires');
    };
}

function RepoSpcReportNotify(SpcReportRowId, Destination) {
    var ActionBtnId = 'RepoSpcReportNotifyBtnId' + SpcReportRowId;
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Icon = 'fas fa-paper-plane btn-icon-cl gc-c1-cl';
    var obj = {};
    obj.SpcReportRowId = SpcReportRowId;
    obj.Destination = Destination;
    $.ajax({
        url: "/RepoSpc/RepoSpcReportNotify",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    });
}

function RepoManagerReportNotify(SpcReportRowId, Destination) {
    var ActionBtnId = 'RepoManagerReportNotifyBtnId' + SpcReportRowId;
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Icon = 'fas fa-paper-plane btn-icon-cl gc-c1-cl';
    var obj = {};
    obj.SpcReportRowId = SpcReportRowId;
    obj.Destination = Destination;
    $.ajax({
        url: "/RepoSpc/RepoManagerReportNotify",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    });
}

function RepoManagerReportAdd() {

    //Set action button
    var ActionBtnId = ParamActionBtnIdAddGet();
    var Icon = ParamActionIconAddGet();

    //Get inputs
    var ShiftId = GetElementValue('ShiftId');
    var RegionId = GetElementValue('RegionId');
    var DateString = GetDateStringFromDatePicker('DateId');


    //Add
    if (ShiftId != '0' && RegionId != '0' && DateString != '') {

        //Spin
        ActionBtnSpin(ActionBtnId);

        var obj = {};
        obj.RegionId = RegionId;
        obj.ShiftId = ShiftId;
        obj.DateString = DateString;


        RepoSpcAllReportsHide();
        ShowReport('ParamReportId');
        ParamMessageReset();

        $.ajax({
            url: "/RepoSpc/RepoManagerReportAdd",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
                RepoManagerReportDisplay();
            }
        });
    }
    else {
        ParamMessageErrorDisplay('Les champs LS, Schift et date sont obligatoires');
    };
}



//Display
function RepoSpcReportDisplay() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdDisplayGet();
    var Icon = ParamActionIconDisplayGet();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var CellId = GetElementValue('CellId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');
    var IsValid = new Boolean($("#IsValidId").is(":checked"));
    var SpcReportRowId = 0;

    //Get
    if (DateString != '') {
        RepoSpcReportGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString, IsValid, SpcReportRowId);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

function RepoManagerReportDisplay() {
    //Set action button
    var ActionBtnId = ParamActionBtnIdDisplayGet();
    var Icon = ParamActionIconDisplayGet();

    //Get input values
    var RegionId = GetElementValue('RegionId');
    var ShiftId = GetElementValue('ShiftId');
    var DateString = GetDateStringFromDatePicker('DateId');
    var IsValid = new Boolean($("#IsValidId").is(":checked"));

    //Get
    if (DateString != '') {
        RepoManagerReportGet(ActionBtnId, Icon, RegionId, ShiftId, DateString, IsValid);
    }
    else {
        ParamMessageErrorDisplay('Les dates de début et de fin sont obligatoires');
    };
}

//Get
function RepoSpcReportGet(ActionBtnId, Icon, RegionId, CellId, ShiftId, DateString, IsValid, SpcReportRowId) {
    //Spin
    ActionBtnMarginSpin(ActionBtnId);

    //Hide some reports
    RepoSpcAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    var Pattern = 'RepoSpcReport';
    var PatternTable = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTable).DataTable().destroy();;
    $('#' + PatternTable).DataTable({
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/RepoSpc/RepoSpcReportGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                CellId: CellId,
                ShiftId: ShiftId,
                DateString: DateString,
                IsValid: IsValid,
                SpcReportRowId: SpcReportRowId
            }
        },
        "columns": [
            { "data": "RegionNameShort" },//0
            { "data": "CellName" },//1
            { "data": "DhmValue" },//2
            { "data": "ShiftId" },//3         

            { "data": "DhmCreation" },//4
            { "data": "CreatedBy" },//5
            { "data": "DhmModification" },//6
            { "data": "ModifiedBy" },//7
            { "data": "DhmValidation" },//8
            { "data": "ValidatedBy" },//9           

            { "data": "SpcReportRowId" },//10

            { "data": "SpcReportRowId" },//11
            { "data": "SpcReportRowId" },//12

            { "data": "SpcReportRowId" },//13
            { "data": "SpcReportRowId" },//14
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-center none", "targets": 6 },
            { "width": "3%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-center none", "targets": 8 },
            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },

            { "width": "3%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-center", "targets": 12 },

            { "width": "3%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-center", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return data; } },
            { "targets": 2, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 3, "render": function (data, type, row) { return data; } },

            { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 5, "render": function (data, type, row) { return data; } },
            { "targets": 6, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 7, "render": function (data, type, row) { return data; } },
            { "targets": 8, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 9, "render": function (data, type, row) { return data; } },


            { "targets": 10, "render": function (data, type, row) { return DataTableCheckBoxGet(Pattern, data, row['IsValid'], ''); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableButtonGet('RepoSpcReportExport', data, '\'' + data + '\', \'PDF\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-file-pdf btn-icon-cl gc-c1-cl', '') } },
            { "targets": 12, "render": function (data, type, row) { return DataTableButtonGet('RepoSpcReportNotify', data, data + ', \'LS\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-paper-plane btn-icon-cl gc-c1-cl', '') } },

            { "targets": 13, "render": function (data, type, row) { return DataTableModalFormBtnEditGet(Pattern, data); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableBtnDeleteGet(Pattern, data); } },
        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });
}

function RepoManagerReportGet(ActionBtnId, Icon, RegionId, ShiftId, DateString, IsValid) {
    //Spin
    ActionBtnMarginSpin(ActionBtnId);

    //Hide some reports
    RepoSpcAllReportsHide();
    ShowReport('ParamReportId');
    ParamMessageReset();

    var Pattern = 'RepoManagerReport';
    var PatternTable = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + PatternTable).DataTable().destroy();;
    $('#' + PatternTable).DataTable({
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/RepoSpc/RepoManagerReportGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                RegionId: RegionId,
                ShiftId: ShiftId,
                DateString: DateString,
                IsValid: IsValid
            }
        },
        "columns": [
            { "data": "RegionNameShort" },//0
            { "data": "DhmValue" },//1
            { "data": "ShiftId" },//2        

            { "data": "DhmCreation" },//3
            { "data": "CreatedBy" },//4
            { "data": "DhmModification" },//5
            { "data": "ModifiedBy" },//6
            { "data": "DhmValidation" },//7
            { "data": "ValidatedBy" },//8         

            { "data": "SpcReportRowId" },//9

            { "data": "SpcReportRowId" },//10
            { "data": "SpcReportRowId" },//11

            { "data": "SpcReportRowId" },//12
            { "data": "SpcReportRowId" },//13
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "3%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-center none", "targets": 5 },
            { "width": "3%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-center none", "targets": 7 },
            { "width": "3%", "className": "text-center", "targets": 8 },

            { "width": "3%", "className": "text-center", "targets": 9 },

            { "width": "3%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-center", "targets": 11 },

            { "width": "3%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-center", "targets": 13 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            { "targets": 3, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return data; } },
            { "targets": 5, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 6, "render": function (data, type, row) { return data; } },
            { "targets": 7, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 8, "render": function (data, type, row) { return data; } },

            { "targets": 9, "render": function (data, type, row) { return DataTableCheckBoxIsValidGet(Pattern, data, row['IsValid']); } },

            { "targets": 10, "render": function (data, type, row) { return DataTableButtonGet('RepoManagerReportExport', data, '\'' + data + '\', \'PDF\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-file-pdf btn-icon-cl gc-c1-cl', '') } },
            { "targets": 11, "render": function (data, type, row) { return DataTableButtonGet('RepoManagerReportNotify', data, data + ', \'Region\'', '', 'dt-btn-cl gc-bc1-cl', 'fas fa-paper-plane btn-icon-cl gc-c1-cl', '') } },

            { "targets": 12, "render": function (data, type, row) { return DataTableModalFormBtnEditGet(Pattern, '\'' + data + '\''); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableBtnDeleteGet(Pattern, data); } },
        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });
}


function RepoSpcReportExport(SpcReportRowId, FileType) {
    var PrintLink = '/RepoSpc/RepoSpcReportExport?' +
        'SpcReportRowId=' + SpcReportRowId +
        '&FileType=' + FileType;

    NavigateTo(PrintLink, true);
}

function RepoManagerReportExport(SpcReportRowId, FileType) {
    var PrintLink = '/RepoSpc/RepoManagerReportExport?' +
        'SpcReportRowId=' + SpcReportRowId +
        '&FileType=' + FileType;

    NavigateTo(PrintLink, true);
}

function RepoSpcReportFormLoad(Pattern, PatternForm, SpcReportRowId) {

    //alert('in');
    ModalActionBtnEditGet(Pattern, SpcReportRowId, '');

    //Test
    //var Label = 'Valider';
    //var IconIn = 'far fa-save';
    //var PatternIn = 'RepoSpcReportEdit';

    ////Action
    //var OnClick = 'RepoSpcReportEdit(' + SpcReportRowId + ')';
    //ModalActionBtnGet(PatternIn, Label, IconIn, OnClick);

    //Sert FormIndex
    //var FormIndex = 10;

    //Load
    var obj = {};
    obj.RegionId = '0';
    obj.CellId = '0';
    obj.ShiftId = 0;
    obj.DateString = '';
    obj.IsValid = new Boolean(false);
    obj.SpcReportRowId = SpcReportRowId;

    $.ajax({
        url: "/RepoSpc/RepoSpcReportGet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: true,
        success: function (data) {
            jQuery.each(data, function (index, itemData) {

                //var ActionBtnId = 'RepoSpcReportEditBtnId' ;
                //var Icon = 'fas fa-edit btn-icon-cl gc-c1-cl';
                //var IsMargin = false;

                // ActionSpin(ActionBtnId, IsMargin);
                //HideReport('RepoSpcReportEditModalDialogReportId');



                //Get features
                ElementBooleanSet('Option00IsCheckedId', itemData[0].Option00IsChecked);
                ElementBooleanSet('Option01IsCheckedId', itemData[0].Option01IsChecked);
                ElementBooleanSet('Option02IsCheckedId', itemData[0].Option02IsChecked);
                ElementBooleanSet('Option03IsCheckedId', itemData[0].Option03IsChecked);
                ElementBooleanSet('Option04IsCheckedId', itemData[0].Option04IsChecked);
                ElementBooleanSet('Option05IsCheckedId', itemData[0].Option05IsChecked);
                ElementBooleanSet('Option06IsCheckedId', itemData[0].Option06IsChecked);
                ElementBooleanSet('Option07IsCheckedId', itemData[0].Option07IsChecked);
                ElementBooleanSet('Option08IsCheckedId', itemData[0].Option08IsChecked);

                ElementInputSet('Option00CommentId', itemData[0].Option00Comment);
                ElementInputSet('Option01CommentId', itemData[0].Option01Comment);
                ElementInputSet('Option02CommentId', itemData[0].Option02Comment);
                ElementInputSet('Option03CommentId', itemData[0].Option03Comment);
                ElementInputSet('Option04CommentId', itemData[0].Option04Comment);
                ElementInputSet('Option05CommentId', itemData[0].Option05Comment);
                ElementInputSet('Option06CommentId', itemData[0].Option06Comment);
                ElementInputSet('Option07CommentId', itemData[0].Option07Comment);
                ElementInputSet('Option08CommentId', itemData[0].Option08Comment);

                ElementInputSet('ObservationId', itemData[0].Observation);


                //Style
                document.getElementById(Pattern + PatternForm + 'ModalDialogReportId').style.width = '80%';
                document.getElementById(Pattern + PatternForm + 'ModalDialogReportId').style.marginLeft = 'auto';
                document.getElementById(Pattern + PatternForm + 'ModalDialogReportId').style.marginTop = 'auto';
                document.getElementById(Pattern + PatternForm + 'ModalDialogReportId').style.maxWidth = '1600px';






                //ActionBtnSet(ActionBtnId, Icon, IsMargin);
                ShowReport('RepoSpcReportEditModalDialogReportId');

            });
        }
    })
}

function RepoSpcReportEdit(SpcReportRowId) {

    //Get input values
    var Option00IsChecked = ElementBooleanGet('Option00IsCheckedId');
    var Option01IsChecked = ElementBooleanGet('Option01IsCheckedId');
    var Option02IsChecked = ElementBooleanGet('Option02IsCheckedId');
    var Option03IsChecked = ElementBooleanGet('Option03IsCheckedId');
    var Option04IsChecked = ElementBooleanGet('Option04IsCheckedId');
    var Option05IsChecked = ElementBooleanGet('Option05IsCheckedId');
    var Option06IsChecked = ElementBooleanGet('Option06IsCheckedId');
    var Option07IsChecked = ElementBooleanGet('Option07IsCheckedId');
    var Option08IsChecked = ElementBooleanGet('Option08IsCheckedId');

    var Option00Comment = GetElementValue('Option00CommentId');
    var Option01Comment = GetElementValue('Option01CommentId');
    var Option02Comment = GetElementValue('Option02CommentId');
    var Option03Comment = GetElementValue('Option03CommentId');
    var Option04Comment = GetElementValue('Option04CommentId');
    var Option05Comment = GetElementValue('Option05CommentId');
    var Option06Comment = GetElementValue('Option06CommentId');
    var Option07Comment = GetElementValue('Option07CommentId');
    var Option08Comment = GetElementValue('Option08CommentId');

    var Observation = GetElementValue('ObservationId');

    //Edit
    var obj = {};
    obj.SpcReportRowId = SpcReportRowId;

    obj.Option00IsChecked = Option00IsChecked;
    obj.Option01IsChecked = Option01IsChecked;
    obj.Option02IsChecked = Option02IsChecked;
    obj.Option03IsChecked = Option03IsChecked;
    obj.Option04IsChecked = Option04IsChecked;
    obj.Option05IsChecked = Option05IsChecked;
    obj.Option06IsChecked = Option06IsChecked;
    obj.Option07IsChecked = Option07IsChecked;
    obj.Option08IsChecked = Option08IsChecked;

    obj.Option00Comment = Option00Comment;
    obj.Option01Comment = Option01Comment;
    obj.Option02Comment = Option02Comment;
    obj.Option03Comment = Option03Comment;
    obj.Option04Comment = Option04Comment;
    obj.Option05Comment = Option05Comment;
    obj.Option06Comment = Option06Comment;
    obj.Option07Comment = Option07Comment;
    obj.Option08Comment = Option08Comment;

    obj.Observation = Observation;

    $.ajax({
        url: "/RepoSpc/RepoSpcReportEdit",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            document.getElementById("RepoSpcReport" + SpcReportRowId).checked = true;
            //QualifPathSend(RowId, QualifReasonId);
        }
    });
}

function RepoSpcEditDisplay() {

    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';

    var CexId = GetElementValue('CexId');
    var LSId = GetElementValue('LSId');

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoSpcEditTableRportId');

    if (CexId != null && CexId != '0' && CexId != '' &&
        LSId != null && LSId != '0' && LSId != '') {

        $('#RepoSpcEditTableId').DataTable().destroy();;
        $('#RepoSpcEditTableId').DataTable({
            "initComplete": function (settings, json) {
                ShowReport('RepoSpcEditTableReportId');
                $('#' + ActionBtnId).find('span').attr('class', Icon);
            },
            "ajax": {
                "url": "/Repo/RepoSpcEditDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    CexId: CexId,
                    LSId: LSId
                }
            },
            "columns": [
                { "data": "CexNameShort" },//0
                { "data": "LSName" },//1
                { "data": "ShiftId" },//2
                { "data": "DhmValue" },//3
                { "data": "ProgressValue" },//4
                { "data": "StatusName" },//5

                { "data": "RepoSpcId" },//6 Assign
                { "data": "RepoSpcId" },//7 Event
                { "data": "RepoSpcId" },//8 Gap
                { "data": "RepoSpcId" },//9 Beak

                { "data": "RepoSpcId" },//10 Form
                { "data": "RepoSpcId" }//11 Contact
            ],
            "columnDefs": [
                { "width": "5%", "className": "text-left", "targets": 0 },//SiteName 
                { "width": "15%", "className": "text-left", "targets": 1 },//LSName
                { "width": "5%", "className": "text-left", "targets": 2 },//ShiftId 
                { "width": "5%", "className": "text-left", "targets": 3 },//DhmValue 
                { "width": "20%", "className": "text-left", "targets": 4 },//ProgressValue
                { "width": "10%", "className": "text-left", "targets": 5 },//StatusName 

                { "width": "5%", "className": "text-center", "targets": 6 },//Assign 
                { "width": "5%", "className": "text-center", "targets": 7 },//Event 
                { "width": "5%", "className": "text-center", "targets": 8 },//Gap 
                { "width": "5%", "className": "text-center", "targets": 9 },//Beak 

                { "width": "0%", "className": "text-left none", "targets": 10 },//Form Assign
                { "width": "0%", "className": "text-left none", "targets": 11 },//Form Event
                { "width": "0%", "className": "text-left none", "targets": 12 },//Form Gap
                { "width": "0%", "className": "text-left none", "targets": 13 },//Form Beak

                { "width": "0%", "className": "text-left none", "targets": 14 }, //Contact        

                { "targets": 3, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
                {
                    "targets": 4,
                    "render": function (data, type, row) {
                        return '<div class="progress">' +
                            '<div class="progress-bar progress-bar-striped " role = "progressbar" style = "width: ' + data + '; background-color:' + $('<div/>').text(row['RgbValue']).html() + '" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" ></div>' +
                            '</div>'
                    }
                },

                { "targets": 6, "render": function (data, type, row) { return DataTableGetButton('RepoSpcEditAssignSearch', data, 'fas fa-eye', '0048ff'); } },
                { "targets": 7, "render": function (data, type, row) { return DataTableGetButton('RepoSpcEditEventSearch', data, 'fas fa-eye', '0048ff'); } },
                { "targets": 8, "render": function (data, type, row) { return DataTableGetButton('RepoSpcEditGapsSearch', data, 'fas fa-eye', '0048ff'); } },
                { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('RepoSpcEditBreakSearch', data, 'fas fa-eye', '0048ff'); } },

                {
                    "targets": 10,
                    "render": function (data, type, row) {
                        return '<div class="col-md-14" style="width: 180%">' +
                            '<div class="card">' +
                            '<div class="card-header"><h5>Affectation des caissiers</h5></div>' +
                            '<div class="card-body">' +
                            '<div class="row">' +
                            '<div class="col">' +
                            DataTableFormInputDropDownElementGet('StationNumber', row['RepoSpcId'], 'Gare', '') +
                            DataTableFormInputDropDownElementGet('LaneName', row['RepoSpcId'], 'Voie', '') +
                            DataTableFormInputNumberElementGet('Cashier', row['RepoSpcId'], '', '', 'Caissier') +
                            '</div>' +
                            '<div class="col">' +
                            DataTableFormInputTextAreaElementGet('CommentAssignId', row['RepoSpcId'], 'Observation') +
                            '</div>' +
                            '</div>' +

                            DataTableFormButtonActionGet('RepoSpcEditAssignAdd', row['RepoSpcId'], 'fas fa-plus-circle', 'Ajouter') +
                            '</div>' +
                            DataTableFormMessageGet(row['RepoSpcId']) +
                            '</div>' +
                            '</div>'
                    }
                },

                {
                    "targets": 11,
                    "render": function (data, type, row) {
                        return '<div class="col-md-14" style="width: 180%">' +
                            '<div class="card">' +
                            '<div class="card-header"><h5>Evènements</h5></div>' +
                            '<div class="card-body">' +
                            '<div class="row">' +
                            '<div class="col">' +
                            DataTableFormInputDropDownElementGet('StationNumber', row['RepoSpcId'], 'Gare', '') +
                            DataTableFormInputDropDownElementGet('LaneName', row['RepoSpcId'], 'Voie', '') +
                            DataTableFormInputDropDownElementGet('Heure', row['RepoSpcId'], 'Heure', '') +
                            '</div>' +
                            '<div class="col">' +
                            DataTableFormInputTextAreaElementGet('CommentEventId', row['RepoSpcId'], 'Description') +
                            '</div>' +
                            '</div>' +
                            DataTableFormButtonActionGet('RepoSpcEditEventAdd', row['RepoSpcId'], 'fas fa-plus-circle', 'Ajouter') +
                            '</div>' +
                            DataTableFormMessageGet(row['RepoSpcId']) +
                            '</div>' +
                            '</div>'
                    }
                },

                {
                    "targets": 12,
                    "render": function (data, type, row) {
                        return '<div class="col-md-14" style="width: 180%">' +
                            '<div class="card">' +
                            '<div class="card-header"><h5>Ecarts de péage</h5></div>' +
                            '<div class="card-body">' +
                            '<div class="row">' +
                            '<div class="col">' +
                            DataTableFormInputDropDownElementGet('Heure', row['RepoSpcId'], 'Heure', '') +
                            DataTableFormInputNumberElementGet('Cashier', row['RepoSpcId'], '', '', 'Caissier') +
                            DataTableFormInputNumberElementGet('GapValueId', row['RepoSpcId'], '', '', 'Montant') +
                            DataTableFormInputDropDownElementGet('GapId', row['RepoSpcId'], 'Type', '') +
                            '</div>' +
                            '<div class="col">' +
                            DataTableFormInputTextAreaElementGet('CommentGapId', row['RepoSpcId'], 'Observation') +
                            '</div>' +
                            '</div>' +
                            DataTableFormButtonActionGet('RepoSpcEditGapAdd', row['RepoSpcId'], 'fas fa-plus-circle', 'Ajouter') +
                            '</div>' +
                            DataTableFormMessageGet(row['RepoSpcId']) +
                            '</div>' +
                            '</div>'
                    }
                },
                {
                    "targets": 13,
                    "render": function (data, type, row) {
                        return '<div class="col-md-14" style="width: 180%">' +
                            '<div class="card">' +
                            '<div class="card-header"><h5>Dégradations</h5></div>' +
                            '<div class="card-body">' +
                            '<div class="row">' +
                            '<div class="col">' +
                            DataTableFormInputDropDownElementGet('StationNumber', row['RepoSpcId'], 'Gare', '') +
                            DataTableFormInputDropDownElementGet('LaneName', row['RepoSpcId'], 'Voie', '') +
                            DataTableFormInputDropDownElementGet('Heure', row['RepoSpcId'], 'Heure', '') +
                            DataTableFormInputDropDownElementGet('EquipementId', row['RepoSpcId'], 'Equipement', '') +
                            '</div>' +
                            '<div class="col">' +
                            DataTableFormInputTextAreaElementGet('CommentBreakId', row['RepoSpcId'], 'Observation') +
                            '</div>' +
                            '</div>' +
                            DataTableFormButtonActionGet('RepoSpcEditGapAdd', row['RepoSpcId'], 'fas fa-plus-circle', 'Ajouter') +
                            '</div>' +
                            DataTableFormMessageGet(row['RepoSpcId']) +
                            '</div>' +
                            '</div>'
                    }
                },
                { "targets": 14, "render": function (data, type, row) { return ""; } },
            ],
            "iDisplayLength": 50,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Veuillez patienter...",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "processing": false,
            "responsive": true,
            "bFilter": false,
            "autoWidth": true,
            "searching": false,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function RepoFdrEditSave(RepoFdrId) {
    var FdrSumId = $('#FdrSumId' + RepoFdrId).text().replace(' ', '').replace(',00', '');
    var FdrSumNewId = $('#FdrSumNewId' + RepoFdrId).text();
    var ActionBtnId = new String('RepoFdrEditSaveBtnId' + RepoFdrId);
    var SiteId = new String(RepoFdrId).substr(0, 2);
    var LSId = new String(RepoFdrId).substr(2, 2);
    var FdrId = new String(RepoFdrId).substr(4, 2);

    var Coin000Id = GetElementValue('Coin000Id' + RepoFdrId);
    var Coin001Id = GetElementValue('Coin001Id' + RepoFdrId);
    var Coin002Id = GetElementValue('Coin002Id' + RepoFdrId);
    var Coin005Id = GetElementValue('Coin005Id' + RepoFdrId);
    var Coin010Id = GetElementValue('Coin010Id' + RepoFdrId);
    var Paper020Id = GetElementValue('Paper020Id' + RepoFdrId);
    var Paper050Id = GetElementValue('Paper050Id' + RepoFdrId);
    var Paper100Id = GetElementValue('Paper100Id' + RepoFdrId);
    var Paper200Id = GetElementValue('Paper200Id' + RepoFdrId);

    var FdrGap = GetElementValue('FdrGapNewId' + RepoFdrId);
    var FdrGapId = GetElementValue('FdrGapId' + RepoFdrId);
    var Comment = GetElementValue('CommentId' + RepoFdrId);
    var DateString = GetDateStringFromDatePicker('DhmValueNewId' + RepoFdrId);

    if (
        Coin000Id != '' &&
        Coin001Id != '' &&
        Coin002Id != '' &&
        Coin005Id != '' &&
        Coin010Id != '' &&

        Paper020Id != '' &&
        Paper050Id != '' &&
        Paper100Id != '' &&
        Paper200Id != '' &&

        FdrGap != '' &&
        FdrGapId != '' &&
        DateString != '') {

        if (FdrSumNewId == FdrSumId) {
            var obj = {};
            obj.SiteId = SiteId;
            obj.LSId = LSId;
            obj.FdrId = FdrId;
            obj.DateString = DateString;

            obj.Coin000Id = Coin000Id;
            obj.Coin001Id = Coin001Id;
            obj.Coin002Id = Coin002Id;
            obj.Coin005Id = Coin005Id;
            obj.Coin010Id = Coin010Id;

            obj.Paper020Id = Paper020Id;
            obj.Paper050Id = Paper050Id;
            obj.Paper100Id = Paper100Id;
            obj.Paper200Id = Paper200Id;

            obj.FdrGap = FdrGap;

            obj.Comment = Comment;
            obj.Update = true;
            obj.FdrGapId = FdrGapId;

            $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
            HideReport('RepoFdrAddTableRportId')
            $.ajax({
                url: "/Repo/RepoFdrAdd",
                method: "POST",
                data: JSON.stringify(obj),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    $('#' + ActionBtnId).find('span').attr('class', 'far fa-save');
                    RepoFdrEditSearch(RepoFdrId);
                    DataTableMessageErroDisplay(RepoFdrId, 'badge badge-success', 'Mise à jour faite avec succès!');
                }
            });
        }
        else {
            DataTableMessageErroDisplay(RepoFdrId, 'badge badge-danger', 'Le total du fonds de roulement est différent de la valeur initiale!');
        }
    }
    else {
        DataTableMessageErroDisplay(RepoFdrId, 'badge badge-danger', 'Certains champs sont obligatoires');
    };
}

function RepoSpcEditAssignAdd(Pattern, Pattern, RepoSpcId) {

    var ActionBtnId = new String('RepoSpcEdit' + Pattern + RepoSpcId);
    var StationNumber = GetElementValue('StationNumberId' + Pattern + RepoFdrId);
    var Lane = GetElementValue('LaneId' + Pattern + RepoFdrId);
    var Cashier = GetElementValue('CashierId' + Pattern + RepoFdrId);
    var Comment = GetElementValue('CommentId' + Pattern + RepoFdrId);

    if (StationNumber != '' &&
        LaneName != '' &&
        Cashier != '') {
        var obj = {};

        obj.RepoSpcId = RepoSpcId;
        obj.StationNumber = StationNumber;
        obj.Lane = Lane;
        obj.Cashier = Cashier;
        obj.Comment = Comment;

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('RepoSpecEditAssignAddTableRportId')
        $.ajax({
            url: "/Repo/RepoSpecEditAssignAdd",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#' + ActionBtnId).find('span').attr('class', 'far fa-save');
                //RepoSpcEditAssignSearch(RepoFdrId);
                //DataTableMessageErroDisplay(Pattern, RepoFdrId, 'badge badge-success', 'Mise à jour faite avec succès!');
            }
        });
    }
    else {
        //DataTableMessageErroDisplay(Pattern, RepoFdrId, 'badge badge-danger', 'Certains champs sont obligatoires');
    };
}


//RepoTraficStation
function RepoTraficStationAllReportsHide() {
    HideReport('ParamReportId');

    HideTableReport('CertFilePlan');

    HideTableReport('RepoTraficStationHour');
    HideTableReport('RepoTraficStationDay');
    HideTableReport('RepoTraficCompanyDay');
    HideTableReport('RepoTraficDay');
    HideTableReport('RepoTraficMonth');
    HideTableReport('RepoTraficCumul');
    HideTableReport('RepoTraficYear');
    HideTableReport('RepoTraficAllYearCg');
    HideTableReport('RepoTraficRegionCumul');
    HideTableReport('RepoTraficScopeCumul');
    HideTableReport('RepoTraficStationCumul');

    HideTableReport('RepoRevenueStationDay');
    HideTableReport('RepoRevenueDay');
    HideTableReport('RepoRevenueMonth');
    HideTableReport('RepoRevenueCumul');
    HideTableReport('RepoRevenueYear');
    HideTableReport('RepoRevenueAllYearCg');


    HideReport('ExportReportId');

    HideGridReport('Grid_0000');
    HideGridReport('Grid_0001');
    HideGridReport('Grid_0002');
    HideGridReport('Grid_0003');
    HideGridReport('Grid_0004');
    HideGridReport('Grid_0005');
    HideGridReport('Grid_0006');
    HideGridReport('Grid_0007');
    HideGridReport('Grid_0008');
    HideGridReport('Grid_0009');
}

function RepoTraficStationAllParamsHide() {
    HideParent('RegionId');
    HideParent('SiteId');
    HideParent('LSId');
    HideParent('BagContainerId');
    HideParent('StationNumberId');
    HideParent('SensId');
    HideParent('LaneTypeId');


    HideParent('DateStartId');
    HideParent('DateEndId');
    HideParent('MonthStartId');
    HideParent('MonthEndId');
    HideParent('TimeId');
    HideParent('ZoneId');
    HideParent('IsChartId');
    HideParent('YearStartId');
    HideParent('YearEndId');

    HideReport('ParamActionContainerId0');
    HideReport('ParamActionContainerId1');
    HideReport('ParamActionContainerId2');
    HideReport('ParamActionContainerId3');
    HideReport('ParamActionContainerId4');
    HideReport('ParamActionContainerId5');
    HideReport('ParamActionContainerId6');
    HideReport('ParamActionContainerId7');
}

function RepoHomeOpen() {

    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();
    MenuBarNavHighlight(0, 3, 2);

    ShowPageReport('Page0_');
    HideGridReport('Grid_0005');

    //Fill
    HtmlDropDownListNameOnlyFill('RegionId', '', '/Param/ParamRegionsSecGet', 'RegionId', 'RegionNameShort');
    HtmlDropDownListNameOnlyXorFill('YearStartId', 0, '/Param/ParamYearsGet', 'YearId', 'YearId');
    HtmlDropDownListNameOnlyXorFill('YearEndId', 0, '/Param/ParamYearsGet', 'YearId', 'YearId');
    HtmlDropDownListWithInputNameOnlyFill('ZoneId', 0, '/Param/ParamZonesGet', 'ZoneId', 'ZoneName', '26');
    HtmlDropDownListWithInputNameOnlyFill('TimeId', 0, '/Param/ParamTimesGet', 'TimeId', 'TimeName', '26');
    HtmlDropDownListNameOnlyXorFill('SensId', 'S', '/Param/GetSens', 'SensId', 'SensName');
    HtmlDropDownListNameOnlyXorFill('LaneTypeId', '1', '/Param/LaneTypesGet', 'LaneTypeId', 'LaneTypeName');

    //OnChange
    ElementOnChangeSet('RegionId', 'ParamAxlesFromRegionSecGet()');
    ElementOnChangeSet('SiteId', 'ParamGetLS(0)');
    ElementOnChangeSet('LSId', 'ParamBagContainersFromLS2Get()');
    ElementOnChangeSet('BagContainerId', 'ParamGetStations()');
    ElementOnChangeSet('StationNumberId', 'ParamLanesGet()');

    //Reset
    ParamGetSites();
    ParamResetDropDownList('LSId');
    ParamResetDropDownList('BagContainerId');
    ParamResetDropDownList('StationNumberId');
}


function RepoTraficHomeOpen() {

    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();
    MenuBarNavHighlight(0, 0, 1);

    HideReport('Page0_' + 'PageReportId');

    ShowReport('ParamReportId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //OnChange
    ElementOnChangeSet('TimeId', 'RepoTraficPresetGet()');
    ElementOnChangeSet('ZoneId', 'RepoTraficPresetGet()');
}

function RepoTraficStationDayOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Trafic journalier par gare');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficStationDayDisplay()");
    ParamActionBtnGet(1, 'Charger CE', 'fas fa-redo-alt', "RepoTraficStationDayCeUpload()");
    ParamActionBtnGet(2, 'Charger Zipdata', 'fas fa-redo-alt', "RepoTraficStationDayZipdataUpload()");
    ParamActionBtnGet(3, 'Imprimer', 'fas fa-print', "RepoParamHide()");

    //ShowReport
    ShowParent('SiteId');
    ShowParent('LSId');
    ShowParent('BagContainerId');
    ShowParent('StationNumberId');
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');
    //Reset
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 0);
}

function RepoCodeObsOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();
    MenuBarHighlight(4, 4);

    $('#ParamTitleId').text("Codes observations");
    ShowReport('ParamReportId');
    ShowReport('SiteId' + 'Parent');
    ShowReport('BagContainerId' + 'Parent');
    ShowReport('StationNumberId' + 'Parent');

    ShowReport('DateStartId' + 'Parent');
    ShowReport('DateEndId' + 'Parent');

    //OnChange
    ElementOnChangeSet('StationNumberId', "")

    $.ajax({
        url: "/Common/RoleNameListGet",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        async: true,
        success: function (data) {
            if (data.includes('Administrateur') || data.includes('RepoCodeObsSupervisor')) {

                //Actions
                ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'QualifTrxLaneStationDisplay()');
                ParamActionBtnGet(1, 'Niveau Jour', 'fas fa-eye', 'QualifTrxLaneDayDisplay()');

                DateValueDefaultFirstDaySet('DateStartId');
                DateValueDefaultSet('DateEndId', 1);

                ElementDropDownListReset('SiteId');
                ElementDropDownListReset('BagContainerId');
                ElementDropDownListReset('StationNumberId');

                QualifTrxLaneDayDisplay();
            }
            else {
                if (data.includes('RepoCodeObs')) {
                    //Actions
                    ParamActionBtnGet(0, 'Niveau Gare', 'fas fa-eye', 'QualifTrxLaneStationDisplay()');

                    DateValueDefaultFirstDaySet('DateStartId');
                    DateValueDefaultSet('DateEndId', 1);
                    QualifTrxLaneStationDisplay();
                }
            }
        }
    });

    NotiConnectionIdUpdate('Qualification - Dashboard');
}









function RepoTraficStationHourDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    var SiteId = GetElementDropDownListValue('SiteId');
    var LSId = GetElementDropDownListValue('LSId');
    var BagContainerId = GetElementDropDownListValue('BagContainerId');
    var StationNumber = GetElementDropDownListValue('StationNumberId');
    var Sens = GetElementDropDownListValue('SensId');
    var LaneTypeId = GetElementDropDownListValue('LaneTypeId');
    var IsChart = ElementBooleanGet('IsChartId');

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    if (DateStringStart != '' && DateStringEnd != '' && StationNumber != '0' && Sens != '0' && LaneTypeId != '0') {
        RepoTraficStationHourGet(ActionBtnId, Icon, SiteId, StationNumber, Sens, LaneTypeId, DateStringStart, DateStringEnd, IsChart);
    }
    else {
        ParamMessageErrorDisplay('La date début, la date de fin, le centre, la gare, le sens, le type sont obligatoires')
    };
}


function RepoTraficStationDayDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    var SiteId = GetElementValue('SiteId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoTraficStationDayGet(ActionBtnId, Icon, SiteId, StationNumber, DateStringStart, DateStringEnd, IsChart);
}

function RepoTraficRevenueStationDayAllDgNotify() {

    var ActionBtnId = 'ParamActionBtnId7';
    var Icon = 'fas fa-paper-plane btn-icon-m-cl gc-c1-cl';
    var IsMargin = true;

    ActionSpin(ActionBtnId, IsMargin);

    var SiteId = GetElementValue('SiteId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateString = GetDateStringFromDatePicker('DateStartId');
    var Destination = 'DG';

    if (DateString != '') {
        RepoTraficRevenueMeanValueUpdateLaunch(ActionBtnId, Icon, IsMargin, SiteId, StationNumber, DateString, Destination);
    }
    else {
        ParamMessageErrorDisplay('La période ne doit pas dépasser une journée')
    };
}

function RepoTraficRevenueStationDayAllMeNotify() {

    var ActionBtnId = 'ParamActionBtnId5';
    var Icon = 'fas fa-paper-plane btn-icon-m-cl gc-c1-cl';
    var IsMargin = true;

    ActionSpin(ActionBtnId, IsMargin);

    var SiteId = GetElementValue('SiteId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateString = GetDateStringFromDatePicker('DateStartId');
    var Destination = 'Me';

    if (DateString != '') {
        RepoTraficRevenueMeanValueUpdateLaunch(ActionBtnId, Icon, IsMargin, SiteId, StationNumber, DateString, Destination);
    }
    else {
        ParamMessageErrorDisplay('La période ne doit pas dépasser une journée')
    };
}


function RepoTraficRevenueStationDayAllRegionNotify() {

    var ActionBtnId = 'ParamActionBtnId6';
    var Icon = 'fas fa-paper-plane btn-icon-m-cl gc-c1-cl';
    var IsMargin = true;

    ActionSpin(ActionBtnId, IsMargin);

    var SiteId = GetElementValue('SiteId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateString = GetDateStringFromDatePicker('DateStartId');
    var Destination = 'Region';

    if (DateString != '') {
        RepoTraficRevenueMeanValueUpdateLaunch(ActionBtnId, Icon, IsMargin, SiteId, StationNumber, DateString, Destination);
    }
    else {
        ParamMessageErrorDisplay('La période ne doit pas dépasser une journée')
    };
}

function RepoTraficRevenueMeanValueUpdate() {

    var ActionBtnId = 'ParamActionBtnId3';
    var Icon = 'fas fa-redo-alt btn-icon-m-cl gc-c1-cl';

    ActionBtnMarginSpin(ActionBtnId);

    //var SiteId = GetElementValue('SiteId');
    //var StationNumber = GetElementValue('StationNumberId');
    //var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    //var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    //if (DateStringStart != DateStringEnd) {

    //var obj = {};
    //obj.SiteId = SiteId;
    //obj.StationNumber = StationNumber;
    //obj.DateStringStart = DateStringStart;
    //obj.DateStringEnd = DateStringEnd;

    $.ajax({
        url: "/Repo/RepoTraficRevenueStationDayMeanValueUpdate",
        method: "POST",
        //data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnIconMarginSet(ActionBtnId, Icon);
            //CollabActionDisplay('0')
        }
    });
    //}
    //else {
    //    ParamMessageErrorDisplay('La période ne doit pas dépasser une journée')
    //};
}


function RepoTraficStationHourMeanValueUpdate() {

    var ActionBtnId = 'ParamActionBtnId5';
    var Icon = 'fas fa-redo-alt btn-icon-m-cl gc-c1-cl';

    ActionBtnMarginSpin(ActionBtnId);

    $.ajax({
        url: "/Repo/RepoTraficStationHourMeanValueUpdate",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnIconMarginSet(ActionBtnId, Icon);
        }
    });
}


function RepoTraficOdMeanValueUpdate() {

    var ActionBtnId = 'ParamActionBtnId6';
    var Icon = 'fas fa-redo-alt btn-icon-m-cl gc-c1-cl';

    ActionBtnMarginSpin(ActionBtnId);

    $.ajax({
        url: "/Repo/RepoTraficOdMeanValueUpdate",
        method: "POST",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnIconMarginSet(ActionBtnId, Icon);
        }
    });
}

function RepoTraficStationHourGet(ActionBtnId, Icon, SiteId, StationNumber, Sens, LaneTypeId, DateStringStart, DateStringEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoTraficStationHour';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (IsChart == true) {
                //Variables
                //var DateValueStart = JsDateValueFromDateString(DateStringStart);
                //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
                //var HeaderIndex = '1';
                //var TimeIndex = '0';
                //var PageIndex = '';
                //var PageRowIndex = '';

                //Total
                //var Title = 'Trafic horaire total';
                //var PatternChart = Pattern + 'TotalLine';
                //var labels = GetColumnArray(PatternTableId, 3);
                //var data1 = GetColumnArray(PatternTableId, 4);
                //var data2 = GetColumnArray(PatternTableId, 6);

                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic horaire', data1, 'Trafic horaire A-1', data2, false);

                //var Title = 'Trafic horaire total';
                //var PatternChart = Pattern + 'TotalLine';
                //var labels = GetColumnArray(PatternTableId, 3);
                //var data1 = GetColumnArray(PatternTableId, 4);
                //var data2 = GetColumnArray(PatternTableId, 6);

                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic horaire', data1, 'Trafic horaire A-1', data2, false);

                Title = 'Trafic horaire';
                var PatternChart = Pattern + 'TotalLine';
                var labels = GetColumnArray(PatternTableId, 3);
                var data1 = GetColumnArray(PatternTableId, 4);
                var data2 = GetColumnArray(PatternTableId, 6);
                var data3 = GetColumnArray(PatternTableId, 35);
                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineThreeTraficHourDisplay(Title, PatternChart, labels, 'Trafic horaire', data1, 'Trafic Année-1', data2, 'Trafic Moyen M-1', data3, false);

                //Mp
                Title = 'Trafic horaire par moyen de paiement';
                PatternChart = Pattern + 'MpLine';

                var labels = GetColumnArray(PatternTableId, 3);
                var data1 = GetColumnArray(PatternTableId, 12);
                var data2 = GetColumnArray(PatternTableId, 16);
                var data3 = GetColumnArray(PatternTableId, 20);
                var data4 = GetColumnArray(PatternTableId, 24);
                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);

                Title = 'Trafic horaire par classe';
                var PatternChart = Pattern + 'ClLine';
                var labels = GetColumnArray(PatternTableId, 3);
                var data1 = GetColumnArray(PatternTableId, 25);
                var data2 = GetColumnArray(PatternTableId, 26);
                var data3 = GetColumnArray(PatternTableId, 27);
                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

                ShowReport('Grid_0000' + 'GridReportId');
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficStationHourGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "StationNumber": StationNumber,
                "LaneTypeId": LaneTypeId,
                "Sens": Sens,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "CexNameShort" }, //0
            { "data": "StationName" }, //1
            { "data": "Sens" },//2
            {
                "mData": function vehicle(data, type, dataToSet) {
                    return GetDigits(data.Hour, 2) + ':' + GetDigits(data.Minute, 2);
                }
            },//3

            //{
            //    "mData": function vehicle(data, type, dataToSet) {
            //        if (data.DhmValue === null) return "";
            //        var pattern = /Date\(([^)]+)\)/;//date format from server side
            //        var results = pattern.exec(data.DhmValue);
            //        var dt = new Date(parseFloat(results[1]));

            //        //return dt.toLocaleDateString() + ' ' + dt.toLocaleTimeString();
            //        var Hour = dt.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' });
            //        return Hour;
            //    }
            //},//3

            { "data": "TraficOpe" },//4
            { "data": "TraficGap" },//5

            { "data": "TraficOpeOld" },//6
            { "data": "TraficGapOld" },//7

            { "data": "TraficOpeEvoR" },//8

            { "data": "TlpOpeC1" },//9
            { "data": "TlpOpeC2" },//10
            { "data": "TlpOpeC3" },//11
            { "data": "TlpOpe" },//12

            { "data": "CardOpeC1" },//13
            { "data": "CardOpeC2" },//14
            { "data": "CardOpeC3" },//15
            { "data": "CardOpe" },//16

            { "data": "CbOpeC1" },//17
            { "data": "CbOpeC2" },//18
            { "data": "CbOpeC3" },//19
            { "data": "CbOpe" },//20

            { "data": "OtherOpeC1" },//21    
            { "data": "OtherOpeC2" },//22      
            { "data": "OtherOpeC3" },//23
            { "data": "OtherOpe" },//24

            { "data": "TraficOpeC1" },//25
            { "data": "TraficOpeC2" },//26
            { "data": "TraficOpeC3" },//27

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Tlp }; } },//28
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Card }; } },//29
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Cb }; } },//30
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Other }; } },//31

            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//32
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//33
            { "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//34           

            { "data": "TraficOpeMeanValue" },//35
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left none", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-left none", "targets": 5 },

            { "width": "3%", "className": "text-right none", "targets": 6 },
            { "width": "3%", "className": "text-left none", "targets": 7 },

            { "width": "3%", "className": "text-right none", "targets": 8 },

            { "width": "0%", "className": "text-right none", "targets": 9 },
            { "width": "0%", "className": "text-right none", "targets": 10 },
            { "width": "0%", "className": "text-right none", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },

            { "width": "0%", "className": "text-right none", "targets": 13 },
            { "width": "0%", "className": "text-right none", "targets": 14 },
            { "width": "0%", "className": "text-right none", "targets": 15 },
            { "width": "3%", "className": "text-right", "targets": 16 },

            { "width": "0%", "className": "text-right none", "targets": 17 },
            { "width": "0%", "className": "text-right none", "targets": 18 },
            { "width": "0%", "className": "text-right none", "targets": 19 },
            { "width": "3%", "className": "text-right", "targets": 20 },

            { "width": "0%", "className": "text-right none", "targets": 21 },
            { "width": "0%", "className": "text-right none", "targets": 22 },
            { "width": "0%", "className": "text-right none", "targets": 23 },
            { "width": "3%", "className": "text-right", "targets": 24 },

            { "width": "3%", "className": "text-right", "targets": 25 },
            { "width": "3%", "className": "text-right", "targets": 26 },
            { "width": "3%", "className": "text-right", "targets": 27 },

            { "width": "0%", "className": "text-right none", "targets": 28 },
            { "width": "0%", "className": "text-right none", "targets": 29 },
            { "width": "0%", "className": "text-right none", "targets": 30 },
            { "width": "0%", "className": "text-right none", "targets": 31 },

            { "width": "0%", "className": "text-right none", "targets": 32 },//
            { "width": "0%", "className": "text-right none", "targets": 33 },//
            { "width": "0%", "className": "text-right none", "targets": 34 },//

            { "width": "0%", "className": "text-right", "targets": 35 },//

            { "targets": 4, "render": function (data, type, row) { return DataTableGapInfoGet(row['TraficOpe'], row['TraficCe']) + DataTableFormatIntGet(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapInfoGet(row['TraficOpeOld'], row['TraficCeOld']) + DataTableFormatIntGet(data); } },

            {
                "targets": 8, "render": function (data, type, row) {
                    if (row['TraficOpeOld'].toFixed(2) != 0) {
                        var evo = ((row['TraficOpe'] - row['TraficOpeOld']) / row['TraficOpeOld']) * 100;
                        return DataTableFormatRateGet(evo.toFixed(2));
                    }
                    else {
                        return '';
                    }
                }
            },
            //{ "targets": 12, "render": function (data, type, row) { return DataTableGapInfoGet(row['TlpOpe'], row['Tlp']) + row['TlpOpe'] + '&nbsp;&nbsp;' + DataTableTlpGet(row['TraficOpe'], row['TlpOpe']); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableGapInfoGet(row['CardOpe'], row['Card']) + row['CardOpe']; } },
            { "targets": 20, "render": function (data, type, row) { return DataTableGapInfoGet(row['CbOpe'], row['Cb']) + row['CbOpe']; } },
            { "targets": 24, "render": function (data, type, row) { return DataTableGapInfoGet(row['OtherOpe'], row['Other']) + row['OtherOpe']; } },

            { "targets": 35, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total1));

            Total2 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //var TlpRate = (Total2 / Total1) * 100;

            $(api.column(12).footer()).html(numShortFormat(Total2) + ' ' + DataTableTlpGet(Total1, Total2));



            //if (Evo < 0)
            //    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}


function RepoTraficStationDayGet(ActionBtnId, Icon, SiteId, StationNumber, DateStringStart, DateStringEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoTraficStationDay';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (IsChart == true) {
                if ((DateStringStart - DateStringEnd != 0) && StationNumber != '0') {
                    //Variables
                    //var DateValueStart = JsDateValueFromDateString(DateStringStart);
                    //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
                    //var HeaderIndex = '1';
                    //var TimeIndex = '0';
                    //var PageIndex = '';
                    //var PageRowIndex = '';

                    //Total
                    var Title = 'Trafic journalier total';
                    var PatternChart = Pattern + 'TotalLine';
                    var labels = GetColumnArray(PatternTableId, 10);
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var data2 = GetColumnArray(PatternTableId, 3);

                    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                    ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic journalier', data1, 'Trafic journalier A-1', data2, false);


                    //Mp
                    Title = 'Trafic journalier par moyen de paiement';
                    PatternChart = Pattern + 'MpLine';

                    var labels = GetColumnArray(PatternTableId, 10);
                    var data1 = GetColumnArray(PatternTableId, 4);
                    var data2 = GetColumnArray(PatternTableId, 5);
                    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                    //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);
                    //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);
                    ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, data2, false);

                    Title = 'Trafic journalier par classe';
                    var PatternChart = Pattern + 'ClLine';
                    var labels = GetColumnArray(PatternTableId, 10);
                    var data1 = GetColumnArray(PatternTableId, 6);
                    var data2 = GetColumnArray(PatternTableId, 7);
                    var data3 = GetColumnArray(PatternTableId, 8);
                    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                    ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

                    ShowGridReport('Grid_0001');
                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueStationDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "StationNumber": StationNumber,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "StationName" }, //0
            { "data": "DhmValue" }, //1

            { "data": "NumberCeTrx" },//2
            { "data": "NumberCeTrxOld" },//3

            { "data": "NumberCeTrxTlp" },//4
            { "data": "NumberCeTrxOther" },//5

            { "data": "NumberCeTrxC1" },//6
            { "data": "NumberCeTrxC2" },//7
            { "data": "NumberCeTrxC3" },//8

            { "data": "NumberCeTrx" },//9

            //{ "mData": function vehicle(data, type, dataToSet) { return new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + 0 + ':' + 0 + ':0'); } },//28
            //{ "mData": function vehicle(data, type, dataToSet) { return data.Year + '-' + data.Month + '-' + data.Day; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2); } },//10

            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Tlp }; } },//28
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Card }; } },//29
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Cb }; } },//30
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Other }; } },//31

            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//32
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//33
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//34           
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right none", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            //{ "targets": 1, "render": function (data, type, row) { return data; } },

            { "targets": 2, "render": function (data, type, row) { return DataTableGapInfoGet(row['NumberToll'], row['NumberCeTrx']) + DataTableFormatIntGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableGapInfoGet(row['NumberTollOld'], row['NumberCeTrxOld']) + DataTableFormatIntGet(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableGapInfoGet(row['NumberTollTlp'], row['NumberCeTrxTlp']) + DataTableFormatIntGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGapInfoGet(row['NumberTollOther'], row['NumberCeTrxOther']) + DataTableFormatIntGet(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapInfoGet(row['NumberTollC1'], row['NumberCeTrxC1']) + DataTableFormatIntGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGapInfoGet(row['NumberTollC2'], row['NumberCeTrxC2']) + DataTableFormatIntGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapInfoGet(row['NumberTollC3'], row['NumberCeTrxC3']) + DataTableFormatIntGet(data); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableEvolutionGet(row['NumberCeTrxOld'], row['NumberCeTrx']); } },
            { "targets": 10, "render": function (data, type, row) { return data; } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(numShortFormat(Total1));

            Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total2) + ' ' + DataTableTlpGet(Total1, Total2));

            //if (Evo < 0)
            //    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}


function RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd) {

    var DateStringStart = DateStringEnd;

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoTraficCompanyDay';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);


            //Variables
            //var DateValueStart = JsDateValueFromDateString(DateStringStart);
            //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
            //var HeaderIndex = '1';
            //var TimeIndex = '0';
            //var PageIndex = '';
            //var PageRowIndex = '';

            //Total
            var Title = 'Trafic journalier total';
            var PatternChart = Pattern + 'TotalLine';
            var labels = GetColumnArray(PatternTableId, 9);
            var data1 = GetColumnArray(PatternTableId, 1);
            var data2 = GetColumnArray(PatternTableId, 2);

            document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic journalier', data1, 'Trafic journalier A-1', data2, false);


            //Mp
            Title = 'Trafic journalier par moyen de paiement';
            PatternChart = Pattern + 'MpLine';

            var labels = GetColumnArray(PatternTableId, 9);
            var data1 = GetColumnArray(PatternTableId, 3);
            var data2 = GetColumnArray(PatternTableId, 4);
            document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, data2, false);

            Title = 'Trafic journalier par classe';
            var PatternChart = Pattern + 'ClLine';
            var labels = GetColumnArray(PatternTableId, 9);
            var data1 = GetColumnArray(PatternTableId, 5);
            var data2 = GetColumnArray(PatternTableId, 6);
            var data3 = GetColumnArray(PatternTableId, 7);
            document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

            ShowReport('Grid_0002' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoTraficDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValue" }, //0

            { "data": "NumberCeTrx" },//1
            { "data": "NumberCeTrxOld" },//2

            { "data": "NumberCeTrxTlp" },//3
            { "data": "NumberCeTrxOther" },//4

            { "data": "NumberCeTrxC1" },//5
            { "data": "NumberCeTrxC2" },//6
            { "data": "NumberCeTrxC3" },//7

            { "data": "NumberCeTrx" },//8

            //{ "mData": function vehicle(data, type, dataToSet) { return new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + 0 + ':' + 0 + ':0'); } },//28
            //{ "mData": function vehicle(data, type, dataToSet) { return data.Year + '-' + data.Month + '-' + data.Day; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2); } },//9

            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Tlp }; } },//28
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Card }; } },//29
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Cb }; } },//30
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Other }; } },//31

            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//32
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//33
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//34           
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "3%", "className": "text-right none", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-center none", "targets": 9 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableGapWithValueInfoGet(row['NumberToll'], row['NumberCeTrx']); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableGapWithValueInfoGet(row['NumberTollOld'], row['NumberCeTrxOld']); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableGapWithValueInfoGet(row['NumberTollTlp'], row['NumberCeTrxTlp']); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableGapWithValueInfoGet(row['NumberTollOther'], row['NumberCeTrxOther']); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableGapWithValueInfoGet(row['NumberTollC1'], row['NumberCeTrxC1']); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableGapWithValueInfoGet(row['NumberTollC2'], row['NumberCeTrxC2']); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGapWithValueInfoGet(row['NumberTollC3'], row['NumberCeTrxC3']); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableEvolutionGet(row['NumberCeTrxOld'], row['NumberCeTrx']); } },
            { "targets": 9, "render": function (data, type, row) { return data; } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(2).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numShortFormat(Total2) + ' ' + DataTableTlpGet(Total1, Total2));

            //if (Evo < 0)
            //    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}

function RepoTraficStationHourClOpeUpload() {

    var ActionBtnId = 'ParamActionBtnId1';
    var Icon = 'fas fa-redo-alt btn-icon-m-cl gc-c1-cl';

    var TaskId = '00';
    var Source = '08';
    var FileTypeId = '80';

    var SiteId = GetElementValue('SiteId');
    var LSId = GetElementValue('LSId');
    var BagContainerId = GetElementDropDownListValue('BagContainerId');
    var StationNumber = GetElementDropDownListValue('StationNumberId');
    var LaneName = '0';
    var PdvId = '0';
    var BillingId = '0';
    var CategoryId = '0';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var HMPlanString = '2359';
    var IsEveryDay = false;
    var IsEveryHour = false;
    var IsPlanned = false;
    var IsCron = false;
    var AddDaysStart = 0;
    var AddDaysEnd = 0;

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    CertFileAdd(ActionBtnId,
        Icon,
        TaskId,
        Source,
        FileTypeId,
        SiteId,
        LSId,
        BagContainerId,
        StationNumber,
        LaneName,
        PdvId,
        DateStringStart,
        DateStringEnd,

        HMPlanString,
        IsEveryDay,
        IsEveryHour,
        IsPlanned,
        IsCron,
        BillingId,
        CategoryId,
        AddDaysStart,
        AddDaysEnd
    );

}


function RepoTraficStationDayCeUpload() {

    var ActionBtnId = 'ParamActionBtnId1';
    var Icon = 'fas fa-redo-alt btn-icon-m-cl gc-c1-cl';

    var TaskId = '00';
    var Source = '07';
    var FileTypeId = 'N1';

    var SiteId = GetElementValue('SiteId');
    var LSId = GetElementValue('LSId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = '0';
    var PdvId = '0';
    var BillingId = '0';
    var CategoryId = '0';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var HMPlanString = '2359';
    var IsEveryDay = false;
    var IsEveryHour = false;
    var IsPlanned = false;
    var IsCron = false;
    var AddDaysStart = 0;
    var AddDaysEnd = 0;

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    CertFileAdd(ActionBtnId,
        Icon,
        TaskId,
        Source,
        FileTypeId,
        SiteId,
        LSId,
        BagContainerId,
        StationNumber,
        LaneName,
        PdvId,
        DateStringStart,
        DateStringEnd,

        HMPlanString,
        IsEveryDay,
        IsEveryHour,
        IsPlanned,
        IsCron,
        BillingId,
        CategoryId,
        AddDaysStart,
        AddDaysEnd
    );
}

function RepoTraficStationHourMpOpeUpload() {

    var ActionBtnId = 'ParamActionBtnId2';
    var Icon = 'fas fa-redo-alt btn-icon-m-cl gc-c1-cl';

    var TaskId = '00';
    var Source = '08';
    var FileTypeId = '86';

    var SiteId = GetElementValue('SiteId');
    var LSId = GetElementValue('LSId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = '0';
    var PdvId = '0';
    var BillingId = '0';
    var CategoryId = '0';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var HMPlanString = '2359';
    var IsEveryDay = false;
    var IsEveryHour = false;
    var IsPlanned = false;
    var IsCron = false;
    var AddDaysStart = 0;
    var AddDaysEnd = 0;

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    CertFileAdd(ActionBtnId,
        Icon,
        TaskId,
        Source,
        FileTypeId,
        SiteId,
        LSId,
        BagContainerId,
        StationNumber,
        LaneName,
        PdvId,
        DateStringStart,
        DateStringEnd,

        HMPlanString,
        IsEveryDay,
        IsEveryHour,
        IsPlanned,
        IsCron,
        BillingId,
        CategoryId,
        AddDaysStart,
        AddDaysEnd
    );

}


function RepoTraficStationDayZipdataUpload() {

    var ActionBtnId = 'ParamActionBtnId2';
    var Icon = 'fas fa-redo-alt btn-icon-m-cl gc-c1-cl';

    var TaskId = '00';
    var Source = '05';
    var FileTypeId = '58';

    var SiteId = GetElementValue('SiteId');
    var LSId = GetElementValue('LSId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = '0';
    var PdvId = '0';
    var BillingId = '0';
    var CategoryId = '0';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var HMPlanString = '2359';
    var IsEveryDay = false;
    var IsEveryHour = false;
    var IsPlanned = false;
    var IsCron = false;
    var AddDaysStart = 0;
    var AddDaysEnd = 0;

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    CertFileAdd(ActionBtnId,
        Icon,
        TaskId,
        Source,
        FileTypeId,
        SiteId,
        LSId,
        BagContainerId,
        StationNumber,
        LaneName,
        PdvId,
        DateStringStart,
        DateStringEnd,

        HMPlanString,
        IsEveryDay,
        IsEveryHour,
        IsPlanned,
        IsCron,
        BillingId,
        CategoryId,
        AddDaysStart,
        AddDaysEnd
    );
}



function RepoTraficStationHourCeUpload() {

    var ActionBtnId = 'ParamActionBtnId3';
    var Icon = 'fas fa-redo-alt btn-icon-m-cl gc-c1-cl';

    var TaskId = '00';
    var Source = '07';
    var FileTypeId = '70';

    var SiteId = GetElementValue('SiteId');
    var LSId = GetElementValue('LSId');
    var BagContainerId = GetElementValue('BagContainerId');
    var StationNumber = GetElementValue('StationNumberId');
    var LaneName = '0';
    var PdvId = '0';
    var BillingId = '0';
    var CategoryId = '0';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var HMPlanString = '2359';
    var IsEveryDay = false;
    var IsEveryHour = false;
    var IsPlanned = false;
    var IsCron = false;
    var AddDaysStart = 0;
    var AddDaysEnd = 0;

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin btn-icon-m-cl gc-c1-cl');

    CertFileAdd(ActionBtnId,
        Icon,
        TaskId,
        Source,
        FileTypeId,
        SiteId,
        LSId,
        BagContainerId,
        StationNumber,
        LaneName,
        PdvId,
        DateStringStart,
        DateStringEnd,

        HMPlanString,
        IsEveryDay,
        IsEveryHour,
        IsPlanned,
        IsCron,
        BillingId,
        CategoryId,
        AddDaysStart,
        AddDaysEnd
    );

}

function JsDateValueFromDateString(DateString) {
    return new String(DateString).substr(0, 2) + '/' + new String(DateString).substr(2, 2) + '/' + new String(DateString).substr(4, 4);
}

function JsSensLabelGet(Sens) {
    if (Sens == 'E') {
        return 'Entrées';
    }
    if (Sens == 'S') {
        return 'Sorties';
    }
}

function RepoTraficStationHourSerialGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, DateStringStart, DateStringEnd, itemData, CexNameShortTmp, StationNameTmp) {

    var imax = itemData.length - 1;
    var kmax = imax * 2;

    for (var i = 0; i <= imax; i++) {

        CexIdTmp = itemData[i].CexId;
        BagContainerIdTmp = itemData[i].BagContainerId;
        StationNumberTmp = itemData[i].StationNumber;
        SensTmp = itemData[i].Sens;
        CexNameShortTmp = itemData[i].CexNameShort;
        StationNameTmp = itemData[i].StationName;
        k = i * 2;

        if (
            (CexIdTmp == '01' && StationNumberTmp == '04') ||
            (CexIdTmp == '01' && StationNumberTmp == '02') ||
            (CexIdTmp == '01' && StationNumberTmp == '31') ||
            (CexIdTmp == '01' && StationNumberTmp == '05') ||
            (CexIdTmp == '01' && StationNumberTmp == '18') ||
            (CexIdTmp == '01' && StationNumberTmp == '43') ||
            (CexIdTmp == '01' && StationNumberTmp == '45') ||
            (CexIdTmp == '01' && StationNumberTmp == '47')
            //StationNumberTmp == '69' ||
            //StationNumberTmp == '66' ||
            //StationNumberTmp == '67' ||
            //StationNumberTmp == '20' ||
            //StationNumberTmp == '24' ||
            //StationNumberTmp == '61' ||
            //StationNumberTmp == '63' ||
            //StationNumberTmp == '35' ||
            //StationNumberTmp == '33' ||
            //StationNumberTmp == '34' ||
            //StationNumberTmp == '37' ||
            //StationNumberTmp == '38' ||
            //StationNumberTmp == '70' ||
            //StationNumberTmp == '71' ||
            //StationNumberTmp == '72' ||
            //StationNumberTmp == '73' ||
            //StationNumberTmp == '50' ||
            //StationNumberTmp == '55' ||
            //StationNumberTmp == '56' ||
            //StationNumberTmp == '57' ||
            //StationNumberTmp == '58' ||
            //StationNumberTmp == '78'
        ) {
            RepoTraficStationHourGet(ActionBtnId, Icon, itemData, imax, 0, DateStringStart, DateStringEnd);
        }
        else {
            if (
                (CexIdTmp == '01' && StationNumberTmp == '40') ||
                (CexIdTmp == '01' && StationNumberTmp == '03') ||
                (CexIdTmp == '01' && StationNumberTmp == '30') ||
                (CexIdTmp == '01' && StationNumberTmp == '06') ||
                (CexIdTmp == '01' && StationNumberTmp == '19') ||
                (CexIdTmp == '01' && StationNumberTmp == '42') ||
                (CexIdTmp == '01' && StationNumberTmp == '44')
                //StationNumberTmp == '68' ||
                //StationNumberTmp == '23' ||
                //StationNumberTmp == '62' ||
                //StationNumberTmp == '32' ||
                //StationNumberTmp == '77'
            ) {
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'E', DateStringStart, DateStringEnd, k, CexNameShortTmp, StationNameTmp);
            }
            else {
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'E', DateStringStart, DateStringEnd, k, CexNameShortTmp, StationNameTmp);
                RepoTraficStationHourGet(ActionBtnId, Icon, CexIdTmp, BagContainerIdTmp, StationNumberTmp, 'S', DateStringStart, DateStringEnd, k + 1, CexNameShortTmp, StationNameTmp);
            }
        }
    }
}















function RepoTraficCexOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(2, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficCexDisplay()");
    $('#ParamTitleId').text("Trafic par Centre d'Exploitation");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    document.getElementById('ParamActionBtnId3').setAttribute("onClick", "RepoPrint('RepoTraficCexHour')");

    $('#ParamActionTextId').text("Afficher");
    ShowReport('CexId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
    ShowReport('ParamActionContainerId3');
}

function RepoTraficSectionOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(3, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficCexDisplay()");
    $('#ParamTitleId').text("Trafic par Centre d'Exploitation");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId2');

    ShowReport('CexId' + 'Parent');

    ShowReport('TimeId' + 'Parent');
}

function RepoTraficAxleOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(4, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficAxleDisplay()");
    $('#ParamTitleId').text("Trafic par axe");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId2');

    ShowReport('AxleId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
}

function RepoTraficRegionOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(5, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficRegionDisplay()");
    $('#ParamTitleId').text("Trafic par région");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId3');

    ShowReport('RegionId' + 'Parent');
    ShowReport('TimeId' + 'Parent');
}

function RepoTraficCompanyOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(6, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficCompanyDisplay()");
    $('#ParamTitleId').text("Choix des paramètres");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId3');

    ShowReport('TimeId' + 'Parent');

    //Export
    //if (document.getElementById('ExportExcelBtnId') != null) {
    //    document.getElementById('ExportExcelBtnId').setAttribute("onClick", "Export(\'RepoTraficCompany\', \'Excel\')");
    //}
    //if (document.getElementById('ExportPDFBtnId') != null) {
    //    document.getElementById('ExportPDFBtnId').setAttribute("onClick", "Export(\'RepoTraficCompany\', \'PDF\')");
    //} 

    //Export
    if (document.getElementById('ExportPDFBtnId') != null) {
        document.getElementById('ExportPDFBtnId').setAttribute("onClick", "ExportRepoCert(\'PDF\', \'Trafic\', \'Company\')");
    }
    if (document.getElementById('ExportExcelBtnId') != null) {
        document.getElementById('ExportExcelBtnId').setAttribute("onClick", "ExportRepoCert(\'Excel\', \'Trafic\', \'Company\')");
    }
}

function RepoTraficDshOpen() {
    RepoTraficAllReportsHide();
    RepoTraficAllParametersHide();
    MenuBarHighlight(7, 7);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficDshDisplay()");
    $('#ParamTitleId').text("Trafic global");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');

    $('#ParamActionTextId').text("Afficher");

    ShowReport('ParamActionContainerId3');

    ShowReport('TimeId' + 'Parent');
}

//function RepoTraficPeriodOpen() {
//    RepoTraficAllReportsHide();
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');

//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficDivisionDisplay()");
//    $('#ParamTitleId').text("Trafic par période");
//    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
//    $('#ParamActionTextId').text("Afficher");

//    HideReport('CexId' + 'Parent');
//    HideReport('BagContainerId' + 'Parent');
//    HideReport('StationNumberId' + 'Parent');
//    HideReport('SensId' + 'Parent');
//    ShowReport('DateStartId' + 'Parent');
//    ShowReport('DateEndId' + 'Parent');

//    HideReport('ParamActionContainerId1');
//}

//function RepoTraficDivisionOpen() {
//    RepoTraficAllReportsHide();
//    HideReport('HomeReportId');

//    ShowReport('ParamReportId');

//    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoTraficPeriodDisplay()");
//    $('#ParamTitleId').text("Trafic par période");
//    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
//    $('#ParamActionTextId').text("Afficher");

//    HideReport('CexId' + 'Parent');
//    HideReport('BagContainerId' + 'Parent');
//    HideReport('StationNumberId' + 'Parent');
//    HideReport('SensId' + 'Parent');
//    ShowReport('DateStartId' + 'Parent');
//    ShowReport('DateEndId' + 'Parent');

//    HideReport('ParamActionContainerId1');
//}

//function RepoTraficSheetOpen() {
//    RepoTraficAllReportsHide();
//    HideReport('HomeReportId');

//    HideReport('ParamReportId');
//}




function RepoTraficAllReportsHide() {
    var HeaderIndex = '0';
    var TimeIndex = '0';
    var LevelIndex = '0';

    HideReport('HomeReportId');
    HideReport('ParamReportId');
    HideReport('ExportReportId');
    HideReport('CertReportId');
    //HideReport('CoverReportId');

    HeaderIndex = '1';
    TimeIndex = '0';
    PageIndex = '';
    PageRowIndex = '0';

    for (var PatternIndex = 0; PatternIndex <= 59; PatternIndex++) {
        HideReport('Grid' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_GridReportId');
    }

    HeaderIndex = '1';
    TimeIndex = '0';
    PageIndex = '';
    PageRowIndex = '1';
    for (var PatternIndex = 0; PatternIndex <= 59; PatternIndex++) {
        HideReport('Grid' + HeaderIndex + TimeIndex + PageIndex + PageRowIndex + PatternIndex + '_GridReportId');
    }

    HideReport('Grid0000_GridReportId')

    HideReport('Grid12_' + 'GridReportId');
    HideReport('Grid13_' + 'GridReportId');
    HideReport('Grid14_' + 'GridReportId');

    //HideReport('Grid200_GridReportId');
    //HideReport('Grid201_GridReportId');

    HideReport('Grid300_GridReportId');
    HideReport('Grid301_GridReportId');

    HideReport('Grid400_GridReportId');
    HideReport('Grid401_GridReportId');

    HideReport('Grid500_GridReportId');
    HideReport('Grid501_GridReportId');

    HideReport('Page60_PageReportId');
    HideReport('Page61_PageReportId');

    //Region
    HeaderIndex = '5';
    TimeIndex = '0';
    LevelIndex = '';
    for (var PatternIndex = 0; PatternIndex <= 6; PatternIndex++) {
        HideReport('Page' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_PageReportId');
    }

    HideReport('Page51_PageReportId');

    HideReport('RepoTraficStationDay' + 'TableReportId');
    HideReport('RepoTraficStationDayDivision' + 'TableReportId');
    HideReport('RepoTraficStationMonth' + 'TableReportId');

    //Cex
    HeaderIndex = '2';
    TimeIndex = '0';
    LevelIndex = '';
    for (var PatternIndex = 0; PatternIndex <= 15; PatternIndex++) {
        HideReport('Page' + HeaderIndex + TimeIndex + PatternIndex + LevelIndex + '_PageReportId');
    }

    HideReport('Page21_PageReportId');

    //HideReport('RepoTraficCex' + 'Total' + 'Line' + 'ChartReportId');
    //HideReport('RepoTraficCex' + 'Mp' + 'Line' + 'ChartReportId');
    //HideReport('RepoTraficCex' + 'Cl' + 'Line' + 'ChartReportId');
    //HideReport('RepoTraficCex' + 'Total' + 'Bar' + 'ChartReportId');
    //HideReport('RepoTraficCex' + 'TableReportId');

    HideReport('RepoTraficSection' + 'TableReportId');

    HideReport('RepoTraficAxle' + 'TableReportId');

    HideReport('RepoTraficRegion' + 'TableReportId');

    HideReport('RepoTraficPeriod' + 'Total' + 'Line' + 'ChartReportId');
    HideReport('RepoTraficPeriod' + 'Mp' + 'Line' + 'ChartReportId');
    HideReport('RepoTraficPeriod' + 'Cl' + 'Line' + 'ChartReportId');
    HideReport('RepoTraficPeriod' + 'TableReportId');



    HideReport('CertFilePlan' + 'TableReportId');



}

function RepoTraficAllParametersHide() {

    HideReport('RegionId' + 'Parent');
    HideReport('AxleId' + 'Parent');
    HideReport('SectionId' + 'Parent');
    HideReport('CexId' + 'Parent');
    HideReport('BagContainerId' + 'Parent');
    HideReport('StationNumberId' + 'Parent');
    HideReport('SensId' + 'Parent');
    HideReport('IsPrincipalId' + 'Parent');


    HideReport('DateStartId' + 'Parent');
    HideReport('DateEndId' + 'Parent');
    HideReport('MonthStartId' + 'Parent');
    HideReport('MonthEndId' + 'Parent');
    HideReport('TimeId' + 'Parent');

    HideReport('ParamActionContainerId1');
    HideReport('ParamActionContainerId2');
    HideReport('ParamActionContainerId3');

    HideReport('TaskKillBtnId');
    HideReport('CertReportSendBtnId');
    HideReport('CertReportViewBtnId');
}

//function RepoTraficHomeOpen() {
//    //LeftMenuHide();
//    RepoTraficAllReportsHide();
//    RepoTraficAllParametersHide();
//    MenuBarHighlight(0, 7);

//    //ShowReport('HomeReportId');
//    ParamTimesGet();
//    HtmlDropDownListFill('CexId', '0', '/Param/ParamCexGet', 'CexId', 'CexNameShort');
//    HtmlDropDownListFill('RegionId', '0', '/Param/ParamRegionsGet', 'RegionId', 'RegionNameShort');
//    HtmlDropDownListFill('AxleId', '0', '/Param/ParamAxlesGet', 'AxleId', 'AxleName');
//    //HtmlDropDownListFill('AxleIdTmp', '0', '/Param/ParamAxlesTmpGet', 'AxleId', 'AxleName');  

//    ParamResetDropDownList('BagContainerId');
//    ParamResetDropDownList('StationNumberId');

//    //Cover
//    document.getElementById('Grid0000_GridCol0Id').setAttribute('Class', 'col');
//    ShowReport('Grid0000_GridCol0Id');
//    document.getElementById('Grid0000_GridCol1Id').setAttribute('Class', 'col-16');
//    document.getElementById('Grid0000_GridCol1Id').style.height = '3080px';
//    ShowReport('Grid0000_GridCol1Id');
//    document.getElementById('Grid0000_GridCol2Id').setAttribute('Class', 'col');
//    ShowReport('Grid0000_GridCol2Id');
//    //ShowReport('CoverReportId');
//}


function ParamBagContainersFromLS2Get() {
    var SiteId = GetElementValue('SiteId');
    var LSId = GetElementValue('LSId');

    $("#BagContainerId").empty();

    $.get("/Param/ParamBagConatinerFromLSGet", { SiteId: SiteId, LSId: LSId }, function (data) {
        $.each(data, function (index, row) {
            $("#BagContainerId").append("<option value='" + row.BagContainerId + "'>" + row.BagContainerId + ' - ' + row.BagContainerName + "</option>")
        });
    });
    $("#BagContainerId").append("<option value='" + 0 + "'>" + "--" + "</option>");
    $("#BagContainerId").val('0');


    $("#StationNumberId").empty();
    $("#StationNumberId").append("<option value='" + 0 + "'>" + "--" + "</option>");
    $("#StationNumberId").val('0');

    ShowReport('BagContainerId' + 'Parent');

    ParamResetDropDownList('StationNumberId');
}



function RepoTraficAllDayOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Trafic journalier global');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ShowReport('ExportReportId');

    //HideReport('Grid_0002GridReportId');

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficAllDayDisplay()");
    //ParamActionBtnGet(1, 'Charger CE', 'fas fa-redo-alt', "RepoTraficStationDayCeUpload()");
    //ParamActionBtnGet(2, 'Charger Zipdata', 'fas fa-redo-alt', "RepoTraficStationDayZipdataUpload()");
    //ParamActionBtnGet(3, 'MAJ TMJ', 'fas fa-redo-alt', "RepoTraficRevenueMeanValueUpdate()");
    //ParamActionBtnGet(5, 'Notifier Moi-même', 'fas fa-paper-plane', "RepoTraficRevenueStationDayAllMeNotify()");
    //ParamActionBtnGet(6, 'Notifier Région', 'fas fa-paper-plane', "RepoTraficRevenueStationDayAllRegionNotify()");
    //ParamActionBtnGet(7, 'Notifier DG', 'fas fa-paper-plane', "RepoTraficRevenueStationDayAllDgNotify()");

    //Parents
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //DropDownListSet('SiteId', '0');
    //DropDownListSet('LSId', '0');
    //DropDownListSet('BagContainerId', '0');
    //DropDownListSet('StationNumberId', '0');


    //Reset  
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);

    //Print
    //if (document.getElementById('ExportExcelBtnId') != null) {
    //    document.getElementById('ExportExcelBtnId').setAttribute("onClick", "Export(\'RepoTraficStationDayAll\', \'Excel\')");
    //}
    //if (document.getElementById('ExportPDFBtnId') != null) {
    //    document.getElementById('ExportPDFBtnId').setAttribute("onClick", "Export(\'RepoTraficStationDayAll\', \'PDF\')");
    //}

    //RepoTraficAllDayDisplay();

}


function RepoTraficAllDayDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoTraficAllDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd, IsChart);
}


function RepoTraficAllDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoTraficDay';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (IsChart == true) {
                //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

                //Variables
                //var DateValueStart = JsDateValueFromDateString(DateStringStart);
                //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
                //var HeaderIndex = '1';
                //var TimeIndex = '0';
                //var PageIndex = '';
                //var PageRowIndex = '';

                //Total
                //var Title = 'Trafic journalier total';
                //var PatternChart = Pattern + 'TotalLine';
                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 2);
                //var data2 = GetColumnArray(PatternTableId, 3);

                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic journalier', data1, 'Trafic journalier A-1', data2, false);


                //Mp
                //Title = 'Trafic journalier par moyen de paiement';
                //PatternChart = Pattern + 'MpLine';

                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 4);
                //var data2 = GetColumnArray(PatternTableId, 5);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, data2, false);

                //Title = 'Trafic journalier par classe';
                //var PatternChart = Pattern + 'ClLine';
                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 6);
                //var data2 = GetColumnArray(PatternTableId, 7);
                //var data3 = GetColumnArray(PatternTableId, 8);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

                //ShowReport('Grid_0001' + 'GridReportId');
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValue" }, //0

            { "data": "NumberCeTrx" },//1
            { "data": "NumberCeTrx" },//2

            { "data": "NumberCeTrxC1" },//3
            { "data": "NumberCeTrxC1" },//4
            { "data": "NumberCeTrxC1" },//5

            { "data": "NumberCeTrxC2" },//6
            { "data": "NumberCeTrxC2" },//7
            { "data": "NumberCeTrxC2" },//8

            { "data": "NumberCeTrxC3" },//9
            { "data": "NumberCeTrxC3" },//10
            { "data": "NumberCeTrxC3" },//11

            { "data": "NumberCeTrxTlp" },//12
            { "data": "NumberCeTrxTlp" },//13
            { "data": "NumberCeTrxTlp" },//14                    
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "0.5%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },

            { "width": "0.5%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "0.5%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "0.5%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "0.5%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueFromRowGet(row); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberToll'], data, 10); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC1'], data, 10); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC2'], data, 10); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC3'], data, 10); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlp'], data, 10); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //DataTableTotalIntGet(api, intVal, 1);
            DataTableTotalIntGet(api, intVal, 2);
            //DataTableTotalIntGet(api, intVal, 3);
            DataTableTotalIntGet(api, intVal, 4);
            //DataTableTotalIntGet(api, intVal, 6);
            DataTableTotalIntGet(api, intVal, 7);
            //DataTableTotalIntGet(api, intVal, 9);
            DataTableTotalIntGet(api, intVal, 10);
            //DataTableTotalIntGet(api, intVal, 12);
            DataTableTotalIntGet(api, intVal, 13);

            DataTableTotalPercentageGet(api, intVal, 4, 2, 5);
            DataTableTotalPercentageGet(api, intVal, 7, 2, 8);
            DataTableTotalPercentageGet(api, intVal, 10, 2, 11);
            DataTableTotalPercentageGet(api, intVal, 13, 2, 14);
        }
    });
}

function RepoTraficAllMonthOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Trafic mensuel global');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ShowReport('ExportReportId');

    //HideReport('Grid_0002GridReportId');

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficAllMonthDisplay()");
    //ParamActionBtnGet(1, 'Charger CE', 'fas fa-redo-alt', "RepoTraficStationDayCeUpload()");
    //ParamActionBtnGet(2, 'Charger Zipdata', 'fas fa-redo-alt', "RepoTraficStationDayZipdataUpload()");
    //ParamActionBtnGet(3, 'MAJ TMJ', 'fas fa-redo-alt', "RepoTraficRevenueMeanValueUpdate()");
    //ParamActionBtnGet(5, 'Notifier Moi-même', 'fas fa-paper-plane', "RepoTraficRevenueStationDayAllMeNotify()");
    //ParamActionBtnGet(6, 'Notifier Région', 'fas fa-paper-plane', "RepoTraficRevenueStationDayAllRegionNotify()");
    //ParamActionBtnGet(7, 'Notifier DG', 'fas fa-paper-plane', "RepoTraficRevenueStationDayAllDgNotify()");

    //ShowReport
    //HideReport('SiteId' + 'Parent');
    //HideReport('LSId' + 'Parent');
    //HideReport('BagContainerId' + 'Parent');
    //HideReport('StationNumberId' + 'Parent');

    ShowParent('MonthStartId');
    ShowParent('MonthEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //DropDownListSet('SiteId', '0');
    //DropDownListSet('LSId', '0');
    //DropDownListSet('BagContainerId', '0');
    //DropDownListSet('StationNumberId', '0');


    //Reset  
    MonthValueFirstSet('MonthStartId');
    MonthValueLastSet('MonthEndId');

    //Print
    //if (document.getElementById('ExportExcelBtnId') != null) {
    //    document.getElementById('ExportExcelBtnId').setAttribute("onClick", "Export(\'RepoTraficStationDayAll\', \'Excel\')");
    //}
    //if (document.getElementById('ExportPDFBtnId') != null) {
    //    document.getElementById('ExportPDFBtnId').setAttribute("onClick", "Export(\'RepoTraficStationDayAll\', \'PDF\')");
    //}

    //RepoTraficAllMonthDisplay();
}


function RepoTraficAllMonthDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
    var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoTraficAllMonthGet(ActionBtnId, Icon, MonthStringStart, MonthStringEnd);
}

function RepoTraficAllMonthGet(ActionBtnId, Icon, MonthStringStart, MonthStringEnd) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoTraficMonth';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

            //Variables
            //var DateValueStart = JsDateValueFromDateString(DateStringStart);
            //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
            //var HeaderIndex = '1';
            //var TimeIndex = '0';
            //var PageIndex = '';
            //var PageRowIndex = '';

            //Total
            //var Title = 'Trafic journalier total';
            //var PatternChart = Pattern + 'TotalLine';
            //var labels = GetColumnArray(PatternTableId, 10);
            //var data1 = GetColumnArray(PatternTableId, 2);
            //var data2 = GetColumnArray(PatternTableId, 3);

            //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic journalier', data1, 'Trafic journalier A-1', data2, false);


            //Mp
            //Title = 'Trafic journalier par moyen de paiement';
            //PatternChart = Pattern + 'MpLine';

            //var labels = GetColumnArray(PatternTableId, 10);
            //var data1 = GetColumnArray(PatternTableId, 4);
            //var data2 = GetColumnArray(PatternTableId, 5);
            //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, data2, false);

            //Title = 'Trafic journalier par classe';
            //var PatternChart = Pattern + 'ClLine';
            //var labels = GetColumnArray(PatternTableId, 10);
            //var data1 = GetColumnArray(PatternTableId, 6);
            //var data2 = GetColumnArray(PatternTableId, 7);
            //var data3 = GetColumnArray(PatternTableId, 8);
            //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

            //ShowReport('Grid_0001' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueMonthGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "MonthStringStart": MonthStringStart,
                "MonthStringEnd": MonthStringEnd
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return data.Month + '/' + data.Year; } },//0

            { "data": "NumberCeTrx" },//1
            { "data": "NumberCeTrx" },//2

            { "data": "NumberCeTrxC1" },//3
            { "data": "NumberCeTrxC1" },//4
            { "data": "NumberCeTrxC1" },//5

            { "data": "NumberCeTrxC2" },//6
            { "data": "NumberCeTrxC2" },//7
            { "data": "NumberCeTrxC2" },//8

            { "data": "NumberCeTrxC3" },//9
            { "data": "NumberCeTrxC3" },//10
            { "data": "NumberCeTrxC3" },//11

            { "data": "NumberCeTrxTlp" },//12
            { "data": "NumberCeTrxTlp" },//13
            { "data": "NumberCeTrxTlp" },//14                    
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "0.5%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },

            { "width": "0.5%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "0.5%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "0.5%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "0.5%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return data; } },

            { "targets": 1, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberToll'], data, 10); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC1'], data, 10); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC2'], data, 10); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC3'], data, 10); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlp'], data, 10); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(2).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numShortFormat(Total2) + ' ' + DataTableTlpGet(Total1, Total2));

            ////if (Evo < 0)
            ////    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            ////else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}



function RepoTraficAllCumulOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Trafic cumulé global');
    ShowReport('ParamReportId');
    ParamMessageReset();
    //ShowReport('ExportReportId');

    //HideReport('Grid_0002GridReportId');



    //ShowReport
    //HideReport('SiteId' + 'Parent');
    //HideReport('LSId' + 'Parent');
    //HideReport('BagContainerId' + 'Parent');
    //HideReport('StationNumberId' + 'Parent');

    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //DropDownListSet('SiteId', '0');
    //DropDownListSet('LSId', '0');
    //DropDownListSet('BagContainerId', '0');
    //DropDownListSet('StationNumberId', '0');


    //Reset  
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);

    //Print
    //if (document.getElementById('ExportExcelBtnId') != null) {
    //    document.getElementById('ExportExcelBtnId').setAttribute("onClick", "Export(\'RepoTraficStationDayAll\', \'Excel\')");
    //}
    //if (document.getElementById('ExportPDFBtnId') != null) {
    //    document.getElementById('ExportPDFBtnId').setAttribute("onClick", "Export(\'RepoTraficStationDayAll\', \'PDF\')");
    //}

    //RepoTraficAllCumulDisplay();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficAllCumulDisplay()");
    ParamActionBtnGet(1, 'Exporter', 'fas fa-file-pdf', "RepoPreview()");
    ParamActionBtnGet(2, 'Tester', 'fas fa-paper-plane', "RepoNotify('Me')");
    ParamActionBtnGet(4, 'Notifier DG', 'fas fa-paper-plane', "RepoNotify('DG')");
}



function RepoTraficAllCumulDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoTraficAllCumulGet(ActionBtnId, Icon, DateStringStart, DateStringEnd, IsChart);
}


function RepoTraficAllCumulGet(ActionBtnId, Icon, DateStringStart, DateStringEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoTraficCumul';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';
    var data00 = 0;
    var data01 = 0;

    var data10 = 0;
    var data11 = 0;
    var data12 = 0;

    var data20 = 0;
    var data21 = 0;
    var data22 = 0;

    var data30 = 0;
    var data31 = 0;

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

            if (IsChart == true) {

                //Doughnut 0
                var Title = 'Trafic par moyen de paiement';
                var PatternChart = Pattern + 'MpPie';
                var label00 = 'Jawaz';

                var data = {
                    datasets: [{
                        data: [data00, data01],
                        backgroundColor: ['#FF7D3A', 'rgb(252, 243, 236)'],
                    }],

                    labels: [label00]
                };

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

                //Doughnut 1
                var Title = 'Trafic par classe';
                var PatternChart = Pattern + 'ClPie';
                var label10 = 'VL';
                var label11 = 'PL1';
                var label12 = 'PL2';

                var data = {
                    datasets: [{
                        data: [data10, data11, data12],
                        backgroundColor: ['rgb(74, 127, 176)', 'rgb(91, 155, 213)', 'rgb(173, 198, 229)'],
                    }],

                    labels: [label10, label11, label12]
                };

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

                //Doughnut 2
                var Title = 'Trafic Jawaz par classe';
                var PatternChart = Pattern + 'TlpClPie';
                var label20 = 'VL';
                var label21 = 'PL1';
                var label22 = 'PL2';

                var data = {
                    datasets: [{
                        data: [data20, data21, data22],
                        backgroundColor: ['rgb(196, 102, 39)', 'rgb(237, 125, 49)', 'rgb(244, 185, 164)'],
                    }],

                    labels: [label20, label21, label22]
                };

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

                //Labels
                ElementInputSet('Label_0000_Id', data30);
                ElementInputSet('Label_0001_Id', data31);

                ShowReport('Grid_0004' + 'GridReportId');
            }


        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueAllCumulGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValueStart" }, //0
            { "data": "DhmValueEnd" }, //1

            { "data": "NumberCeTrx" },//2
            { "data": "NumberCeTrx" },//3
            { "data": "NumberCeTrx" },//4

            { "data": "NumberCeTrxC1" },//5
            { "data": "NumberCeTrxC1" },//6
            { "data": "NumberCeTrxC1" },//7
            { "data": "NumberCeTrxC1" },//8

            { "data": "NumberCeTrxC2" },//9
            { "data": "NumberCeTrxC2" },//10
            { "data": "NumberCeTrxC2" },//11
            { "data": "NumberCeTrxC2" },//12

            { "data": "NumberCeTrxC3" },//13
            { "data": "NumberCeTrxC3" },//14
            { "data": "NumberCeTrxC3" },//15
            { "data": "NumberCeTrxC3" },//16

            { "data": "NumberCeTrxTlp" },//17
            { "data": "NumberCeTrxTlp" },//18
            { "data": "NumberCeTrxTlp" },//19   NumberCeTrxTlpC1

            { "data": "NumberCeTrxTlpC1" },//20
            { "data": "NumberCeTrxTlpC1" },//21
            { "data": "NumberCeTrxTlpC1" },//22

            { "data": "NumberCeTrxTlpC2" },//23
            { "data": "NumberCeTrxTlpC2" },//24
            { "data": "NumberCeTrxTlpC2" },//25

            { "data": "NumberCeTrxTlpC3" },//26
            { "data": "NumberCeTrxTlpC3" },//27
            { "data": "NumberCeTrxTlpC3" },//28
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },

            { "width": "0.5%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "0.5%", "className": "text-center none", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "0.5%", "className": "text-center none", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },

            { "width": "0.5%", "className": "text-center none", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },
            { "width": "3%", "className": "text-right", "targets": 16 },

            { "width": "0.5%", "className": "text-center none", "targets": 17 },
            { "width": "3%", "className": "text-right", "targets": 18 },
            { "width": "3%", "className": "text-right", "targets": 19 },

            { "width": "0.5%", "className": "text-center none", "targets": 20 },
            { "width": "3%", "className": "text-right", "targets": 21 },
            { "width": "3%", "className": "text-right", "targets": 22 },

            { "width": "0.5%", "className": "text-center none", "targets": 23 },
            { "width": "3%", "className": "text-right", "targets": 24 },
            { "width": "3%", "className": "text-right", "targets": 25 },

            { "width": "0.5%", "className": "text-center none", "targets": 26 },
            { "width": "3%", "className": "text-right", "targets": 27 },
            { "width": "3%", "className": "text-right", "targets": 28 },

            { "targets": 0, "render": function (data, type, row) { return DataTableDateValueStartFromRowGet(row); } },
            { "targets": 1, "render": function (data, type, row) { return DataTableDateValueEndFromRowGet(row); } },

            //{ "targets": 2, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberToll'], data, 10); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableIsValidInfoGet(row['IsValid']); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data / row['DaysNumber']); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC1'], data, 10); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntGet(data / row['DaysNumber']); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC2'], data, 10); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatIntGet(data / row['DaysNumber']); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC3'], data, 10); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableFormatIntGet(data / row['DaysNumber']); } },

            { "targets": 17, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlp'], data, 10); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 19, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },

            { "targets": 20, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC1'], data, 10); } },
            { "targets": 21, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 22, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 23, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC2'], data, 10); } },
            { "targets": 24, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 25, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 26, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC3'], data, 10); } },
            { "targets": 27, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 28, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //DataTableTotalIntGet(api, intVal, 3);

            //DataTableTotalIntGet(api, intVal, 5);
            //DataTableTotalIntGet(api, intVal, 8);
            //DataTableTotalIntGet(api, intVal, 11);
            //DataTableTotalIntGet(api, intVal, 14);

            //DataTableTotalIntGet(api, intVal, 17);
            //DataTableTotalIntGet(api, intVal, 20);
            //DataTableTotalIntGet(api, intVal, 23);

            //DataTableTotalPercentageGet(api, intVal, 5, 2, 6);
            //DataTableTotalPercentageGet(api, intVal, 8, 2, 9);
            //DataTableTotalPercentageGet(api, intVal, 11, 2, 12);
            //DataTableTotalPercentageGet(api, intVal, 14, 2, 15);

            //DataTableTotalPercentageGet(api, intVal, 17, 14, 18);
            //DataTableTotalPercentageGet(api, intVal, 20, 14, 21);
            //DataTableTotalPercentageGet(api, intVal, 23, 14, 24);

            //data00 = DataTableColumnPercentageGet(api, intVal, 14, 3);
            //data01 = (100 - data00).toFixed(1);

            //data10 = DataTableColumnPercentageGet(api, intVal, 5, 3);
            //data11 = DataTableColumnPercentageGet(api, intVal, 8, 3);
            //data12 = DataTableColumnPercentageGet(api, intVal, 11, 3);

            //data20 = DataTableColumnPercentageGet(api, intVal, 17, 14);
            //data21 = DataTableColumnPercentageGet(api, intVal, 20, 14);
            //data22 = DataTableColumnPercentageGet(api, intVal, 23, 14);

            //data30 = DataTableColumnTotalIntGet(api, intVal, 3);
            //data31 = DataTableColumnTotalIntGet(api, intVal, 14);
        }
    });
}

function RepoTraficAllYearOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Trafic annuel global');
    ShowReport('ParamReportId');
    ParamMessageReset();
    //ShowReport('ExportReportId');

    //HideReport('Grid_0002GridReportId');

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficAllYearDisplay()");
    //ParamActionBtnGet(1, 'Charger CE', 'fas fa-redo-alt', "RepoTraficStationDayCeUpload()");
    //ParamActionBtnGet(2, 'Charger Zipdata', 'fas fa-redo-alt', "RepoTraficStationDayZipdataUpload()");
    //ParamActionBtnGet(3, 'MAJ TMJ', 'fas fa-redo-alt', "RepoTraficRevenueMeanValueUpdate()");
    //ParamActionBtnGet(5, 'Notifier Moi-même', 'fas fa-paper-plane', "RepoTraficRevenueStationDayAllMeNotify()");
    //ParamActionBtnGet(6, 'Notifier Région', 'fas fa-paper-plane', "RepoTraficRevenueStationDayAllRegionNotify()");
    //ParamActionBtnGet(7, 'Notifier DG', 'fas fa-paper-plane', "RepoTraficRevenueStationDayAllDgNotify()");

    //ShowReport
    //HideReport('SiteId' + 'Parent');
    //HideReport('LSId' + 'Parent');
    //HideReport('BagContainerId' + 'Parent');
    //HideReport('StationNumberId' + 'Parent');

    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');
    ShowParent('YearStartId');
    ShowParent('YearEndId');


    //DropDownListSet('SiteId', '0');
    //DropDownListSet('LSId', '0');
    //DropDownListSet('BagContainerId', '0');
    //DropDownListSet('StationNumberId', '0');


    //Reset  
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);

    //Print
    //if (document.getElementById('ExportExcelBtnId') != null) {
    //    document.getElementById('ExportExcelBtnId').setAttribute("onClick", "Export(\'RepoTraficStationDayAll\', \'Excel\')");
    //}
    //if (document.getElementById('ExportPDFBtnId') != null) {
    //    document.getElementById('ExportPDFBtnId').setAttribute("onClick", "Export(\'RepoTraficStationDayAll\', \'PDF\')");
    //}

    //RepoTraficYearDisplay();

}


function RepoTraficAllYearDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var YearStart = ElementDropDownListValueGet('YearStartId');
    var YearEnd = ElementDropDownListValueGet('YearEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoTraficAllYearGet(ActionBtnId, Icon, YearStart, YearEnd, IsChart);
}


function RepoTraficAllYearGet(ActionBtnId, Icon, YearStart, YearEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoTraficYear';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (IsChart == true) {
                //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

                //Variables
                //var DateValueStart = JsDateValueFromDateString(DateStringStart);
                //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
                //var HeaderIndex = '1';
                //var TimeIndex = '0';
                //var PageIndex = '';
                //var PageRowIndex = '';

                //Total
                //var Title = 'Trafic journalier total';
                //var PatternChart = Pattern + 'TotalLine';
                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 2);
                //var data2 = GetColumnArray(PatternTableId, 3);

                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic journalier', data1, 'Trafic journalier A-1', data2, false);


                //Mp
                //Title = 'Trafic journalier par moyen de paiement';
                //PatternChart = Pattern + 'MpLine';

                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 4);
                //var data2 = GetColumnArray(PatternTableId, 5);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, data2, false);

                //Title = 'Trafic journalier par classe';
                //var PatternChart = Pattern + 'ClLine';
                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 6);
                //var data2 = GetColumnArray(PatternTableId, 7);
                //var data3 = GetColumnArray(PatternTableId, 8);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

                //ShowReport('Grid_0001' + 'GridReportId');
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueAllYearGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "YearStart": YearStart,
                "YearEnd": YearEnd
            }
        },
        "columns": [
            { "data": "Year" }, //0

            { "data": "NumberCeTrx" },//1
            { "data": "NumberCeTrx" },//2

            { "data": "NumberCeTrxC1" },//3
            { "data": "NumberCeTrxC1" },//4
            { "data": "NumberCeTrxC1" },//5

            { "data": "NumberCeTrxC2" },//6
            { "data": "NumberCeTrxC2" },//7
            { "data": "NumberCeTrxC2" },//8

            { "data": "NumberCeTrxC3" },//9
            { "data": "NumberCeTrxC3" },//10
            { "data": "NumberCeTrxC3" },//11

            { "data": "NumberCeTrxTlp" },//12
            { "data": "NumberCeTrxTlp" },//13
            { "data": "NumberCeTrxTlp" },//14              
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "0.5%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },

            { "width": "0.5%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "0.5%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "0.5%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "0.5%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return data; } },

            { "targets": 1, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberToll'], data, 10); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC1'], data, 10); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC2'], data, 10); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC3'], data, 10); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlp'], data, 10); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 2);
            DataTableTotalIntGet(api, intVal, 4);
            DataTableTotalIntGet(api, intVal, 7);
            DataTableTotalIntGet(api, intVal, 10);
            DataTableTotalIntGet(api, intVal, 13);

            DataTableTotalPercentageGet(api, intVal, 4, 1, 5);
            DataTableTotalPercentageGet(api, intVal, 7, 1, 8);
            DataTableTotalPercentageGet(api, intVal, 10, 1, 11);
            DataTableTotalPercentageGet(api, intVal, 13, 1, 14);
        }
    });
}

function RepoTraficPresetGet() {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var TimeId = ElementDropDownListValueGet('TimeId');
    var ZoneId = ElementDropDownListValueGet('ZoneId');

    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();
    ShowReport('ParamReportId');

    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    if (ZoneId == '07') {//All
        if (TimeId == '01') {//Day
            RepoTraficAllDayOpen();
        }
        else {
            if (TimeId == '02') {//Month
                RepoTraficAllMonthOpen();
            }
            else {
                if (TimeId == '06') {//Cumul
                    RepoTraficAllCumulOpen();
                }
                else {
                    if (TimeId == '05') {//Year
                        RepoTraficAllYearOpen();
                    }
                    else {
                        ParamMessageErrorDisplay('Ce pré-réglabe n\'est pas authorisé');
                    }
                }
            }
        }
    }
    else {
        if (ZoneId == '05') {//Region
            if (TimeId == '01') {//Day
                //RepoTraficAllDayOpen();
            }
            else {
                if (TimeId == '02') {//Month
                    //RepoTraficAllMonthOpen();
                }
                else {
                    if (TimeId == '06') {//Cumul
                        RepoTraficRegionCumulOpen();
                    }
                    else {
                        if (TimeId == '05') {//Year
                            //RepoTraficAllYearOpen();
                        }
                        else {
                            ParamMessageErrorDisplay('Ce pré-réglabe n\'est pas authorisé');
                        }
                    }
                }
            }
        }
        else {
            if (ZoneId == '04') {//Scope
                if (TimeId == '06') {//Cumul
                    RepoTraficScopeCumulOpen();
                }
                else {
                    ParamMessageErrorDisplay('Ce pré-réglabe n\'est pas authorisé');
                }
            }
            else {
                if (ZoneId == '01') {//Station
                    if (TimeId == '00') {//Hour
                        RepoTraficStationHourOpen();
                    }
                    else {
                        if (TimeId == '01') {//Day
                            RepoTraficStationDayOpen();
                        }
                        else {
                            if (TimeId == '06') {//Cumul
                                RepoTraficStationCumulOpen();
                            }
                            else {
                                ParamMessageErrorDisplay('Ce pré-réglabe n\'est pas authorisé');
                            }
                        }
                    }
                }
                else {
                    ParamMessageErrorDisplay('Ce pré-réglabe n\'est pas authorisé');
                }
            }
        }
    }
}


function RepoTraficStationHourOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Trafic horaire par gare');
    ShowReport('ParamReportId');
    ParamMessageReset();

    ShowReport('Grid_0002GridReportId');


    //Parents
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');
    ShowParent('SiteId');
    ShowParent('LSId');
    ShowParent('BagContainerId');
    ShowParent('StationNumberId');
    ShowParent('LaneTypeId');
    ShowParent('SensId');
    ShowParent('DateStartId');
    ShowParent('DateEndId');

    //Reset
    DateValueDefaultSet('DateStartId', 0);
    DateValueDefaultSet('DateEndId', 0);

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficStationHourDisplay()");
    ParamActionBtnGet(1, 'MAJ Trafic horaire OPE', 'fas fa-redo-alt', "RepoTraficStationHourClOpeUpload()");
    ParamActionBtnGet(2, 'MAJ Trafic horaire MP OPE', 'fas fa-redo-alt', "RepoTraficStationHourMpOpeUpload()");
    ParamActionBtnGet(3, 'MAJ Trafic horaire SC', 'fas fa-redo-alt', "RepoTraficStationHourCeUpload()");
    ParamActionBtnGet(4, 'Imprimer', 'fas fa-print', "RepoParamHide()");
    ParamActionBtnGet(5, 'TMH', 'fas fa-redo-alt', "RepoTraficStationHourMeanValueUpdate()");
}



function RepoTraficAllYearCgOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();
    MenuBarNavHighlight(0, 1, 1);

    //ParamTitle
    ParamTitleSet('Trafic annuel global (Contrôle de gestion)');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficAllYearCgDisplay()");

    //Pattern
    ShowParent('IsChartId');
    ShowParent('YearStartId');
    ShowParent('YearEndId');
}


function RepoTraficAllYearCgDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var YearStart = ElementDropDownListValueGet('YearStartId');
    var YearEnd = ElementDropDownListValueGet('YearEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoTraficAllYearCgGet(ActionBtnId, Icon, YearStart, YearEnd, IsChart);
}


function RepoTraficAllYearCgGet(ActionBtnId, Icon, YearStart, YearEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoTraficAllYearCg';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    var dataM01 = 0;
    var dataM02 = 0;
    var dataM03 = 0;
    var dataM04 = 0;
    var dataM05 = 0;
    var dataM06 = 0;
    var dataM07 = 0;
    var dataM08 = 0;
    var dataM09 = 0;
    var dataM10 = 0;
    var dataM11 = 0;
    var dataM12 = 0;

    var dataM01Old = 0;
    var dataM02Old = 0;
    var dataM03Old = 0;
    var dataM04Old = 0;
    var dataM05Old = 0;
    var dataM06Old = 0;
    var dataM07Old = 0;
    var dataM08Old = 0;
    var dataM09Old = 0;
    var dataM10Old = 0;
    var dataM11Old = 0;
    var dataM12Old = 0;

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (IsChart == true) {
                Title = 'Trafic annuel global';
                var PatternChart = Pattern + 'Line';



                //var labels = GetColumnArray(PatternTableId, 3);
                var data1 = [dataM01, dataM02, dataM03, dataM04, dataM05, dataM06, dataM07, dataM08, dataM09, dataM10, dataM11, dataM12];
                var label1 = YearStart;

                var data2 = [dataM01Old, dataM02Old, dataM03Old, dataM04Old, dataM05Old, dataM06Old, dataM07Old, dataM08Old, dataM09Old, dataM10Old, dataM11Old, dataM12Old];

                var k = -1;
                if (YearStart == 2021) {
                    k = -2;
                }
                var label2 = (parseInt(YearStart) + k);

                var labels = ['Janv', 'Fév', 'Mar', 'Avr', 'Mai', 'Jui', 'Juil', 'Aoû', 'Sep', 'Oct', 'Nov', 'Déc'];

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineThreeTraficHourDisplay(Title, PatternChart, labels, 'Trafic horaire', data1, 'Trafic Année-1', data2, 'Trafic Moyen M-1', data3, false);
                ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, label1, data2, label2, false)

                ShowReport('Grid_0003' + 'GridReportId');
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueAllYearCgGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "YearStart": YearStart,
                "YearEnd": YearEnd
            }
        },
        "columns": [
            { "data": "Year" }, //0

            { "data": "NumberCeTrxM01" },//1
            { "data": "NumberCeTrxM01Old" },//2

            { "data": "NumberCeTrxM02" },//3
            { "data": "NumberCeTrxM02Old" },//4

            { "data": "NumberCeTrxM03" },//5
            { "data": "NumberCeTrxM03Old" },//6

            { "data": "NumberCeTrxM04" },//7
            { "data": "NumberCeTrxM04Old" },//8

            { "data": "NumberCeTrxM05" },//9
            { "data": "NumberCeTrxM05Old" },//10

            { "data": "NumberCeTrxM06" },//11
            { "data": "NumberCeTrxM06Old" },//12

            { "data": "NumberCeTrxM07" },//13
            { "data": "NumberCeTrxM07Old" },//14

            { "data": "NumberCeTrxM08" },//15
            { "data": "NumberCeTrxM08Old" },//16

            { "data": "NumberCeTrxM09" },//17
            { "data": "NumberCeTrxM09Old" },//18

            { "data": "NumberCeTrxM10" },//19
            { "data": "NumberCeTrxM10Old" },//20

            { "data": "NumberCeTrxM11" },//21
            { "data": "NumberCeTrxM11Old" },//22

            { "data": "NumberCeTrxM12" },//23
            { "data": "NumberCeTrxM12Old" },//24

            { "data": "NumberCeTrx" },//25
            { "data": "NumberCeTrxOld" },//26
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "1%", "className": "text-right", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "1%", "className": "text-right", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "1%", "className": "text-right", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "1%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "1%", "className": "text-right", "targets": 10 },

            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "1%", "className": "text-right", "targets": 12 },

            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "1%", "className": "text-right", "targets": 14 },

            { "width": "3%", "className": "text-right", "targets": 15 },
            { "width": "1%", "className": "text-right", "targets": 16 },

            { "width": "3%", "className": "text-right", "targets": 17 },
            { "width": "1%", "className": "text-right", "targets": 18 },

            { "width": "3%", "className": "text-right", "targets": 19 },
            { "width": "1%", "className": "text-right", "targets": 20 },

            { "width": "3%", "className": "text-right", "targets": 21 },
            { "width": "1%", "className": "text-right", "targets": 22 },

            { "width": "3%", "className": "text-right", "targets": 23 },
            { "width": "1%", "className": "text-right", "targets": 24 },

            { "width": "3%", "className": "text-right", "targets": 25 },
            { "width": "1%", "className": "text-right", "targets": 26 },

            { "targets": 0, "render": function (data, type, row) { return data; } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM01'], row['NumberCeTrxM01Old'], 2); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM02'], row['NumberCeTrxM02Old'], 2); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM03'], row['NumberCeTrxM03Old'], 2); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM04'], row['NumberCeTrxM04Old'], 2); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM05'], row['NumberCeTrxM05Old'], 2); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM06'], row['NumberCeTrxM06Old'], 2); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM07'], row['NumberCeTrxM07Old'], 2); } },

            { "targets": 15, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM08'], row['NumberCeTrxM08Old'], 2); } },

            { "targets": 17, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM09'], row['NumberCeTrxM09Old'], 2); } },

            { "targets": 19, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 20, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM10'], row['NumberCeTrxM10Old'], 2); } },

            { "targets": 21, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 22, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM11'], row['NumberCeTrxM11Old'], 2); } },

            { "targets": 23, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 24, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM12'], row['NumberCeTrxM12Old'], 2); } },

            { "targets": 25, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 26, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrx'], row['NumberCeTrxOld'], 2); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //DataTableTotalDoubleGet(api, intVal, 1);
            //DataTableTotalDoubleGet(api, intVal, 3);
            //DataTableTotalDoubleGet(api, intVal, 5);
            //DataTableTotalDoubleGet(api, intVal, 7);
            //DataTableTotalDoubleGet(api, intVal, 9);
            //DataTableTotalDoubleGet(api, intVal, 11);
            //DataTableTotalDoubleGet(api, intVal, 13);
            //DataTableTotalDoubleGet(api, intVal, 15);
            //DataTableTotalDoubleGet(api, intVal, 17);
            //DataTableTotalDoubleGet(api, intVal, 19);
            //DataTableTotalDoubleGet(api, intVal, 21);
            //DataTableTotalDoubleGet(api, intVal, 23);


            //DataTableTotalPercentageGet(api, intVal, 2, 1, 2);
            //DataTableTotalPercentageGet(api, intVal, 4, 3, 4);
            //DataTableTotalPercentageGet(api, intVal, 6, 5, 6);
            //DataTableTotalPercentageGet(api, intVal, 8, 7, 8);
            //DataTableTotalPercentageGet(api, intVal, 10, 9, 10);
            //DataTableTotalPercentageGet(api, intVal, 12, 11, 12);
            //DataTableTotalPercentageGet(api, intVal, 14, 13, 14);
            //DataTableTotalPercentageGet(api, intVal, 16, 15, 16);
            //DataTableTotalPercentageGet(api, intVal, 18, 17, 18);
            //DataTableTotalPercentageGet(api, intVal, 20, 19, 20);
            //DataTableTotalPercentageGet(api, intVal, 22, 21, 22);
            //DataTableTotalPercentageGet(api, intVal, 24, 23, 24);


            dataM01 = DataTableColumnTotalGet(api, intVal, 1) / 1000000;
            dataM02 = DataTableColumnTotalGet(api, intVal, 3) / 1000000;
            dataM03 = DataTableColumnTotalGet(api, intVal, 5) / 1000000;
            dataM04 = DataTableColumnTotalGet(api, intVal, 7) / 1000000;
            dataM05 = DataTableColumnTotalGet(api, intVal, 9) / 1000000;
            dataM06 = DataTableColumnTotalGet(api, intVal, 11) / 1000000;
            dataM07 = DataTableColumnTotalGet(api, intVal, 13) / 1000000;
            dataM08 = DataTableColumnTotalGet(api, intVal, 15) / 1000000;
            dataM09 = DataTableColumnTotalGet(api, intVal, 17) / 1000000;
            dataM10 = DataTableColumnTotalGet(api, intVal, 19) / 1000000;
            dataM11 = DataTableColumnTotalGet(api, intVal, 21) / 1000000;
            dataM12 = DataTableColumnTotalGet(api, intVal, 23) / 1000000;

            dataM01Old = DataTableColumnTotalGet(api, intVal, 2) / 1000000;
            dataM02Old = DataTableColumnTotalGet(api, intVal, 4) / 1000000;
            dataM03Old = DataTableColumnTotalGet(api, intVal, 6) / 1000000;
            dataM04Old = DataTableColumnTotalGet(api, intVal, 8) / 1000000;
            dataM05Old = DataTableColumnTotalGet(api, intVal, 10) / 1000000;
            dataM06Old = DataTableColumnTotalGet(api, intVal, 12) / 1000000;
            dataM07Old = DataTableColumnTotalGet(api, intVal, 14) / 1000000;
            dataM08Old = DataTableColumnTotalGet(api, intVal, 16) / 1000000;
            dataM09Old = DataTableColumnTotalGet(api, intVal, 18) / 1000000;
            dataM10Old = DataTableColumnTotalGet(api, intVal, 20) / 1000000;
            dataM11Old = DataTableColumnTotalGet(api, intVal, 22) / 1000000;
            dataM12Old = DataTableColumnTotalGet(api, intVal, 24) / 1000000;

            //DataTableTotalIntGet(api, intVal, 4);
            //DataTableTotalIntGet(api, intVal, 7);
            //DataTableTotalIntGet(api, intVal, 10);
            //DataTableTotalIntGet(api, intVal, 13);

            //DataTableTotalPercentageGet(api, intVal, 4, 1, 5);
            //DataTableTotalPercentageGet(api, intVal, 7, 1, 8);
            //DataTableTotalPercentageGet(api, intVal, 10, 1, 11);
            //DataTableTotalPercentageGet(api, intVal, 13, 1, 14);
        }
    });
}


function RepoRevenueAllYearCgGet(ActionBtnId, Icon, YearStart, YearEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoRevenueAllYearCg';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    var dataM01 = 0;
    var dataM02 = 0;
    var dataM03 = 0;
    var dataM04 = 0;
    var dataM05 = 0;
    var dataM06 = 0;
    var dataM07 = 0;
    var dataM08 = 0;
    var dataM09 = 0;
    var dataM10 = 0;
    var dataM11 = 0;
    var dataM12 = 0;

    var dataM01Old = 0;
    var dataM02Old = 0;
    var dataM03Old = 0;
    var dataM04Old = 0;
    var dataM05Old = 0;
    var dataM06Old = 0;
    var dataM07Old = 0;
    var dataM08Old = 0;
    var dataM09Old = 0;
    var dataM10Old = 0;
    var dataM11Old = 0;
    var dataM12Old = 0;

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (IsChart == true) {
                Title = 'Recette annuelle globale';
                var PatternChart = Pattern + 'Line';



                //var labels = GetColumnArray(PatternTableId, 3);
                var data1 = [dataM01, dataM02, dataM03, dataM04, dataM05, dataM06, dataM07, dataM08, dataM09, dataM10, dataM11, dataM12];
                var label1 = YearStart;

                var data2 = [dataM01Old, dataM02Old, dataM03Old, dataM04Old, dataM05Old, dataM06Old, dataM07Old, dataM08Old, dataM09Old, dataM10Old, dataM11Old, dataM12Old];

                var k = -1;
                if (YearStart == 2021) {
                    k = -2;
                }
                var label2 = (parseInt(YearStart) + k);

                var labels = ['Janv', 'Fév', 'Mar', 'Avr', 'Mai', 'Jui', 'Juil', 'Aoû', 'Sep', 'Oct', 'Nov', 'Déc'];

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineThreeTraficHourDisplay(Title, PatternChart, labels, 'Trafic horaire', data1, 'Trafic Année-1', data2, 'Trafic Moyen M-1', data3, false);
                ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, label1, data2, label2, false)

                ShowReport('Grid_0003' + 'GridReportId');
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueAllYearCgGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "YearStart": YearStart,
                "YearEnd": YearEnd
            }
        },
        "columns": [
            { "data": "Year" }, //0

            { "data": "NumberCeTrxM01" },//1
            { "data": "NumberCeTrxM01Old" },//2

            { "data": "NumberCeTrxM02" },//3
            { "data": "NumberCeTrxM02Old" },//4

            { "data": "NumberCeTrxM03" },//5
            { "data": "NumberCeTrxM03Old" },//6

            { "data": "NumberCeTrxM04" },//7
            { "data": "NumberCeTrxM04Old" },//8

            { "data": "NumberCeTrxM05" },//9
            { "data": "NumberCeTrxM05Old" },//10

            { "data": "NumberCeTrxM06" },//11
            { "data": "NumberCeTrxM06Old" },//12

            { "data": "NumberCeTrxM07" },//13
            { "data": "NumberCeTrxM07Old" },//14

            { "data": "NumberCeTrxM08" },//15
            { "data": "NumberCeTrxM08Old" },//16

            { "data": "NumberCeTrxM09" },//17
            { "data": "NumberCeTrxM09Old" },//18

            { "data": "NumberCeTrxM10" },//19
            { "data": "NumberCeTrxM10Old" },//20

            { "data": "NumberCeTrxM11" },//21
            { "data": "NumberCeTrxM11Old" },//22

            { "data": "NumberCeTrxM12" },//23
            { "data": "NumberCeTrxM12Old" },//24

            { "data": "NumberCeTrx" },//25
            { "data": "NumberCeTrxOld" },//26
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "3%", "className": "text-right", "targets": 1 },
            { "width": "1%", "className": "text-right", "targets": 2 },

            { "width": "3%", "className": "text-right", "targets": 3 },
            { "width": "1%", "className": "text-right", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "1%", "className": "text-right", "targets": 6 },

            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "1%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "1%", "className": "text-right", "targets": 10 },

            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "1%", "className": "text-right", "targets": 12 },

            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "1%", "className": "text-right", "targets": 14 },

            { "width": "3%", "className": "text-right", "targets": 15 },
            { "width": "1%", "className": "text-right", "targets": 16 },

            { "width": "3%", "className": "text-right", "targets": 17 },
            { "width": "1%", "className": "text-right", "targets": 18 },

            { "width": "3%", "className": "text-right", "targets": 19 },
            { "width": "1%", "className": "text-right", "targets": 20 },

            { "width": "3%", "className": "text-right", "targets": 21 },
            { "width": "1%", "className": "text-right", "targets": 22 },

            { "width": "3%", "className": "text-right", "targets": 23 },
            { "width": "1%", "className": "text-right", "targets": 24 },

            { "width": "3%", "className": "text-right", "targets": 25 },
            { "width": "1%", "className": "text-right", "targets": 26 },

            { "targets": 0, "render": function (data, type, row) { return data; } },

            { "targets": 1, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM01'], row['NumberCeTrxM01Old'], 2); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM02'], row['NumberCeTrxM02Old'], 2); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM03'], row['NumberCeTrxM03Old'], 2); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM04'], row['NumberCeTrxM04Old'], 2); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM05'], row['NumberCeTrxM05Old'], 2); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM06'], row['NumberCeTrxM06Old'], 2); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM07'], row['NumberCeTrxM07Old'], 2); } },

            { "targets": 15, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM08'], row['NumberCeTrxM08Old'], 2); } },

            { "targets": 17, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM09'], row['NumberCeTrxM09Old'], 2); } },

            { "targets": 19, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 20, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM10'], row['NumberCeTrxM10Old'], 2); } },

            { "targets": 21, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 22, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM11'], row['NumberCeTrxM11Old'], 2); } },

            { "targets": 23, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 24, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrxM12'], row['NumberCeTrxM12Old'], 2); } },

            { "targets": 25, "render": function (data, type, row) { return DataTableFormatIntDividedGet(data, 1000000); } },
            { "targets": 26, "render": function (data, type, row) { return DataTableEvoWithProgressBarGet(row['NumberCeTrx'], row['NumberCeTrxOld'], 2); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //DataTableTotalDoubleGet(api, intVal, 1);
            //DataTableTotalDoubleGet(api, intVal, 3);
            //DataTableTotalDoubleGet(api, intVal, 5);
            //DataTableTotalDoubleGet(api, intVal, 7);
            //DataTableTotalDoubleGet(api, intVal, 9);
            //DataTableTotalDoubleGet(api, intVal, 11);
            //DataTableTotalDoubleGet(api, intVal, 13);
            //DataTableTotalDoubleGet(api, intVal, 15);
            //DataTableTotalDoubleGet(api, intVal, 17);
            //DataTableTotalDoubleGet(api, intVal, 19);
            //DataTableTotalDoubleGet(api, intVal, 21);
            //DataTableTotalDoubleGet(api, intVal, 23);


            //DataTableTotalPercentageGet(api, intVal, 2, 1, 2);
            //DataTableTotalPercentageGet(api, intVal, 4, 3, 4);
            //DataTableTotalPercentageGet(api, intVal, 6, 5, 6);
            //DataTableTotalPercentageGet(api, intVal, 8, 7, 8);
            //DataTableTotalPercentageGet(api, intVal, 10, 9, 10);
            //DataTableTotalPercentageGet(api, intVal, 12, 11, 12);
            //DataTableTotalPercentageGet(api, intVal, 14, 13, 14);
            //DataTableTotalPercentageGet(api, intVal, 16, 15, 16);
            //DataTableTotalPercentageGet(api, intVal, 18, 17, 18);
            //DataTableTotalPercentageGet(api, intVal, 20, 19, 20);
            //DataTableTotalPercentageGet(api, intVal, 22, 21, 22);
            //DataTableTotalPercentageGet(api, intVal, 24, 23, 24);


            dataM01 = DataTableColumnTotalGet(api, intVal, 1) / 1000000;
            dataM02 = DataTableColumnTotalGet(api, intVal, 3) / 1000000;
            dataM03 = DataTableColumnTotalGet(api, intVal, 5) / 1000000;
            dataM04 = DataTableColumnTotalGet(api, intVal, 7) / 1000000;
            dataM05 = DataTableColumnTotalGet(api, intVal, 9) / 1000000;
            dataM06 = DataTableColumnTotalGet(api, intVal, 11) / 1000000;
            dataM07 = DataTableColumnTotalGet(api, intVal, 13) / 1000000;
            dataM08 = DataTableColumnTotalGet(api, intVal, 15) / 1000000;
            dataM09 = DataTableColumnTotalGet(api, intVal, 17) / 1000000;
            dataM10 = DataTableColumnTotalGet(api, intVal, 19) / 1000000;
            dataM11 = DataTableColumnTotalGet(api, intVal, 21) / 1000000;
            dataM12 = DataTableColumnTotalGet(api, intVal, 23) / 1000000;

            dataM01Old = DataTableColumnTotalGet(api, intVal, 2) / 1000000;
            dataM02Old = DataTableColumnTotalGet(api, intVal, 4) / 1000000;
            dataM03Old = DataTableColumnTotalGet(api, intVal, 6) / 1000000;
            dataM04Old = DataTableColumnTotalGet(api, intVal, 8) / 1000000;
            dataM05Old = DataTableColumnTotalGet(api, intVal, 10) / 1000000;
            dataM06Old = DataTableColumnTotalGet(api, intVal, 12) / 1000000;
            dataM07Old = DataTableColumnTotalGet(api, intVal, 14) / 1000000;
            dataM08Old = DataTableColumnTotalGet(api, intVal, 16) / 1000000;
            dataM09Old = DataTableColumnTotalGet(api, intVal, 18) / 1000000;
            dataM10Old = DataTableColumnTotalGet(api, intVal, 20) / 1000000;
            dataM11Old = DataTableColumnTotalGet(api, intVal, 22) / 1000000;
            dataM12Old = DataTableColumnTotalGet(api, intVal, 24) / 1000000;

            //DataTableTotalIntGet(api, intVal, 4);
            //DataTableTotalIntGet(api, intVal, 7);
            //DataTableTotalIntGet(api, intVal, 10);
            //DataTableTotalIntGet(api, intVal, 13);

            //DataTableTotalPercentageGet(api, intVal, 4, 1, 5);
            //DataTableTotalPercentageGet(api, intVal, 7, 1, 8);
            //DataTableTotalPercentageGet(api, intVal, 10, 1, 11);
            //DataTableTotalPercentageGet(api, intVal, 13, 1, 14);
        }
    });
}

function DataTableEvoWithProgressBarGet(Value, ValueRef, Decimal) {

    if (Value.toFixed(Decimal) != 0) {
        if (ValueRef.toFixed(Decimal) != 0) {
            var evo = (((Value - ValueRef) / ValueRef) * 100).toFixed(2);
            if (evo < 0) {
                return '<div class="progress" style= "background-color:#E6E6E6;height:50%;">' +
                    '<div class="progress-bar progress-bar-striped " role = "progressbar" style = "width: ' + -evo + '%;color: black;font-weight: bold;background-color:#fe1200;font-size: 14px;" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" >' + evo + '%</div>' +
                    '</div>';
            }
            else {
                return '<div class="progress" style= "background-color:#E6E6E6;height:50%;">' +
                    '<div class="progress-bar progress-bar-striped " role = "progressbar" style = "width: ' + evo + '%;color: black;font-weight: bold;background-color:#28a745;font-size: 14px;" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" >' + evo + '%</div>' +
                    '</div>';
            }
        }
        else {
            return '';
        }
    }
    else {
        return '';
    }
}

function RepoRevenueHomeOpen() {

    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();
    MenuBarNavHighlight(1, 0, 1);

    ShowReport('ParamReportId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //OnChange
    ElementOnChangeSet('TimeId', 'RepoRevenuePresetGet()');
    ElementOnChangeSet('ZoneId', 'RepoRevenuePresetGet()');
}

function RepoRevenueAllCumulOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Recette cumulée globale');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoRevenueAllCumulDisplay()");

    //Parents
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //Reset  
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);
}


function RepoRevenueAllCumulDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoRevenueAllCumulGet(ActionBtnId, Icon, DateStringStart, DateStringEnd, IsChart);
}


function RepoRevenueAllCumulGet(ActionBtnId, Icon, DateStringStart, DateStringEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoRevenueCumul';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';
    var data00 = 0;
    var data01 = 0;

    var data10 = 0;
    var data11 = 0;
    var data12 = 0;

    var data20 = 0;
    var data21 = 0;
    var data22 = 0;

    var data30 = 0;
    var data31 = 0;

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

            if (IsChart == true) {

                //Doughnut 0
                var Title = 'Recette par moyen de paiement';
                var PatternChart = Pattern + 'MpPie';
                var label00 = 'Jawaz';

                var data = {
                    datasets: [{
                        data: [data00, data01],
                        backgroundColor: ['#FF7D3A', 'rgb(252, 243, 236)'],
                    }],

                    labels: [label00]
                };

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

                //Doughnut 1
                var Title = 'Recette par classe';
                var PatternChart = Pattern + 'ClPie';
                var label10 = 'VL';
                var label11 = 'PL1';
                var label12 = 'PL2';

                var data = {
                    datasets: [{
                        data: [data10, data11, data12],
                        backgroundColor: ['rgb(74, 127, 176)', 'rgb(91, 155, 213)', 'rgb(173, 198, 229)'],
                    }],

                    labels: [label10, label11, label12]
                };

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

                //Doughnut 2
                var Title = 'Recette Jawaz par classe';
                var PatternChart = Pattern + 'TlpClPie';
                var label20 = 'VL';
                var label21 = 'PL1';
                var label22 = 'PL2';

                var data = {
                    datasets: [{
                        data: [data20, data21, data22],
                        backgroundColor: ['rgb(196, 102, 39)', 'rgb(237, 125, 49)', 'rgb(244, 185, 164)'],
                    }],

                    labels: [label20, label21, label22]
                };

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

                //Labels
                ElementInputSet('Label_0002_Id', data30);
                ElementInputSet('Label_0003_Id', data31);

                ShowReport('Grid_0005' + 'GridReportId');
            }


        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueAllCumulGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValueStart" }, //0
            { "data": "DhmValueEnd" }, //1

            { "data": "ReceiptCeTrx" },//2
            { "data": "ReceiptCeTrx" },//3

            { "data": "ReceiptCeTrxC1" },//4
            { "data": "ReceiptCeTrxC1" },//5
            { "data": "ReceiptCeTrxC1" },//6

            { "data": "ReceiptCeTrxC2" },//7
            { "data": "ReceiptCeTrxC2" },//8
            { "data": "ReceiptCeTrxC2" },//9

            { "data": "ReceiptCeTrxC3" },//10
            { "data": "ReceiptCeTrxC3" },//11
            { "data": "ReceiptCeTrxC3" },//12

            { "data": "ReceiptCeTrxTlp" },//13
            { "data": "ReceiptCeTrxTlp" },//14
            { "data": "ReceiptCeTrxTlp" },//15   NumberCeTrxTlpC1

            { "data": "ReceiptCeTrxTlpC1" },//16
            { "data": "ReceiptCeTrxTlpC1" },//17
            { "data": "ReceiptCeTrxTlpC1" },//18

            { "data": "ReceiptCeTrxTlpC2" },//19
            { "data": "ReceiptCeTrxTlpC2" },//20
            { "data": "ReceiptCeTrxTlpC2" },//21

            { "data": "ReceiptCeTrxTlpC3" },//22
            { "data": "ReceiptCeTrxTlpC3" },//23
            { "data": "ReceiptCeTrxTlpC3" },//24
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },

            { "width": "0.5%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },

            { "width": "0.5%", "className": "text-center", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "width": "0.5%", "className": "text-center", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },

            { "width": "0.5%", "className": "text-center", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },

            { "width": "0.5%", "className": "text-center", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },

            { "width": "0.5%", "className": "text-center", "targets": 16 },
            { "width": "3%", "className": "text-right", "targets": 17 },
            { "width": "3%", "className": "text-right", "targets": 18 },

            { "width": "0.5%", "className": "text-center", "targets": 19 },
            { "width": "3%", "className": "text-right", "targets": 20 },
            { "width": "3%", "className": "text-right", "targets": 21 },

            { "width": "0.5%", "className": "text-center", "targets": 22 },
            { "width": "3%", "className": "text-right", "targets": 23 },
            { "width": "3%", "className": "text-right", "targets": 24 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 2, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptToll'], data, 10); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC1'], data, 10); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC2'], data, 10); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 10, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC3'], data, 10); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollTlp'], data, 10); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },

            { "targets": 16, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollTlpC1'], data, 10); } },
            { "targets": 17, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 19, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollTlpC2'], data, 10); } },
            { "targets": 20, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 21, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 22, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollTlpC3'], data, 10); } },
            { "targets": 23, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 24, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalDoubleGet(api, intVal, 3);

            DataTableTotalDoubleGet(api, intVal, 5);
            DataTableTotalDoubleGet(api, intVal, 8);
            DataTableTotalDoubleGet(api, intVal, 11);
            DataTableTotalDoubleGet(api, intVal, 14);

            DataTableTotalDoubleGet(api, intVal, 17);
            DataTableTotalDoubleGet(api, intVal, 20);
            DataTableTotalDoubleGet(api, intVal, 23);

            DataTableTotalPercentageGet(api, intVal, 5, 2, 6);
            DataTableTotalPercentageGet(api, intVal, 8, 2, 9);
            DataTableTotalPercentageGet(api, intVal, 11, 2, 12);
            DataTableTotalPercentageGet(api, intVal, 14, 2, 15);

            DataTableTotalPercentageGet(api, intVal, 17, 14, 18);
            DataTableTotalPercentageGet(api, intVal, 20, 14, 21);
            DataTableTotalPercentageGet(api, intVal, 23, 14, 24);

            data00 = DataTableColumnPercentageGet(api, intVal, 14, 3);
            data01 = (100 - data00).toFixed(1);

            data10 = DataTableColumnPercentageGet(api, intVal, 5, 3);
            data11 = DataTableColumnPercentageGet(api, intVal, 8, 3);
            data12 = DataTableColumnPercentageGet(api, intVal, 11, 3);

            data20 = DataTableColumnPercentageGet(api, intVal, 17, 14);
            data21 = DataTableColumnPercentageGet(api, intVal, 20, 14);
            data22 = DataTableColumnPercentageGet(api, intVal, 23, 14);

            data30 = DataTableColumnTotalDoubleGet(api, intVal, 3);
            data31 = DataTableColumnTotalDoubleGet(api, intVal, 14);
        }
    });
}


function RepoRevenueAllYearOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Recette annuelle globale');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficAllYearDisplay()");

    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');
    ShowParent('YearStartId');
    ShowParent('YearEndId');

    //Reset  
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);
}


function RepoRevenueAllYearDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var YearStart = ElementDropDownListValueGet('YearStartId');
    var YearEnd = ElementDropDownListValueGet('YearEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoRevenueAllYearGet(ActionBtnId, Icon, YearStart, YearEnd, IsChart);
}


function RepoRevenueAllYearGet(ActionBtnId, Icon, YearStart, YearEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoRevenueYear';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (IsChart == true) {
                //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

                //Variables
                //var DateValueStart = JsDateValueFromDateString(DateStringStart);
                //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
                //var HeaderIndex = '1';
                //var TimeIndex = '0';
                //var PageIndex = '';
                //var PageRowIndex = '';

                //Total
                //var Title = 'Trafic journalier total';
                //var PatternChart = Pattern + 'TotalLine';
                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 2);
                //var data2 = GetColumnArray(PatternTableId, 3);

                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic journalier', data1, 'Trafic journalier A-1', data2, false);


                //Mp
                //Title = 'Trafic journalier par moyen de paiement';
                //PatternChart = Pattern + 'MpLine';

                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 4);
                //var data2 = GetColumnArray(PatternTableId, 5);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, data2, false);

                //Title = 'Trafic journalier par classe';
                //var PatternChart = Pattern + 'ClLine';
                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 6);
                //var data2 = GetColumnArray(PatternTableId, 7);
                //var data3 = GetColumnArray(PatternTableId, 8);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

                //ShowReport('Grid_0001' + 'GridReportId');
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueAllYearGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "YearStart": YearStart,
                "YearEnd": YearEnd
            }
        },
        "columns": [
            { "data": "Year" }, //0

            { "data": "ReceiptCeTrx" },//1
            { "data": "ReceiptCeTrx" },//2

            { "data": "ReceiptCeTrxC1" },//3
            { "data": "ReceiptCeTrxC1" },//4
            { "data": "ReceiptCeTrxC1" },//5

            { "data": "ReceiptCeTrxC2" },//6
            { "data": "ReceiptCeTrxC2" },//7
            { "data": "ReceiptCeTrxC2" },//8

            { "data": "ReceiptCeTrxC3" },//9
            { "data": "ReceiptCeTrxC3" },//10
            { "data": "ReceiptCeTrxC3" },//11

            { "data": "ReceiptCeTrxTlp" },//12
            { "data": "ReceiptCeTrxTlp" },//13
            { "data": "ReceiptCeTrxTlp" },//14
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "0.5%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },

            { "width": "0.5%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "0.5%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "0.5%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "0.5%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return data; } },

            { "targets": 1, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptToll'], data, 10); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC1'], data, 10); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC2'], data, 10); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC3'], data, 10); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollTlp'], data, 10); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalDoubleGet(api, intVal, 2);
            DataTableTotalDoubleGet(api, intVal, 4);
            DataTableTotalDoubleGet(api, intVal, 7);
            DataTableTotalDoubleGet(api, intVal, 10);
            DataTableTotalDoubleGet(api, intVal, 13);

            DataTableTotalPercentageGet(api, intVal, 4, 1, 5);
            DataTableTotalPercentageGet(api, intVal, 7, 1, 8);
            DataTableTotalPercentageGet(api, intVal, 10, 1, 11);
            DataTableTotalPercentageGet(api, intVal, 13, 1, 14);
        }
    });
}


function RepoRevenueAllYearCgOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();
    MenuBarNavHighlight(1, 1, 1);

    //ParamTitle
    ParamTitleSet('Recette annuelle globale (Contrôle de gestion)');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoRevenueAllYearCgDisplay()");

    //Pattern
    ShowParent('IsChartId');
    ShowParent('YearStartId');
    ShowParent('YearEndId');
}


function RepoRevenueAllYearCgDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var YearStart = ElementDropDownListValueGet('YearStartId');
    var YearEnd = ElementDropDownListValueGet('YearEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    //RepoTraficStationAllReportsHide();
    //ShowReport('ParamReportId');

    RepoRevenueAllYearCgGet(ActionBtnId, Icon, YearStart, YearEnd, IsChart);
}

function RepoRevenueStationDayOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Recette journalière par gare');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoRevenueStationDayDisplay()");

    //ShowReport
    ShowParent('SiteId');
    ShowParent('LSId');
    ShowParent('BagContainerId');
    ShowParent('StationNumberId');
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //OnChange
    ElementOnChangeSet('RegionId', 'ParamAxlesFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamBagContainersFromLS2Get()');

    //Reset
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 0);
}


function RepoRevenueStationDayDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye btn-icon-m-cl gc-c1-cl';

    var SiteId = GetElementValue('SiteId');
    var StationNumber = GetElementValue('StationNumberId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoRevenueStationDayGet(ActionBtnId, Icon, SiteId, StationNumber, DateStringStart, DateStringEnd, IsChart);
}

function RepoRevenueStationDayGet(ActionBtnId, Icon, SiteId, StationNumber, DateStringStart, DateStringEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoRevenueStationDay';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (IsChart == true) {
                if ((DateStringStart - DateStringEnd != 0) && StationNumber != '0') {
                    //Variables
                    //var DateValueStart = JsDateValueFromDateString(DateStringStart);
                    //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
                    //var HeaderIndex = '1';
                    //var TimeIndex = '0';
                    //var PageIndex = '';
                    //var PageRowIndex = '';

                    //Total
                    var Title = 'Recette journalière totale';
                    var PatternChart = Pattern + 'TotalLine';
                    var labels = GetColumnArray(PatternTableId, 10);
                    var data1 = GetColumnArray(PatternTableId, 2);
                    var data2 = GetColumnArray(PatternTableId, 3);

                    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                    ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic journalier', data1, 'Trafic journalier A-1', data2, false);


                    //Mp
                    Title = 'Recette journalière par moyen de paiement';
                    PatternChart = Pattern + 'MpLine';

                    var labels = GetColumnArray(PatternTableId, 10);
                    var data1 = GetColumnArray(PatternTableId, 4);
                    var data2 = GetColumnArray(PatternTableId, 5);
                    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                    //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);
                    //ChartJsLineFourDisplay(Title, PatternChart, labels, data1, data2, data3, data4, false);
                    ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, data2, false);

                    Title = 'Recette journalière par classe';
                    var PatternChart = Pattern + 'ClLine';
                    var labels = GetColumnArray(PatternTableId, 10);
                    var data1 = GetColumnArray(PatternTableId, 6);
                    var data2 = GetColumnArray(PatternTableId, 7);
                    var data3 = GetColumnArray(PatternTableId, 8);
                    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                    ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

                    ShowGridReport('Grid_0007');
                }
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueStationDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "StationNumber": StationNumber,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "StationName" }, //0
            { "data": "DhmValue" }, //1

            { "data": "ReceiptCeTrx" },//2
            { "data": "ReceiptCeTrxOld" },//3

            { "data": "ReceiptCeTrxTlp" },//4
            { "data": "ReceiptCeTrxOther" },//5

            { "data": "ReceiptCeTrxC1" },//6
            { "data": "ReceiptCeTrxC2" },//7
            { "data": "ReceiptCeTrxC3" },//8

            { "data": "ReceiptCeTrx" },//9

            //{ "mData": function vehicle(data, type, dataToSet) { return new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + 0 + ':' + 0 + ':0'); } },//28
            //{ "mData": function vehicle(data, type, dataToSet) { return data.Year + '-' + data.Month + '-' + data.Day; } },//10
            { "mData": function vehicle(data, type, dataToSet) { return GetDigits(data.Day, 2) + '/' + GetDigits(data.Month, 2); } },//10

            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Tlp }; } },//28
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Card }; } },//29
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Cb }; } },//30
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.Other }; } },//31

            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC1 }; } },//32
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC2 }; } },//33
            //{ "mData": function vehicle(data, type, dataToSet) { return { t: new Date(data.Year + '-' + data.Month + '-' + data.Day + ' ' + data.Hour + ':' + data.Minute + ':0'), y: data.TraficC3 }; } },//34           
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },

            { "width": "3%", "className": "text-right", "targets": 2 },
            { "width": "3%", "className": "text-right none", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-center none", "targets": 10 },

            { "targets": 0, "render": function (data, type, row) { return data; } },
            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            //{ "targets": 1, "render": function (data, type, row) { return data; } },

            { "targets": 2, "render": function (data, type, row) { return DataTableGapInfoGet(row['ReceiptToll'], row['ReceiptCeTrx']) + DataTableFormatDoubleGet(data); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableGapInfoGet(row['ReceiptTollOld'], row['ReceiptCeTrxOld']) + DataTableFormatDoubleGet(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableGapInfoGet(row['ReceiptTollTlp'], row['ReceiptCeTrxTlp']) + DataTableFormatDoubleGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGapInfoGet(row['ReceiptTollOther'], row['ReceiptCeTrxOther']) + DataTableFormatDoubleGet(data); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapInfoGet(row['ReceiptTollC1'], row['ReceiptCeTrxC1']) + DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableGapInfoGet(row['ReceiptTollC2'], row['ReceiptCeTrxC2']) + DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableGapInfoGet(row['ReceiptTollC3'], row['ReceiptCeTrxC3']) + DataTableFormatDoubleGet(data); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableEvolutionGet(row['ReceiptCeTrxOld'], row['ReceiptCeTrx']); } },
            { "targets": 10, "render": function (data, type, row) { return data; } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": false,
        "searching": false,
        "lengthChange": true,
        "showNEntries": false,
        "bInfo": false,
        "bPaginate": false,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(2).footer()).html(numFormat(Total1));

            Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total2) + ' ' + DataTableTlpGet(Total1, Total2));

            //if (Evo < 0)
            //    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            //else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}


function RepoRevenueAllDayOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Recette journalière globale');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoRevenueAllDayDisplay()");

    //Parents
    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //Reset  
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);
}


function RepoRevenueAllDayDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoRevenueAllDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd, IsChart);
}


function RepoRevenueAllDayGet(ActionBtnId, Icon, DateStringStart, DateStringEnd, IsChart) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoRevenueDay';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);

            if (IsChart == true) {
                //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

                //Variables
                //var DateValueStart = JsDateValueFromDateString(DateStringStart);
                //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
                //var HeaderIndex = '1';
                //var TimeIndex = '0';
                //var PageIndex = '';
                //var PageRowIndex = '';

                //Total
                //var Title = 'Trafic journalier total';
                //var PatternChart = Pattern + 'TotalLine';
                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 2);
                //var data2 = GetColumnArray(PatternTableId, 3);

                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic journalier', data1, 'Trafic journalier A-1', data2, false);


                //Mp
                //Title = 'Trafic journalier par moyen de paiement';
                //PatternChart = Pattern + 'MpLine';

                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 4);
                //var data2 = GetColumnArray(PatternTableId, 5);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, data2, false);

                //Title = 'Trafic journalier par classe';
                //var PatternChart = Pattern + 'ClLine';
                //var labels = GetColumnArray(PatternTableId, 10);
                //var data1 = GetColumnArray(PatternTableId, 6);
                //var data2 = GetColumnArray(PatternTableId, 7);
                //var data3 = GetColumnArray(PatternTableId, 8);
                //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

                //ShowReport('Grid_0001' + 'GridReportId');
            }
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueDayGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValue" }, //0

            { "data": "ReceiptCeTrx" },//1
            { "data": "ReceiptCeTrx" },//2

            { "data": "ReceiptCeTrxC1" },//3
            { "data": "ReceiptCeTrxC1" },//4
            { "data": "ReceiptCeTrxC1" },//5

            { "data": "ReceiptCeTrxC2" },//6
            { "data": "ReceiptCeTrxC2" },//7
            { "data": "ReceiptCeTrxC2" },//8

            { "data": "ReceiptCeTrxC3" },//9
            { "data": "ReceiptCeTrxC3" },//10
            { "data": "ReceiptCeTrxC3" },//11

            { "data": "ReceiptCeTrxTlp" },//12
            { "data": "ReceiptCeTrxTlp" },//13
            { "data": "ReceiptCeTrxTlp" },//14
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "0.5%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },

            { "width": "0.5%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "0.5%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "0.5%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "0.5%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 1, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptToll'], data, 10); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC1'], data, 10); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC2'], data, 10); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC3'], data, 10); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollTlp'], data, 10); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalDoubleGet(api, intVal, 2);
            DataTableTotalDoubleGet(api, intVal, 4);
            DataTableTotalDoubleGet(api, intVal, 7);
            DataTableTotalDoubleGet(api, intVal, 10);
            DataTableTotalDoubleGet(api, intVal, 13);

            DataTableTotalPercentageGet(api, intVal, 4, 2, 5);
            DataTableTotalPercentageGet(api, intVal, 7, 2, 8);
            DataTableTotalPercentageGet(api, intVal, 10, 2, 11);
            DataTableTotalPercentageGet(api, intVal, 13, 2, 14);
        }
    });
}


function RepoRevenueAllMonthOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Recette mensuelle globale');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoRevenueAllMonthDisplay()");

    ShowParent('MonthStartId');
    ShowParent('MonthEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //Reset  
    MonthValueFirstSet('MonthStartId');
    MonthValueLastSet('MonthEndId');

}


function RepoRevenueAllMonthDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';

    var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
    var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');

    //RepoRevenueStationAllReportsHide();
    //ShowReport('ParamReportId');

    RepoRevenueAllMonthGet(ActionBtnId, Icon, MonthStringStart, MonthStringEnd);
}


function RepoRevenueAllMonthGet(ActionBtnId, Icon, MonthStringStart, MonthStringEnd) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin  btn-icon-m-cl gc-c1-cl');
    ParamMessageReset();

    var Pattern = 'RepoRevenueMonth';
    var PatternS = Pattern;
    var PatternTableId = PatternS + 'TableId';
    var PatternTableReportId = PatternS + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

            //Variables
            //var DateValueStart = JsDateValueFromDateString(DateStringStart);
            //var DateValueEnd = JsDateValueFromDateString(DateStringEnd);
            //var HeaderIndex = '1';
            //var TimeIndex = '0';
            //var PageIndex = '';
            //var PageRowIndex = '';

            //Total
            //var Title = 'Trafic journalier total';
            //var PatternChart = Pattern + 'TotalLine';
            //var labels = GetColumnArray(PatternTableId, 10);
            //var data1 = GetColumnArray(PatternTableId, 2);
            //var data2 = GetColumnArray(PatternTableId, 3);

            //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //ChartJsLineTwoOldDisplay(Title, PatternChart, labels, 'Trafic journalier', data1, 'Trafic journalier A-1', data2, false);


            //Mp
            //Title = 'Trafic journalier par moyen de paiement';
            //PatternChart = Pattern + 'MpLine';

            //var labels = GetColumnArray(PatternTableId, 10);
            //var data1 = GetColumnArray(PatternTableId, 4);
            //var data2 = GetColumnArray(PatternTableId, 5);
            //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //ChartJsLineTwoDisplay(Title, PatternChart, labels, data1, data2, false);

            //Title = 'Trafic journalier par classe';
            //var PatternChart = Pattern + 'ClLine';
            //var labels = GetColumnArray(PatternTableId, 10);
            //var data1 = GetColumnArray(PatternTableId, 6);
            //var data2 = GetColumnArray(PatternTableId, 7);
            //var data3 = GetColumnArray(PatternTableId, 8);
            //document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //ChartJsLineThreeDisplay(Title, PatternChart, labels, 'VL', data1, 'PL1', data2, 'PL2', data3, false);

            //ShowReport('Grid_0001' + 'GridReportId');
        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueMonthGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "MonthStringStart": MonthStringStart,
                "MonthStringEnd": MonthStringEnd
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return data.Month + '/' + data.Year; } },//0

            { "data": "ReceiptCeTrx" },//1
            { "data": "ReceiptCeTrx" },//2

            { "data": "ReceiptCeTrxC1" },//3
            { "data": "ReceiptCeTrxC1" },//4
            { "data": "ReceiptCeTrxC1" },//5

            { "data": "ReceiptCeTrxC2" },//6
            { "data": "ReceiptCeTrxC2" },//7
            { "data": "ReceiptCeTrxC2" },//8

            { "data": "ReceiptCeTrxC3" },//9
            { "data": "ReceiptCeTrxC3" },//10
            { "data": "ReceiptCeTrxC3" },//11

            { "data": "ReceiptCeTrxTlp" },//12
            { "data": "ReceiptCeTrxTlp" },//13
            { "data": "ReceiptCeTrxTlp" },//14
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },

            { "width": "0.5%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-right", "targets": 2 },

            { "width": "0.5%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },

            { "width": "0.5%", "className": "text-center", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },

            { "width": "0.5%", "className": "text-center", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },

            { "width": "0.5%", "className": "text-center", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },

            { "targets": 0, "render": function (data, type, row) { return data; } },

            { "targets": 1, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptToll'], data, 10); } },
            { "targets": 2, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 3, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC1'], data, 10); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 6, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC2'], data, 10); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollC3'], data, 10); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 12, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['ReceiptTollTlp'], data, 10); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['ReceiptCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },
        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total1 = api.column(2).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(2).footer()).html(numShortFormat(Total1));

            //Total2 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(4).footer()).html(numShortFormat(Total2) + ' ' + DataTableTlpGet(Total1, Total2));

            ////if (Evo < 0)
            ////    $(api.column(8).footer()).html('<span  class="badge badge-danger">' + numFormat(Evo) + ' %</span>');
            ////else $(api.column(8).footer()).html('<span  class="badge badge-success">' + numFormat(Evo) + ' %</span>');
        }
    });
}


function RepoRevenuePresetGet() {

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    var TimeId = ElementDropDownListValueGet('TimeId');
    var ZoneId = ElementDropDownListValueGet('ZoneId');

    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();
    ShowReport('ParamReportId');

    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    if (ZoneId == '01') {//Station
        if (TimeId == '01') {//Day
            RepoRevenueStationDayOpen();
        }
        else {
            ParamMessageErrorDisplay('Ce pré-réglabe n\'est pas authorisé');
        }
    }
    else {
        if (ZoneId == '07') {//All
            if (TimeId == '01') {//Day
                RepoRevenueAllDayOpen();
            }
            else {
                if (TimeId == '02') {//Month
                    RepoRevenueAllMonthOpen();
                }
                else {
                    if (TimeId == '06') {//Cumul
                        RepoRevenueAllCumulOpen();
                    }
                    else {
                        if (TimeId == '05') {//Year
                            RepoRevenueAllYearOpen();
                        }
                        else {
                            ParamMessageErrorDisplay('Ce pré-réglabe n\'est pas authorisé');
                        }
                    }
                }
            }
        }
        else {
            ParamMessageErrorDisplay('Ce pré-réglabe n\'est pas authorisé');
        }
    }
}

function RepoTraficAllRealTimeTotalUpdate(TraficH00, TraficH01, TraficH02, TraficH03, TraficH04, TraficH05,
    TraficH06, TraficH07, TraficH08, TraficH09, TraficH10, TraficH11,
    TraficH12, TraficH13, TraficH14, TraficH15, TraficH16, TraficH17,
    TraficH18, TraficH19, TraficH20, TraficH21, TraficH22, TraficH23,

    TraficTlpH00, TraficTlpH01, TraficTlpH02, TraficTlpH03, TraficTlpH04, TraficTlpH05,
    TraficTlpH06, TraficTlpH07, TraficTlpH08, TraficTlpH09, TraficTlpH10, TraficTlpH11,
    TraficTlpH12, TraficTlpH13, TraficTlpH14, TraficTlpH15, TraficTlpH16, TraficTlpH17,
    TraficTlpH18, TraficTlpH19, TraficTlpH20, TraficTlpH21, TraficTlpH22, TraficTlpH23) {

    var PatternChart = 'RepoTraficAllRealTimeTotalBar';

    //ChartDisplay
    var Title = 'Trafic gloabl (Temps réel - SF)';
    //HideReport(PatternChart + 'ChartReportId');
    new Chart(document.getElementById(PatternChart + 'CanevasId'), {
        type: 'bar',
        data: {
            labels: ['00H', '01H', '02H', '03H', '04H', '05H',
                '06H', '07H', '08H', '09H', '10H', '11H',
                '12H', '13H', '14H', '15H', '16H', '17H',
                '18H', '19H', '20H', '21H', '22H', '23H'],
            datasets: [{
                label: '',
                data: [TraficH00, TraficH01, TraficH02, TraficH03, TraficH04, TraficH05,
                    TraficH06, TraficH07, TraficH08, TraficH09, TraficH10, TraficH11,
                    TraficH12, TraficH13, TraficH14, TraficH15, TraficH16, TraficH17,
                    TraficH18, TraficH19, TraficH20, TraficH21, TraficH22, TraficH23],
                //backgroundColor: [
                //    'rgba(255, 99, 132, 0.2)',
                //    'rgba(255, 159, 64, 0.2)',
                //    'rgba(255, 205, 86, 0.2)',
                //    'rgba(75, 192, 192, 0.2)',
                //    'rgba(54, 162, 235, 0.2)',
                //    'rgba(153, 102, 255, 0.2)'
                //],
                //borderColor: [
                //    'rgb(255, 99, 132)',
                //    'rgb(255, 159, 64)',
                //    'rgb(255, 205, 86)',
                //    'rgb(75, 192, 192)',
                //    'rgb(54, 162, 235)',
                //    'rgb(153, 102, 255)'
                //],
                borderWidth: 1,


            }]
        },
        options: {

            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            title: {
                display: true,
                text: Title,
                fontWeight: "bold",
                fontSize: 14
            },
            //legend: {
            //    position: 'bottom',
            //    labels: {
            //        fontColor: 'rgb(84, 84, 84)',
            //        fontSize: 12,
            //        usePointStyle: true,
            //        padding: 16
            //    }
            //},
            //tooltips: {
            //    enabled: false
            //},
            legend: {
                display: false
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItem) {
                        return tooltipItem.yLabel;
                    }
                }
            }


        }
    });
    //ShowReport(PatternChart + 'ChartReportId');
}

function RepoPreview(FileType) {

    var ZoneId = ElementDropDownListValueGet('ZoneId');
    var TimeId = ElementDropDownListValueGet('TimeId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
    var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');
    var YearStart = ElementDropDownListValueGet('YearStartId');
    var YearEnd = ElementDropDownListValueGet('YearEndId');
    var RegionId = ElementDropDownListValueGet('RegionId');
    var SiteId = ElementDropDownListValueGet('SiteId');
    var StationNumber = ElementDropDownListValueGet('StationNumberId');

    var FileType = 'PDF';
    var PrintLink = '/Repo/RepoPreview?' +
        'ZoneId=' + ZoneId +
        '&TimeId=' + TimeId +
        '&DateStringStart=' + DateStringStart +
        '&DateStringEnd=' + DateStringEnd +
        '&MonthStringStart=' + MonthStringStart +
        '&MonthStringEnd=' + MonthStringEnd +
        '&YearStart=' + YearStart +
        '&YearEnd=' + YearEnd +
        '&RegionId=' + RegionId +
        '&SiteId=' + SiteId +
        '&StationNumber=' + StationNumber +
        '&FileType=' + FileType;

    NavigateTo(PrintLink, true);
}

function RepoNotify(Destination) {

    var ActionBtnId = 'ParamActionBtnId1';

    if (Destination == 'Me') {
        ActionBtnId = 'ParamActionBtnId2';
    }
    else {
        if (Destination == 'Region') {
            ActionBtnId = 'ParamActionBtnId3';
        }
        else {
            if (Destination == 'DG') {
                ActionBtnId = 'ParamActionBtnId4';
            }
        }
    }

    var Icon = 'fas fa-paper-plane btn-icon-m-cl gc-c1-cl';
    var IsMargin = true;

    ActionSpin(ActionBtnId, IsMargin);

    var ZoneId = ElementDropDownListValueGet('ZoneId');
    var TimeId = ElementDropDownListValueGet('TimeId');
    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var MonthStringStart = GetMonhtStringFromDatePicker('MonthStartId');
    var MonthStringEnd = GetMonhtStringFromDatePicker('MonthEndId');
    var YearStart = ElementDropDownListValueGet('YearStartId');
    var YearEnd = ElementDropDownListValueGet('YearEndId');
    var RegionId = ElementDropDownListValueGet('RegionId');
    var SiteId = ElementDropDownListValueGet('SiteId');
    var StationNumber = ElementDropDownListValueGet('StationNumberId');

    var obj = {};
    obj.ZoneId = ZoneId;
    obj.TimeId = TimeId;
    obj.DateStringStart = DateStringStart;
    obj.DateStringEnd = DateStringEnd;
    obj.MonthStringStart = MonthStringStart;
    obj.MonthStringEnd = MonthStringEnd;
    obj.YearStart = YearStart;
    obj.YearEnd = YearEnd;
    obj.RegionId = RegionId;
    obj.SiteId = SiteId;
    obj.StationNumber = StationNumber;
    obj.Destination = Destination;

    $.ajax({
        url: "/Repo/RepoNotify",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
        }
    });
}


function RepoTraficRegionCumulOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Trafic cumulé par région');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficRegionCumulDisplay()");
    ParamActionBtnGet(1, 'Exporter', 'fas fa-file-pdf', "RepoPreview()");
    ParamActionBtnGet(2, 'Tester', 'fas fa-paper-plane', "RepoNotify('Me')");
    ParamActionBtnGet(3, 'Notifier Région', 'fas fa-paper-plane', "RepoNotify('Region')");

    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');
    ShowParent('RegionId');

    //Reset  
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);
}


function RepoTraficRegionCumulDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';
    var IsMargin = true;

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsChart = ElementBooleanGet('IsChartId');
    var RegionId = ElementDropDownListValueGet('RegionId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoTraficRegionCumulGet(ActionBtnId, Icon, IsMargin, IsChart, DateStringStart, DateStringEnd, RegionId);
}


function RepoTraficRegionCumulGet(ActionBtnId, Icon, IsMargin, IsChart, DateStringStart, DateStringEnd, RegionId) {

    ActionSpin(ActionBtnId, IsMargin);
    ParamMessageReset();

    var Pattern = 'RepoTraficRegionCumul';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';
    var data00 = 0;
    var data01 = 0;

    var data10 = 0;
    var data11 = 0;
    var data12 = 0;

    var data20 = 0;
    var data21 = 0;
    var data22 = 0;

    var data30 = 0;
    var data31 = 0;

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

            if (IsChart == true) {

                //Doughnut 0
                var Title = 'Trafic par moyen de paiement';
                var PatternChart = Pattern + 'MpPie';
                var label00 = 'Jawaz';

                var data = {
                    datasets: [{
                        data: [data00, data01],
                        backgroundColor: ['#FF7D3A', 'rgb(252, 243, 236)'],
                    }],

                    labels: [label00]
                };

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

                //Doughnut 1
                var Title = 'Trafic par classe';
                var PatternChart = Pattern + 'ClPie';
                var label10 = 'VL';
                var label11 = 'PL1';
                var label12 = 'PL2';

                var data = {
                    datasets: [{
                        data: [data10, data11, data12],
                        backgroundColor: ['rgb(74, 127, 176)', 'rgb(91, 155, 213)', 'rgb(173, 198, 229)'],
                    }],

                    labels: [label10, label11, label12]
                };

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

                //Doughnut 2
                var Title = 'Trafic Jawaz par classe';
                var PatternChart = Pattern + 'TlpClPie';
                var label20 = 'VL';
                var label21 = 'PL1';
                var label22 = 'PL2';

                var data = {
                    datasets: [{
                        data: [data20, data21, data22],
                        backgroundColor: ['rgb(196, 102, 39)', 'rgb(237, 125, 49)', 'rgb(244, 185, 164)'],
                    }],

                    labels: [label20, label21, label22]
                };

                document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
                ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

                //Labels
                ElementInputSet('Label_0000_Id', data30);
                ElementInputSet('Label_0001_Id', data31);

                ShowReport('Grid_0009' + 'GridReportId');
            }


        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueRegionCumulGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd,
                "RegionId": RegionId
            }
        },
        "columns": [
            { "data": "DhmValueStart" }, //0
            { "data": "DhmValueEnd" }, //1
            { "data": "RegionNameShort" }, //2

            { "data": "NumberCeTrx" },//3
            { "data": "NumberCeTrx" },//4

            { "data": "NumberCeTrxC1" },//5
            { "data": "NumberCeTrxC1" },//6
            { "data": "NumberCeTrxC1" },//7

            { "data": "NumberCeTrxC2" },//8
            { "data": "NumberCeTrxC2" },//9
            { "data": "NumberCeTrxC2" },//10

            { "data": "NumberCeTrxC3" },//11
            { "data": "NumberCeTrxC3" },//12
            { "data": "NumberCeTrxC3" },//13

            { "data": "NumberCeTrxTlp" },//14
            { "data": "NumberCeTrxTlp" },//15
            { "data": "NumberCeTrxTlp" },//16

            { "data": "NumberCeTrxTlpC1" },//17
            { "data": "NumberCeTrxTlpC1" },//18
            { "data": "NumberCeTrxTlpC1" },//19

            { "data": "NumberCeTrxTlpC2" },//20
            { "data": "NumberCeTrxTlpC2" },//21
            { "data": "NumberCeTrxTlpC2" },//22

            { "data": "NumberCeTrxTlpC3" },//23
            { "data": "NumberCeTrxTlpC3" },//24
            { "data": "NumberCeTrxTlpC3" },//25
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "0.5%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "0.5%", "className": "text-center", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "0.5%", "className": "text-center", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "width": "0.5%", "className": "text-center", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },

            { "width": "0.5%", "className": "text-center", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },
            { "width": "3%", "className": "text-right", "targets": 16 },

            { "width": "0.5%", "className": "text-center", "targets": 17 },
            { "width": "3%", "className": "text-right", "targets": 18 },
            { "width": "3%", "className": "text-right", "targets": 19 },

            { "width": "0.5%", "className": "text-center", "targets": 20 },
            { "width": "3%", "className": "text-right", "targets": 21 },
            { "width": "3%", "className": "text-right", "targets": 22 },

            { "width": "0.5%", "className": "text-center", "targets": 23 },
            { "width": "3%", "className": "text-right", "targets": 24 },
            { "width": "3%", "className": "text-right", "targets": 25 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            { "targets": 3, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberToll'], data, 10); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC1'], data, 10); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC2'], data, 10); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC3'], data, 10); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 14, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlp'], data, 10); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },

            { "targets": 17, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC1'], data, 10); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 19, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 20, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC2'], data, 10); } },
            { "targets": 21, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 22, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 23, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC3'], data, 10); } },
            { "targets": 24, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 25, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 4);

            DataTableTotalIntGet(api, intVal, 6);
            DataTableTotalIntGet(api, intVal, 9);
            DataTableTotalIntGet(api, intVal, 12);
            DataTableTotalIntGet(api, intVal, 15);

            DataTableTotalIntGet(api, intVal, 18);
            DataTableTotalIntGet(api, intVal, 21);
            DataTableTotalIntGet(api, intVal, 24);

            DataTableTotalPercentageGet(api, intVal, 6, 3, 7);
            DataTableTotalPercentageGet(api, intVal, 9, 3, 10);
            DataTableTotalPercentageGet(api, intVal, 12, 3, 13);
            DataTableTotalPercentageGet(api, intVal, 15, 3, 16);

            DataTableTotalPercentageGet(api, intVal, 18, 15, 19);
            DataTableTotalPercentageGet(api, intVal, 21, 15, 22);
            DataTableTotalPercentageGet(api, intVal, 24, 15, 25);

            data00 = DataTableColumnPercentageGet(api, intVal, 15, 4);
            data01 = (100 - data00).toFixed(1);

            data10 = DataTableColumnPercentageGet(api, intVal, 6, 4);
            data11 = DataTableColumnPercentageGet(api, intVal, 9, 4);
            data12 = DataTableColumnPercentageGet(api, intVal, 12, 4);

            data20 = DataTableColumnPercentageGet(api, intVal, 18, 15);
            data21 = DataTableColumnPercentageGet(api, intVal, 21, 15);
            data22 = DataTableColumnPercentageGet(api, intVal, 24, 15);

            data30 = DataTableColumnTotalIntGet(api, intVal, 4);
            data31 = DataTableColumnTotalIntGet(api, intVal, 15);
        }
    });
}

function RepoTraficScopeCumulOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Trafic cumulé par périmètre');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficScopeCumulDisplay()");
    ParamActionBtnGet(1, 'Exporter', 'fas fa-file-pdf', "RepoPreview()");
    ParamActionBtnGet(2, 'Tester', 'fas fa-paper-plane', "RepoNotify('Me')");
    ParamActionBtnGet(3, 'Notifier Périmètre', 'fas fa-paper-plane', "RepoNotify('Scope')");

    ShowParent('DateStartId');
    ShowParent('DateEndId');
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');

    //Reset  
    DateValueDefaultFirstDaySet('DateStartId');
    DateValueDefaultSet('DateEndId', 1);
}


function RepoTraficScopeCumulDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';
    var IsMargin = true;

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsChart = ElementBooleanGet('IsChartId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoTraficScopeCumulGet(ActionBtnId, Icon, IsMargin, IsChart, DateStringStart, DateStringEnd);
}


function RepoTraficScopeCumulGet(ActionBtnId, Icon, IsMargin, IsChart, DateStringStart, DateStringEnd) {

    ActionSpin(ActionBtnId, IsMargin);
    ParamMessageReset();

    var Pattern = 'RepoTraficScopeCumul';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';
    var data00 = 0;
    var data01 = 0;

    var data10 = 0;
    var data11 = 0;
    var data12 = 0;

    var data20 = 0;
    var data21 = 0;
    var data22 = 0;

    var data30 = 0;
    var data31 = 0;

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            ActionBtnSet(ActionBtnId, Icon, IsMargin);
            //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

            //if (IsChart == true) {

            //    //Doughnut 0
            //    var Title = 'Trafic par moyen de paiement';
            //    var PatternChart = Pattern + 'MpPie';
            //    var label00 = 'Jawaz';

            //    var data = {
            //        datasets: [{
            //            data: [data00, data01],
            //            backgroundColor: ['#FF7D3A', 'rgb(252, 243, 236)'],
            //        }],

            //        labels: [label00]
            //    };

            //    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //    ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

            //    //Doughnut 1
            //    var Title = 'Trafic par classe';
            //    var PatternChart = Pattern + 'ClPie';
            //    var label10 = 'VL';
            //    var label11 = 'PL1';
            //    var label12 = 'PL2';

            //    var data = {
            //        datasets: [{
            //            data: [data10, data11, data12],
            //            backgroundColor: ['rgb(74, 127, 176)', 'rgb(91, 155, 213)', 'rgb(173, 198, 229)'],
            //        }],

            //        labels: [label10, label11, label12]
            //    };

            //    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //    ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

            //    //Doughnut 2
            //    var Title = 'Trafic Jawaz par classe';
            //    var PatternChart = Pattern + 'TlpClPie';
            //    var label20 = 'VL';
            //    var label21 = 'PL1';
            //    var label22 = 'PL2';

            //    var data = {
            //        datasets: [{
            //            data: [data20, data21, data22],
            //            backgroundColor: ['rgb(196, 102, 39)', 'rgb(237, 125, 49)', 'rgb(244, 185, 164)'],
            //        }],

            //        labels: [label20, label21, label22]
            //    };

            //    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //    ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

            //    //Labels
            //    ElementInputSet('Label_0000_Id', data30);
            //    ElementInputSet('Label_0001_Id', data31);

            //    ShowReport('Grid_0004' + 'GridReportId');
            //}


        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueScopeCumulGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmValueStart" }, //0
            { "data": "DhmValueEnd" }, //1

            { "data": "NumberCeTrx" },//2
            { "data": "NumberCeTrx" },//3

            { "data": "NumberCeTrxC1" },//4
            { "data": "NumberCeTrxC1" },//5
            { "data": "NumberCeTrxC1" },//6

            { "data": "NumberCeTrxC2" },//7
            { "data": "NumberCeTrxC2" },//8
            { "data": "NumberCeTrxC2" },//9

            { "data": "NumberCeTrxC3" },//10
            { "data": "NumberCeTrxC3" },//11
            { "data": "NumberCeTrxC3" },//12

            { "data": "NumberCeTrxTlp" },//13
            { "data": "NumberCeTrxTlp" },//14
            { "data": "NumberCeTrxTlp" },//15   

            { "data": "NumberCeTrxTlpC1" },//16
            { "data": "NumberCeTrxTlpC1" },//17
            { "data": "NumberCeTrxTlpC1" },//18

            { "data": "NumberCeTrxTlpC2" },//19
            { "data": "NumberCeTrxTlpC2" },//20
            { "data": "NumberCeTrxTlpC2" },//21

            { "data": "NumberCeTrxTlpC3" },//22
            { "data": "NumberCeTrxTlpC3" },//23
            { "data": "NumberCeTrxTlpC3" },//24
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },

            { "width": "0.5%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-right", "targets": 3 },

            { "width": "0.5%", "className": "text-center none", "targets": 4 },
            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },

            { "width": "0.5%", "className": "text-center none", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },

            { "width": "0.5%", "className": "text-center none", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },

            { "width": "0.5%", "className": "text-center none", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },

            { "width": "0.5%", "className": "text-center none", "targets": 16 },
            { "width": "3%", "className": "text-right", "targets": 17 },
            { "width": "3%", "className": "text-right", "targets": 18 },

            { "width": "0.5%", "className": "text-center none", "targets": 19 },
            { "width": "3%", "className": "text-right", "targets": 20 },
            { "width": "3%", "className": "text-right", "targets": 21 },

            { "width": "0.5%", "className": "text-center none", "targets": 22 },
            { "width": "3%", "className": "text-right", "targets": 23 },
            { "width": "3%", "className": "text-right", "targets": 24 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 2, "render": function (data, type, row) { return DataTableIsValidInfoGet(row['IsValid']); } },
            { "targets": 3, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 4, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC1'], data, 10); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 7, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC2'], data, 10); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 10, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC3'], data, 10); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 13, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlp'], data, 10); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },

            { "targets": 16, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC1'], data, 10); } },
            { "targets": 17, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 19, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC2'], data, 10); } },
            { "targets": 20, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 21, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 22, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC3'], data, 10); } },
            { "targets": 23, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 24, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 0, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 3);

            DataTableTotalIntGet(api, intVal, 5);
            DataTableTotalIntGet(api, intVal, 8);
            DataTableTotalIntGet(api, intVal, 11);
            DataTableTotalIntGet(api, intVal, 14);

            DataTableTotalIntGet(api, intVal, 17);
            DataTableTotalIntGet(api, intVal, 20);
            DataTableTotalIntGet(api, intVal, 23);

            DataTableTotalPercentageGet(api, intVal, 5, 2, 6);
            DataTableTotalPercentageGet(api, intVal, 8, 2, 9);
            DataTableTotalPercentageGet(api, intVal, 11, 2, 12);
            DataTableTotalPercentageGet(api, intVal, 14, 2, 15);

            DataTableTotalPercentageGet(api, intVal, 17, 14, 18);
            DataTableTotalPercentageGet(api, intVal, 20, 14, 21);
            DataTableTotalPercentageGet(api, intVal, 23, 14, 24);

            data00 = DataTableColumnPercentageGet(api, intVal, 14, 3);
            data01 = (100 - data00).toFixed(1);

            data10 = DataTableColumnPercentageGet(api, intVal, 5, 3);
            data11 = DataTableColumnPercentageGet(api, intVal, 8, 3);
            data12 = DataTableColumnPercentageGet(api, intVal, 11, 3);

            data20 = DataTableColumnPercentageGet(api, intVal, 17, 14);
            data21 = DataTableColumnPercentageGet(api, intVal, 20, 14);
            data22 = DataTableColumnPercentageGet(api, intVal, 23, 14);

            data30 = DataTableColumnTotalIntGet(api, intVal, 3);
            data31 = DataTableColumnTotalIntGet(api, intVal, 14);
        }
    });
}


function RepoTraficStationCumulOpen() {
    RepoTraficStationAllReportsHide();
    RepoTraficStationAllParamsHide();

    //ParamTitle
    ParamTitleSet('Trafic cumulé par gare');
    ShowReport('ParamReportId');
    ParamMessageReset();

    //ShowReport('Grid_0002GridReportId');


    //Parents
    ShowParent('TimeId');
    ShowParent('ZoneId');
    ShowParent('IsChartId');
    ShowParent('RegionId');
    ShowParent('LSId');
    ShowParent('StationNumberId');
    ShowParent('DateStartId');
    ShowParent('DateEndId');

    //Reset
    DateValueDefaultSet('DateStartId', 0);
    DateValueDefaultSet('DateEndId', 0);


    //OnChange
    ElementOnChangeSet('RegionId', 'ParamLSFromRegionSecGet()');
    ElementOnChangeSet('LSId', 'ParamStationsFromLSGet()');



    //ParamAction
    ParamActionBtnGet(0, 'Afficher', 'fas fa-eye', "RepoTraficStationCumulDisplay()");
}


function RepoTraficStationCumulDisplay() {

    var ActionBtnId = 'ParamActionBtnId0';
    var Icon = 'fas fa-eye';
    var IsMargin = true;

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');
    var IsChart = ElementBooleanGet('IsChartId');
    var RegionId = ElementDropDownListValueGet('RegionId');
    var LSId = ElementDropDownListValueGet('LSId');
    var StationNumber = ElementDropDownListValueGet('StationNumberId');

    RepoTraficStationAllReportsHide();
    ShowReport('ParamReportId');

    RepoTraficStationCumulGet(ActionBtnId, Icon, IsMargin,
        DateStringStart, DateStringEnd, IsChart,
        RegionId, LSId, StationNumber);
}


function RepoTraficStationCumulGet(ActionBtnId, Icon, IsMargin,
    DateStringStart, DateStringEnd, IsChart,
    RegionId, LSId, StationNumber) {

    ActionSpin(ActionBtnId, IsMargin);
    ParamMessageReset();

    var Pattern = 'RepoTraficStationCumul';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);

    var PatternChart = '';
    var data00 = 0;
    var data01 = 0;

    var data10 = 0;
    var data11 = 0;
    var data12 = 0;

    var data20 = 0;
    var data21 = 0;
    var data22 = 0;

    var data30 = 0;
    var data31 = 0;

    $('#' + PatternTableId).DataTable().destroy();
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {

            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);


            //RepoTraficCompanyDayGet(ActionBtnId, Icon, DateStringEnd)

            //if (IsChart == true) {

            //    //Doughnut 0
            //    var Title = 'Trafic par moyen de paiement';
            //    var PatternChart = Pattern + 'MpPie';
            //    var label00 = 'Jawaz';

            //    var data = {
            //        datasets: [{
            //            data: [data00, data01],
            //            backgroundColor: ['#FF7D3A', 'rgb(252, 243, 236)'],
            //        }],

            //        labels: [label00]
            //    };

            //    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //    ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

            //    //Doughnut 1
            //    var Title = 'Trafic par classe';
            //    var PatternChart = Pattern + 'ClPie';
            //    var label10 = 'VL';
            //    var label11 = 'PL1';
            //    var label12 = 'PL2';

            //    var data = {
            //        datasets: [{
            //            data: [data10, data11, data12],
            //            backgroundColor: ['rgb(74, 127, 176)', 'rgb(91, 155, 213)', 'rgb(173, 198, 229)'],
            //        }],

            //        labels: [label10, label11, label12]
            //    };

            //    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //    ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

            //    //Doughnut 2
            //    var Title = 'Trafic Jawaz par classe';
            //    var PatternChart = Pattern + 'TlpClPie';
            //    var label20 = 'VL';
            //    var label21 = 'PL1';
            //    var label22 = 'PL2';

            //    var data = {
            //        datasets: [{
            //            data: [data20, data21, data22],
            //            backgroundColor: ['rgb(196, 102, 39)', 'rgb(237, 125, 49)', 'rgb(244, 185, 164)'],
            //        }],

            //        labels: [label20, label21, label22]
            //    };

            //    document.getElementById(PatternChart + 'ChartCardId').style.border = 'transparent';
            //    ChartJsPieLabelsOnChartDisplay(Title, PatternChart, data);

            //    //Labels
            //    ElementInputSet('Label_0000_Id', data30);
            //    ElementInputSet('Label_0001_Id', data31);

            //    ShowReport('Grid_0009' + 'GridReportId');
            //}


        },
        "ajax": {
            "url": "/Repo/RepoTraficRevenueStationCumulGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd,
                "RegionId": RegionId,
                "LSId": LSId,
                "StationNumber": StationNumber
            }
        },
        "columns": [
            { "data": "DhmValueStart" }, //0
            { "data": "DhmValueEnd" }, //1

            { "data": "StationName" }, //2

            { "data": "NumberCeTrx" },//3
            { "data": "NumberCeTrx" },//4

            { "data": "NumberCeTrxC1" },//5
            { "data": "NumberCeTrxC1" },//6
            { "data": "NumberCeTrxC1" },//7

            { "data": "NumberCeTrxC2" },//8
            { "data": "NumberCeTrxC2" },//9
            { "data": "NumberCeTrxC2" },//10

            { "data": "NumberCeTrxC3" },//11
            { "data": "NumberCeTrxC3" },//12
            { "data": "NumberCeTrxC3" },//13

            { "data": "NumberCeTrxTlp" },//14
            { "data": "NumberCeTrxTlp" },//15
            { "data": "NumberCeTrxTlp" },//16

            { "data": "NumberCeTrxTlpC1" },//17
            { "data": "NumberCeTrxTlpC1" },//18
            { "data": "NumberCeTrxTlpC1" },//19

            { "data": "NumberCeTrxTlpC2" },//20
            { "data": "NumberCeTrxTlpC2" },//21
            { "data": "NumberCeTrxTlpC2" },//22

            { "data": "NumberCeTrxTlpC3" },//23
            { "data": "NumberCeTrxTlpC3" },//24
            { "data": "NumberCeTrxTlpC3" },//25
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },

            { "width": "0.5%", "className": "text-center", "targets": 3 },
            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "0.5%", "className": "text-center none", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },

            { "width": "0.5%", "className": "text-center none", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },

            { "width": "0.5%", "className": "text-center none", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },

            { "width": "0.5%", "className": "text-center none", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },
            { "width": "3%", "className": "text-right", "targets": 16 },

            { "width": "0.5%", "className": "text-center none", "targets": 17 },
            { "width": "3%", "className": "text-right", "targets": 18 },
            { "width": "3%", "className": "text-right", "targets": 19 },

            { "width": "0.5%", "className": "text-center none", "targets": 20 },
            { "width": "3%", "className": "text-right", "targets": 21 },
            { "width": "3%", "className": "text-right", "targets": 22 },

            { "width": "0.5%", "className": "text-center none", "targets": 23 },
            { "width": "3%", "className": "text-right", "targets": 24 },
            { "width": "3%", "className": "text-right", "targets": 25 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 2, "render": function (data, type, row) { return data; } },

            { "targets": 3, "render": function (data, type, row) { return DataTableIsValidInfoGet(row['IsValid']); } },
            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC1'], data, 10); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 8, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC2'], data, 10); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 11, 14, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 11, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollC3'], data, 10); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 9, 12, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 14, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlp'], data, 10); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrx'], 2, 57, 60, '#dc3545', '#FF7D3A', '#28a745'); } },

            { "targets": 17, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC1'], data, 10); } },
            { "targets": 18, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 19, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 2, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 20, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC2'], data, 10); } },
            { "targets": 21, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 22, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 2, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

            { "targets": 23, "render": function (data, type, row) { return DataTableGapWithoutValueInfoThresholdGet(row['NumberTollTlpC3'], data, 10); } },
            { "targets": 24, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 25, "render": function (data, type, row) { return DataTableRateTwoThresholdsWithColorsGet(data, row['NumberCeTrxTlp'], 2, 75, 80, '#dc3545', '#28a745', '#dc3545'); } },

        ],
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": false,
        "searching": true,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            DataTableTotalIntGet(api, intVal, 4);

            DataTableTotalIntGet(api, intVal, 6);
            DataTableTotalIntGet(api, intVal, 9);
            DataTableTotalIntGet(api, intVal, 12);
            DataTableTotalIntGet(api, intVal, 15);

            DataTableTotalIntGet(api, intVal, 18);
            DataTableTotalIntGet(api, intVal, 21);
            DataTableTotalIntGet(api, intVal, 24);

            DataTableTotalPercentageGet(api, intVal, 6, 3, 7);
            DataTableTotalPercentageGet(api, intVal, 9, 3, 10);
            DataTableTotalPercentageGet(api, intVal, 12, 3, 13);
            DataTableTotalPercentageGet(api, intVal, 15, 3, 16);

            DataTableTotalPercentageGet(api, intVal, 18, 15, 19);
            DataTableTotalPercentageGet(api, intVal, 21, 15, 22);
            DataTableTotalPercentageGet(api, intVal, 24, 15, 25);

            data00 = DataTableColumnPercentageGet(api, intVal, 15, 4);
            data01 = (100 - data00).toFixed(1);

            data10 = DataTableColumnPercentageGet(api, intVal, 6, 4);
            data11 = DataTableColumnPercentageGet(api, intVal, 9, 4);
            data12 = DataTableColumnPercentageGet(api, intVal, 12, 4);

            data20 = DataTableColumnPercentageGet(api, intVal, 18, 15);
            data21 = DataTableColumnPercentageGet(api, intVal, 21, 15);
            data22 = DataTableColumnPercentageGet(api, intVal, 24, 15);

            data30 = DataTableColumnTotalIntGet(api, intVal, 4);
            data31 = DataTableColumnTotalIntGet(api, intVal, 15);
        }
    });
}

function RepoCrmAdd() {

    var CrmYear = new String($('#MonthId').val().substr(0, 4));
    var CrmMonth = new String($('#MonthId').val().substr(5, 2));
    var SiteId = new String($('#SiteId').val());

    if (SiteId != null && SiteId != '' && SiteId != '0' &&
        CrmYear != null && CrmYear != '' &&
        CrmMonth != null && CrmMonth != '') {

        var obj = {};
        obj.SiteId = SiteId;
        obj.CrmYear = CrmYear;
        obj.CrmMonth = CrmMonth;

        $('#ActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('RepoCrmAddTableRportId')
        $.ajax({
            url: "/Repo/RepoCrmAdd",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                //$('#ActionBtnId').find('span').attr('class', 'fas fa-plus-circle');
                RepoCrmAddDisplay();
            }
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}


function RepoCrmAddDisplay() {

    $('#ActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoCrmAddTableRportId');

    $('#RepoCrmAddTableId').DataTable().destroy();;
    $('#RepoCrmAddTableId').DataTable({
        "initComplete": function (settings, json) {
            ShowReport('RepoCrmAddTableRportId');
            $('#ActionBtnId').find('span').attr('class', 'fas fa-plus-circle');
        },
        "ajax": {
            "url": "/Repo/RepoCrmAddDisplay",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return data.CrmMonth + "/" + data.CrmYear; } },//0 
            { "data": "SiteName" },//1
            { "data": "ProgressValue" },//2
            { "data": "CrmStatusName" },//3
            { "mData": function vehicle(data, type, dataToSet) { return data.FirstName + " " + data.LastName; } },//4
            { "data": "DhmModification" },//5                          
            { "data": "IpNumber" },//6
            { "data": "PhoneNumber" },//7
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 }, //Month
            { "width": "5%", "className": "text-left", "targets": 1 }, //SiteName 
            { "width": "30%", "className": "text-left", "targets": 2 }, //ProgressValue
            { "width": "30%", "className": "text-left", "targets": 3 }, //CrmStatusName            
            { "width": "30%", "className": "text-left", "targets": 4 }, //Name* 
            { "width": "0%", "className": "text-left none", "targets": 5 }, //DhmModification        
            { "width": "0%", "className": "text-left none", "targets": 6 }, //IpNumber 
            { "width": "0%", "className": "text-left none", "targets": 7 }, //PhoneNumber 
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return '<div class="progress">' +
                        '<div class="progress-bar progress-bar-striped " role = "progressbar" style = "width: ' + data + '; background-color:' + $('<div/>').text(row['RgbValue']).html() + '" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" ></div>' +
                        '</div>'
                }
            },
            {
                "targets": 5,
                "render": function (value) {
                    if (value === null) return "";
                    var pattern = /Date\(([^)]+)\)/;//date format from server side
                    var results = pattern.exec(value);
                    var dt = new Date(parseFloat(results[1]));

                    return dt.toLocaleDateString() + " " + dt.toLocaleTimeString();
                }
            },
            {
                "targets": 5,
                "render": function (value) {
                    if (value === null) return "";
                    var pattern = /Date\(([^)]+)\)/;//date format from server side
                    var results = pattern.exec(value);
                    var dt = new Date(parseFloat(results[1]));

                    return dt.toLocaleDateString();
                }
            }
        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });
}

function RepoCrmEditDisplay() {
    var CrmYear = new String($('#MonthId').val().substr(0, 4));
    var CrmMonth = new String($('#MonthId').val().substr(5, 2));

    if (CrmYear != null && CrmMonth != null) {

        $('#ActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('RepoCrmDshTableReportId');

        $('#RepoCrmEditTableId').DataTable().destroy();;
        $('#RepoCrmEditTableId').DataTable({
            "initComplete": function (settings, json) {
                $.get("/Repo/GetCrmStatus", function (data) {
                    var elements = document.getElementsByClassName('RepoCrmStatus');

                    for (var i = 0; i < elements.length; ++i) {
                        var item = elements[i];
                        var SelectedValue = item.options[item.selectedIndex].value;
                        var RowId = item.options[item.selectedIndex].id;
                        item.remove(item.selectedIndex);
                        $.each(data, function (index, row) {
                            var node = document.createElement("option");
                            node.value = row.CrmStatusId;
                            var textnode = document.createTextNode(row.CrmStatusId + " - " + row.CrmStatusName);
                            node.appendChild(textnode);
                            item.appendChild(node);
                        });

                        for (var j = 0, len = item.options.length; j < len; j++) {
                            var opt = item.options[j];
                            if (opt.value == SelectedValue) {
                                item.options[j].selected = 'selected';
                                item.options[j].id = RowId;
                                break;
                            }
                        }
                    }
                });
                $('#ActionBtnId').find('span').attr('class', 'fas fa-eye');
                ShowReport('RepoCrmEditTableReportId');
            },
            "ajax": {
                "url": "/Repo/RepoCrmEditDisplay",
                "type": "GET",
                "datatype": "json",
                "data": {
                    CrmYear: CrmYear,
                    CrmMonth: CrmMonth
                }
            },
            "columns": [
                { "mData": function vehicle(data, type, dataToSet) { return data.CrmMonth + "/" + data.CrmYear; } },//0 
                { "data": "SiteName" },//1
                { "data": "ProgressValue" },//2
                { "data": "CrmStatusName" },//3         
                { "data": "DhmModification" },//4
                { "mData": function vehicle(data, type, dataToSet) { return data.FirstName + " " + data.LastName; } },//5                  
                { "data": "Comment" },//6            
                { "data": "IpNumber" },//7
                { "data": "PhoneNumber" },//8
                { "data": "RepoCrmId" },//9

                {
                    "mData": function vehicle(data, type, dataToSet) {
                        var diffInSeconds = Math.abs(Date.now() - new Date(data.YearM, data.MonthM - 1, data.DayM, data.HourM, data.MinuteM, data.SecondM)) / 1000;
                        var days = Math.floor(diffInSeconds / 60 / 60 / 24);
                        var hours = Math.floor(diffInSeconds / 60 / 60 % 24);

                        if (days > 0) {
                            return 'Il y a ' + days + ' J ' + hours + 'H';
                        }
                        else {
                            return 'Il y a ' + hours + ' H';
                        }
                    }
                },//10
                { "data": "RepoCrmId" },//11 Search

            ],
            "columnDefs": [
                { "width": "5%", "className": "text-left", "targets": 0 },//Month
                { "width": "5%", "className": "text-left", "targets": 1 },//SiteName
                { "width": "20%", "className": "text-left", "targets": 2 },//ProgressValue
                { "width": "25%", "className": "text-left", "targets": 3 },//CrmStatusName
                { "width": "0%", "className": "text-left none", "targets": 4 },//DhmModification
                { "width": "0%", "className": "text-left none", "targets": 5 },//FullName
                { "width": "40%", "className": "text-left", "targets": 6 },//Comment
                { "width": "0%", "className": "text-left none", "targets": 7 },//IpNumber
                { "width": "0%", "className": "text-left none", "targets": 8 },//PhoneNumber
                { "width": "5%", "className": "text-center", "targets": 9 },//Save
                { "width": "0%", "className": "text-left none", "targets": 10 },//Reste
                { "width": "5%", "className": "text-center", "targets": 11 },//Search
                {
                    "targets": 2,
                    "render": function (data, type, row) {
                        return '<div class="progress">' +
                            '<div id="ProgressValueId' + row['RepoCrmId'] + '"' +
                            'class="progress-bar progress-bar-striped " role = "progressbar" style = "width: ' + data + '; background-color:' + $('<div/>').text(row['RgbValue']).html() + '" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" ></div>' +
                            '</div>'
                    }
                },
                {
                    "targets": 3,
                    "render": function (data, type, row) {
                        return '<div class="form-group row mb-0 mt-0">' +
                            '<div>' +
                            '<select id="CrmStatusId' + row['RepoCrmId'] + '"' +
                            'class="form-control RepoCrmStatus"' +
                            'style="font-size: 0.8rem; padding: .1rem .1rem;">' +
                            '<option value="' + $('<div/>').text(row['CrmStatusId']).html() + '" selected id="' + $('<div/>').text(row['RepoCrmStatusId']).html() + '">' +
                            '</option >' +
                            '</select>' +
                            '</div>' +
                            '</div>'
                    }
                },
                { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
                { "targets": 5, "render": function (data, type, row) { return DataTableGetElementId('FullNameId', row['RepoCrmId'], data); } },
                {
                    "targets": 6,
                    "render": function (data, type, row) {
                        return '<div class="form-group row mb-1" style="font-size: 0.8rem; padding: .1rem .1rem;">' +
                            '<div class="col-sm-10" > ' +
                            '<textarea id="CommentId' + row['RepoCrmId'] + '"' +
                            'class="form-control">' + data + '</textarea>' +
                            '</div> ' +
                            '</div>'
                    }
                },
                { "targets": 7, "render": function (data, type, row) { return DataTableGetElementId('IpNumberId', row['RepoCrmId'], data); } },
                { "targets": 8, "render": function (data, type, row) { return DataTableGetElementId('PhoneNumberId', row['RepoCrmId'], data); } },

                { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('RepoCrmEditSave', data, 'far fa-save', '000000'); } },
                { "targets": 11, "render": function (data, type, row) { return DataTableGetButton('RepoCrmEditHistorySearch', data, 'fas fa-history', '0048ff'); } },
            ],
            "iDisplayLength": 50,
            "language": {
                "lengthMenu": "Afficher _MENU_ lignes par page",
                "zeroRecords": "Veuillez patienter...",
                "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
                "infoEmpty": "---",
                "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
                "search": "Filtrer ",
                "oPaginate": {
                    "sNext": "Suivant",
                    "sPrevious": "Précédent"
                }
            },
            "processing": false,
            "responsive": true,
            "bFilter": false,
            "autoWidth": true,
            "searching": false,
            "lengthChange": true,
            "showNEntries": true,
            "bInfo": true,
            "bPaginate": true,
            "ordering": false
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function RepoCrmEditSave(RepoCrmId) {

    $('#RepoCrmEditSaveBtnId' + RepoCrmId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var CrmStatusId = GetElementValue('CrmStatusId' + RepoCrmId);
    var Comment = GetElementValue('CommentId' + RepoCrmId);



    var obj = {};
    obj.RepoCrmId = RepoCrmId;
    obj.CrmStatusId = CrmStatusId;
    obj.Comment = Comment;

    $.ajax({
        url: "/Repo/RepoCrmEditSave",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#RepoCrmEditSaveBtnId' + RepoCrmId).find('span').attr('class', 'far fa-save');
            $.each(data, function (index, row) {
                $('#ProgressValueId' + RepoCrmId).attr('style', 'width: ' + row.ProgressValue + '; background-color:' + row.RgbValue + '');

                var DhmModification = row.DhmModification
                if (DhmModification === null) return "";
                var pattern = /Date\(([^)]+)\)/;//date format from server side
                var results = pattern.exec(DhmModification);
                var dt = new Date(parseFloat(results[1]));

                $('#DhmModificationId' + RepoCrmId).text(dt.toLocaleDateString() + ' ' + dt.toLocaleTimeString());
                $('#FullNameId' + RepoCrmId).text(row.FirstName + ' ' + row.LastName);
                $('#IpNumberId' + RepoCrmId).text(row.IpNumber);
                $('#PhoneNumberId' + RepoCrmId).text(row.PhoneNumber);
            });
        }
    });
}

function RepoCrmEditHistorySearch(RepoCrmId) {

    var ActionBtnId = new String('RepoCrmEditHistorySearchBtnId' + RepoCrmId);
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoCrmEditHistoryTableReportId');

    $('#RepoCrmEditHistoryTableId').DataTable().destroy();;
    $('#RepoCrmEditHistoryTableId').DataTable({
        "initComplete": function (settings, json) {
            //$.get("/Repo/GetCrmStatus", function (data) {
            //    var elements = document.getElementsByClassName('RepoCrmStatus');

            //    for (var i = 0; i < elements.length; ++i) {
            //        var item = elements[i];
            //        var SelectedValue = item.options[item.selectedIndex].value;
            //        var RowId = item.options[item.selectedIndex].id;
            //        item.remove(item.selectedIndex);
            //        $.each(data, function (index, row) {
            //            var node = document.createElement("option");
            //            node.value = row.CrmStatusId;
            //            var textnode = document.createTextNode(row.CrmStatusId + " - " + row.CrmStatusName);
            //            node.appendChild(textnode);
            //            item.appendChild(node);                            
            //        });

            //        for (var j = 0, len = item.options.length; j < len; j++) {
            //            var opt = item.options[j];
            //            if (opt.value == SelectedValue) {
            //                item.options[j].selected = 'selected';
            //                item.options[j].id = RowId;
            //                break;
            //            }
            //        }                        
            //    }                    
            //});
            $('#' + ActionBtnId).find('span').attr('class', 'fas fa-history');
            ShowReport('RepoCrmEditHistoryTableReportId');
        },
        "ajax": {
            "url": "/Repo/RepoCrmEditHistorySearch",
            "type": "GET",
            "datatype": "json",
            "data": {
                RepoCrmId: RepoCrmId
            }
        },
        "columns": [
            { "mData": function vehicle(data, type, dataToSet) { return new String(data.RepoCrmId).substr(6, 2) + "/" + String(data.RepoCrmId).substr(2, 4); } },//0 
            { "data": "SiteName" },//1
            { "data": "ProgressValue" },//2
            { "data": "CrmStatusFullName" },//3         
            { "data": "DhmModification" },//4
            { "data": "FullName" },//5                 
            { "data": "Comment" },//6            
            { "data": "IpNumber" },//7
            { "data": "PhoneNumber" },//8
            { "data": "RepoCrmId" },//9 Search

        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//Month
            { "width": "5%", "className": "text-left", "targets": 1 },//SiteId
            { "width": "20%", "className": "text-left", "targets": 2 },//ProgressValue
            { "width": "20%", "className": "text-left", "targets": 3 },//CrmStatusName
            { "width": "10%", "className": "text-left", "targets": 4 },//DhmModification
            { "width": "10%", "className": "text-left", "targets": 5 },//FullName
            { "width": "0%", "className": "text-left none", "targets": 6 },//Comment
            { "width": "0%", "className": "text-left none", "targets": 7 },//IpNumber
            { "width": "0%", "className": "text-left none", "targets": 8 },//PhoneNumber
            { "width": "5%", "className": "text-center", "targets": 9 },//Delete
            {
                "targets": 2,
                "render": function (data, type, row) {
                    return '<div class="progress">' +
                        '<div id="ProgressValueId' + $('<div/>').text(row['RepoCrmEditId']).html() + '"' +
                        'class="progress-bar progress-bar-striped " role = "progressbar" style = "width: ' + data + '; background-color:' + $('<div/>').text(row['RgbValue']).html() + '" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" ></div>' +
                        '</div>'
                }
            },
            { "targets": 4, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableGetButton('RepoCrmEditDelete', data, 'far fa-trash-alt', 'fe1200'); } },
        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Veuillez patienter...",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });
}

function ParamRepoFdrGapsGet(DefaultIndex) {
    var item = document.getElementById('FdrGapId');
    item.options.length = 0;
    var node = document.createElement("option");
    node.value = 0;
    var textnode = document.createTextNode("Sélectionnez--");
    node.appendChild(textnode);
    item.appendChild(node);
    $.get("/Repo/ParamRepoFdrGapsGet", function (data) {
        $.each(data, function (index, row) {
            var node = document.createElement("option");
            node.value = row.FdrGapId;
            var textnode = document.createTextNode(row.FdrGapId + " - " + row.FdrGapName);
            node.appendChild(textnode);
            item.appendChild(node);
        });
        item.options[DefaultIndex].selected = 'selected';
    });
}

function RepoFdrAllReportsHide() {
    HideReport('HomeReportId');
    HideReport('ParamReportId');
    HideReport('ExportReportId');
    HideReport('RepoFdrAdd' + 'TableReportId');
    HideReport('RepoFdrEdit' + 'TableReportId');
    HideReport('RepoFdrEditHistory' + 'TableReportId');
    HideReport('RepoFdrDsh' + 'TableReportId');
    HideReport('RepoFdrOrder' + 'TableReportId');
    HideReport('RepoFdrDelivery' + 'TableReportId');
}

function RepoFdrAllParametersHide() {

    HideReport('SiteIdParent');
    HideReport('LSIdParent');
    HideReport('FdrIdParent');

    HideReport('DateStartIdParent');
    HideReport('DateEndIdParent');

    HideReport('ParamActionContainerId1');
    HideReport('ParamActionContainerId2');
    HideReport('ParamActionContainerId3');
}

function RepoFdrHomeOpen() {
    LeftMenuHide();
    RepoFdrAllReportsHide();
    RepoFdrAllParametersHide();
    MenuBarHighlight(0, 6);

    ShowReport('HomeReportId');

    //$.ajax({
    //    url: "/Cert/RoleNameGet",
    //    method: "POST",
    //    contentType: "application/json; charset=utf-8",
    //    async: true,
    //    success: function (data) {
    //        if (data == 'Chef de gare') {
    //            HtmlDropDownListNameOnlyXorFill('SiteId', '', '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');
    //        }
    //        else {
    //            HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
    //        }
    //    }
    //});

    //HtmlDropDownListFill('SiteId', '0', '/Param/GetSites', 'SiteId', 'SiteName');
    ParamResetDropDownList('SiteId');
    //ParamResetDropDownList('LSId');
    HtmlDropDownListFill('LSId', '0', '/Param/ParamLSAllGet', 'LSId', 'LSName');
    HtmlDropDownListFill('FdrId', '0', '/Param/ParamFdrsGet', 'FdrId', 'FdrName');

    //document.getElementById('SiteId').setAttribute('onChange', 'ParamLSGet(\'\')');

    var ElementIndex = '0';
    document.getElementById('DateId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('SiteId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('LSId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('FdrId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('FdrSumId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('SlipNumberId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('FdrSumId' + ElementIndex).style.fontWeight = 'bold';

    ElementIndex = '2';
    document.getElementById('DateId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('FdrGap' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('FdrGapId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('FdrGapSensId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('SlipNumberId' + ElementIndex + 'Parent').style.maxWidth = '398px';
    document.getElementById('FdrGap' + ElementIndex).style.fontWeight = 'bold';

    document.getElementById('Coin000Id' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');
    document.getElementById('Coin001Id' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');
    document.getElementById('Coin002Id' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');
    document.getElementById('Coin005Id' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');
    document.getElementById('Coin010Id' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');

    document.getElementById('Paper020Id' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');
    document.getElementById('Paper050Id' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');
    document.getElementById('Paper100Id' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');
    document.getElementById('Paper200Id' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');

    document.getElementById('FdrGap' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');
    HtmlDropDownListNameOnlyXorFill('FdrGapId' + ElementIndex, '00', '/Repo/ParamFdrGapsget', 'FdrGapId', 'FdrGapName');
    HtmlDropDownListNameOnlyXorFill('FdrGapSensId' + ElementIndex, 'E', '/Param/GetSens', 'SensId', 'SensName');


}

function RepoFdrAddOpen() {
    RepoFdrAllReportsHide();
    RepoFdrAllParametersHide();
    MenuBarHighlight(1, 6);

    ShowReport('ParamReportId');
    ShowReport('ExportReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoFdrEditDisplay()");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    $('#ParamTitleId').text("Choix des paramètres");

    //$.ajax({
    //    url: "/Cert/RoleNameGet",
    //    method: "POST",
    //    contentType: "application/json; charset=utf-8",
    //    async: true,
    //    success: function (data) {
    //        if (data == 'Chef de gare' || data == 'Administrateur') {
    //            document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoFdrAddFormLoad()");
    //            document.getElementById('ParamActionIconId1').setAttribute('Class', 'fas fa-plus-circle');
    //            $('#ParamActionTextId1').text("Ajouter");
    //            ShowReport('ParamActionContainerId1');
    //        }
    //        if (data == 'Administrateur') {
    //            document.getElementById('ParamActionBtnId2').setAttribute("onClick", "RepoFdrDelete(\'\')");
    //            document.getElementById('ParamActionIconId2').setAttribute('Class', 'far fa-trash-alt');
    //            $('#ParamActionTextId2').text("Supprimer");
    //            ShowReport('ParamActionContainerId2');
    //        }
    //    }
    //});

    document.getElementById('ParamActionBtnId1').setAttribute("onClick", "RepoFdrAddFormLoad()");
    document.getElementById('ParamActionIconId1').setAttribute('Class', 'fas fa-plus-circle');
    $('#ParamActionTextId1').text("Ajouter");
    ShowReport('ParamActionContainerId1');

    //ShowReport('SiteIdParent');
    ShowReport('LSIdParent');
    ShowReport('FdrIdParent');

    if (document.getElementById('ExportExcelBtnId') != null) {
        document.getElementById('ExportExcelBtnId').setAttribute("onClick", "Export(\'RepoFdrDsh\', \'Excel\')");
    }
    if (document.getElementById('ExportPDFBtnId') != null) {
        document.getElementById('ExportPDFBtnId').setAttribute("onClick", "Export(\'RepoFdrDsh\', \'PDF\')");
    }

    //ParamLSGet('');
    RepoFdrEditDisplay();
}

function RepoFdrEditOpen() {
    RepoFdrAllReportsHide();
    RepoFdrAllParametersHide();
    MenuBarHighlight(2, 6);


    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoFdrEditDisplay()");

    $('#ParamTitleId').text("Mettre à jour un fonds de roulement");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('SiteId0Parent');
    ShowReport('LSId0Parent');
    ShowReport('FdrId0Parent');

    ParamLSGet('0');
    RepoFdrEditDisplay();
}

function RepoFdrDshOpen() {
    RepoFdrAllReportsHide();
    RepoFdrAllParametersHide();
    MenuBarHighlight(3, 6);

    ShowReport('ParamReportId');
    ShowReport('ExportReportId');

    ShowReport('SiteId0Parent');
    ShowReport('LSId0Parent');
    ShowReport('FdrId0Parent');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoFdrDshDisplay()");

    $('#ParamTitleId').text("Stock de monnaie divisionnaire");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    if (document.getElementById('ExportExcelBtnId') != null) {
        document.getElementById('ExportExcelBtnId').setAttribute("onClick", "Export(\'RepoFdrDsh\', \'Excel\')");
    }
    if (document.getElementById('ExportPDFBtnId') != null) {
        document.getElementById('ExportPDFBtnId').setAttribute("onClick", "Export(\'RepoFdrDsh\', \'PDF\')");
    }

    ParamLSGet('0');
    RepoFdrDshDisplay();
}

function RepoFdrOrderOpen() {
    RepoFdrAllReportsHide();
    RepoFdrAllParametersHide();
    MenuBarHighlight(4, 6);

    RepoFdrOrderDisplay();
}

function RepoFdrDeliveryOpen() {
    RepoFdrAllReportsHide();
    RepoFdrAllParametersHide();
    MenuBarHighlight(5, 6);

    RepoFdrDeliveryDisplay();
}

function RepoFdrHistoryOpen() {
    RepoFdrAllReportsHide();
    RepoFdrAllParametersHide();
    MenuBarHighlight(6, 6);

    ShowReport('ParamReportId');

    document.getElementById('ParamActionBtnId').setAttribute("onClick", "RepoFdrEditHistoryDisplay()");

    $('#ParamTitleId').text("Mettre à jour un fonds de roulement");
    document.getElementById('ParamActionIconId').setAttribute('Class', 'fas fa-eye');
    $('#ParamActionTextId').text("Afficher");

    ShowReport('SiteIdParent');
    ShowReport('LSIdParent');
    ShowReport('FdrIdParent');
    ShowReport('DateStartIdParent');
    ShowReport('DateEndIdParent');

    ParamLSGet('0');
    RepoFdrHistoryDisplay();
}

function RepoFdrAddFormLoad() {

    var SiteId = '--';
    var LSId = GetElementValue('LSId');
    var FdrId = GetElementValue('FdrId');

    if (LSId != '0' &&
        FdrId != '0') {

        var ElementIndex = '0';
        DateValueDefaultSet('DateId' + ElementIndex, 0);

        HtmlDropDownListNameOnlyXorFill('SiteId' + ElementIndex, GetElementValue('SiteId'), '/Param/ParamSitesSecGet', 'SiteId', 'SiteName');
        HtmlDropDownListWithInputFill('LSId' + ElementIndex, GetElementValue('LSId'), '/Param/ParamLSAllGet', 'LSId', 'LSName', GetElementValue('SiteId'));
        HtmlDropDownListFill('FdrId' + ElementIndex, GetElementValue('FdrId'), '/Param/ParamFdrsGet', 'FdrId', 'FdrName');

        document.getElementById('SiteId' + ElementIndex).disabled = true;
        document.getElementById('LSId' + ElementIndex).disabled = true;
        document.getElementById('FdrId' + ElementIndex).disabled = true;

        document.getElementById('Coin000Id' + ElementIndex).value = 0;
        document.getElementById('Coin001Id' + ElementIndex).value = 0;
        document.getElementById('Coin002Id' + ElementIndex).value = 0;
        document.getElementById('Coin005Id' + ElementIndex).value = 0;
        document.getElementById('Coin010Id' + ElementIndex).value = 0;

        document.getElementById('Paper020Id' + ElementIndex).value = 0;
        document.getElementById('Paper050Id' + ElementIndex).value = 0;
        document.getElementById('Paper100Id' + ElementIndex).value = 0;
        document.getElementById('Paper200Id' + ElementIndex).value = 0;

        document.getElementById('Coin000Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
        document.getElementById('Coin001Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
        document.getElementById('Coin002Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
        document.getElementById('Coin005Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
        document.getElementById('Coin010Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');

        document.getElementById('Paper020Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
        document.getElementById('Paper050Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
        document.getElementById('Paper100Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
        document.getElementById('Paper200Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');

        document.getElementById('RepoFdrAddParamActionBtnId1').setAttribute('onClick', 'RepoFdrAdd()');


        $("#RepoFdrAddModalReportId").modal('toggle');



        //PatternForm = 'Update';
        //OnClick = RepoFdrEditFormOnClickGet(PatternForm, IdTmp);
        //Icon = 'fas fa-edit';
        //Label = 'Modifier le découpage';
        //var FormElement1 = DataTableFormBtnGet(PatternFix, PatternForm, Label, OnClick, Icon);




        //document.getElementById('DateId' + ElementIndex).value = Year + '-' + GetDigits(Month, 2) + '-' + GetDigits(Day, 2);





        //document.getElementById('FdrGap' + ElementIndex).setAttribute('onChange', 'RepoFdrGapUpdate(\'' + ElementIndex + '\')');

    }
    else {
        alert('Certains champs sont obligatoires')
    }



}


//function RepoFdrSumUpdate(ElementIndex) {
//    var Coin000Id = parseInt(GetElementValue('Coin000Id' + ElementIndex), 10);
//    var Coin001Id = parseInt(GetElementValue('Coin001Id' + ElementIndex), 10);
//    var Coin002Id = parseInt(GetElementValue('Coin002Id' + ElementIndex), 10);
//    var Coin005Id = parseInt(GetElementValue('Coin005Id' + ElementIndex), 10);
//    var Coin010Id = parseInt(GetElementValue('Coin010Id' + ElementIndex), 10);
//    var Paper020Id = parseInt(GetElementValue('Paper020Id' + ElementIndex), 10);
//    var Paper050Id = parseInt(GetElementValue('Paper050Id' + ElementIndex), 10);
//    var Paper100Id = parseInt(GetElementValue('Paper100Id' + ElementIndex), 10);
//    var Paper200Id = parseInt(GetElementValue('Paper200Id' + ElementIndex), 10);

//    var FdrSum = parseInt(Coin000Id + Coin001Id + Coin002Id + Coin005Id + Coin010Id + Paper020Id + Paper050Id + Paper100Id + Paper200Id, 10);
//    $('#FdrSumId' + ElementIndex).val(FdrSum);
//}


function RepoFdrAdd() {

    var Icon = 'fas fa-plus-circle';
    var ElementIndex = '0';

    var SiteId = '--';
    var LSId = GetElementValue('LSId' + ElementIndex);
    var FdrId = GetElementValue('FdrId' + ElementIndex);
    var SlipNumber = GetElementValue('SlipNumberId' + ElementIndex);

    var DateString = GetDateStringFromDatePicker('DateId' + ElementIndex);

    var Coin000Id = GetElementValue('Coin000Id' + ElementIndex);
    var Coin001Id = GetElementValue('Coin001Id' + ElementIndex);
    var Coin002Id = GetElementValue('Coin002Id' + ElementIndex);
    var Coin005Id = GetElementValue('Coin005Id' + ElementIndex);
    var Coin010Id = GetElementValue('Coin010Id' + ElementIndex);

    var Paper020Id = GetElementValue('Paper020Id' + ElementIndex);
    var Paper050Id = GetElementValue('Paper050Id' + ElementIndex);
    var Paper100Id = GetElementValue('Paper100Id' + ElementIndex);
    var Paper200Id = GetElementValue('Paper200Id' + ElementIndex);

    if (LSId != '' && LSId != '0' &&
        FdrId != '' && FdrId != '0' &&

        DateString != '' &&

        Coin000Id != '' &&
        Coin001Id != '' &&
        Coin002Id != '' &&
        Coin005Id != '' &&
        Coin010Id != '' &&

        Paper020Id != '' &&
        Paper050Id != '' &&
        Paper100Id != '' &&
        Paper200Id != ''
    ) {

        var obj = {};

        obj.DateString = DateString;

        obj.SiteId = SiteId;
        obj.LSId = LSId;
        obj.FdrId = FdrId;
        obj.SlipNumber = SlipNumber;

        obj.Coin000Id = Coin000Id;
        obj.Coin001Id = Coin001Id;
        obj.Coin002Id = Coin002Id;
        obj.Coin005Id = Coin005Id;
        obj.Coin010Id = Coin010Id;

        obj.Paper020Id = Paper020Id;
        obj.Paper050Id = Paper050Id;
        obj.Paper100Id = Paper100Id;
        obj.Paper200Id = Paper200Id;

        $('#ActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('RepoFdrAddTableRportId')
        $.ajax({
            url: "/Repo/RepoFdrAdd",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#ActionBtnId').find('span').attr('class', Icon);
                //RepoFdrAddDisplay();
                $("#RepoFdrAddModalReportId").modal('toggle');
                RepoFdrEditDisplay();
            }
        });
    }
    else {
        ParamMessageErrorDisplay();
    };
}

function RepoFdrAddDisplay() {

    var ActionBtnId = 'ParamActionBtnId1';
    var Icon = 'fas fa-eye';
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoFdrAddTableRportId');

    var SiteId = GetElementValue('SiteId0');
    var LSId = GetElementValue('LSId0');
    var FdrId = GetElementValue('FdrId0');

    $('#RepoFdrAddTableId').DataTable().destroy();;
    $('#RepoFdrAddTableId').DataTable({
        "initComplete": function (settings, json) {
            ShowReport('RepoFdrAddTableReportId');
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/Repo/RepoFdrAddDisplay",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                LSId: LSId,
                FdrId: FdrId
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "LSName" },//1
            { "data": "FdrName" },//2
            { "data": "DhmValue" },//3
            { "data": "FullName" },//4

            { "data": "FdrSum", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
            { "data": "FdrGap", "render": $.fn.dataTable.render.number(' ', ',', 2) },//6
            { "data": "FdrSumOld", "render": $.fn.dataTable.render.number(' ', ',', 2) },//7

            { "data": "Coin000Id", "render": $.fn.dataTable.render.number(' ', ',', 2) },//8
            { "data": "Coin001Id", "render": $.fn.dataTable.render.number(' ', ',', 2) },//9
            { "data": "Coin002Id", "render": $.fn.dataTable.render.number(' ', ',', 2) },//10
            { "data": "Coin005Id", "render": $.fn.dataTable.render.number(' ', ',', 2) },//11
            { "data": "Coin010Id", "render": $.fn.dataTable.render.number(' ', ',', 2) },//12
            { "data": "Paper020Id", "render": $.fn.dataTable.render.number(' ', ',', 2) },//13
            { "data": "Paper050Id", "render": $.fn.dataTable.render.number(' ', ',', 2) },//14
            { "data": "Paper100Id", "render": $.fn.dataTable.render.number(' ', ',', 2) },//15
            { "data": "Paper200Id", "render": $.fn.dataTable.render.number(' ', ',', 2) },//16



            { "data": "DhmModification" },//18
            { "data": "IpNumber" },//18
            { "data": "PhoneNumber" },//19
        ],
        "columnDefs": [
            { "width": "5%", "className": "text-left", "targets": 0 },//SiteName 
            { "width": "15%", "className": "text-left", "targets": 1 },//LSName
            { "width": "15%", "className": "text-left", "targets": 2 },//FdrName 
            { "width": "30%", "className": "text-center", "targets": 3 },//DhmValue            
            { "width": "30%", "className": "text-left", "targets": 4 },//FullName

            { "width": "30%", "className": "text-right", "targets": 5 },//FdrSum
            { "width": "5%", "className": "text-right", "targets": 6 },//FdrGap
            { "width": "5%", "className": "text-right", "targets": 7 },//FdrSumOld

            { "width": "0%", "className": "text-right none", "targets": 8 },//Coin000Id  
            { "width": "0%", "className": "text-right none", "targets": 9 },//Coin001Id  
            { "width": "0%", "className": "text-right none", "targets": 10 },//Coin002Id  
            { "width": "0%", "className": "text-right none", "targets": 11 },//Coin005Id   
            { "width": "0%", "className": "text-right none", "targets": 12 },//Coin010Id  

            { "width": "0%", "className": "text-right none", "targets": 13 },//Paper020Id  
            { "width": "0%", "className": "text-right none", "targets": 14 },//Paper050Id  
            { "width": "0%", "className": "text-right none", "targets": 15 },//Paper100Id  
            { "width": "0%", "className": "text-right none", "targets": 16 },//Paper200Id   

            { "width": "0%", "className": "text-center", "targets": 17 }, //DhmModification        
            { "width": "0%", "className": "text-right none", "targets": 18 }, //IpNumber 
            { "width": "0%", "className": "text-right none", "targets": 19 }, //PhoneNumber 

            { "targets": 3, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 17, "render": function (data, type, row) { return GetDhmValueFromDataTableDate(data); } },

        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Néant",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });
}


function RepoFdrSumUpdate(ElementIndex) {
    var Coin000Id = parseInt(GetElementValue('Coin000Id' + ElementIndex), 10);
    var Coin001Id = parseInt(GetElementValue('Coin001Id' + ElementIndex), 10);
    var Coin002Id = parseInt(GetElementValue('Coin002Id' + ElementIndex), 10);
    var Coin005Id = parseInt(GetElementValue('Coin005Id' + ElementIndex), 10);
    var Coin010Id = parseInt(GetElementValue('Coin010Id' + ElementIndex), 10);
    var Paper020Id = parseInt(GetElementValue('Paper020Id' + ElementIndex), 10);
    var Paper050Id = parseInt(GetElementValue('Paper050Id' + ElementIndex), 10);
    var Paper100Id = parseInt(GetElementValue('Paper100Id' + ElementIndex), 10);
    var Paper200Id = parseInt(GetElementValue('Paper200Id' + ElementIndex), 10);

    var FdrSumId = parseInt(Coin000Id + Coin001Id + Coin002Id + Coin005Id + Coin010Id + Paper020Id + Paper050Id + Paper100Id + Paper200Id, 10);
    $('#FdrSumId' + ElementIndex).val(FdrSumId);

    if (ElementIndex = '1') {
        var FdrSumOld = parseInt(GetElementValue('FdrSumOldId' + ElementIndex), 10);
        if (FdrSumId == FdrSumOld) {
            document.getElementById('FdrSumId' + ElementIndex).style.backgroundColor = "#04F200";
        }
        else {
            document.getElementById('FdrSumId' + ElementIndex).style.backgroundColor = "#FF0000";
        }
    }
}


function RepoFdrGapUpdate(ElementIndex) {
    var Coin000Id = parseInt(GetElementValue('Coin000Id' + ElementIndex), 10);
    var Coin001Id = parseInt(GetElementValue('Coin001Id' + ElementIndex), 10);
    var Coin002Id = parseInt(GetElementValue('Coin002Id' + ElementIndex), 10);
    var Coin005Id = parseInt(GetElementValue('Coin005Id' + ElementIndex), 10);
    var Coin010Id = parseInt(GetElementValue('Coin010Id' + ElementIndex), 10);
    var Paper020Id = parseInt(GetElementValue('Paper020Id' + ElementIndex), 10);
    var Paper050Id = parseInt(GetElementValue('Paper050Id' + ElementIndex), 10);
    var Paper100Id = parseInt(GetElementValue('Paper100Id' + ElementIndex), 10);
    var Paper200Id = parseInt(GetElementValue('Paper200Id' + ElementIndex), 10);

    var FdrGap = parseInt(Coin000Id + Coin001Id + Coin002Id + Coin005Id + Coin010Id + Paper020Id + Paper050Id + Paper100Id + Paper200Id, 10);
    $('#FdrGap' + ElementIndex).val(FdrGap);
}


function RepoFdrEditGet(ActionBtnId, Icon, SiteId, LSId, FdrId, Id) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoFdrEdit';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    HideReport('RepoFdrEditHistoryTableReportId');

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Repo/RepoFdrEditGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                LSId: LSId,
                FdrId: FdrId,
                Id: Id
            }
        },
        "columns": [
            { "data": "SiteName" },//0
            { "data": "LSName" },//1
            { "data": "FdrName" },//2
            { "data": "DhmValue" },//3
            { "data": "FdrSum" },//4           
            { "data": "RepoFdrId" },//5 Search
            { "data": "" },//6 Form Edit   
            { "data": "RepoFdrId" },//7
            { "data": "DhmModification" },//8
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },//SiteName 
            { "width": "3%", "className": "text-left", "targets": 1 },//LSName
            { "width": "3%", "className": "text-left", "targets": 2 },//FdrName 
            { "width": "3%", "className": "text-center", "targets": 3 },//DhmValue            
            { "width": "3%", "className": "text-right", "targets": 4 },//FdrSum
            { "width": "3%", "className": "text-center", "targets": 5 },//Search            
            { "width": "3%", "className": "text-center none", "targets": 6 },//Form Edit
            { "width": "3%", "className": "text-left none", "targets": 7 },//  
            { "width": "3%", "className": "text-center", "targets": 8 },// 

            { "targets": 3, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },


            //{
            //    "mData": function vehicle(data, type, dataToSet) {
            //        var diffInSeconds = Math.abs(Date.now() - new Date(data.YearM, data.MonthM - 1, data.DayM, data.HourM, data.MinuteM, data.SecondM)) / 1000;
            //        var days = Math.floor(diffInSeconds / 60 / 60 / 24);
            //        var hours = Math.floor(diffInSeconds / 60 / 60 % 24);

            //        if (days > 0) {
            //            return 'Il y a ' + days + ' J ' + hours + 'H';
            //        }
            //        else {
            //            return 'Il y a ' + hours + ' H';
            //        }
            //    }
            //},//10
            { "targets": 4, "render": function (data, type, row) { return DataTableGetElementId('FdrSumId', row['RepoFdrId'], DataTableFormatDoubleGet(data)); } },
            { "targets": 5, "render": function (data, type, row) { return DataTableGetButton('RepoFdrEditSearch', data, 'fas fa-history', '0048ff'); } },
            {
                "targets": 6,
                "render": function (data, type, row) {
                    var IdTmp = row['RepoFdrId'];

                    var PatternForm = '';
                    var OnClick = '';
                    var Icon = '';
                    var Label = '';
                    var Form = '';

                    var OnClick = '';
                    var Icon = '';
                    var Label = '';
                    var Form = '';

                    var PatternFix = 'RepoFdrEdit';

                    //PatternForm = 'Modify';
                    //OnClick = RepoFdrEditFormOnClickGet(PatternForm, IdTmp);
                    //Icon = 'fas fa-edit';
                    //Label = 'Modifier';
                    //var FormElement0 = DataTableFormBtnGet(PatternFix, PatternForm, Label, OnClick, Icon);

                    PatternForm = 'Update';
                    OnClick = RepoFdrEditFormOnClickGet(PatternForm, IdTmp);
                    Icon = 'fas fa-redo-alt';
                    Label = 'Mettre à jour';
                    var FormElement1 = DataTableFormBtnGet(PatternFix, PatternForm, Label, OnClick, Icon);

                    PatternForm = 'Threshold';
                    OnClick = RepoFdrEditFormOnClickGet(PatternForm, IdTmp);
                    Icon = 'fas fa-bell';
                    Label = 'Paramétrer les seuils';
                    var FormElement2 = DataTableFormBtnGet(PatternFix, PatternForm, Label, OnClick, Icon);

                    return FormElement1 + FormElement2;
                }
            },
            { "targets": 7, "render": function (data, type, row) { return DataTableGetContact(row, row['RepoFdrId']); } },
            {
                "targets": 8, "render": function (data, type, row) {
                    var diffInSeconds = Math.abs(Date.now() - new Date(row['YearM'], row['MonthM'] - 1, row['DayM'], 0, 0, 0)) / 1000;
                    var days = Math.floor(diffInSeconds / 60 / 60 / 24);

                    if (days == 0) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'green')
                    }
                    if (days > 0 && days <= 1) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'yellow')
                    }
                    if (days > 1 && days <= 2) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'orange')
                    }
                    if (days > 2) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'red')
                    }
                }
            },
            //{
            //    "targets": 7,
            //    "render": function (data, type, row) {


            //        return '<div class="col-md-14" style="width: 120%">' +
            //            '<div class="card">' +
            //            DataTableFormTitleGet('DataTableFormDisplay', 'RepoFdrThFormId\'' + ', \'' + row['RepoFdrId'], 'fas fa-sliders-h', 'Paramétrage des seuils') +
            //            '<div id="RepoFdrThFormId' + row['RepoFdrId'] + '" style="display:none" class="card-body">' +
            //            '<div class="row">' +
            //            '<div class="col">' +
            //            DataTableFormInputNumberElementGet('Coin000IdTh', row['RepoFdrId'], row['Coin000IdTh'], '', 'Pièce 0.5DH') +
            //            DataTableFormInputNumberElementGet('Coin001IdTh', row['RepoFdrId'], row['Coin001IdTh'], '', 'Pièce 1DH') +
            //            DataTableFormInputNumberElementGet('Coin002IdTh', row['RepoFdrId'], row['Coin002IdTh'], '', 'Pièce 2DH') +
            //            DataTableFormInputNumberElementGet('Coin005IdTh', row['RepoFdrId'], row['Coin005IdTh'], '', 'Pièce 5DH') +
            //            DataTableFormInputNumberElementGet('Coin010IdTh', row['RepoFdrId'], row['Coin010IdTh'], '', 'Pièce 10DH') +
            //            DataTableFormInputNumberElementGet('Paper020IdTh', row['RepoFdrId'], row['Paper020IdTh'], '', 'Billet 20DH') +
            //            DataTableFormInputNumberElementGet('Paper050IdTh', row['RepoFdrId'], row['Paper050IdTh'], '', 'Billet 50DH') +
            //            DataTableFormInputNumberElementGet('Paper100IdTh', row['RepoFdrId'], row['Paper100IdTh'], '', 'Billet 100DH') +
            //            DataTableFormInputNumberElementGet('Paper200IdTh', row['RepoFdrId'], row['Paper200IdTh'], '', 'Billet 200DH') +
            //            '</div>' +
            //            '</div>' +
            //            DataTableFormButtonActionGet('RepoFdrThSave', row['RepoFdrId'], 'far fa-save', 'Enregistrer') +
            //            '</div>' +
            //            DataTableFormMessageGet(row['RepoFdrId']) +
            //            '</div>' +
            //            '</div>'
            //    }
            //},
            //{
            //    "targets": 8,
            //    "render": function (data, type, row) {
            //        return '<div class="col-md-14" style="width: 120%">' +
            //            '<div class="card">' +

            //            DataTableFormTitleGet('DataTableFormDisplay', 'RepoFdrOrderFormId\'' + ', \'' + row['RepoFdrId'], 'fas fa-shopping-cart', 'Commande de monnaie divisionnaire') +
            //            '<div id="RepoFdrOrderFormId' + row['RepoFdrId'] + '" style="display:none" class="card-body">' +
            //            '<div class="row">' +
            //            '<div class="col">' +
            //            DataTableFormInputNumberElementGet('Coin000IdCo', row['RepoFdrId'], row['Coin000IdTh'] - row['Coin000Id'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Pièce 0.5DH') +
            //            DataTableFormInputNumberElementGet('Coin001IdCo', row['RepoFdrId'], row['Coin001IdTh'] - row['Coin001Id'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Pièce 1DH') +
            //            DataTableFormInputNumberElementGet('Coin002IdCo', row['RepoFdrId'], row['Coin002IdTh'] - row['Coin002Id'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Pièce 2DH') +
            //            DataTableFormInputNumberElementGet('Coin005IdCo', row['RepoFdrId'], row['Coin005IdTh'] - row['Coin005Id'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Pièce 5DH') +
            //            DataTableFormInputNumberElementGet('Coin010IdCo', row['RepoFdrId'], row['Coin010IdTh'] - row['Coin010Id'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Pièce 10DH') +
            //            DataTableFormInputNumberElementGet('Paper020IdCo', row['RepoFdrId'], row['Paper020IdTh'] - row['Paper020Id'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Billet 20DH') +
            //            DataTableFormInputNumberElementGet('Paper050IdCo', row['RepoFdrId'], row['Paper050IdTh'] - row['Paper050Id'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Billet 50DH') +
            //            DataTableFormInputNumberElementGet('Paper100IdCo', row['RepoFdrId'], row['Paper100IdTh'] - row['Paper100Id'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Billet 100DH') +
            //            DataTableFormInputNumberElementGet('Paper200IdCo', row['RepoFdrId'], row['Paper200IdTh'] - row['Paper200Id'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Billet 200DH') +
            //            DataTableFormInputNumberDisabledElementGet('FdrSumIdCo', row['RepoFdrId'], row['FdrSum'], 'RepoFdrSumUpdate(\'FdrSumNewId\'' + ', \'' + row['RepoFdrId'] + '\')', 'Total') +
            //            '</div>' +

            //            '<div class="col">' +                        
            //            DataTableFormInputDropDownElementGet('UserIdTarget', row['RepoFdrId'], 'Destinataire*', '') +
            //            DataTableFormInputDateElementGet('DhmValueId', row['RepoFdrId'], 'D. commande*') +
            //            DataTableFormInputDateElementGet('DhmPlannedId', row['RepoFdrId'], 'D. livraison*') +
            //            DataTableFormInputTextAreaElementGet('MessageId', row['RepoFdrId'], 'Message') +
            //            '</div>' +


            //            '</div>' +
            //            DataTableFormButtonActionGet('RepoFdrOrder', row['RepoFdrId'], 'fas fa-shopping-cart', 'Commander') +
            //            '</div>' +
            //            DataTableFormMessageGet(row['RepoFdrId']) +
            //            '</div>' +
            //            '</div>'
            //    }
            //},
            //{
            //    "targets": 9, "render": function (data, type, row) {
            //        return DataTableGetElementId('DhmModificationId', row['RepoFdrId'], GetDhmValueFromDataTableDate(row['DhmModification'])) + ' | ' +
            //            DataTableGetElementId('FullNameId', row['RepoFdrId'], row['FullName']) + ' | ' +
            //            DataTableGetElementId('IpNumberId', row['RepoFdrId'], row['IpNumber']) + ' | ' +
            //            DataTableGetElementId('PhoneNumberId', row['RepoFdrId'], row['PhoneNumber'])
            //    }
            //}
        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Néant",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total1 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numFormat(Total1));
        }
    });
}

function RepoFdrEditFormOnClickGet(PatternForm, Id) {
    return 'RepoFdrEditFormLoad(\'' + PatternForm + '\',\'' + Id + '\')';
}

function RepoFdrEditFormLoadOld(PatternForm, Id) {


    //$('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.SiteId = '0';
    obj.LSId = '0';
    obj.FdrId = '0';

    obj.Id = Id;

    $.ajax({
        url: "/Repo/RepoFdrEditGet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: true,
        success: function (data) {
            jQuery.each(data, function (index, itemData) {
                var imax = itemData.length - 1;
                var i = 0;

                var Year = itemData[i].Year;
                var Month = itemData[i].Month;
                var Day = itemData[i].Day;

                if (PatternForm == 'Modify') {
                    var ElementIndex = '1';
                    HtmlDropDownListFill('SiteId' + ElementIndex, itemData[i].SiteId, '/Param/GetSites', 'SiteId', 'SiteName');
                    HtmlDropDownListWithInputFill('LSId' + ElementIndex, itemData[i].LSId, '/Param/ParamLSGet', 'LSId', 'LSName', '0');
                    HtmlDropDownListFill('FdrId' + ElementIndex, itemData[i].FdrId, '/Param/ParamFdrsGet', 'FdrId', 'FdrName');

                    document.getElementById('SiteId' + ElementIndex).setAttribute('onChange', 'ParamLSGet(\'' + ElementIndex + '\')');

                    document.getElementById('RepoFdrEditModifyBtnId').setAttribute('onClick', 'RepoFdrEditModify(\'' + Id + '\')');

                }

                if (PatternForm == 'Update') {
                    var ElementIndex = '1';

                    document.getElementById('DateId' + ElementIndex).value = Year + '-' + GetDigits(Month, 2) + '-' + GetDigits(Day, 2);

                    document.getElementById('Coin000Id' + ElementIndex).value = itemData[i].Coin000Id;
                    document.getElementById('Coin001Id' + ElementIndex).value = itemData[i].Coin001Id;
                    document.getElementById('Coin002Id' + ElementIndex).value = itemData[i].Coin002Id;
                    document.getElementById('Coin005Id' + ElementIndex).value = itemData[i].Coin005Id;
                    document.getElementById('Coin010Id' + ElementIndex).value = itemData[i].Coin010Id;

                    document.getElementById('Paper020Id' + ElementIndex).value = itemData[i].Paper020Id;
                    document.getElementById('Paper050Id' + ElementIndex).value = itemData[i].Paper050Id;
                    document.getElementById('Paper100Id' + ElementIndex).value = itemData[i].Paper100Id;
                    document.getElementById('Paper200Id' + ElementIndex).value = itemData[i].Paper200Id;

                    document.getElementById('FdrGap' + ElementIndex).value = itemData[i].FdrGap;
                    document.getElementById('FdrGapId' + ElementIndex).value = itemData[i].FdrGapId;
                    document.getElementById('FdrSumId' + ElementIndex).value = itemData[i].FdrSum;
                    document.getElementById('FdrSumOldId' + ElementIndex).value = itemData[i].FdrSum;

                    document.getElementById('Coin000Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Coin001Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Coin002Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Coin005Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Coin010Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');

                    document.getElementById('Paper020Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Paper050Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Paper100Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Paper200Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');

                    document.getElementById('FdrGap' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    HtmlDropDownListFill('FdrGapId' + ElementIndex, itemData[i].FdrGapId, '/Repo/ParamFdrGapsget', 'FdrGapId', 'FdrGapName');

                    document.getElementById('RepoFdrEditUpdateBtnId').setAttribute('onClick', 'RepoFdrEditUpdate(\'' + Id + '\')');
                }

                if (PatternForm == 'Threshold') {
                    var ElementIndex = '1';
                    document.getElementById('Coin000IdTh' + ElementIndex).value = itemData[i].Coin000IdTh;
                    document.getElementById('Coin001IdTh' + ElementIndex).value = itemData[i].Coin001IdTh;
                    document.getElementById('Coin002IdTh' + ElementIndex).value = itemData[i].Coin002IdTh;
                    document.getElementById('Coin005IdTh' + ElementIndex).value = itemData[i].Coin005IdTh;
                    document.getElementById('Coin010IdTh' + ElementIndex).value = itemData[i].Coin010IdTh;

                    document.getElementById('Paper020IdTh' + ElementIndex).value = itemData[i].Paper020IdTh;
                    document.getElementById('Paper050IdTh' + ElementIndex).value = itemData[i].Paper050IdTh;
                    document.getElementById('Paper100IdTh' + ElementIndex).value = itemData[i].Paper100IdTh;
                    document.getElementById('Paper200IdTh' + ElementIndex).value = itemData[i].Paper200IdTh;

                    document.getElementById('RepoFdrEditThresholdBtnId').setAttribute('onClick', 'RepoFdrEditThreshold(\'' + Id + '\')');
                }


                //document.getElementById('HomeUpdateEditModifySaveBtnId').setAttribute('onClick', 'HomeUpdateEditModifySave(\'' + Id + '\')');

            });
        }
    })
}

function RepoFdrEditFormLoad(PatternForm, Id) {

    //$('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    var obj = {};
    obj.SiteId = '0';
    obj.LSId = '0';
    obj.FdrId = '0';

    obj.Id = Id;

    $.ajax({
        url: "/Repo/RepoFdrEditGet",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: true,
        success: function (data) {
            jQuery.each(data, function (index, itemData) {
                var imax = itemData.length - 1;
                var i = 0;

                var Year = itemData[i].Year;
                var Month = itemData[i].Month;
                var Day = itemData[i].Day;

                if (PatternForm == 'Modify') {
                    var ElementIndex = '1';
                    HtmlDropDownListFill('SiteId' + ElementIndex, itemData[i].SiteId, '/Param/GetSites', 'SiteId', 'SiteName');
                    HtmlDropDownListWithInputFill('LSId' + ElementIndex, itemData[i].LSId, '/Param/ParamLSGet', 'LSId', 'LSName', '0');
                    HtmlDropDownListFill('FdrId' + ElementIndex, itemData[i].FdrId, '/Param/ParamFdrsGet', 'FdrId', 'FdrName');

                    document.getElementById('SiteId' + ElementIndex).setAttribute('onChange', 'ParamLSGet(\'' + ElementIndex + '\')');

                    document.getElementById('RepoFdrEditModifyBtnId').setAttribute('onClick', 'RepoFdrEditModify(\'' + Id + '\')');

                }

                if (PatternForm == 'Update') {
                    var ElementIndex = '1';
                    document.getElementById('FdrGap' + ElementIndex + 'Parent').style.display = 'none';
                    document.getElementById('FdrGapId' + ElementIndex + 'Parent').style.display = 'none';
                    document.getElementById('DateId' + ElementIndex + 'Parent').style.maxWidth = '398px';
                    document.getElementById('FdrSumId' + ElementIndex + 'Parent').style.maxWidth = '398px';
                    document.getElementById('FdrSumOldId' + ElementIndex + 'Parent').style.maxWidth = '398px';
                    document.getElementById('FdrSumId' + ElementIndex).style.fontWeight = 'bold';
                    document.getElementById('FdrSumOldId' + ElementIndex).style.fontWeight = 'bold';

                    document.getElementById('DateId' + ElementIndex).value = Year + '-' + GetDigits(Month, 2) + '-' + GetDigits(Day, 2);

                    document.getElementById('Coin000Id' + ElementIndex).value = itemData[i].Coin000Id;
                    document.getElementById('Coin001Id' + ElementIndex).value = itemData[i].Coin001Id;
                    document.getElementById('Coin002Id' + ElementIndex).value = itemData[i].Coin002Id;
                    document.getElementById('Coin005Id' + ElementIndex).value = itemData[i].Coin005Id;
                    document.getElementById('Coin010Id' + ElementIndex).value = itemData[i].Coin010Id;

                    document.getElementById('Paper020Id' + ElementIndex).value = itemData[i].Paper020Id;
                    document.getElementById('Paper050Id' + ElementIndex).value = itemData[i].Paper050Id;
                    document.getElementById('Paper100Id' + ElementIndex).value = itemData[i].Paper100Id;
                    document.getElementById('Paper200Id' + ElementIndex).value = itemData[i].Paper200Id;

                    document.getElementById('FdrGap' + ElementIndex).value = itemData[i].FdrGap;
                    document.getElementById('FdrGapId' + ElementIndex).value = itemData[i].FdrGapId;
                    document.getElementById('FdrSumId' + ElementIndex).value = itemData[i].FdrSum;
                    document.getElementById('FdrSumOldId' + ElementIndex).value = itemData[i].FdrSum;

                    document.getElementById('Coin000Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Coin001Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Coin002Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Coin005Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Coin010Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');

                    document.getElementById('Paper020Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Paper050Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Paper100Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    document.getElementById('Paper200Id' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');

                    document.getElementById('FdrGap' + ElementIndex).setAttribute('onChange', 'RepoFdrSumUpdate(\'' + ElementIndex + '\')');
                    HtmlDropDownListFill('FdrGapId' + ElementIndex, itemData[i].FdrGapId, '/Repo/ParamFdrGapsget', 'FdrGapId', 'FdrGapName');

                    document.getElementById('RepoFdrEditUpdateBtnId').setAttribute('onClick', 'RepoFdrEditUpdate(\'' + Id + '\', \'' + ElementIndex + '\')');

                    RepoFdrSumUpdate(ElementIndex);
                }

                if (PatternForm == 'Add') {
                    var ElementIndex = '2';

                    document.getElementById('RepoFdrEditAddParamActionBtnId1').setAttribute('onClick', 'RepoFdrEditAdd(\'' + Id + '\', \'' + ElementIndex + '\')');

                    document.getElementById('DateId' + ElementIndex).value = Year + '-' + GetDigits(Month, 2) + '-' + GetDigits(Day, 2);

                    document.getElementById('Coin000Id' + ElementIndex).value = 0;
                    document.getElementById('Coin001Id' + ElementIndex).value = 0;
                    document.getElementById('Coin002Id' + ElementIndex).value = 0;
                    document.getElementById('Coin005Id' + ElementIndex).value = 0;
                    document.getElementById('Coin010Id' + ElementIndex).value = 0;

                    document.getElementById('Paper020Id' + ElementIndex).value = 0;
                    document.getElementById('Paper050Id' + ElementIndex).value = 0;
                    document.getElementById('Paper100Id' + ElementIndex).value = 0;
                    document.getElementById('Paper200Id' + ElementIndex).value = 0;


                    RepoFdrGapUpdate(ElementIndex);
                    DateValueDefaultSet('DateId' + ElementIndex, 0);
                    DropDownListSet('FdrGapSensId' + ElementIndex, 'E');
                    DropDownListSet('FdrGapId' + ElementIndex, '00');
                    InputDefaultValueSet('SlipNumberId' + ElementIndex, '');
                }

                if (PatternForm == 'Threshold') {
                    var ElementIndex = '3';
                    document.getElementById('Coin000IdTh' + ElementIndex).value = itemData[i].Coin000IdTh;
                    document.getElementById('Coin001IdTh' + ElementIndex).value = itemData[i].Coin001IdTh;
                    document.getElementById('Coin002IdTh' + ElementIndex).value = itemData[i].Coin002IdTh;
                    document.getElementById('Coin005IdTh' + ElementIndex).value = itemData[i].Coin005IdTh;
                    document.getElementById('Coin010IdTh' + ElementIndex).value = itemData[i].Coin010IdTh;

                    document.getElementById('Paper020IdTh' + ElementIndex).value = itemData[i].Paper020IdTh;
                    document.getElementById('Paper050IdTh' + ElementIndex).value = itemData[i].Paper050IdTh;
                    document.getElementById('Paper100IdTh' + ElementIndex).value = itemData[i].Paper100IdTh;
                    document.getElementById('Paper200IdTh' + ElementIndex).value = itemData[i].Paper200IdTh;

                    document.getElementById('RepoFdrEditThresholdBtnId').setAttribute('onClick', 'RepoFdrEditThreshold(\'' + Id + '\')');
                }


                //document.getElementById('HomeUpdateEditModifySaveBtnId').setAttribute('onClick', 'HomeUpdateEditModifySave(\'' + Id + '\')');

            });
        }
    })
}

function RepoFdrEditDisplay() {
    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';

    var SiteId = '0';
    var LSId = GetElementValue('LSId');
    var FdrId = GetElementValue('FdrId');
    var Id = '0';

    RepoFdrEditGet(ActionBtnId, Icon, SiteId, LSId, FdrId, Id);
}

function RepoFdrEditGet(ActionBtnId, Icon, SiteId, LSId, FdrId, Id) {
    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var Pattern = 'RepoFdrEdit';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    HideReport(PatternTableReportId);
    HideReport('RepoFdrEditHistoryTableReportId');

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "initComplete": function (settings, json) {
            $('#' + ActionBtnId).find('span').attr('class', Icon);
            ShowReport(PatternTableReportId);
        },
        "ajax": {
            "url": "/Repo/RepoFdrEditGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                SiteId: SiteId,
                LSId: LSId,
                FdrId: FdrId,
                Id: Id
            }
        },
        "columns": [
            { "data": "DhmModification" },//0
            { "data": "DhmValue" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.LSName; } },//2
            { "mData": function vehicle(data, type, dataToSet) { return data.LSName + ' - ' + data.FdrNameShort; } },//3
            //{ "data": "FdrNameShort" },//3

            { "data": "FdrSum" },//4

            { "data": "Coin000Id" },//5
            { "data": "Coin001Id" },//6
            { "data": "Coin002Id" },//7
            { "data": "Coin005Id" },//8
            { "data": "Coin010Id" },//9
            { "data": "Paper020Id" },//10
            { "data": "Paper050Id" },//11
            { "data": "Paper100Id" },//12
            { "data": "Paper200Id" },//13

            { "data": "SensName" },//14
            { "data": "FdrGap" },//15
            { "data": "FdrGapName" },//16           
            { "data": "SlipNumber" },//17

            { "data": "RepoFdrId" },//18
            { "data": "RepoFdrId" },//19 
            { "data": "RepoFdrId" },//20
            { "data": "RepoFdrId" },//21
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left none", "targets": 2 },
            { "width": "3%", "className": "text-left", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "3%", "className": "text-right none", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },

            { "width": "3%", "className": "text-left none", "targets": 14 },
            { "width": "3%", "className": "text-right none", "targets": 15 },
            { "width": "3%", "className": "text-left none", "targets": 16 },
            { "width": "3%", "className": "text-left none", "targets": 17 },

            { "width": "3%", "className": "text-left none", "targets": 18 },
            { "width": "3%", "className": "text-center none", "targets": 19 },
            { "width": "3%", "className": "text-center none", "targets": 20 },
            { "width": "3%", "className": "text-center none", "targets": 21 },

            {
                "targets": 0, "render": function (data, type, row) {
                    var diffInSeconds = Math.abs(Date.now() - new Date(row['YearM'], row['MonthM'] - 1, row['DayM'], 0, 0, 0)) / 1000;
                    var days = Math.floor(diffInSeconds / 60 / 60 / 24);

                    if (days <= 7) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'green')
                    }
                    if (days > 7) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'red')
                    }
                }
            },

            //{ "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },  

            {
                "targets": 1, "render": function (data, type, row) {
                    var diffInSeconds = Math.abs(Date.now() - new Date(row['YearM'], row['MonthM'] - 1, row['DayM'], 0, 0, 0)) / 1000;
                    var days = Math.floor(diffInSeconds / 60 / 60 / 24);

                    if (days <= 7) {
                        return DataTableStatusGet(GetDateValueFromDataTableDate(data), 'green')
                    }
                    if (days > 7) {
                        return DataTableStatusGet(GetDateValueFromDataTableDate(data), 'red')
                    }
                }
            },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 15, "render": function (data, type, row) { return DataTableFormatIntGet(data); } },

            { "targets": 18, "render": function (data, type, row) { return DataTableGetContact(row, row['RepoFdrEditId']); } },
            { "targets": 19, "render": function (data, type, row) { return DataTableGetButton('RepoFdrEditHistorySearch', data, 'fas fa-history', '0048ff'); } },
            { "targets": 20, "render": function (data, type, row) { return DataTableGetButton('RepoFdrDelete', data, 'far fa-trash-alt', 'fe1200'); } },
            {
                "targets": 21,
                "render": function (data, type, row) {
                    var IdTmp = row['RepoFdrId'];

                    var PatternForm = '';
                    var OnClick = '';
                    var Icon = '';
                    var Label = '';
                    var Form = '';

                    var OnClick = '';
                    var Icon = '';
                    var Label = '';
                    var Form = '';

                    var PatternFix = 'RepoFdrEdit';

                    //PatternForm = 'Update';
                    //OnClick = RepoFdrEditFormOnClickGet(PatternForm, IdTmp);
                    //Icon = 'fas fa-edit';
                    //Label = 'Modifier le découpage';
                    //var FormElement1 = DataTableFormBtnGet(PatternFix, PatternForm, Label, OnClick, Icon);

                    PatternForm = 'Add';
                    OnClick = RepoFdrEditFormOnClickGet(PatternForm, IdTmp);
                    Icon = 'fas fa-plus-circle';
                    Label = 'Entrées-Sorties';
                    var FormElement2 = DataTableFormBtnGet(PatternFix, PatternForm, Label, OnClick, Icon);

                    //PatternForm = 'Threshold';
                    //OnClick = RepoFdrEditFormOnClickGet(PatternForm, IdTmp);
                    //Icon = 'fas fa-bell';
                    //Label = 'Paramétrer les seuils';
                    //var FormElement3 = DataTableFormBtnGet(PatternFix, PatternForm, Label, OnClick, Icon);

                    //return FormElement1 + FormElement2 + FormElement3;
                    return FormElement2;
                }
            },
        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Néant",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": false,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            Total0 = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(4).footer()).html(numShortFormat(Total0));

            Total1 = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(6).footer()).html(numShortFormat(Total1));

            Total2 = api.column(7).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(7).footer()).html(numShortFormat(Total2));

            Total3 = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(8).footer()).html(numShortFormat(Total3));

            Total4 = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(9).footer()).html(numShortFormat(Total4));

            Total5 = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(10).footer()).html(numShortFormat(Total5));

            Total6 = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(11).footer()).html(numShortFormat(Total6));

            Total7 = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(12).footer()).html(numShortFormat(Total7));

            Total8 = api.column(13).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            $(api.column(13).footer()).html(numShortFormat(Total8));
        }
    });
}

function RepoFdrEditFormOnClickGet(PatternForm, Id) {
    return 'RepoFdrEditFormLoad(\'' + PatternForm + '\',\'' + Id + '\')';
}



function RepoFdrEditModify(RepoFdrId) {

    var ActionBtnId = 'RepoFdrEditModifyBtnId';
    var Icon = 'far fa-save';

    var SiteId = GetElementValue('SiteId1');
    var LSId = GetElementValue('LSId1');
    var FdrId = GetElementValue('FdrId1');

    if (SiteId != '' &&
        LSId != '' &&
        FdrId != '') {

        var obj = {};
        obj.SiteId = SiteId;
        obj.LSId = LSId;
        obj.FdrId = FdrId;

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

        $.ajax({
            url: "/Repo/RepoFdrEditModify",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
            }
        });
    }
    else {
        DataTableMessageErroDisplay(RepoFdrId, 'badge badge-danger', 'Certains champs sont obligatoires');
    };
}

function RepoFdrEditUpdate(RepoFdrId, ElementIndex) {
    var ActionBtnId = 'RepoFdrEditUpdateBtnId';
    var Icon = 'far fa-save';



    var Coin000Id = parseInt(GetElementValue('Coin000Id' + ElementIndex), 0);
    var Coin001Id = parseInt(GetElementValue('Coin001Id' + ElementIndex), 0);
    var Coin002Id = parseInt(GetElementValue('Coin002Id' + ElementIndex), 0);
    var Coin005Id = parseInt(GetElementValue('Coin005Id' + ElementIndex), 0);
    var Coin010Id = parseInt(GetElementValue('Coin010Id' + ElementIndex), 0);

    var Paper020Id = parseInt(GetElementValue('Paper020Id' + ElementIndex), 0);
    var Paper050Id = parseInt(GetElementValue('Paper050Id' + ElementIndex), 0);
    var Paper100Id = parseInt(GetElementValue('Paper100Id' + ElementIndex), 0);
    var Paper200Id = parseInt(GetElementValue('Paper200Id' + ElementIndex), 0);

    var FdrGap = 0;
    var FdrGapId = '00';

    if (ElementIndex == '1') {//EditUpdate

    }
    if (ElementIndex == '2') {//EditAdd
        FdrGap = GetElementValue('FdrGap' + ElementIndex);
        FdrGapId = GetElementValue('FdrGapId' + ElementIndex);
    }

    var DateString = GetDateStringFromDatePicker('DateId' + ElementIndex);

    var FdrSumId = parseInt(GetElementValue('FdrSumId' + ElementIndex), 10);
    var FdrSumOldId = parseInt(GetElementValue('FdrSumOldId' + ElementIndex), 10);

    if (FdrSumOldId - FdrSumId == 0) {



        var obj = {};
        obj.RepoFdrId = RepoFdrId;
        obj.DateString = DateString;

        obj.Coin000Id = Coin000Id;
        obj.Coin001Id = Coin001Id;
        obj.Coin002Id = Coin002Id;
        obj.Coin005Id = Coin005Id;
        obj.Coin010Id = Coin010Id;

        obj.Paper020Id = Paper020Id;
        obj.Paper050Id = Paper050Id;
        obj.Paper100Id = Paper100Id;
        obj.Paper200Id = Paper200Id;

        obj.FdrGap = FdrGap;
        obj.FdrGapId = FdrGapId;

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('RepoFdrAddTableRportId')
        $.ajax({
            url: "/Repo/RepoFdrEditUpdate",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#' + ActionBtnId).find('span').attr('class', Icon);
            }
        });
    }
    else {
        alert('La nouvelle somme du fonds de roulement est différente de l\'anciènne!');
    }
}

function RepoFdrEditAdd(RepoFdrId, ElementIndex) {
    var ActionBtnId = 'RepoFdrEditAddParamActionBtnId1';
    var Icon = 'far fa-save';

    var DateString = GetDateStringFromDatePicker('DateId' + ElementIndex);

    var Coin000Id = parseInt(GetElementValue('Coin000Id' + ElementIndex), 0);
    var Coin001Id = parseInt(GetElementValue('Coin001Id' + ElementIndex), 0);
    var Coin002Id = parseInt(GetElementValue('Coin002Id' + ElementIndex), 0);
    var Coin005Id = parseInt(GetElementValue('Coin005Id' + ElementIndex), 0);
    var Coin010Id = parseInt(GetElementValue('Coin010Id' + ElementIndex), 0);

    var Paper020Id = parseInt(GetElementValue('Paper020Id' + ElementIndex), 0);
    var Paper050Id = parseInt(GetElementValue('Paper050Id' + ElementIndex), 0);
    var Paper100Id = parseInt(GetElementValue('Paper100Id' + ElementIndex), 0);
    var Paper200Id = parseInt(GetElementValue('Paper200Id' + ElementIndex), 0);

    var FdrGap = parseInt(GetElementValue('FdrGap' + ElementIndex), 0);
    var FdrGapSens = GetElementValue('FdrGapSensId' + ElementIndex);

    var FdrGapId = GetElementValue('FdrGapId' + ElementIndex);
    var SlipNumber = GetElementValue('SlipNumberId' + ElementIndex);

    if (FdrGap != 0) {

        var obj = {};
        obj.RepoFdrId = RepoFdrId;
        obj.DateString = DateString;

        obj.Coin000Id = Coin000Id;
        obj.Coin001Id = Coin001Id;
        obj.Coin002Id = Coin002Id;
        obj.Coin005Id = Coin005Id;
        obj.Coin010Id = Coin010Id;

        obj.Paper020Id = Paper020Id;
        obj.Paper050Id = Paper050Id;
        obj.Paper100Id = Paper100Id;
        obj.Paper200Id = Paper200Id;

        obj.FdrGap = FdrGap;
        obj.FdrGapSens = FdrGapSens;
        obj.FdrGapId = FdrGapId;
        obj.SlipNumber = SlipNumber;

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
        HideReport('RepoFdrAddTableRportId')



        $.ajax({
            url: "/Repo/RepoFdrEditAdd",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {

                $('#' + ActionBtnId).find('span').attr('class', Icon);
                $("#RepoFdrEditAddModalReportId").modal('toggle');
            }
        });
    }
    else {
        alert('Le montant est nul!');
    }
}

function RepoFdrEditThreshold(RepoFdrId) {

    var ActionBtnId = 'RepoFdrEditThresholdBtnId';

    var Coin000IdTh = GetElementValue('Coin000IdTh1');
    var Coin001IdTh = GetElementValue('Coin001IdTh1');
    var Coin002IdTh = GetElementValue('Coin002IdTh1');
    var Coin005IdTh = GetElementValue('Coin005IdTh1');
    var Coin010IdTh = GetElementValue('Coin010IdTh1');
    var Paper020IdTh = GetElementValue('Paper020IdTh1');
    var Paper050IdTh = GetElementValue('Paper050IdTh1');
    var Paper100IdTh = GetElementValue('Paper100IdTh1');
    var Paper200IdTh = GetElementValue('Paper200IdTh1');

    if (
        Coin000IdTh != '' &&
        Coin001IdTh != '' &&
        Coin002IdTh != '' &&
        Coin005IdTh != '' &&
        Coin010IdTh != '' &&

        Paper020IdTh != '' &&
        Paper050IdTh != '' &&
        Paper100IdTh != '' &&
        Paper200IdTh != '') {

        var obj = {};
        obj.RepoFdrId = RepoFdrId;

        obj.Coin000IdTh = Coin000IdTh;
        obj.Coin001IdTh = Coin001IdTh;
        obj.Coin002IdTh = Coin002IdTh;
        obj.Coin005IdTh = Coin005IdTh;
        obj.Coin010IdTh = Coin010IdTh;

        obj.Paper020IdTh = Paper020IdTh;
        obj.Paper050IdTh = Paper050IdTh;
        obj.Paper100IdTh = Paper100IdTh;
        obj.Paper200IdTh = Paper200IdTh;

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

        $.ajax({
            url: "/Repo/RepoFdrEditThreshold",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#' + ActionBtnId).find('span').attr('class', 'far fa-save');
            }
        });
    }
    else {
        DataTableMessageErroDisplay(RepoFdrId, 'badge badge-danger', 'Certains champs sont obligatoires');
    };
}

function RepoFdrEditHistoryGet(ActionBtnId, Icon, SiteId, LSId, FdrId, DateStringStart, DateStringEnd) {

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoFdrEditHistoryTableRportId');

    var Pattern = 'RepoFdrEditHistory';
    var PatternTableId = Pattern + 'TableId';
    var PatternReportId = Pattern + 'TableReportId';

    HideReport(PatternReportId);
    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            ShowReport(PatternReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/Repo/RepoFdrEditHistoryGet",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "LSId": LSId,
                "FdrId": FdrId,
                "DateStringStart": DateStringStart,
                "DateStringEnd": DateStringEnd
            }
        },
        "columns": [
            { "data": "DhmModification" },//0
            { "data": "DhmValue" },//1
            { "mData": function vehicle(data, type, dataToSet) { return data.LSName; } },//2
            { "data": "FdrNameShort" },//3

            { "data": "FdrSum" },//4

            { "data": "Coin000Id" },//5
            { "data": "Coin001Id" },//6
            { "data": "Coin002Id" },//7
            { "data": "Coin005Id" },//8
            { "data": "Coin010Id" },//9
            { "data": "Paper020Id" },//10
            { "data": "Paper050Id" },//11
            { "data": "Paper100Id" },//12
            { "data": "Paper200Id" },//13

            { "data": "SensName" },//14
            { "data": "FdrGap" },//15
            { "data": "FdrGapName" },//16
            { "data": "SlipNumber" },//17

            { "data": "RepoFdrEditId" },//18
            { "data": "RepoFdrEditId" },//19     
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-center none", "targets": 0 },
            { "width": "3%", "className": "text-center", "targets": 1 },
            { "width": "3%", "className": "text-left", "targets": 2 },
            { "width": "3%", "className": "text-center", "targets": 3 },

            { "width": "3%", "className": "text-right", "targets": 4 },

            { "width": "3%", "className": "text-right", "targets": 5 },
            { "width": "3%", "className": "text-right", "targets": 6 },
            { "width": "3%", "className": "text-right", "targets": 7 },
            { "width": "3%", "className": "text-right", "targets": 8 },
            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },

            { "width": "3%", "className": "text-left none", "targets": 14 },
            { "width": "3%", "className": "text-right none", "targets": 15 },
            { "width": "3%", "className": "text-left none", "targets": 16 },
            { "width": "3%", "className": "text-left none", "targets": 17 },

            { "width": "3%", "className": "text-left none", "targets": 18 },
            { "width": "3%", "className": "text-center none", "targets": 19 },

            {
                "targets": 0, "render": function (data, type, row) {
                    var diffInSeconds = Math.abs(Date.now() - new Date(row['YearM'], row['MonthM'] - 1, row['DayM'], 0, 0, 0)) / 1000;
                    var days = Math.floor(diffInSeconds / 60 / 60 / 24);

                    if (days <= 7) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'green')
                    }
                    if (days > 7) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'red')
                    }
                }
            },

            //{ "targets": 1, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },  

            {
                "targets": 1, "render": function (data, type, row) {
                    var diffInSeconds = Math.abs(Date.now() - new Date(row['YearM'], row['MonthM'] - 1, row['DayM'], 0, 0, 0)) / 1000;
                    var days = Math.floor(diffInSeconds / 60 / 60 / 24);

                    if (days <= 7) {
                        return DataTableStatusGet(GetDateValueFromDataTableDate(data), 'green')
                    }
                    if (days > 7) {
                        return DataTableStatusGet(GetDateValueFromDataTableDate(data), 'red')
                    }
                }
            },

            { "targets": 4, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 7, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 15, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 18, "render": function (data, type, row) { return DataTableGetContact(row, row['RepoFdrEditId']); } },
            { "targets": 19, "render": function (data, type, row) { return DataTableGetButton('RepoFdrEditDelete', row['RepoFdrEditId'], 'far fa-trash-alt', 'fe1200'); } },
        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Néant",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });
}

function RepoFdrEditHistoryDisplay() {
    var ActionBtnId = 'ParamActionBtnId';
    var Icon = 'fas fa-eye';

    var SiteId = GetElementValue('SiteId');
    var LSId = GetElementValue('LSId');
    var FdrId = GetElementValue('FdrId');

    var DateStringStart = GetDateStringFromDatePicker('DateStartId');
    var DateStringEnd = GetDateStringFromDatePicker('DateEndId');

    RepoFdrEditHistoryGet(ActionBtnId, Icon, SiteId, LSId, FdrId, DateStringStart, DateStringEnd);
}

function RepoFdrEditHistorySearch(RepoFdrId) {

    var ActionBtnId = new String('RepoFdrEditHistorySearchBtnId' + RepoFdrId);
    var Icon = 'fas fa-history';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var SiteId = new String(RepoFdrId).substr(0, 2);
    var LSId = new String(RepoFdrId).substr(2, 2);
    var FdrId = new String(RepoFdrId).substr(4, 2);

    var DateStringStart = '';
    var DateStringEnd = '';

    RepoFdrEditHistoryGet(ActionBtnId, Icon, SiteId, LSId, FdrId, DateStringStart, DateStringEnd);
}

function RepoFdrGapsFill(Pattern, Id) {
    $.get("/Repo/ParamRepoFdrGapsGet", function (data) {
        var elements = document.getElementsByClassName(Pattern + Id);

        for (var i = 0; i < elements.length; ++i) {
            var item = elements[i];
            var SelectedValue = item.options[item.selectedIndex].value;
            var RowId = item.options[item.selectedIndex].id;
            item.remove(item.selectedIndex);
            $.each(data, function (index, row) {
                var node = document.createElement("option");
                node.value = row.FdrGapId;
                var textnode = document.createTextNode(row.FdrGapId + " - " + row.FdrGapName);
                node.appendChild(textnode);
                item.appendChild(node);
            });

            for (var j = 0, len = item.options.length; j < len; j++) {
                var opt = item.options[j];
                if (opt.value == SelectedValue) {
                    item.options[j].selected = 'selected';
                    item.options[j].id = RowId;
                    break;
                }
            }
        }
    });
}

function RepoFdrUsedIdTargetFill(Pattern, Id) {
    $.get("/Repo/RepoFdrUsedIdTargetFill", function (data) {
        //var elements = document.getElementById(Pattern + Id);
        var elements = document.getElementsByClassName(Pattern + Id);
        for (var i = 0; i < elements.length; ++i) {
            var item = elements[i];
            var SelectedValue = item.options[item.selectedIndex].value;
            var RowId = item.options[item.selectedIndex].id;
            item.remove(item.selectedIndex);
            $.each(data, function (index, row) {
                var node = document.createElement("option");
                node.value = row.UserId;
                var textnode = document.createTextNode(row.LastName + " " + row.FirstName);
                node.appendChild(textnode);
                item.appendChild(node);
            });

            for (var j = 0, len = item.options.length; j < len; j++) {
                var opt = item.options[j];
                if (opt.value == SelectedValue) {
                    item.options[j].selected = 'selected';
                    item.options[j].id = RowId;
                    break;
                }
            }
        }
    });
}

function RepoFdrThSave(RepoFdrId) {
    var ActionBtnId = new String('RepoFdrThSaveBtnId' + RepoFdrId);
    var Coin000IdTh = GetElementValue('Coin000IdTh' + RepoFdrId);
    var Coin001IdTh = GetElementValue('Coin001IdTh' + RepoFdrId);
    var Coin002IdTh = GetElementValue('Coin002IdTh' + RepoFdrId);
    var Coin005IdTh = GetElementValue('Coin005IdTh' + RepoFdrId);
    var Coin010IdTh = GetElementValue('Coin010IdTh' + RepoFdrId);
    var Paper020IdTh = GetElementValue('Paper020IdTh' + RepoFdrId);
    var Paper050IdTh = GetElementValue('Paper050IdTh' + RepoFdrId);
    var Paper100IdTh = GetElementValue('Paper100IdTh' + RepoFdrId);
    var Paper200IdTh = GetElementValue('Paper200IdTh' + RepoFdrId);

    if (
        Coin000IdTh != '' &&
        Coin001IdTh != '' &&
        Coin002IdTh != '' &&
        Coin005IdTh != '' &&
        Coin010IdTh != '' &&

        Paper020IdTh != '' &&
        Paper050IdTh != '' &&
        Paper100IdTh != '' &&
        Paper200IdTh != '') {

        var obj = {};
        obj.RepoFdrId = RepoFdrId;
        obj.Coin000IdTh = Coin000IdTh;
        obj.Coin001IdTh = Coin001IdTh;
        obj.Coin002IdTh = Coin002IdTh;
        obj.Coin005IdTh = Coin005IdTh;
        obj.Coin010IdTh = Coin010IdTh;

        obj.Paper020IdTh = Paper020IdTh;
        obj.Paper050IdTh = Paper050IdTh;
        obj.Paper100IdTh = Paper100IdTh;
        obj.Paper200IdTh = Paper200IdTh;

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
        $.ajax({
            url: "/Repo/RepoFdrThSave",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#' + ActionBtnId).find('span').attr('class', 'far fa-save');
                DataTableMessageErroDisplay(RepoFdrId, 'badge badge-success', 'Paramètrage mis à jour avec succès!');
            }
        });
    }
    else {
        DataTableMessageErroDisplay(RepoFdrId, 'badge badge-danger', 'Certains champs sont obligatoires');
    };
}

function RepoFdrOrder(RepoFdrId) {

    var ActionBtnId = new String('RepoFdrOrderBtnId' + RepoFdrId);
    var Coin000IdCo = GetElementValue('Coin000IdCo' + RepoFdrId);
    var Coin001IdCo = GetElementValue('Coin001IdCo' + RepoFdrId);
    var Coin002IdCo = GetElementValue('Coin002IdCo' + RepoFdrId);
    var Coin005IdCo = GetElementValue('Coin005IdCo' + RepoFdrId);
    var Coin010IdCo = GetElementValue('Coin010IdCo' + RepoFdrId);
    var Paper020IdCo = GetElementValue('Paper020IdCo' + RepoFdrId);
    var Paper050IdCo = GetElementValue('Paper050IdCo' + RepoFdrId);
    var Paper100IdCo = GetElementValue('Paper100IdCo' + RepoFdrId);
    var Paper200IdCo = GetElementValue('Paper200IdCo' + RepoFdrId);

    var UserIdTarget = GetElementValue('UserIdTarget' + RepoFdrId);

    var DateString = GetDateStringFromDatePicker('DhmValueId' + RepoFdrId);
    var DatePlannedString = GetDateStringFromDatePicker('DhmPlannedId' + RepoFdrId);

    var Message = GetElementValue('MessageId' + RepoFdrId);

    if (
        Coin000IdCo != '' &&
        Coin001IdCo != '' &&
        Coin002IdCo != '' &&
        Coin005IdCo != '' &&
        Coin010IdCo != '' &&

        Paper020IdCo != '' &&
        Paper050IdCo != '' &&
        Paper100IdCo != '' &&
        Paper200IdCo != '' &&

        UserIdTarget != '' &&

        DateString != '' &&
        DatePlannedString != '') {

        var obj = {};
        obj.RepoFdrId = RepoFdrId;

        obj.Coin000IdCo = Coin000IdCo;
        obj.Coin001IdCo = Coin001IdCo;
        obj.Coin002IdCo = Coin002IdCo;
        obj.Coin005IdCo = Coin005IdCo;
        obj.Coin010IdCo = Coin010IdCo;
        obj.Paper020IdCo = Paper020IdCo;
        obj.Paper050IdCo = Paper050IdCo;
        obj.Paper100IdCo = Paper100IdCo;
        obj.Paper200IdCo = Paper200IdCo;

        obj.UserIdTarget = UserIdTarget;
        obj.DateString = DateString;
        obj.DatePlannedString = DatePlannedString;

        obj.Message = Message;

        $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
        //HideReport('RepoFdrAddTableRportId')
        $.ajax({
            url: "/Repo/RepoFdrOrder",
            method: "POST",
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                $('#' + ActionBtnId).find('span').attr('class', 'fas fa-shopping-cart');
                //RepoFdrEditSearch(RepoFdrId);
                DataTableMessageErroDisplay(RepoFdrId, 'badge badge-success', 'Commande envoyée avec succès!');
            }
        });
    }
    else {
        DataTableMessageErroDisplay(RepoFdrId, 'badge badge-danger', 'Certains champs sont obligatoires');
    };
}

function RepoFdrEditDelete(RepoFdrEditId) {
    $('#RepoFdrEditDeleteBtnId' + RepoFdrEditId).find('span').attr('class', 'fa fa-spinner fa-spin');

    var obj = {};
    obj.RepoFdrEditId = RepoFdrEditId;

    $.ajax({
        url: "/Cert/RepoFdrEditDelete",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#RepoFdrEditDeleteBtnId' + RepoFdrEditId).find('span').attr('class', 'fa fa-spinner fa-spin');
            $('#RepoFdrEditDeleteBtnId' + RepoFdrEditId).find('span').attr('class', 'fas fa-minus-circle');
            $('#RepoFdrEditDeleteBtnId' + RepoFdrEditId).find('span').attr('style', 'color:#ff0000');
            $('#RepoFdrEditDeleteBtnId' + RepoFdrEditId).attr('onclick', '');
        },
        error: function (request, status, error) {
            alert('Vous ne disposez pas des autorisations nécessaires pour effectuer cette action');
            $('#RepoFdrEditDeleteBtnId' + RepoFdrEditId).find('span').attr('class', 'far fa-trash-alt');
        }
    });

}


function RepoFdrDelete(RepoFdrId) {

    var ActionBtnId = 'RepoFdrDeleteBtnId' + RepoFdrId;
    var Icon = 'far fa-trash-alt';

    if (RepoFdrId == '') {
        var SiteId = GetElementValue('SiteId');
        var LSId = GetElementValue('LSId');
        var FdrId = GetElementValue('FdrId');

        if (SiteId != '0' &&
            LSId != '0' &&
            FdrId != '0') {

            var RepoFdrIdTmp = SiteId + LSId + FdrId;

            RepoFdrDeleteLaunch(ActionBtnId, Icon, RepoFdrIdTmp);
        }
        else {
            alert('Certains champs sont obligatoires')
        }
    }
    else {
        RepoFdrDeleteLaunch(ActionBtnId, Icon, RepoFdrId);
    }

}


function RepoFdrDeleteLaunch(ActionBtnId, Icon, RepoFdrId) {


    var obj = {};
    obj.RepoFdrId = RepoFdrId;

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');

    $.ajax({
        url: "/Cert/RepoFdrDelete",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
            $('#' + ActionBtnId).find('span').attr('class', 'fas fa-minus-circle');
            $('#' + ActionBtnId).find('span').attr('style', 'color:#ff0000');
            $('#' + ActionBtnId).attr('onclick', '');
        },
        error: function (request, status, error) {
            alert('Vous ne disposez pas des autorisations nécessaires pour effectuer cette action');
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        }
    });
}

function RepoFdrDshDisplay() {
    var ActionBtnId = 'ParamActionBtnId';
    var SiteId = GetElementValue('SiteId0');
    var LSId = GetElementValue('LSId0');
    var FdrId = GetElementValue('FdrId0');
    var Icon = 'fas fa-eye';

    var Pattern = 'RepoFdrDsh';
    var PatternTableId = Pattern + 'TableId';
    var PatternTableReportId = Pattern + 'TableReportId';

    $('#' + ActionBtnId).find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport(PatternTableReportId);

    $('#' + PatternTableId).DataTable().destroy();;
    $('#' + PatternTableId).DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            ShowReport(PatternTableReportId);
            $('#' + ActionBtnId).find('span').attr('class', Icon);
        },
        "ajax": {
            "url": "/Repo/RepoFdrDshDisplay",
            "type": "GET",
            "datatype": "json",
            "data": {
                "SiteId": SiteId,
                "LSId": LSId,
                "FdrId": FdrId
            }
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "LSName" },//1
            { "data": "FdrNameShort" },//2
            { "data": "FdrName" },//3

            { "data": "DhmModification" },//4

            { "data": "FdrSum" },//5
            { "data": "FdrGap" },//6
            { "data": "FdrGapName" },//7
            { "data": "FdrSumOld" },//8

            { "data": "Coin000Id" },//9
            { "data": "Coin001Id" },//10
            { "data": "Coin002Id" },//11
            { "data": "Coin005Id" },//12
            { "data": "Coin010Id" },//13
            { "data": "Paper020Id" },//14
            { "data": "Paper050Id" },//15
            { "data": "Paper100Id" },//16
            { "data": "Paper200Id" },//17

            { "data": "RepoFdrEditId" },//18
            { "data": "RepoFdrEditId" },//19                      
        ],
        "columnDefs": [
            { "width": "3%", "className": "text-left", "targets": 0 },
            { "width": "3%", "className": "text-left", "targets": 1 },
            { "width": "3%", "className": "text-center", "targets": 2 },
            { "width": "3%", "className": "text-left none", "targets": 3 },

            { "width": "3%", "className": "text-left none", "targets": 4 },

            { "width": "3%", "className": "text-right none", "targets": 5 },
            { "width": "3%", "className": "text-right none", "targets": 6 },
            { "width": "3%", "className": "text-right none", "targets": 7 },
            { "width": "3%", "className": "text-right none", "targets": 8 },

            { "width": "3%", "className": "text-right", "targets": 9 },
            { "width": "3%", "className": "text-right", "targets": 10 },
            { "width": "3%", "className": "text-right", "targets": 11 },
            { "width": "3%", "className": "text-right", "targets": 12 },
            { "width": "3%", "className": "text-right", "targets": 13 },
            { "width": "3%", "className": "text-right", "targets": 14 },
            { "width": "3%", "className": "text-right", "targets": 15 },
            { "width": "3%", "className": "text-right", "targets": 16 },
            { "width": "3%", "className": "text-right", "targets": 17 },

            { "width": "3%", "className": "text-left none", "targets": 18 },
            { "width": "3%", "className": "text-right none", "targets": 19 },

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            {
                "targets": 4, "render": function (data, type, row) {
                    var diffInSeconds = Math.abs(Date.now() - new Date(row['YearM'], row['MonthM'] - 1, row['DayM'], 0, 0, 0)) / 1000;
                    var days = Math.floor(diffInSeconds / 60 / 60 / 24);

                    if (days == 0) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'green')
                    }
                    if (days > 0 && days <= 1) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'yellow')
                    }
                    if (days > 1 && days <= 2) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'orange')
                    }
                    if (days > 2) {
                        return DataTableStatusGet(GetDhmValueFromDataTableDate(data), 'red')
                    }
                }
            },

            { "targets": 5, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },
            { "targets": 6, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 8, "render": function (data, type, row) { return DataTableFormatDoubleNullAlertGet(data); } },

            { "targets": 9, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 10, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 11, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 12, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 13, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 14, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 15, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 16, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },
            { "targets": 17, "render": function (data, type, row) { return DataTableFormatDoubleGet(data); } },

            { "targets": 18, "render": function (data, type, row) { return DataTableButtonGet('DataTableRowDelete', row['RepoFdrEditId'], '\'dt_RepoFdrEdit' + '\', \'' + row['RepoFdrEditId'] + '\'', 'far fa-trash-alt', 'fe1200'); } },
            { "targets": 19, "render": function (data, type, row) { return DataTableGetContact(row, row['RepoFdrEditId']); } },

        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Néant",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        //"processing": false,
        //"responsive": true,
        //"bFilter": false,
        //"autoWidth": true,
        //"searching": false,
        //"lengthChange": true,
        //"showNEntries": true,
        //"bInfo": true,
        //"bPaginate": true,
        //"ordering": true,

        "iDisplayLength": 100,
        "processing": false,
        "responsive": true,
        "bFilter": true,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true,
        "footerCallback": function (row, data, start, end, display) {
            var api = this.api(), data;
            var intVal = function (i) {
                return typeof i === 'string' ?
                    i.replace(/[\$,]/g, '') * 1 :
                    typeof i === 'number' ?
                        i : 0;
            };

            //Total0 = api.column(3).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(3).footer()).html(numFormat(Total0) + 'DH');

            //Total1 = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
            //$(api.column(5).footer()).html(numFormat(Total1) + 'DH');
        }

    });
}

function RepoFdrOrderDisplay() {
    $('#ParamActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoFdrEditHistoryTableRportId');
    $('#RepoFdrOrderTableId').DataTable().destroy();;
    $('#RepoFdrOrderTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            ShowReport('RepoFdrOrderTableReportId');
            $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
        },
        "ajax": {
            "url": "/Repo/RepoFdrOrderDisplay",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "SourceName" },//1
            { "data": "TargetName" },//2
            { "data": "FdrOrderSum", "render": $.fn.dataTable.render.number(' ', ',', 2) },//3
            { "data": "DhmPlanned" },//4

            { "data": "Coin000IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
            { "data": "Coin001IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//6
            { "data": "Coin002IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//7
            { "data": "Coin005IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//8
            { "data": "Coin010IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//9
            { "data": "Paper020IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//10
            { "data": "Paper050IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//11
            { "data": "Paper100IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//12
            { "data": "Paper200IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//13

            { "data": "RepoFdrOrderId" },//14 Save
            { "data": "Comment" },//15
            { "data": "RepoFdrOrderId" },//16 Status

        ],
        "columnDefs": [
            { "width": "10%", "className": "text-left none", "targets": 0 },//DhmValue            
            { "width": "20%", "className": "text-left none", "targets": 1 },//SourceName
            { "width": "20%", "className": "text-left", "targets": 2 },//TargetName

            { "width": "30%", "className": "text-right none", "targets": 3 },//OrderSum
            { "width": "5%", "className": "text-center", "targets": 4 },//DhmPlanned

            { "width": "0%", "className": "text-right", "targets": 5 },//Coin000Id  
            { "width": "0%", "className": "text-right", "targets": 6 },//Coin001Id  
            { "width": "0%", "className": "text-right", "targets": 7 },//Coin002Id  
            { "width": "0%", "className": "text-right", "targets": 8 },//Coin005Id   
            { "width": "0%", "className": "text-right", "targets": 9 },//Coin010Id 
            { "width": "0%", "className": "text-right", "targets": 10 },//Paper020Id  
            { "width": "0%", "className": "text-right", "targets": 11 },//Paper050Id  
            { "width": "0%", "className": "text-right", "targets": 12 },//Paper100Id  
            { "width": "0%", "className": "text-right", "targets": 13 },//Paper200Id   

            { "width": "5%", "className": "text-center", "targets": 14 },//Save 
            { "width": "0%", "className": "text-right none", "targets": 15 },//Comment 
            { "width": "0%", "className": "text-right none", "targets": 16 },//Status

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 14, "render": function (data, type, row) { return DataTableButtonGet('DataTableRowDelete', row['RepoFdrEditId'], '\'dt_RepoFdrEdit' + '\', \'' + row['RepoFdrEditId'] + '\'', 'far fa-trash-alt', 'fe1200'); } },
            //{ "targets": 17, "render": function (data, type, row) { return DataTableGetContact(row, row['RepoFdrEditId']); } },

        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Néant",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true
    });
}

function RepoFdrDeliveryDisplay() {
    $('#ParamActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoFdrDeliveryTableRportId');
    $('#RepoFdrDeliveryTableId').DataTable().destroy();;
    $('#RepoFdrDeliveryTableId').DataTable({
        "dom": 'Bfrtip',
        "buttons": [
            'copy', 'csv', 'excel', 'pdf', 'print'
        ],
        "initComplete": function (settings, json) {
            ShowReport('RepoFdrDeliveryTableReportId');
            $('#ParamActionBtnId').find('span').attr('class', 'fas fa-eye');
        },
        "ajax": {
            "url": "/Repo/RepoFdrDeliveryDisplay",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            { "data": "DhmValue" },//0
            { "data": "SourceName" },//1
            { "data": "TargetName" },//2
            { "data": "FdrOrderSum", "render": $.fn.dataTable.render.number(' ', ',', 2) },//3
            { "data": "DhmPlanned" },//4

            { "data": "Coin000IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//5
            { "data": "Coin001IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//6
            { "data": "Coin002IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//7
            { "data": "Coin005IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//8
            { "data": "Coin010IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//9
            { "data": "Paper020IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//10
            { "data": "Paper050IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//11
            { "data": "Paper100IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//12
            { "data": "Paper200IdCo", "render": $.fn.dataTable.render.number(' ', ',', 2) },//13

            { "data": "RepoFdrOrderId" },//14 Save
            { "data": "Comment" },//15
            { "data": "RepoFdrOrderId" },//16 Status

        ],
        "columnDefs": [
            { "width": "10%", "className": "text-left none", "targets": 0 },//DhmValue            
            { "width": "20%", "className": "text-left none", "targets": 1 },//SourceName
            { "width": "20%", "className": "text-left", "targets": 2 },//TargetName

            { "width": "30%", "className": "text-right none", "targets": 3 },//OrderSum
            { "width": "5%", "className": "text-center", "targets": 4 },//DhmPlanned

            { "width": "0%", "className": "text-right", "targets": 5 },//Coin000Id  
            { "width": "0%", "className": "text-right", "targets": 6 },//Coin001Id  
            { "width": "0%", "className": "text-right", "targets": 7 },//Coin002Id  
            { "width": "0%", "className": "text-right", "targets": 8 },//Coin005Id   
            { "width": "0%", "className": "text-right", "targets": 9 },//Coin010Id 
            { "width": "0%", "className": "text-right", "targets": 10 },//Paper020Id  
            { "width": "0%", "className": "text-right", "targets": 11 },//Paper050Id  
            { "width": "0%", "className": "text-right", "targets": 12 },//Paper100Id  
            { "width": "0%", "className": "text-right", "targets": 13 },//Paper200Id   

            { "width": "5%", "className": "text-center", "targets": 14 },//Save 
            { "width": "0%", "className": "text-right none", "targets": 15 },//Comment 
            { "width": "0%", "className": "text-right none", "targets": 16 },//Status

            { "targets": 0, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },
            { "targets": 4, "render": function (data, type, row) { return GetDateValueFromDataTableDate(data); } },

            { "targets": 14, "render": function (data, type, row) { return DataTableButtonGet('DataTableRowDelete', row['RepoFdrEditId'], '\'dt_RepoFdrEdit' + '\', \'' + row['RepoFdrEditId'] + '\'', 'far fa-trash-alt', 'fe1200'); } },
            //{ "targets": 17, "render": function (data, type, row) { return DataTableGetContact(row, row['RepoFdrEditId']); } },

        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Néant",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": true
    });
}

function RepoSaleGetRegions() {
    $.get("/Repo/RepoSaleGetRegions", function (data) {
        $('#RegionId').empty();
        $('#RegionId').append("<option value='0'>" + "--" + "</option>");
        $.each(data, function (index, row) {
            $('#RegionId').append("<option value='" + row.RegionId + "'>" + row.RegionName + "</option>")
        });
    });
}

function RepoSaleGetPointTypes() {
    var item = document.getElementById('PointTypeId');
    item.options.length = 0;
    var node = document.createElement("option");
    node.value = 0;
    var textnode = document.createTextNode("--");
    node.appendChild(textnode);
    item.appendChild(node);
    $.get("/Repo/RepoSaleGetPointTypes", function (data) {
        $.each(data, function (index, row) {
            var node = document.createElement("option");
            node.value = row.PointTypeId;
            var textnode = document.createTextNode(row.PointTypeName);
            node.appendChild(textnode);
            item.appendChild(node);
        });
    });
}

function RepoSaleGetPoints() {
    var RegionId = new String($("#RegionId").val());
    var PointTypeId = new String($("#PointTypeId").val());
    var item = document.getElementById('PointId');
    item.options.length = 0;
    var node = document.createElement("option");
    node.value = 0;
    var textnode = document.createTextNode("--");
    node.appendChild(textnode);
    item.appendChild(node);
    $.get("/Repo/RepoSaleGetPoints", { RegionId: RegionId, PointTypeId: PointTypeId }, function (data) {
        $.each(data, function (index, row) {
            var node = document.createElement("option");
            node.value = row.PointId;
            var textnode = document.createTextNode(row.PointName);
            node.appendChild(textnode);
            item.appendChild(node);
        });
    });
}

function RepoSaleAdd() {
    var ClientPhone = new String($('#ClientPhoneId').val());
    var obj = {};
    obj.ClientPhone = ClientPhone;

    $('#ActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');

    $.ajax({
        url: "/Repo/RepoSaleAdd",
        method: "POST",
        data: JSON.stringify(obj),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $('#ActionBtnId').find('span').attr('class', 'fas fa-plus-circle');
            RepoSaleAddDisplay();
        }
    });
}

function RepoSaleAddDisplay() {
    $('#ActionBtnId').find('span').attr('class', 'fa fa-spinner fa-spin');
    HideReport('RepoSaleAddTableReportId');
    $('#RepoSaleAddTableId').DataTable().destroy();;
    $('#RepoSaleAddTableId').DataTable({
        "initComplete": function (settings, json) {
            ShowReport('RepoSaleAddTableReportId');
            $('#ActionBtnId').find('span').attr('class', 'fas fa-plus-circle');
        },
        "ajax": {
            "url": "/Repo/RepoSaleAddDisplay",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            { "data": "ClientPhone" },//0
            { "data": "RepoSaleId" },//1
            { "data": "DhmModification" },//2
            { "data": "RepoSaleId" }//3

        ],
        "columnDefs": [
            { "width": "25%", "className": "text-left", "targets": 0 }, //ClientPhone
            { "width": "45%", "className": "text-left", "targets": 1 }, //ImageUpload 
            { "width": "25%", "className": "text-left", "targets": 2 }, //DhmValue                   
            { "width": "5%", "className": "text-left", "targets": 3 }, //Save 
            {
                "targets": 2,
                "render": function (data, type, row) {
                    if (data === null) return "";
                    var pattern = /Date\(([^)]+)\)/;
                    var results = pattern.exec(data);
                    var dt = new Date(parseFloat(results[1]));

                    return dt.toLocaleDateString() + " " + dt.toLocaleTimeString();
                }
            },
            {
                "targets": 1,
                "render": function (data, type, row) {
                    return '<div>' +
                        '<input type="file" id="TagImag' + $('<div/>').text(row['RepoSaleId']).html() + '" class="form-control">'
                    '</div>'
                }
            },
            {
                "targets": 3, "searchable": false, "orderable": false,
                "render": function (data, type, full, meta) {
                    return '<button id="RepoSaleAddSaveBtnId' + data + '" type="button"' +
                        'onclick="RepoSaleAddSave(\'' + data + '\')" >' +
                        '<span class="far fa-save" ></span></button>'
                }
            }
        ],
        "iDisplayLength": 50,
        "language": {
            "lengthMenu": "Afficher _MENU_ lignes par page",
            "zeroRecords": "Aucun résultat",
            "info": "Page _PAGE_ / _PAGES_ &nbsp;<i>(Nombre de lignes : _TOTAL_)</i>",
            "infoEmpty": "---",
            "infoFiltered": "(Nombre de lignes filtrées : _MAX_ total)",
            "search": "Filtrer ",
            "oPaginate": {
                "sNext": "Suivant",
                "sPrevious": "Précédent"
            }
        },
        "processing": false,
        "responsive": true,
        "bFilter": false,
        "autoWidth": true,
        "searching": false,
        "lengthChange": true,
        "showNEntries": true,
        "bInfo": true,
        "bPaginate": true,
        "ordering": false
    });
}




















